
2022-10-14-ex2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a38  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004bc0  08004bc0  00014bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bf8  08004bf8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004bf8  08004bf8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bf8  08004bf8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf8  08004bf8  00014bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bfc  08004bfc  00014bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000154  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000160  20000160  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001097b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dfa  00000000  00000000  000309b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e78  00000000  00000000  000327b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc0  00000000  00000000  00033630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002052b  00000000  00000000  000343f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121fc  00000000  00000000  0005491b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7f55  00000000  00000000  00066b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ea6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003da4  00000000  00000000  0012eabc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ba8 	.word	0x08004ba8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004ba8 	.word	0x08004ba8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fbad 	bl	800092c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f839 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f9b9 	bl	800054c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f987 	bl	80004ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001de:	f000 f875 	bl	80002cc <MX_ADC1_Init>
  MX_TIM2_Init();
 80001e2:	f000 f90d 	bl	8000400 <MX_TIM2_Init>
  MX_DAC1_Init();
 80001e6:	f000 f8e1 	bl	80003ac <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t AD_RES = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	80fb      	strh	r3, [r7, #6]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001ee:	2100      	movs	r1, #0
 80001f0:	4811      	ldr	r0, [pc, #68]	; (8000238 <main+0x70>)
 80001f2:	f003 fa63 	bl	80036bc <HAL_TIM_PWM_Start>
  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CHANNEL_1);
 80001f6:	2101      	movs	r1, #1
 80001f8:	4810      	ldr	r0, [pc, #64]	; (800023c <main+0x74>)
 80001fa:	f000 ff44 	bl	8001086 <HAL_ADCEx_Calibration_Start>
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 80001fe:	2100      	movs	r1, #0
 8000200:	480f      	ldr	r0, [pc, #60]	; (8000240 <main+0x78>)
 8000202:	f001 fd0a 	bl	8001c1a <HAL_DAC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Start ADC Conversion
	  HAL_ADC_Start(&hadc1);
 8000206:	480d      	ldr	r0, [pc, #52]	; (800023c <main+0x74>)
 8000208:	f000 fdac 	bl	8000d64 <HAL_ADC_Start>
	  // Poll ADC1 Perihperal & TimeOut = 1mSec
	  HAL_ADC_PollForConversion(&hadc1, 1);
 800020c:	2101      	movs	r1, #1
 800020e:	480b      	ldr	r0, [pc, #44]	; (800023c <main+0x74>)
 8000210:	f000 fe5e 	bl	8000ed0 <HAL_ADC_PollForConversion>
	  // Read The ADC Conversion Result & Map It To PWM DutyCycle
	  AD_RES = HAL_ADC_GetValue(&hadc1);
 8000214:	4809      	ldr	r0, [pc, #36]	; (800023c <main+0x74>)
 8000216:	f000 ff29 	bl	800106c <HAL_ADC_GetValue>
 800021a:	4603      	mov	r3, r0
 800021c:	80fb      	strh	r3, [r7, #6]
	  TIM2->CCR1 = (AD_RES<<4);
 800021e:	88fb      	ldrh	r3, [r7, #6]
 8000220:	011a      	lsls	r2, r3, #4
 8000222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000226:	635a      	str	r2, [r3, #52]	; 0x34
	  DAC1->DHR12R1 = AD_RES;
 8000228:	4a06      	ldr	r2, [pc, #24]	; (8000244 <main+0x7c>)
 800022a:	88fb      	ldrh	r3, [r7, #6]
 800022c:	6093      	str	r3, [r2, #8]
	  HAL_Delay(50);
 800022e:	2032      	movs	r0, #50	; 0x32
 8000230:	f000 fbe2 	bl	80009f8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000234:	e7e7      	b.n	8000206 <main+0x3e>
 8000236:	bf00      	nop
 8000238:	2000008c 	.word	0x2000008c
 800023c:	20000028 	.word	0x20000028
 8000240:	20000078 	.word	0x20000078
 8000244:	40007400 	.word	0x40007400

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b090      	sub	sp, #64	; 0x40
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2228      	movs	r2, #40	; 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f004 fc9e 	bl	8004b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026a:	2302      	movs	r3, #2
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	2310      	movs	r3, #16
 8000274:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	2302      	movs	r3, #2
 8000278:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800027a:	2300      	movs	r3, #0
 800027c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800027e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000282:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	4618      	mov	r0, r3
 800028a:	f001 feeb 	bl	8002064 <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000294:	f000 f9ac 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029c:	2302      	movs	r3, #2
 800029e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 ff14 	bl	80030e0 <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002be:	f000 f997 	bl	80005f0 <Error_Handler>
  }
}
 80002c2:	bf00      	nop
 80002c4:	3740      	adds	r7, #64	; 0x40
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b08a      	sub	sp, #40	; 0x28
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002d2:	f107 031c 	add.w	r3, r7, #28
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
 80002ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ee:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <MX_ADC1_Init+0xdc>)
 80002f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002f6:	4b2c      	ldr	r3, [pc, #176]	; (80003a8 <MX_ADC1_Init+0xdc>)
 80002f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80002fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002fe:	4b2a      	ldr	r3, [pc, #168]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000304:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800030a:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800030c:	2200      	movs	r2, #0
 800030e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000310:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000312:	2200      	movs	r2, #0
 8000314:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000318:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800031a:	2200      	movs	r2, #0
 800031c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800031e:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000320:	2201      	movs	r2, #1
 8000322:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800032c:	2201      	movs	r2, #1
 800032e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000332:	2200      	movs	r2, #0
 8000334:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800033a:	2204      	movs	r2, #4
 800033c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000340:	2200      	movs	r2, #0
 8000342:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000346:	2200      	movs	r2, #0
 8000348:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800034a:	4817      	ldr	r0, [pc, #92]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800034c:	f000 fb78 	bl	8000a40 <HAL_ADC_Init>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000356:	f000 f94b 	bl	80005f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800035a:	2300      	movs	r3, #0
 800035c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800035e:	f107 031c 	add.w	r3, r7, #28
 8000362:	4619      	mov	r1, r3
 8000364:	4810      	ldr	r0, [pc, #64]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000366:	f001 f9c1 	bl	80016ec <HAL_ADCEx_MultiModeConfigChannel>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000370:	f000 f93e 	bl	80005f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000374:	2301      	movs	r3, #1
 8000376:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000378:	2301      	movs	r3, #1
 800037a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800037c:	2300      	movs	r3, #0
 800037e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	4619      	mov	r1, r3
 8000390:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000392:	f000 feeb 	bl	800116c <HAL_ADC_ConfigChannel>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800039c:	f000 f928 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003a0:	bf00      	nop
 80003a2:	3728      	adds	r7, #40	; 0x28
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000028 	.word	0x20000028

080003ac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003bc:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_DAC1_Init+0x4c>)
 80003be:	4a0f      	ldr	r2, [pc, #60]	; (80003fc <MX_DAC1_Init+0x50>)
 80003c0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003c2:	480d      	ldr	r0, [pc, #52]	; (80003f8 <MX_DAC1_Init+0x4c>)
 80003c4:	f001 fc07 	bl	8001bd6 <HAL_DAC_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80003ce:	f000 f90f 	bl	80005f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80003d2:	2300      	movs	r3, #0
 80003d4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2200      	movs	r2, #0
 80003de:	4619      	mov	r1, r3
 80003e0:	4805      	ldr	r0, [pc, #20]	; (80003f8 <MX_DAC1_Init+0x4c>)
 80003e2:	f001 fc65 	bl	8001cb0 <HAL_DAC_ConfigChannel>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 80003ec:	f000 f900 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80003f0:	bf00      	nop
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000078 	.word	0x20000078
 80003fc:	40007400 	.word	0x40007400

08000400 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08e      	sub	sp, #56	; 0x38
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000414:	f107 031c 	add.w	r3, r7, #28
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000420:	463b      	mov	r3, r7
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]
 800042e:	615a      	str	r2, [r3, #20]
 8000430:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000432:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <MX_TIM2_Init+0xe8>)
 8000434:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000438:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800043a:	4b2b      	ldr	r3, [pc, #172]	; (80004e8 <MX_TIM2_Init+0xe8>)
 800043c:	223f      	movs	r2, #63	; 0x3f
 800043e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000440:	4b29      	ldr	r3, [pc, #164]	; (80004e8 <MX_TIM2_Init+0xe8>)
 8000442:	2200      	movs	r2, #0
 8000444:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000446:	4b28      	ldr	r3, [pc, #160]	; (80004e8 <MX_TIM2_Init+0xe8>)
 8000448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800044c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800044e:	4b26      	ldr	r3, [pc, #152]	; (80004e8 <MX_TIM2_Init+0xe8>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000454:	4b24      	ldr	r3, [pc, #144]	; (80004e8 <MX_TIM2_Init+0xe8>)
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800045a:	4823      	ldr	r0, [pc, #140]	; (80004e8 <MX_TIM2_Init+0xe8>)
 800045c:	f003 f876 	bl	800354c <HAL_TIM_Base_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000466:	f000 f8c3 	bl	80005f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800046a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800046e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000470:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000474:	4619      	mov	r1, r3
 8000476:	481c      	ldr	r0, [pc, #112]	; (80004e8 <MX_TIM2_Init+0xe8>)
 8000478:	f003 fb20 	bl	8003abc <HAL_TIM_ConfigClockSource>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000482:	f000 f8b5 	bl	80005f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000486:	4818      	ldr	r0, [pc, #96]	; (80004e8 <MX_TIM2_Init+0xe8>)
 8000488:	f003 f8b7 	bl	80035fa <HAL_TIM_PWM_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000492:	f000 f8ad 	bl	80005f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000496:	2300      	movs	r3, #0
 8000498:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049a:	2300      	movs	r3, #0
 800049c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800049e:	f107 031c 	add.w	r3, r7, #28
 80004a2:	4619      	mov	r1, r3
 80004a4:	4810      	ldr	r0, [pc, #64]	; (80004e8 <MX_TIM2_Init+0xe8>)
 80004a6:	f003 ffb1 	bl	800440c <HAL_TIMEx_MasterConfigSynchronization>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80004b0:	f000 f89e 	bl	80005f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004b4:	2360      	movs	r3, #96	; 0x60
 80004b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004bc:	2300      	movs	r3, #0
 80004be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004c4:	463b      	mov	r3, r7
 80004c6:	2200      	movs	r2, #0
 80004c8:	4619      	mov	r1, r3
 80004ca:	4807      	ldr	r0, [pc, #28]	; (80004e8 <MX_TIM2_Init+0xe8>)
 80004cc:	f003 f9e2 	bl	8003894 <HAL_TIM_PWM_ConfigChannel>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80004d6:	f000 f88b 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004da:	4803      	ldr	r0, [pc, #12]	; (80004e8 <MX_TIM2_Init+0xe8>)
 80004dc:	f000 f94a 	bl	8000774 <HAL_TIM_MspPostInit>

}
 80004e0:	bf00      	nop
 80004e2:	3738      	adds	r7, #56	; 0x38
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	2000008c 	.word	0x2000008c

080004ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <MX_USART2_UART_Init+0x58>)
 80004f2:	4a15      	ldr	r2, [pc, #84]	; (8000548 <MX_USART2_UART_Init+0x5c>)
 80004f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004f6:	4b13      	ldr	r3, [pc, #76]	; (8000544 <MX_USART2_UART_Init+0x58>)
 80004f8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <MX_USART2_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <MX_USART2_UART_Init+0x58>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <MX_USART2_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <MX_USART2_UART_Init+0x58>)
 8000512:	220c      	movs	r2, #12
 8000514:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <MX_USART2_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <MX_USART2_UART_Init+0x58>)
 800051e:	2200      	movs	r2, #0
 8000520:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <MX_USART2_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <MX_USART2_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800052e:	4805      	ldr	r0, [pc, #20]	; (8000544 <MX_USART2_UART_Init+0x58>)
 8000530:	f003 ffda 	bl	80044e8 <HAL_UART_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800053a:	f000 f859 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200000d8 	.word	0x200000d8
 8000548:	40004400 	.word	0x40004400

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08a      	sub	sp, #40	; 0x28
 8000550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000562:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <MX_GPIO_Init+0x9c>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a20      	ldr	r2, [pc, #128]	; (80005e8 <MX_GPIO_Init+0x9c>)
 8000568:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800056c:	6153      	str	r3, [r2, #20]
 800056e:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <MX_GPIO_Init+0x9c>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800057a:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <MX_GPIO_Init+0x9c>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a1a      	ldr	r2, [pc, #104]	; (80005e8 <MX_GPIO_Init+0x9c>)
 8000580:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000584:	6153      	str	r3, [r2, #20]
 8000586:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <MX_GPIO_Init+0x9c>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <MX_GPIO_Init+0x9c>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <MX_GPIO_Init+0x9c>)
 8000598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <MX_GPIO_Init+0x9c>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_GPIO_Init+0x9c>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <MX_GPIO_Init+0x9c>)
 80005b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_GPIO_Init+0x9c>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_GPIO_Init+0xa0>)
 80005da:	f001 fbd1 	bl	8001d80 <HAL_GPIO_Init>

}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	; 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000
 80005ec:	48000800 	.word	0x48000800

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <Error_Handler+0x8>
	...

080005fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_MspInit+0x44>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_MspInit+0x44>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6193      	str	r3, [r2, #24]
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_MspInit+0x44>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_MspInit+0x44>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_MspInit+0x44>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_MspInit+0x44>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000632:	2007      	movs	r0, #7
 8000634:	f001 fa9c 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000

08000644 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000664:	d124      	bne.n	80006b0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <HAL_ADC_MspInit+0x74>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <HAL_ADC_MspInit+0x74>)
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <HAL_ADC_MspInit+0x74>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <HAL_ADC_MspInit+0x74>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a0d      	ldr	r2, [pc, #52]	; (80006b8 <HAL_ADC_MspInit+0x74>)
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	6153      	str	r3, [r2, #20]
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <HAL_ADC_MspInit+0x74>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000696:	2301      	movs	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069a:	2303      	movs	r3, #3
 800069c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ac:	f001 fb68 	bl	8001d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000

080006bc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a15      	ldr	r2, [pc, #84]	; (8000730 <HAL_DAC_MspInit+0x74>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d124      	bne.n	8000728 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <HAL_DAC_MspInit+0x78>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a14      	ldr	r2, [pc, #80]	; (8000734 <HAL_DAC_MspInit+0x78>)
 80006e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <HAL_DAC_MspInit+0x78>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <HAL_DAC_MspInit+0x78>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <HAL_DAC_MspInit+0x78>)
 80006fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000700:	6153      	str	r3, [r2, #20]
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <HAL_DAC_MspInit+0x78>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800070e:	2310      	movs	r3, #16
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000724:	f001 fb2c 	bl	8001d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40007400 	.word	0x40007400
 8000734:	40021000 	.word	0x40021000

08000738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000748:	d10b      	bne.n	8000762 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <HAL_TIM_Base_MspInit+0x38>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a08      	ldr	r2, [pc, #32]	; (8000770 <HAL_TIM_Base_MspInit+0x38>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_TIM_Base_MspInit+0x38>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000

08000774 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000794:	d11c      	bne.n	80007d0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <HAL_TIM_MspPostInit+0x64>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <HAL_TIM_MspPostInit+0x64>)
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	6153      	str	r3, [r2, #20]
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <HAL_TIM_MspPostInit+0x64>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007ae:	2320      	movs	r3, #32
 80007b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007be:	2301      	movs	r3, #1
 80007c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4619      	mov	r1, r3
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007cc:	f001 fad8 	bl	8001d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a17      	ldr	r2, [pc, #92]	; (8000858 <HAL_UART_MspInit+0x7c>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d128      	bne.n	8000850 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <HAL_UART_MspInit+0x80>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	4a16      	ldr	r2, [pc, #88]	; (800085c <HAL_UART_MspInit+0x80>)
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	61d3      	str	r3, [r2, #28]
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <HAL_UART_MspInit+0x80>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <HAL_UART_MspInit+0x80>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a10      	ldr	r2, [pc, #64]	; (800085c <HAL_UART_MspInit+0x80>)
 800081c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000820:	6153      	str	r3, [r2, #20]
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <HAL_UART_MspInit+0x80>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800082e:	230c      	movs	r3, #12
 8000830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800083e:	2307      	movs	r3, #7
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084c:	f001 fa98 	bl	8001d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000850:	bf00      	nop
 8000852:	3728      	adds	r7, #40	; 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40004400 	.word	0x40004400
 800085c:	40021000 	.word	0x40021000

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler+0x4>

08000866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler+0x4>

08000872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <UsageFault_Handler+0x4>

0800087e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ac:	f000 f884 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <SystemInit+0x20>)
 80008ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <SystemInit+0x20>)
 80008c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000910 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <LoopForever+0x6>)
  ldr r1, =_edata
 80008de:	490e      	ldr	r1, [pc, #56]	; (8000918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e0:	4a0e      	ldr	r2, [pc, #56]	; (800091c <LoopForever+0xe>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f4:	4c0b      	ldr	r4, [pc, #44]	; (8000924 <LoopForever+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000902:	f7ff ffd7 	bl	80008b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000906:	f004 f923 	bl	8004b50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800090a:	f7ff fc5d 	bl	80001c8 <main>

0800090e <LoopForever>:

LoopForever:
    b LoopForever
 800090e:	e7fe      	b.n	800090e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000910:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800091c:	08004c00 	.word	0x08004c00
  ldr r2, =_sbss
 8000920:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000924:	20000160 	.word	0x20000160

08000928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC1_2_IRQHandler>
	...

0800092c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_Init+0x28>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_Init+0x28>)
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f001 f917 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	2000      	movs	r0, #0
 8000944:	f000 f808 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f7ff fe58 	bl	80005fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40022000 	.word	0x40022000

08000958 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f001 f921 	bl	8001bbe <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f001 f8f7 	bl	8001b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008
 80009dc:	2000015c 	.word	0x2000015c

080009e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	2000015c 	.word	0x2000015c

080009f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff ffee 	bl	80009e0 <HAL_GetTick>
 8000a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a10:	d005      	beq.n	8000a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_Delay+0x44>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a1e:	bf00      	nop
 8000a20:	f7ff ffde 	bl	80009e0 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8f7      	bhi.n	8000a20 <HAL_Delay+0x28>
  {
  }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008

08000a40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b09a      	sub	sp, #104	; 0x68
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d101      	bne.n	8000a60 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e172      	b.n	8000d46 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	691b      	ldr	r3, [r3, #16]
 8000a64:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d176      	bne.n	8000b60 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d152      	bne.n	8000b20 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff fdd5 	bl	8000644 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d13b      	bne.n	8000b20 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f000 ff49 	bl	8001940 <ADC_Disable>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f003 0310 	and.w	r3, r3, #16
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d12f      	bne.n	8000b20 <HAL_ADC_Init+0xe0>
 8000ac0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d12b      	bne.n	8000b20 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ad0:	f023 0302 	bic.w	r3, r3, #2
 8000ad4:	f043 0202 	orr.w	r2, r3, #2
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000aea:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	689a      	ldr	r2, [r3, #8]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000afa:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000afc:	4b94      	ldr	r3, [pc, #592]	; (8000d50 <HAL_ADC_Init+0x310>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a94      	ldr	r2, [pc, #592]	; (8000d54 <HAL_ADC_Init+0x314>)
 8000b02:	fba2 2303 	umull	r2, r3, r2, r3
 8000b06:	0c9a      	lsrs	r2, r3, #18
 8000b08:	4613      	mov	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	4413      	add	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b12:	e002      	b.n	8000b1a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1f9      	bne.n	8000b14 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d007      	beq.n	8000b3e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b3c:	d110      	bne.n	8000b60 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f023 0312 	bic.w	r3, r3, #18
 8000b46:	f043 0210 	orr.w	r2, r3, #16
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f043 0201 	orr.w	r2, r3, #1
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f003 0310 	and.w	r3, r3, #16
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f040 80df 	bne.w	8000d2c <HAL_ADC_Init+0x2ec>
 8000b6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f040 80da 	bne.w	8000d2c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f040 80d2 	bne.w	8000d2c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b90:	f043 0202 	orr.w	r2, r3, #2
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b98:	4b6f      	ldr	r3, [pc, #444]	; (8000d58 <HAL_ADC_Init+0x318>)
 8000b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ba4:	d102      	bne.n	8000bac <HAL_ADC_Init+0x16c>
 8000ba6:	4b6d      	ldr	r3, [pc, #436]	; (8000d5c <HAL_ADC_Init+0x31c>)
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	e002      	b.n	8000bb2 <HAL_ADC_Init+0x172>
 8000bac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bb0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d108      	bne.n	8000bd2 <HAL_ADC_Init+0x192>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d101      	bne.n	8000bd2 <HAL_ADC_Init+0x192>
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e000      	b.n	8000bd4 <HAL_ADC_Init+0x194>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d11c      	bne.n	8000c12 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d010      	beq.n	8000c00 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	f003 0303 	and.w	r3, r3, #3
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d107      	bne.n	8000bfa <HAL_ADC_Init+0x1ba>
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d101      	bne.n	8000bfa <HAL_ADC_Init+0x1ba>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <HAL_ADC_Init+0x1bc>
 8000bfa:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d108      	bne.n	8000c12 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c10:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7e5b      	ldrb	r3, [r3, #25]
 8000c16:	035b      	lsls	r3, r3, #13
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c1c:	2a01      	cmp	r2, #1
 8000c1e:	d002      	beq.n	8000c26 <HAL_ADC_Init+0x1e6>
 8000c20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c24:	e000      	b.n	8000c28 <HAL_ADC_Init+0x1e8>
 8000c26:	2200      	movs	r2, #0
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d11b      	bne.n	8000c7e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	7e5b      	ldrb	r3, [r3, #25]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d109      	bne.n	8000c62 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c52:	3b01      	subs	r3, #1
 8000c54:	045a      	lsls	r2, r3, #17
 8000c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c5e:	663b      	str	r3, [r7, #96]	; 0x60
 8000c60:	e00d      	b.n	8000c7e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000c6a:	f043 0220 	orr.w	r2, r3, #32
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f043 0201 	orr.w	r2, r3, #1
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d007      	beq.n	8000c96 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c92:	4313      	orrs	r3, r2
 8000c94:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	f003 030c 	and.w	r3, r3, #12
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d114      	bne.n	8000cce <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	6812      	ldr	r2, [r2, #0]
 8000cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cb2:	f023 0302 	bic.w	r3, r3, #2
 8000cb6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	7e1b      	ldrb	r3, [r3, #24]
 8000cbc:	039a      	lsls	r2, r3, #14
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <HAL_ADC_Init+0x320>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	6812      	ldr	r2, [r2, #0]
 8000cdc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000cde:	430b      	orrs	r3, r1
 8000ce0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d10c      	bne.n	8000d04 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	f023 010f 	bic.w	r1, r3, #15
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	631a      	str	r2, [r3, #48]	; 0x30
 8000d02:	e007      	b.n	8000d14 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f022 020f 	bic.w	r2, r2, #15
 8000d12:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f023 0303 	bic.w	r3, r3, #3
 8000d22:	f043 0201 	orr.w	r2, r3, #1
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	641a      	str	r2, [r3, #64]	; 0x40
 8000d2a:	e00a      	b.n	8000d42 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f023 0312 	bic.w	r3, r3, #18
 8000d34:	f043 0210 	orr.w	r2, r3, #16
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000d42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3768      	adds	r7, #104	; 0x68
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000000 	.word	0x20000000
 8000d54:	431bde83 	.word	0x431bde83
 8000d58:	50000300 	.word	0x50000300
 8000d5c:	50000100 	.word	0x50000100
 8000d60:	fff0c007 	.word	0xfff0c007

08000d64 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f040 809c 	bne.w	8000eb8 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d101      	bne.n	8000d8e <HAL_ADC_Start+0x2a>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e097      	b.n	8000ebe <HAL_ADC_Start+0x15a>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f000 fd6e 	bl	8001878 <ADC_Enable>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8083 	bne.w	8000eae <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000db0:	f023 0301 	bic.w	r3, r3, #1
 8000db4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000dbc:	4b42      	ldr	r3, [pc, #264]	; (8000ec8 <HAL_ADC_Start+0x164>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 031f 	and.w	r3, r3, #31
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d004      	beq.n	8000dd2 <HAL_ADC_Start+0x6e>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dd0:	d115      	bne.n	8000dfe <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d027      	beq.n	8000e3c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000df4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000dfc:	e01e      	b.n	8000e3c <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e12:	d004      	beq.n	8000e1e <HAL_ADC_Start+0xba>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a2c      	ldr	r2, [pc, #176]	; (8000ecc <HAL_ADC_Start+0x168>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d10e      	bne.n	8000e3c <HAL_ADC_Start+0xd8>
 8000e1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d007      	beq.n	8000e3c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e34:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e48:	d106      	bne.n	8000e58 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f023 0206 	bic.w	r2, r3, #6
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	645a      	str	r2, [r3, #68]	; 0x44
 8000e56:	e002      	b.n	8000e5e <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	221c      	movs	r2, #28
 8000e6c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_ADC_Start+0x164>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 031f 	and.w	r3, r3, #31
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d010      	beq.n	8000e9c <HAL_ADC_Start+0x138>
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <HAL_ADC_Start+0x164>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f003 031f 	and.w	r3, r3, #31
 8000e82:	2b05      	cmp	r3, #5
 8000e84:	d00a      	beq.n	8000e9c <HAL_ADC_Start+0x138>
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_ADC_Start+0x164>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f003 031f 	and.w	r3, r3, #31
 8000e8e:	2b09      	cmp	r3, #9
 8000e90:	d004      	beq.n	8000e9c <HAL_ADC_Start+0x138>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e9a:	d10f      	bne.n	8000ebc <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0204 	orr.w	r2, r2, #4
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	e006      	b.n	8000ebc <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000eb6:	e001      	b.n	8000ebc <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	50000300 	.word	0x50000300
 8000ecc:	50000100 	.word	0x50000100

08000ed0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d102      	bne.n	8000eec <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	e02e      	b.n	8000f4a <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000eec:	4b5e      	ldr	r3, [pc, #376]	; (8001068 <HAL_ADC_PollForConversion+0x198>)
 8000eee:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 031f 	and.w	r3, r3, #31
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d112      	bne.n	8000f22 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d11d      	bne.n	8000f46 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f043 0220 	orr.w	r2, r3, #32
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e09d      	b.n	800105e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00b      	beq.n	8000f46 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f043 0220 	orr.w	r2, r3, #32
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e08b      	b.n	800105e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000f46:	230c      	movs	r3, #12
 8000f48:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f4a:	4b47      	ldr	r3, [pc, #284]	; (8001068 <HAL_ADC_PollForConversion+0x198>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 031f 	and.w	r3, r3, #31
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d004      	beq.n	8000f60 <HAL_ADC_PollForConversion+0x90>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f5e:	d104      	bne.n	8000f6a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	e003      	b.n	8000f72 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000f6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8000f72:	f7ff fd35 	bl	80009e0 <HAL_GetTick>
 8000f76:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f78:	e021      	b.n	8000fbe <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d01d      	beq.n	8000fbe <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d007      	beq.n	8000f98 <HAL_ADC_PollForConversion+0xc8>
 8000f88:	f7ff fd2a 	bl	80009e0 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d212      	bcs.n	8000fbe <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10b      	bne.n	8000fbe <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f043 0204 	orr.w	r2, r3, #4
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e04f      	b.n	800105e <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0d6      	beq.n	8000f7a <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d131      	bne.n	800104a <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d12c      	bne.n	800104a <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	2b08      	cmp	r3, #8
 8000ffc:	d125      	bne.n	800104a <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	2b00      	cmp	r3, #0
 800100a:	d112      	bne.n	8001032 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d112      	bne.n	800104a <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f043 0201 	orr.w	r2, r3, #1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	641a      	str	r2, [r3, #64]	; 0x40
 8001030:	e00b      	b.n	800104a <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f043 0220 	orr.w	r2, r3, #32
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f043 0201 	orr.w	r2, r3, #1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d103      	bne.n	800105c <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	50000300 	.word	0x50000300

0800106c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800109a:	2b01      	cmp	r3, #1
 800109c:	d101      	bne.n	80010a2 <HAL_ADCEx_Calibration_Start+0x1c>
 800109e:	2302      	movs	r3, #2
 80010a0:	e05f      	b.n	8001162 <HAL_ADCEx_Calibration_Start+0xdc>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 fc48 	bl	8001940 <ADC_Disable>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d14e      	bne.n	8001158 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80010ce:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d107      	bne.n	80010e6 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010e4:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010f4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80010f6:	f7ff fc73 	bl	80009e0 <HAL_GetTick>
 80010fa:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80010fc:	e01c      	b.n	8001138 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80010fe:	f7ff fc6f 	bl	80009e0 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b0a      	cmp	r3, #10
 800110a:	d915      	bls.n	8001138 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800111a:	d10d      	bne.n	8001138 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f023 0312 	bic.w	r3, r3, #18
 8001124:	f043 0210 	orr.w	r2, r3, #16
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e014      	b.n	8001162 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001146:	d0da      	beq.n	80010fe <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f023 0303 	bic.w	r3, r3, #3
 8001150:	f043 0201 	orr.w	r2, r3, #1
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800116c:	b480      	push	{r7}
 800116e:	b09b      	sub	sp, #108	; 0x6c
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <HAL_ADC_ConfigChannel+0x22>
 800118a:	2302      	movs	r3, #2
 800118c:	e2a4      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x56c>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f040 8288 	bne.w	80016b6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d81c      	bhi.n	80011e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	461a      	mov	r2, r3
 80011c2:	231f      	movs	r3, #31
 80011c4:	4093      	lsls	r3, r2
 80011c6:	43db      	mvns	r3, r3
 80011c8:	4019      	ands	r1, r3
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4413      	add	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa00 f203 	lsl.w	r2, r0, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
 80011e6:	e063      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b09      	cmp	r3, #9
 80011ee:	d81e      	bhi.n	800122e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	3b1e      	subs	r3, #30
 8001204:	221f      	movs	r2, #31
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	4019      	ands	r1, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	3b1e      	subs	r3, #30
 8001220:	fa00 f203 	lsl.w	r2, r0, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
 800122c:	e040      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b0e      	cmp	r3, #14
 8001234:	d81e      	bhi.n	8001274 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	3b3c      	subs	r3, #60	; 0x3c
 800124a:	221f      	movs	r2, #31
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	4019      	ands	r1, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	3b3c      	subs	r3, #60	; 0x3c
 8001266:	fa00 f203 	lsl.w	r2, r0, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	639a      	str	r2, [r3, #56]	; 0x38
 8001272:	e01d      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	3b5a      	subs	r3, #90	; 0x5a
 8001288:	221f      	movs	r2, #31
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	4019      	ands	r1, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	3b5a      	subs	r3, #90	; 0x5a
 80012a4:	fa00 f203 	lsl.w	r2, r0, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f040 80e5 	bne.w	800148a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b09      	cmp	r3, #9
 80012c6:	d91c      	bls.n	8001302 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6999      	ldr	r1, [r3, #24]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	3b1e      	subs	r3, #30
 80012da:	2207      	movs	r2, #7
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	4019      	ands	r1, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	6898      	ldr	r0, [r3, #8]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	3b1e      	subs	r3, #30
 80012f4:	fa00 f203 	lsl.w	r2, r0, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	619a      	str	r2, [r3, #24]
 8001300:	e019      	b.n	8001336 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6959      	ldr	r1, [r3, #20]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	2207      	movs	r2, #7
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	4019      	ands	r1, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	6898      	ldr	r0, [r3, #8]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	fa00 f203 	lsl.w	r2, r0, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	08db      	lsrs	r3, r3, #3
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	3b01      	subs	r3, #1
 8001354:	2b03      	cmp	r3, #3
 8001356:	d84f      	bhi.n	80013f8 <HAL_ADC_ConfigChannel+0x28c>
 8001358:	a201      	add	r2, pc, #4	; (adr r2, 8001360 <HAL_ADC_ConfigChannel+0x1f4>)
 800135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135e:	bf00      	nop
 8001360:	08001371 	.word	0x08001371
 8001364:	08001393 	.word	0x08001393
 8001368:	080013b5 	.word	0x080013b5
 800136c:	080013d7 	.word	0x080013d7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001376:	4b94      	ldr	r3, [pc, #592]	; (80015c8 <HAL_ADC_ConfigChannel+0x45c>)
 8001378:	4013      	ands	r3, r2
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	0691      	lsls	r1, r2, #26
 8001380:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001382:	430a      	orrs	r2, r1
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800138e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001390:	e07e      	b.n	8001490 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001398:	4b8b      	ldr	r3, [pc, #556]	; (80015c8 <HAL_ADC_ConfigChannel+0x45c>)
 800139a:	4013      	ands	r3, r2
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	0691      	lsls	r1, r2, #26
 80013a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013a4:	430a      	orrs	r2, r1
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013b0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013b2:	e06d      	b.n	8001490 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80013ba:	4b83      	ldr	r3, [pc, #524]	; (80015c8 <HAL_ADC_ConfigChannel+0x45c>)
 80013bc:	4013      	ands	r3, r2
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	0691      	lsls	r1, r2, #26
 80013c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013c6:	430a      	orrs	r2, r1
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013d2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013d4:	e05c      	b.n	8001490 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80013dc:	4b7a      	ldr	r3, [pc, #488]	; (80015c8 <HAL_ADC_ConfigChannel+0x45c>)
 80013de:	4013      	ands	r3, r2
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	0691      	lsls	r1, r2, #26
 80013e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013e8:	430a      	orrs	r2, r1
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013f4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013f6:	e04b      	b.n	8001490 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	069b      	lsls	r3, r3, #26
 8001408:	429a      	cmp	r2, r3
 800140a:	d107      	bne.n	800141c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800141a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001422:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	069b      	lsls	r3, r3, #26
 800142c:	429a      	cmp	r2, r3
 800142e:	d107      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800143e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001446:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	069b      	lsls	r3, r3, #26
 8001450:	429a      	cmp	r2, r3
 8001452:	d107      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001462:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800146a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	069b      	lsls	r3, r3, #26
 8001474:	429a      	cmp	r2, r3
 8001476:	d10a      	bne.n	800148e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001486:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001488:	e001      	b.n	800148e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800148a:	bf00      	nop
 800148c:	e000      	b.n	8001490 <HAL_ADC_ConfigChannel+0x324>
      break;
 800148e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d108      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x344>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x344>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x346>
 80014b0:	2300      	movs	r3, #0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f040 810a 	bne.w	80016cc <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d00f      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2201      	movs	r2, #1
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	400a      	ands	r2, r1
 80014da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80014de:	e049      	b.n	8001574 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	409a      	lsls	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b09      	cmp	r3, #9
 8001500:	d91c      	bls.n	800153c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6999      	ldr	r1, [r3, #24]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4613      	mov	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	3b1b      	subs	r3, #27
 8001514:	2207      	movs	r2, #7
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	4019      	ands	r1, r3
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	6898      	ldr	r0, [r3, #8]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	3b1b      	subs	r3, #27
 800152e:	fa00 f203 	lsl.w	r2, r0, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	619a      	str	r2, [r3, #24]
 800153a:	e01b      	b.n	8001574 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6959      	ldr	r1, [r3, #20]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	2207      	movs	r2, #7
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	4019      	ands	r1, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	6898      	ldr	r0, [r3, #8]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	fa00 f203 	lsl.w	r2, r0, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_ADC_ConfigChannel+0x460>)
 8001576:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b10      	cmp	r3, #16
 800157e:	d105      	bne.n	800158c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001588:	2b00      	cmp	r3, #0
 800158a:	d015      	beq.n	80015b8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001590:	2b11      	cmp	r3, #17
 8001592:	d105      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00b      	beq.n	80015b8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015a4:	2b12      	cmp	r3, #18
 80015a6:	f040 8091 	bne.w	80016cc <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80015aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 808a 	bne.w	80016cc <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015c0:	d108      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x468>
 80015c2:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_ADC_ConfigChannel+0x464>)
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	e008      	b.n	80015da <HAL_ADC_ConfigChannel+0x46e>
 80015c8:	83fff000 	.word	0x83fff000
 80015cc:	50000300 	.word	0x50000300
 80015d0:	50000100 	.word	0x50000100
 80015d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015d8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d108      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x48e>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x48e>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_ADC_ConfigChannel+0x490>
 80015fa:	2300      	movs	r3, #0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d150      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001600:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001602:	2b00      	cmp	r3, #0
 8001604:	d010      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b01      	cmp	r3, #1
 8001610:	d107      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x4b6>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x4b6>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_ADC_ConfigChannel+0x4b8>
 8001622:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001624:	2b00      	cmp	r3, #0
 8001626:	d13c      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b10      	cmp	r3, #16
 800162e:	d11d      	bne.n	800166c <HAL_ADC_ConfigChannel+0x500>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001638:	d118      	bne.n	800166c <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800163a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001644:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001646:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <HAL_ADC_ConfigChannel+0x578>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a27      	ldr	r2, [pc, #156]	; (80016e8 <HAL_ADC_ConfigChannel+0x57c>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	0c9a      	lsrs	r2, r3, #18
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800165c:	e002      	b.n	8001664 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	3b01      	subs	r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f9      	bne.n	800165e <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800166a:	e02e      	b.n	80016ca <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b11      	cmp	r3, #17
 8001672:	d10b      	bne.n	800168c <HAL_ADC_ConfigChannel+0x520>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800167c:	d106      	bne.n	800168c <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800167e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001688:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800168a:	e01e      	b.n	80016ca <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b12      	cmp	r3, #18
 8001692:	d11a      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800169c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800169e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016a0:	e013      	b.n	80016ca <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f043 0220 	orr.w	r2, r3, #32
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80016b4:	e00a      	b.n	80016cc <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f043 0220 	orr.w	r2, r3, #32
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80016c8:	e000      	b.n	80016cc <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016ca:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016d8:	4618      	mov	r0, r3
 80016da:	376c      	adds	r7, #108	; 0x6c
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	20000000 	.word	0x20000000
 80016e8:	431bde83 	.word	0x431bde83

080016ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b099      	sub	sp, #100	; 0x64
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001704:	d102      	bne.n	800170c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001706:	4b5a      	ldr	r3, [pc, #360]	; (8001870 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	e002      	b.n	8001712 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800170c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001710:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0a2      	b.n	8001862 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001726:	2302      	movs	r3, #2
 8001728:	e09b      	b.n	8001862 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d17f      	bne.n	8001840 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d179      	bne.n	8001840 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800174c:	4b49      	ldr	r3, [pc, #292]	; (8001874 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800174e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d040      	beq.n	80017da <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800176a:	035b      	lsls	r3, r3, #13
 800176c:	430b      	orrs	r3, r1
 800176e:	431a      	orrs	r2, r3
 8001770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001772:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b01      	cmp	r3, #1
 8001780:	d108      	bne.n	8001794 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001794:	2300      	movs	r3, #0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d15c      	bne.n	8001854 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d107      	bne.n	80017b6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80017b6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d14b      	bne.n	8001854 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80017bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80017c4:	f023 030f 	bic.w	r3, r3, #15
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	6811      	ldr	r1, [r2, #0]
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	6892      	ldr	r2, [r2, #8]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	431a      	orrs	r2, r3
 80017d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017d6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80017d8:	e03c      	b.n	8001854 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80017da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017e4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d108      	bne.n	8001806 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001806:	2300      	movs	r3, #0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d123      	bne.n	8001854 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d107      	bne.n	8001828 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001828:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800182a:	2b00      	cmp	r3, #0
 800182c:	d112      	bne.n	8001854 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800182e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001836:	f023 030f 	bic.w	r3, r3, #15
 800183a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800183c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800183e:	e009      	b.n	8001854 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f043 0220 	orr.w	r2, r3, #32
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001852:	e000      	b.n	8001856 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001854:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800185e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001862:	4618      	mov	r0, r3
 8001864:	3764      	adds	r7, #100	; 0x64
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	50000100 	.word	0x50000100
 8001874:	50000300 	.word	0x50000300

08001878 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b01      	cmp	r3, #1
 8001890:	d108      	bne.n	80018a4 <ADC_Enable+0x2c>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <ADC_Enable+0x2c>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <ADC_Enable+0x2e>
 80018a4:	2300      	movs	r3, #0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d143      	bne.n	8001932 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	4b22      	ldr	r3, [pc, #136]	; (800193c <ADC_Enable+0xc4>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00d      	beq.n	80018d4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f043 0210 	orr.w	r2, r3, #16
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c8:	f043 0201 	orr.w	r2, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e02f      	b.n	8001934 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0201 	orr.w	r2, r2, #1
 80018e2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80018e4:	f7ff f87c 	bl	80009e0 <HAL_GetTick>
 80018e8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018ea:	e01b      	b.n	8001924 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018ec:	f7ff f878 	bl	80009e0 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d914      	bls.n	8001924 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d00d      	beq.n	8001924 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f043 0210 	orr.w	r2, r3, #16
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	f043 0201 	orr.w	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e007      	b.n	8001934 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b01      	cmp	r3, #1
 8001930:	d1dc      	bne.n	80018ec <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	8000003f 	.word	0x8000003f

08001940 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d108      	bne.n	800196c <ADC_Disable+0x2c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <ADC_Disable+0x2c>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <ADC_Disable+0x2e>
 800196c:	2300      	movs	r3, #0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d047      	beq.n	8001a02 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 030d 	and.w	r3, r3, #13
 800197c:	2b01      	cmp	r3, #1
 800197e:	d10f      	bne.n	80019a0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0202 	orr.w	r2, r2, #2
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2203      	movs	r2, #3
 8001996:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001998:	f7ff f822 	bl	80009e0 <HAL_GetTick>
 800199c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800199e:	e029      	b.n	80019f4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f043 0210 	orr.w	r2, r3, #16
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e023      	b.n	8001a04 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019bc:	f7ff f810 	bl	80009e0 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d914      	bls.n	80019f4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d10d      	bne.n	80019f4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	f043 0210 	orr.w	r2, r3, #16
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	f043 0201 	orr.w	r2, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e007      	b.n	8001a04 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d0dc      	beq.n	80019bc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60d3      	str	r3, [r2, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <__NVIC_GetPriorityGrouping+0x18>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	f003 0307 	and.w	r3, r3, #7
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	; (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	; (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b3c:	d301      	bcc.n	8001b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00f      	b.n	8001b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <SysTick_Config+0x40>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f7ff ff8e 	bl	8001a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <SysTick_Config+0x40>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <SysTick_Config+0x40>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000e010 	.word	0xe000e010

08001b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff47 	bl	8001a0c <__NVIC_SetPriorityGrouping>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b98:	f7ff ff5c 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	6978      	ldr	r0, [r7, #20]
 8001ba4:	f7ff ff8e 	bl	8001ac4 <NVIC_EncodePriority>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff5d 	bl	8001a70 <__NVIC_SetPriority>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffb0 	bl	8001b2c <SysTick_Config>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e014      	b.n	8001c12 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	791b      	ldrb	r3, [r3, #4]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d105      	bne.n	8001bfe <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7fe fd5f 	bl	80006bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2202      	movs	r2, #2
 8001c02:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	795b      	ldrb	r3, [r3, #5]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_DAC_Start+0x16>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e039      	b.n	8001ca4 <HAL_DAC_Start+0x8a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6819      	ldr	r1, [r3, #0]
 8001c42:	2201      	movs	r2, #1
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	409a      	lsls	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10f      	bne.n	8001c76 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001c60:	2b3c      	cmp	r3, #60	; 0x3c
 8001c62:	d118      	bne.n	8001c96 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	e00f      	b.n	8001c96 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c80:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8001c84:	d107      	bne.n	8001c96 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0202 	orr.w	r2, r2, #2
 8001c94:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	795b      	ldrb	r3, [r3, #5]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_DAC_ConfigChannel+0x20>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e04e      	b.n	8001d6e <HAL_DAC_ConfigChannel+0xbe>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a24      	ldr	r2, [pc, #144]	; (8001d7c <HAL_DAC_ConfigChannel+0xcc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d112      	bne.n	8001d14 <HAL_DAC_ConfigChannel+0x64>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10f      	bne.n	8001d14 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001cf4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	4013      	ands	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	e00e      	b.n	8001d32 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8001d14:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4013      	ands	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	22c0      	movs	r2, #192	; 0xc0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2201      	movs	r2, #1
 8001d64:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40007400 	.word	0x40007400

08001d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8e:	e14e      	b.n	800202e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2101      	movs	r1, #1
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8140 	beq.w	8002028 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d005      	beq.n	8001dc0 <HAL_GPIO_Init+0x40>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d130      	bne.n	8001e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df6:	2201      	movs	r2, #1
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	f003 0201 	and.w	r2, r3, #1
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d017      	beq.n	8001e5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d123      	bne.n	8001eb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	08da      	lsrs	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3208      	adds	r2, #8
 8001e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	08da      	lsrs	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3208      	adds	r2, #8
 8001eac:	6939      	ldr	r1, [r7, #16]
 8001eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0203 	and.w	r2, r3, #3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 809a 	beq.w	8002028 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef4:	4b55      	ldr	r3, [pc, #340]	; (800204c <HAL_GPIO_Init+0x2cc>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a54      	ldr	r2, [pc, #336]	; (800204c <HAL_GPIO_Init+0x2cc>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b52      	ldr	r3, [pc, #328]	; (800204c <HAL_GPIO_Init+0x2cc>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f0c:	4a50      	ldr	r2, [pc, #320]	; (8002050 <HAL_GPIO_Init+0x2d0>)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	3302      	adds	r3, #2
 8001f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f36:	d013      	beq.n	8001f60 <HAL_GPIO_Init+0x1e0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a46      	ldr	r2, [pc, #280]	; (8002054 <HAL_GPIO_Init+0x2d4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d00d      	beq.n	8001f5c <HAL_GPIO_Init+0x1dc>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a45      	ldr	r2, [pc, #276]	; (8002058 <HAL_GPIO_Init+0x2d8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d007      	beq.n	8001f58 <HAL_GPIO_Init+0x1d8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a44      	ldr	r2, [pc, #272]	; (800205c <HAL_GPIO_Init+0x2dc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d101      	bne.n	8001f54 <HAL_GPIO_Init+0x1d4>
 8001f50:	2303      	movs	r3, #3
 8001f52:	e006      	b.n	8001f62 <HAL_GPIO_Init+0x1e2>
 8001f54:	2305      	movs	r3, #5
 8001f56:	e004      	b.n	8001f62 <HAL_GPIO_Init+0x1e2>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e002      	b.n	8001f62 <HAL_GPIO_Init+0x1e2>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <HAL_GPIO_Init+0x1e2>
 8001f60:	2300      	movs	r3, #0
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	f002 0203 	and.w	r2, r2, #3
 8001f68:	0092      	lsls	r2, r2, #2
 8001f6a:	4093      	lsls	r3, r2
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f72:	4937      	ldr	r1, [pc, #220]	; (8002050 <HAL_GPIO_Init+0x2d0>)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	089b      	lsrs	r3, r3, #2
 8001f78:	3302      	adds	r3, #2
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f80:	4b37      	ldr	r3, [pc, #220]	; (8002060 <HAL_GPIO_Init+0x2e0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fa4:	4a2e      	ldr	r2, [pc, #184]	; (8002060 <HAL_GPIO_Init+0x2e0>)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001faa:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_GPIO_Init+0x2e0>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fce:	4a24      	ldr	r2, [pc, #144]	; (8002060 <HAL_GPIO_Init+0x2e0>)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd4:	4b22      	ldr	r3, [pc, #136]	; (8002060 <HAL_GPIO_Init+0x2e0>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ff8:	4a19      	ldr	r2, [pc, #100]	; (8002060 <HAL_GPIO_Init+0x2e0>)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_GPIO_Init+0x2e0>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	43db      	mvns	r3, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002022:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <HAL_GPIO_Init+0x2e0>)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3301      	adds	r3, #1
 800202c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	f47f aea9 	bne.w	8001d90 <HAL_GPIO_Init+0x10>
  }
}
 800203e:	bf00      	nop
 8002040:	bf00      	nop
 8002042:	371c      	adds	r7, #28
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40021000 	.word	0x40021000
 8002050:	40010000 	.word	0x40010000
 8002054:	48000400 	.word	0x48000400
 8002058:	48000800 	.word	0x48000800
 800205c:	48000c00 	.word	0x48000c00
 8002060:	40010400 	.word	0x40010400

08002064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800206a:	af00      	add	r7, sp, #0
 800206c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002070:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002074:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	f001 b823 	b.w	80030d0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 817d 	beq.w	800239a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020a0:	4bbc      	ldr	r3, [pc, #752]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 030c 	and.w	r3, r3, #12
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d00c      	beq.n	80020c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020ac:	4bb9      	ldr	r3, [pc, #740]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d15c      	bne.n	8002172 <HAL_RCC_OscConfig+0x10e>
 80020b8:	4bb6      	ldr	r3, [pc, #728]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c4:	d155      	bne.n	8002172 <HAL_RCC_OscConfig+0x10e>
 80020c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	095b      	lsrs	r3, r3, #5
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d102      	bne.n	80020f8 <HAL_RCC_OscConfig+0x94>
 80020f2:	4ba8      	ldr	r3, [pc, #672]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	e015      	b.n	8002124 <HAL_RCC_OscConfig+0xc0>
 80020f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800210c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002110:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002114:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002120:	4b9c      	ldr	r3, [pc, #624]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002128:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800212c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002130:	fa92 f2a2 	rbit	r2, r2
 8002134:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002138:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800213c:	fab2 f282 	clz	r2, r2
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	f042 0220 	orr.w	r2, r2, #32
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	f002 021f 	and.w	r2, r2, #31
 800214c:	2101      	movs	r1, #1
 800214e:	fa01 f202 	lsl.w	r2, r1, r2
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 811f 	beq.w	8002398 <HAL_RCC_OscConfig+0x334>
 800215a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 8116 	bne.w	8002398 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	f000 bfaf 	b.w	80030d0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002176:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x12e>
 8002184:	4b83      	ldr	r3, [pc, #524]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a82      	ldr	r2, [pc, #520]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e036      	b.n	8002200 <HAL_RCC_OscConfig+0x19c>
 8002192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002196:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0x158>
 80021a2:	4b7c      	ldr	r3, [pc, #496]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a7b      	ldr	r2, [pc, #492]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80021a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	4b79      	ldr	r3, [pc, #484]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a78      	ldr	r2, [pc, #480]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80021b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e021      	b.n	8002200 <HAL_RCC_OscConfig+0x19c>
 80021bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x184>
 80021ce:	4b71      	ldr	r3, [pc, #452]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a70      	ldr	r2, [pc, #448]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b6e      	ldr	r3, [pc, #440]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6d      	ldr	r2, [pc, #436]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0x19c>
 80021e8:	4b6a      	ldr	r3, [pc, #424]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a69      	ldr	r2, [pc, #420]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b67      	ldr	r3, [pc, #412]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a66      	ldr	r2, [pc, #408]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002200:	4b64      	ldr	r3, [pc, #400]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	f023 020f 	bic.w	r2, r3, #15
 8002208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	495f      	ldr	r1, [pc, #380]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 8002216:	4313      	orrs	r3, r2
 8002218:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800221a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d059      	beq.n	80022de <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7fe fbd9 	bl	80009e0 <HAL_GetTick>
 800222e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002234:	f7fe fbd4 	bl	80009e0 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b64      	cmp	r3, #100	; 0x64
 8002242:	d902      	bls.n	800224a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	f000 bf43 	b.w	80030d0 <HAL_RCC_OscConfig+0x106c>
 800224a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800224e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800225e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d102      	bne.n	800227c <HAL_RCC_OscConfig+0x218>
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	e015      	b.n	80022a8 <HAL_RCC_OscConfig+0x244>
 800227c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002280:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002294:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002298:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80022a4:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022ac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80022b0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80022b4:	fa92 f2a2 	rbit	r2, r2
 80022b8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80022bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80022c0:	fab2 f282 	clz	r2, r2
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	f042 0220 	orr.w	r2, r2, #32
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	f002 021f 	and.w	r2, r2, #31
 80022d0:	2101      	movs	r1, #1
 80022d2:	fa01 f202 	lsl.w	r2, r1, r2
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0ab      	beq.n	8002234 <HAL_RCC_OscConfig+0x1d0>
 80022dc:	e05d      	b.n	800239a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7fe fb7f 	bl	80009e0 <HAL_GetTick>
 80022e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e8:	f7fe fb7a 	bl	80009e0 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b64      	cmp	r3, #100	; 0x64
 80022f6:	d902      	bls.n	80022fe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	f000 bee9 	b.w	80030d0 <HAL_RCC_OscConfig+0x106c>
 80022fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002302:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002312:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b01      	cmp	r3, #1
 8002328:	d102      	bne.n	8002330 <HAL_RCC_OscConfig+0x2cc>
 800232a:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	e015      	b.n	800235c <HAL_RCC_OscConfig+0x2f8>
 8002330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002334:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002344:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002348:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800234c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_RCC_OscConfig+0x330>)
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002360:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002364:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002368:	fa92 f2a2 	rbit	r2, r2
 800236c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002370:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002374:	fab2 f282 	clz	r2, r2
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	f042 0220 	orr.w	r2, r2, #32
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	f002 021f 	and.w	r2, r2, #31
 8002384:	2101      	movs	r1, #1
 8002386:	fa01 f202 	lsl.w	r2, r1, r2
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ab      	bne.n	80022e8 <HAL_RCC_OscConfig+0x284>
 8002390:	e003      	b.n	800239a <HAL_RCC_OscConfig+0x336>
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 817d 	beq.w	80026aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023b0:	4ba6      	ldr	r3, [pc, #664]	; (800264c <HAL_RCC_OscConfig+0x5e8>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00b      	beq.n	80023d4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023bc:	4ba3      	ldr	r3, [pc, #652]	; (800264c <HAL_RCC_OscConfig+0x5e8>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d172      	bne.n	80024ae <HAL_RCC_OscConfig+0x44a>
 80023c8:	4ba0      	ldr	r3, [pc, #640]	; (800264c <HAL_RCC_OscConfig+0x5e8>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d16c      	bne.n	80024ae <HAL_RCC_OscConfig+0x44a>
 80023d4:	2302      	movs	r3, #2
 80023d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80023e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	095b      	lsrs	r3, r3, #5
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d102      	bne.n	8002404 <HAL_RCC_OscConfig+0x3a0>
 80023fe:	4b93      	ldr	r3, [pc, #588]	; (800264c <HAL_RCC_OscConfig+0x5e8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	e013      	b.n	800242c <HAL_RCC_OscConfig+0x3c8>
 8002404:	2302      	movs	r3, #2
 8002406:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002416:	2302      	movs	r3, #2
 8002418:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800241c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002428:	4b88      	ldr	r3, [pc, #544]	; (800264c <HAL_RCC_OscConfig+0x5e8>)
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	2202      	movs	r2, #2
 800242e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002432:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002436:	fa92 f2a2 	rbit	r2, r2
 800243a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800243e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002442:	fab2 f282 	clz	r2, r2
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	f042 0220 	orr.w	r2, r2, #32
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	f002 021f 	and.w	r2, r2, #31
 8002452:	2101      	movs	r1, #1
 8002454:	fa01 f202 	lsl.w	r2, r1, r2
 8002458:	4013      	ands	r3, r2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <HAL_RCC_OscConfig+0x410>
 800245e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002462:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d002      	beq.n	8002474 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	f000 be2e 	b.w	80030d0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002474:	4b75      	ldr	r3, [pc, #468]	; (800264c <HAL_RCC_OscConfig+0x5e8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002480:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	21f8      	movs	r1, #248	; 0xf8
 800248a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002492:	fa91 f1a1 	rbit	r1, r1
 8002496:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800249a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800249e:	fab1 f181 	clz	r1, r1
 80024a2:	b2c9      	uxtb	r1, r1
 80024a4:	408b      	lsls	r3, r1
 80024a6:	4969      	ldr	r1, [pc, #420]	; (800264c <HAL_RCC_OscConfig+0x5e8>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ac:	e0fd      	b.n	80026aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8088 	beq.w	80025d0 <HAL_RCC_OscConfig+0x56c>
 80024c0:	2301      	movs	r3, #1
 80024c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80024d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	461a      	mov	r2, r3
 80024e8:	2301      	movs	r3, #1
 80024ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fa78 	bl	80009e0 <HAL_GetTick>
 80024f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f6:	f7fe fa73 	bl	80009e0 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d902      	bls.n	800250c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	f000 bde2 	b.w	80030d0 <HAL_RCC_OscConfig+0x106c>
 800250c:	2302      	movs	r3, #2
 800250e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800251e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d102      	bne.n	800253c <HAL_RCC_OscConfig+0x4d8>
 8002536:	4b45      	ldr	r3, [pc, #276]	; (800264c <HAL_RCC_OscConfig+0x5e8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	e013      	b.n	8002564 <HAL_RCC_OscConfig+0x500>
 800253c:	2302      	movs	r3, #2
 800253e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800254e:	2302      	movs	r3, #2
 8002550:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002554:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002560:	4b3a      	ldr	r3, [pc, #232]	; (800264c <HAL_RCC_OscConfig+0x5e8>)
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	2202      	movs	r2, #2
 8002566:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800256a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800256e:	fa92 f2a2 	rbit	r2, r2
 8002572:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002576:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800257a:	fab2 f282 	clz	r2, r2
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	f042 0220 	orr.w	r2, r2, #32
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	f002 021f 	and.w	r2, r2, #31
 800258a:	2101      	movs	r1, #1
 800258c:	fa01 f202 	lsl.w	r2, r1, r2
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0af      	beq.n	80024f6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002596:	4b2d      	ldr	r3, [pc, #180]	; (800264c <HAL_RCC_OscConfig+0x5e8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	21f8      	movs	r1, #248	; 0xf8
 80025ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80025b4:	fa91 f1a1 	rbit	r1, r1
 80025b8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80025bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80025c0:	fab1 f181 	clz	r1, r1
 80025c4:	b2c9      	uxtb	r1, r1
 80025c6:	408b      	lsls	r3, r1
 80025c8:	4920      	ldr	r1, [pc, #128]	; (800264c <HAL_RCC_OscConfig+0x5e8>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
 80025ce:	e06c      	b.n	80026aa <HAL_RCC_OscConfig+0x646>
 80025d0:	2301      	movs	r3, #1
 80025d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80025e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	461a      	mov	r2, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe f9f0 	bl	80009e0 <HAL_GetTick>
 8002600:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002604:	e00a      	b.n	800261c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002606:	f7fe f9eb 	bl	80009e0 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d902      	bls.n	800261c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	f000 bd5a 	b.w	80030d0 <HAL_RCC_OscConfig+0x106c>
 800261c:	2302      	movs	r3, #2
 800261e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800262e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d104      	bne.n	8002650 <HAL_RCC_OscConfig+0x5ec>
 8002646:	4b01      	ldr	r3, [pc, #4]	; (800264c <HAL_RCC_OscConfig+0x5e8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	e015      	b.n	8002678 <HAL_RCC_OscConfig+0x614>
 800264c:	40021000 	.word	0x40021000
 8002650:	2302      	movs	r3, #2
 8002652:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002668:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002674:	4bc8      	ldr	r3, [pc, #800]	; (8002998 <HAL_RCC_OscConfig+0x934>)
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	2202      	movs	r2, #2
 800267a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800267e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002682:	fa92 f2a2 	rbit	r2, r2
 8002686:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800268a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800268e:	fab2 f282 	clz	r2, r2
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	f042 0220 	orr.w	r2, r2, #32
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	f002 021f 	and.w	r2, r2, #31
 800269e:	2101      	movs	r1, #1
 80026a0:	fa01 f202 	lsl.w	r2, r1, r2
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1ad      	bne.n	8002606 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8110 	beq.w	80028e0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d079      	beq.n	80027c4 <HAL_RCC_OscConfig+0x760>
 80026d0:	2301      	movs	r3, #1
 80026d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80026e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	4bab      	ldr	r3, [pc, #684]	; (800299c <HAL_RCC_OscConfig+0x938>)
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	461a      	mov	r2, r3
 80026f6:	2301      	movs	r3, #1
 80026f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fa:	f7fe f971 	bl	80009e0 <HAL_GetTick>
 80026fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002702:	e00a      	b.n	800271a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002704:	f7fe f96c 	bl	80009e0 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d902      	bls.n	800271a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	f000 bcdb 	b.w	80030d0 <HAL_RCC_OscConfig+0x106c>
 800271a:	2302      	movs	r3, #2
 800271c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002724:	fa93 f3a3 	rbit	r3, r3
 8002728:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800272c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002730:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002734:	2202      	movs	r2, #2
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	fa93 f2a3 	rbit	r2, r3
 8002746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002758:	2202      	movs	r2, #2
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	fa93 f2a3 	rbit	r2, r3
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002772:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002774:	4b88      	ldr	r3, [pc, #544]	; (8002998 <HAL_RCC_OscConfig+0x934>)
 8002776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002780:	2102      	movs	r1, #2
 8002782:	6019      	str	r1, [r3, #0]
 8002784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002788:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	fa93 f1a3 	rbit	r1, r3
 8002792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002796:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800279a:	6019      	str	r1, [r3, #0]
  return result;
 800279c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2101      	movs	r1, #1
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0a0      	beq.n	8002704 <HAL_RCC_OscConfig+0x6a0>
 80027c2:	e08d      	b.n	80028e0 <HAL_RCC_OscConfig+0x87c>
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	fa93 f2a3 	rbit	r2, r3
 80027de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80027e6:	601a      	str	r2, [r3, #0]
  return result;
 80027e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80027f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b68      	ldr	r3, [pc, #416]	; (800299c <HAL_RCC_OscConfig+0x938>)
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	461a      	mov	r2, r3
 8002802:	2300      	movs	r3, #0
 8002804:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002806:	f7fe f8eb 	bl	80009e0 <HAL_GetTick>
 800280a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280e:	e00a      	b.n	8002826 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002810:	f7fe f8e6 	bl	80009e0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d902      	bls.n	8002826 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	f000 bc55 	b.w	80030d0 <HAL_RCC_OscConfig+0x106c>
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800282e:	2202      	movs	r2, #2
 8002830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	fa93 f2a3 	rbit	r2, r3
 8002840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002844:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002852:	2202      	movs	r2, #2
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	fa93 f2a3 	rbit	r2, r3
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002876:	2202      	movs	r2, #2
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	fa93 f2a3 	rbit	r2, r3
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002890:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002892:	4b41      	ldr	r3, [pc, #260]	; (8002998 <HAL_RCC_OscConfig+0x934>)
 8002894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800289e:	2102      	movs	r1, #2
 80028a0:	6019      	str	r1, [r3, #0]
 80028a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	fa93 f1a3 	rbit	r1, r3
 80028b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80028b8:	6019      	str	r1, [r3, #0]
  return result;
 80028ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	2101      	movs	r1, #1
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d197      	bne.n	8002810 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 81a1 	beq.w	8002c38 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fc:	4b26      	ldr	r3, [pc, #152]	; (8002998 <HAL_RCC_OscConfig+0x934>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d116      	bne.n	8002936 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002908:	4b23      	ldr	r3, [pc, #140]	; (8002998 <HAL_RCC_OscConfig+0x934>)
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	4a22      	ldr	r2, [pc, #136]	; (8002998 <HAL_RCC_OscConfig+0x934>)
 800290e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002912:	61d3      	str	r3, [r2, #28]
 8002914:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_RCC_OscConfig+0x934>)
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800291c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002920:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800292e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002936:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <HAL_RCC_OscConfig+0x93c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d11a      	bne.n	8002978 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002942:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <HAL_RCC_OscConfig+0x93c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <HAL_RCC_OscConfig+0x93c>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294e:	f7fe f847 	bl	80009e0 <HAL_GetTick>
 8002952:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002956:	e009      	b.n	800296c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002958:	f7fe f842 	bl	80009e0 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b64      	cmp	r3, #100	; 0x64
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e3b1      	b.n	80030d0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <HAL_RCC_OscConfig+0x93c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ef      	beq.n	8002958 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d10d      	bne.n	80029a4 <HAL_RCC_OscConfig+0x940>
 8002988:	4b03      	ldr	r3, [pc, #12]	; (8002998 <HAL_RCC_OscConfig+0x934>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4a02      	ldr	r2, [pc, #8]	; (8002998 <HAL_RCC_OscConfig+0x934>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6213      	str	r3, [r2, #32]
 8002994:	e03c      	b.n	8002a10 <HAL_RCC_OscConfig+0x9ac>
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
 800299c:	10908120 	.word	0x10908120
 80029a0:	40007000 	.word	0x40007000
 80029a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10c      	bne.n	80029ce <HAL_RCC_OscConfig+0x96a>
 80029b4:	4bc1      	ldr	r3, [pc, #772]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4ac0      	ldr	r2, [pc, #768]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	6213      	str	r3, [r2, #32]
 80029c0:	4bbe      	ldr	r3, [pc, #760]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	4abd      	ldr	r2, [pc, #756]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 80029c6:	f023 0304 	bic.w	r3, r3, #4
 80029ca:	6213      	str	r3, [r2, #32]
 80029cc:	e020      	b.n	8002a10 <HAL_RCC_OscConfig+0x9ac>
 80029ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b05      	cmp	r3, #5
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x994>
 80029de:	4bb7      	ldr	r3, [pc, #732]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	4ab6      	ldr	r2, [pc, #728]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 80029e4:	f043 0304 	orr.w	r3, r3, #4
 80029e8:	6213      	str	r3, [r2, #32]
 80029ea:	4bb4      	ldr	r3, [pc, #720]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	4ab3      	ldr	r2, [pc, #716]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	6213      	str	r3, [r2, #32]
 80029f6:	e00b      	b.n	8002a10 <HAL_RCC_OscConfig+0x9ac>
 80029f8:	4bb0      	ldr	r3, [pc, #704]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	4aaf      	ldr	r2, [pc, #700]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 80029fe:	f023 0301 	bic.w	r3, r3, #1
 8002a02:	6213      	str	r3, [r2, #32]
 8002a04:	4bad      	ldr	r3, [pc, #692]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	4aac      	ldr	r2, [pc, #688]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 8002a0a:	f023 0304 	bic.w	r3, r3, #4
 8002a0e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8081 	beq.w	8002b24 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a22:	f7fd ffdd 	bl	80009e0 <HAL_GetTick>
 8002a26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2a:	e00b      	b.n	8002a44 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a2c:	f7fd ffd8 	bl	80009e0 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e345      	b.n	80030d0 <HAL_RCC_OscConfig+0x106c>
 8002a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a48:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a54:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	fa93 f2a3 	rbit	r2, r3
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a70:	2202      	movs	r2, #2
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	fa93 f2a3 	rbit	r2, r3
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a8a:	601a      	str	r2, [r3, #0]
  return result;
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a94:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	095b      	lsrs	r3, r3, #5
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f043 0302 	orr.w	r3, r3, #2
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d102      	bne.n	8002ab0 <HAL_RCC_OscConfig+0xa4c>
 8002aaa:	4b84      	ldr	r3, [pc, #528]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	e013      	b.n	8002ad8 <HAL_RCC_OscConfig+0xa74>
 8002ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ab8:	2202      	movs	r2, #2
 8002aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	fa93 f2a3 	rbit	r2, r3
 8002aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ace:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	4b79      	ldr	r3, [pc, #484]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002adc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	6011      	str	r1, [r2, #0]
 8002ae4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ae8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	fa92 f1a2 	rbit	r1, r2
 8002af2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002af6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002afa:	6011      	str	r1, [r2, #0]
  return result;
 8002afc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b00:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	fab2 f282 	clz	r2, r2
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f002 021f 	and.w	r2, r2, #31
 8002b16:	2101      	movs	r1, #1
 8002b18:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d084      	beq.n	8002a2c <HAL_RCC_OscConfig+0x9c8>
 8002b22:	e07f      	b.n	8002c24 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b24:	f7fd ff5c 	bl	80009e0 <HAL_GetTick>
 8002b28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2c:	e00b      	b.n	8002b46 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fd ff57 	bl	80009e0 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e2c4      	b.n	80030d0 <HAL_RCC_OscConfig+0x106c>
 8002b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002b4e:	2202      	movs	r2, #2
 8002b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	fa93 f2a3 	rbit	r2, r3
 8002b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b64:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b72:	2202      	movs	r2, #2
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	fa93 f2a3 	rbit	r2, r3
 8002b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b8c:	601a      	str	r2, [r3, #0]
  return result;
 8002b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b92:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b96:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f043 0302 	orr.w	r3, r3, #2
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d102      	bne.n	8002bb2 <HAL_RCC_OscConfig+0xb4e>
 8002bac:	4b43      	ldr	r3, [pc, #268]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	e013      	b.n	8002bda <HAL_RCC_OscConfig+0xb76>
 8002bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002bba:	2202      	movs	r2, #2
 8002bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	fa93 f2a3 	rbit	r2, r3
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bde:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002be2:	2102      	movs	r1, #2
 8002be4:	6011      	str	r1, [r2, #0]
 8002be6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	fa92 f1a2 	rbit	r1, r2
 8002bf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bf8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002bfc:	6011      	str	r1, [r2, #0]
  return result;
 8002bfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c02:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	fab2 f282 	clz	r2, r2
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	f002 021f 	and.w	r2, r2, #31
 8002c18:	2101      	movs	r1, #1
 8002c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d184      	bne.n	8002b2e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c24:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d105      	bne.n	8002c38 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2c:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	4a22      	ldr	r2, [pc, #136]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 8002c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c36:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 8242 	beq.w	80030ce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <HAL_RCC_OscConfig+0xc58>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	f000 8213 	beq.w	800307e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	f040 8162 	bne.w	8002f2e <HAL_RCC_OscConfig+0xeca>
 8002c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	fa93 f2a3 	rbit	r2, r3
 8002c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c8e:	601a      	str	r2, [r3, #0]
  return result;
 8002c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c94:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c98:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ca4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	461a      	mov	r2, r3
 8002cac:	2300      	movs	r3, #0
 8002cae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fd fe96 	bl	80009e0 <HAL_GetTick>
 8002cb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb8:	e00c      	b.n	8002cd4 <HAL_RCC_OscConfig+0xc70>
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fd fe8e 	bl	80009e0 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e1fd      	b.n	80030d0 <HAL_RCC_OscConfig+0x106c>
 8002cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002cdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ce0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	fa93 f2a3 	rbit	r2, r3
 8002cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002cf8:	601a      	str	r2, [r3, #0]
  return result;
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d04:	fab3 f383 	clz	r3, r3
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d102      	bne.n	8002d1e <HAL_RCC_OscConfig+0xcba>
 8002d18:	4bb0      	ldr	r3, [pc, #704]	; (8002fdc <HAL_RCC_OscConfig+0xf78>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	e027      	b.n	8002d6e <HAL_RCC_OscConfig+0xd0a>
 8002d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d22:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d30:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	fa93 f2a3 	rbit	r2, r3
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d48:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d56:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	fa93 f2a3 	rbit	r2, r3
 8002d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d64:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	4b9c      	ldr	r3, [pc, #624]	; (8002fdc <HAL_RCC_OscConfig+0xf78>)
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d72:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d76:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d7a:	6011      	str	r1, [r2, #0]
 8002d7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d80:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	fa92 f1a2 	rbit	r1, r2
 8002d8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d8e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d92:	6011      	str	r1, [r2, #0]
  return result;
 8002d94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d98:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	fab2 f282 	clz	r2, r2
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	f042 0220 	orr.w	r2, r2, #32
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	f002 021f 	and.w	r2, r2, #31
 8002dae:	2101      	movs	r1, #1
 8002db0:	fa01 f202 	lsl.w	r2, r1, r2
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d182      	bne.n	8002cc0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dba:	4b88      	ldr	r3, [pc, #544]	; (8002fdc <HAL_RCC_OscConfig+0xf78>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	430b      	orrs	r3, r1
 8002ddc:	497f      	ldr	r1, [pc, #508]	; (8002fdc <HAL_RCC_OscConfig+0xf78>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002dea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	fa93 f2a3 	rbit	r2, r3
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e06:	601a      	str	r2, [r3, #0]
  return result;
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e10:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	461a      	mov	r2, r3
 8002e24:	2301      	movs	r3, #1
 8002e26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fd fdda 	bl	80009e0 <HAL_GetTick>
 8002e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e30:	e009      	b.n	8002e46 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e32:	f7fd fdd5 	bl	80009e0 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e144      	b.n	80030d0 <HAL_RCC_OscConfig+0x106c>
 8002e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e58:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	fa93 f2a3 	rbit	r2, r3
 8002e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e66:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e6a:	601a      	str	r2, [r3, #0]
  return result;
 8002e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e70:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d102      	bne.n	8002e90 <HAL_RCC_OscConfig+0xe2c>
 8002e8a:	4b54      	ldr	r3, [pc, #336]	; (8002fdc <HAL_RCC_OscConfig+0xf78>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	e027      	b.n	8002ee0 <HAL_RCC_OscConfig+0xe7c>
 8002e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e94:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	fa93 f2a3 	rbit	r2, r3
 8002eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002ebe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	fa93 f2a3 	rbit	r2, r3
 8002ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	4b3f      	ldr	r3, [pc, #252]	; (8002fdc <HAL_RCC_OscConfig+0xf78>)
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ee4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ee8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002eec:	6011      	str	r1, [r2, #0]
 8002eee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ef2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	fa92 f1a2 	rbit	r1, r2
 8002efc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f00:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f04:	6011      	str	r1, [r2, #0]
  return result;
 8002f06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f0a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	fab2 f282 	clz	r2, r2
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	f042 0220 	orr.w	r2, r2, #32
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	f002 021f 	and.w	r2, r2, #31
 8002f20:	2101      	movs	r1, #1
 8002f22:	fa01 f202 	lsl.w	r2, r1, r2
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d082      	beq.n	8002e32 <HAL_RCC_OscConfig+0xdce>
 8002f2c:	e0cf      	b.n	80030ce <HAL_RCC_OscConfig+0x106a>
 8002f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f32:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f40:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	fa93 f2a3 	rbit	r2, r3
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f52:	601a      	str	r2, [r3, #0]
  return result;
 8002f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f58:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f5c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2300      	movs	r3, #0
 8002f72:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fd fd34 	bl	80009e0 <HAL_GetTick>
 8002f78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7c:	e009      	b.n	8002f92 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7fd fd2f 	bl	80009e0 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e09e      	b.n	80030d0 <HAL_RCC_OscConfig+0x106c>
 8002f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f96:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	fa93 f2a3 	rbit	r2, r3
 8002fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002fb6:	601a      	str	r2, [r3, #0]
  return result;
 8002fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002fc0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d104      	bne.n	8002fe0 <HAL_RCC_OscConfig+0xf7c>
 8002fd6:	4b01      	ldr	r3, [pc, #4]	; (8002fdc <HAL_RCC_OscConfig+0xf78>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	e029      	b.n	8003030 <HAL_RCC_OscConfig+0xfcc>
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002fe8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	fa93 f2a3 	rbit	r2, r3
 8002ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003000:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800300e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003018:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	fa93 f2a3 	rbit	r2, r3
 8003022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003026:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <HAL_RCC_OscConfig+0x1078>)
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003034:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003038:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800303c:	6011      	str	r1, [r2, #0]
 800303e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003042:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	fa92 f1a2 	rbit	r1, r2
 800304c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003050:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003054:	6011      	str	r1, [r2, #0]
  return result;
 8003056:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800305a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	fab2 f282 	clz	r2, r2
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	f042 0220 	orr.w	r2, r2, #32
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	f002 021f 	and.w	r2, r2, #31
 8003070:	2101      	movs	r1, #1
 8003072:	fa01 f202 	lsl.w	r2, r1, r2
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d180      	bne.n	8002f7e <HAL_RCC_OscConfig+0xf1a>
 800307c:	e027      	b.n	80030ce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800307e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003082:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e01e      	b.n	80030d0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003092:	4b12      	ldr	r3, [pc, #72]	; (80030dc <HAL_RCC_OscConfig+0x1078>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800309a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800309e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d10b      	bne.n	80030ca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80030b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000

080030e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b09e      	sub	sp, #120	; 0x78
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e162      	b.n	80033be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f8:	4b90      	ldr	r3, [pc, #576]	; (800333c <HAL_RCC_ClockConfig+0x25c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d910      	bls.n	8003128 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b8d      	ldr	r3, [pc, #564]	; (800333c <HAL_RCC_ClockConfig+0x25c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 0207 	bic.w	r2, r3, #7
 800310e:	498b      	ldr	r1, [pc, #556]	; (800333c <HAL_RCC_ClockConfig+0x25c>)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b89      	ldr	r3, [pc, #548]	; (800333c <HAL_RCC_ClockConfig+0x25c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e14a      	b.n	80033be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003134:	4b82      	ldr	r3, [pc, #520]	; (8003340 <HAL_RCC_ClockConfig+0x260>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	497f      	ldr	r1, [pc, #508]	; (8003340 <HAL_RCC_ClockConfig+0x260>)
 8003142:	4313      	orrs	r3, r2
 8003144:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 80dc 	beq.w	800330c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d13c      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xf6>
 800315c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003160:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800316a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316c:	fab3 f383 	clz	r3, r3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b01      	cmp	r3, #1
 800317e:	d102      	bne.n	8003186 <HAL_RCC_ClockConfig+0xa6>
 8003180:	4b6f      	ldr	r3, [pc, #444]	; (8003340 <HAL_RCC_ClockConfig+0x260>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	e00f      	b.n	80031a6 <HAL_RCC_ClockConfig+0xc6>
 8003186:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800318a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	667b      	str	r3, [r7, #100]	; 0x64
 8003194:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003198:	663b      	str	r3, [r7, #96]	; 0x60
 800319a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031a2:	4b67      	ldr	r3, [pc, #412]	; (8003340 <HAL_RCC_ClockConfig+0x260>)
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80031ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031ae:	fa92 f2a2 	rbit	r2, r2
 80031b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80031b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031b6:	fab2 f282 	clz	r2, r2
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	f042 0220 	orr.w	r2, r2, #32
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	f002 021f 	and.w	r2, r2, #31
 80031c6:	2101      	movs	r1, #1
 80031c8:	fa01 f202 	lsl.w	r2, r1, r2
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d17b      	bne.n	80032ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e0f3      	b.n	80033be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d13c      	bne.n	8003258 <HAL_RCC_ClockConfig+0x178>
 80031de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d102      	bne.n	8003208 <HAL_RCC_ClockConfig+0x128>
 8003202:	4b4f      	ldr	r3, [pc, #316]	; (8003340 <HAL_RCC_ClockConfig+0x260>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	e00f      	b.n	8003228 <HAL_RCC_ClockConfig+0x148>
 8003208:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800320c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003210:	fa93 f3a3 	rbit	r3, r3
 8003214:	647b      	str	r3, [r7, #68]	; 0x44
 8003216:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800321a:	643b      	str	r3, [r7, #64]	; 0x40
 800321c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003224:	4b46      	ldr	r3, [pc, #280]	; (8003340 <HAL_RCC_ClockConfig+0x260>)
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800322c:	63ba      	str	r2, [r7, #56]	; 0x38
 800322e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003230:	fa92 f2a2 	rbit	r2, r2
 8003234:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003238:	fab2 f282 	clz	r2, r2
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	f042 0220 	orr.w	r2, r2, #32
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	f002 021f 	and.w	r2, r2, #31
 8003248:	2101      	movs	r1, #1
 800324a:	fa01 f202 	lsl.w	r2, r1, r2
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d13a      	bne.n	80032ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0b2      	b.n	80033be <HAL_RCC_ClockConfig+0x2de>
 8003258:	2302      	movs	r3, #2
 800325a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003266:	fab3 f383 	clz	r3, r3
 800326a:	b2db      	uxtb	r3, r3
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	d102      	bne.n	8003280 <HAL_RCC_ClockConfig+0x1a0>
 800327a:	4b31      	ldr	r3, [pc, #196]	; (8003340 <HAL_RCC_ClockConfig+0x260>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	e00d      	b.n	800329c <HAL_RCC_ClockConfig+0x1bc>
 8003280:	2302      	movs	r3, #2
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
 800328c:	2302      	movs	r3, #2
 800328e:	623b      	str	r3, [r7, #32]
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	4b29      	ldr	r3, [pc, #164]	; (8003340 <HAL_RCC_ClockConfig+0x260>)
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	2202      	movs	r2, #2
 800329e:	61ba      	str	r2, [r7, #24]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	fa92 f2a2 	rbit	r2, r2
 80032a6:	617a      	str	r2, [r7, #20]
  return result;
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	fab2 f282 	clz	r2, r2
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	f042 0220 	orr.w	r2, r2, #32
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	f002 021f 	and.w	r2, r2, #31
 80032ba:	2101      	movs	r1, #1
 80032bc:	fa01 f202 	lsl.w	r2, r1, r2
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e079      	b.n	80033be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <HAL_RCC_ClockConfig+0x260>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	491a      	ldr	r1, [pc, #104]	; (8003340 <HAL_RCC_ClockConfig+0x260>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032dc:	f7fd fb80 	bl	80009e0 <HAL_GetTick>
 80032e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7fd fb7c 	bl	80009e0 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e061      	b.n	80033be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_RCC_ClockConfig+0x260>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 020c 	and.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1eb      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <HAL_RCC_ClockConfig+0x25c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d214      	bcs.n	8003344 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b08      	ldr	r3, [pc, #32]	; (800333c <HAL_RCC_ClockConfig+0x25c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 0207 	bic.w	r2, r3, #7
 8003322:	4906      	ldr	r1, [pc, #24]	; (800333c <HAL_RCC_ClockConfig+0x25c>)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b04      	ldr	r3, [pc, #16]	; (800333c <HAL_RCC_ClockConfig+0x25c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d005      	beq.n	8003344 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e040      	b.n	80033be <HAL_RCC_ClockConfig+0x2de>
 800333c:	40022000 	.word	0x40022000
 8003340:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003350:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <HAL_RCC_ClockConfig+0x2e8>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	491a      	ldr	r1, [pc, #104]	; (80033c8 <HAL_RCC_ClockConfig+0x2e8>)
 800335e:	4313      	orrs	r3, r2
 8003360:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d009      	beq.n	8003382 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800336e:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <HAL_RCC_ClockConfig+0x2e8>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4912      	ldr	r1, [pc, #72]	; (80033c8 <HAL_RCC_ClockConfig+0x2e8>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003382:	f000 f829 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003386:	4601      	mov	r1, r0
 8003388:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <HAL_RCC_ClockConfig+0x2e8>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003390:	22f0      	movs	r2, #240	; 0xf0
 8003392:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	fa92 f2a2 	rbit	r2, r2
 800339a:	60fa      	str	r2, [r7, #12]
  return result;
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	fab2 f282 	clz	r2, r2
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	40d3      	lsrs	r3, r2
 80033a6:	4a09      	ldr	r2, [pc, #36]	; (80033cc <HAL_RCC_ClockConfig+0x2ec>)
 80033a8:	5cd3      	ldrb	r3, [r2, r3]
 80033aa:	fa21 f303 	lsr.w	r3, r1, r3
 80033ae:	4a08      	ldr	r2, [pc, #32]	; (80033d0 <HAL_RCC_ClockConfig+0x2f0>)
 80033b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <HAL_RCC_ClockConfig+0x2f4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd face 	bl	8000958 <HAL_InitTick>
  
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3778      	adds	r7, #120	; 0x78
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000
 80033cc:	08004bc0 	.word	0x08004bc0
 80033d0:	20000000 	.word	0x20000000
 80033d4:	20000004 	.word	0x20000004

080033d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	b08b      	sub	sp, #44	; 0x2c
 80033dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	2300      	movs	r3, #0
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	2300      	movs	r3, #0
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80033f2:	4b29      	ldr	r3, [pc, #164]	; (8003498 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d002      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0x30>
 8003402:	2b08      	cmp	r3, #8
 8003404:	d003      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x36>
 8003406:	e03c      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003408:	4b24      	ldr	r3, [pc, #144]	; (800349c <HAL_RCC_GetSysClockFreq+0xc4>)
 800340a:	623b      	str	r3, [r7, #32]
      break;
 800340c:	e03c      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003414:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003418:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	fa92 f2a2 	rbit	r2, r2
 8003420:	607a      	str	r2, [r7, #4]
  return result;
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	fab2 f282 	clz	r2, r2
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	40d3      	lsrs	r3, r2
 800342c:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800342e:	5cd3      	ldrb	r3, [r2, r3]
 8003430:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003432:	4b19      	ldr	r3, [pc, #100]	; (8003498 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	220f      	movs	r2, #15
 800343c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	fa92 f2a2 	rbit	r2, r2
 8003444:	60fa      	str	r2, [r7, #12]
  return result;
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	fab2 f282 	clz	r2, r2
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	40d3      	lsrs	r3, r2
 8003450:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003452:	5cd3      	ldrb	r3, [r2, r3]
 8003454:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003460:	4a0e      	ldr	r2, [pc, #56]	; (800349c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	fbb2 f2f3 	udiv	r2, r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
 8003470:	e004      	b.n	800347c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	623b      	str	r3, [r7, #32]
      break;
 8003480:	e002      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003484:	623b      	str	r3, [r7, #32]
      break;
 8003486:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003488:	6a3b      	ldr	r3, [r7, #32]
}
 800348a:	4618      	mov	r0, r3
 800348c:	372c      	adds	r7, #44	; 0x2c
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
 800349c:	007a1200 	.word	0x007a1200
 80034a0:	08004bd8 	.word	0x08004bd8
 80034a4:	08004be8 	.word	0x08004be8
 80034a8:	003d0900 	.word	0x003d0900

080034ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034b2:	681b      	ldr	r3, [r3, #0]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000000 	.word	0x20000000

080034c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034ca:	f7ff ffef 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 80034ce:	4601      	mov	r1, r0
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	fa92 f2a2 	rbit	r2, r2
 80034e4:	603a      	str	r2, [r7, #0]
  return result;
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	fab2 f282 	clz	r2, r2
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	40d3      	lsrs	r3, r2
 80034f0:	4a04      	ldr	r2, [pc, #16]	; (8003504 <HAL_RCC_GetPCLK1Freq+0x40>)
 80034f2:	5cd3      	ldrb	r3, [r2, r3]
 80034f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	08004bd0 	.word	0x08004bd0

08003508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800350e:	f7ff ffcd 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 8003512:	4601      	mov	r1, r0
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800351c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003520:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	fa92 f2a2 	rbit	r2, r2
 8003528:	603a      	str	r2, [r7, #0]
  return result;
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	fab2 f282 	clz	r2, r2
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	40d3      	lsrs	r3, r2
 8003534:	4a04      	ldr	r2, [pc, #16]	; (8003548 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003536:	5cd3      	ldrb	r3, [r2, r3]
 8003538:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40021000 	.word	0x40021000
 8003548:	08004bd0 	.word	0x08004bd0

0800354c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e049      	b.n	80035f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd f8e0 	bl	8000738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	4619      	mov	r1, r3
 800358a:	4610      	mov	r0, r2
 800358c:	f000 fb60 	bl	8003c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e049      	b.n	80036a0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f841 	bl	80036a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3304      	adds	r3, #4
 8003636:	4619      	mov	r1, r3
 8003638:	4610      	mov	r0, r2
 800363a:	f000 fb09 	bl	8003c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <HAL_TIM_PWM_Start+0x24>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	bf14      	ite	ne
 80036d8:	2301      	movne	r3, #1
 80036da:	2300      	moveq	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	e03c      	b.n	800375a <HAL_TIM_PWM_Start+0x9e>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d109      	bne.n	80036fa <HAL_TIM_PWM_Start+0x3e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	bf14      	ite	ne
 80036f2:	2301      	movne	r3, #1
 80036f4:	2300      	moveq	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	e02f      	b.n	800375a <HAL_TIM_PWM_Start+0x9e>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d109      	bne.n	8003714 <HAL_TIM_PWM_Start+0x58>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e022      	b.n	800375a <HAL_TIM_PWM_Start+0x9e>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b0c      	cmp	r3, #12
 8003718:	d109      	bne.n	800372e <HAL_TIM_PWM_Start+0x72>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b01      	cmp	r3, #1
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	e015      	b.n	800375a <HAL_TIM_PWM_Start+0x9e>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b10      	cmp	r3, #16
 8003732:	d109      	bne.n	8003748 <HAL_TIM_PWM_Start+0x8c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e008      	b.n	800375a <HAL_TIM_PWM_Start+0x9e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	bf14      	ite	ne
 8003754:	2301      	movne	r3, #1
 8003756:	2300      	moveq	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e088      	b.n	8003874 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d104      	bne.n	8003772 <HAL_TIM_PWM_Start+0xb6>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003770:	e023      	b.n	80037ba <HAL_TIM_PWM_Start+0xfe>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b04      	cmp	r3, #4
 8003776:	d104      	bne.n	8003782 <HAL_TIM_PWM_Start+0xc6>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003780:	e01b      	b.n	80037ba <HAL_TIM_PWM_Start+0xfe>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d104      	bne.n	8003792 <HAL_TIM_PWM_Start+0xd6>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003790:	e013      	b.n	80037ba <HAL_TIM_PWM_Start+0xfe>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b0c      	cmp	r3, #12
 8003796:	d104      	bne.n	80037a2 <HAL_TIM_PWM_Start+0xe6>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037a0:	e00b      	b.n	80037ba <HAL_TIM_PWM_Start+0xfe>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b10      	cmp	r3, #16
 80037a6:	d104      	bne.n	80037b2 <HAL_TIM_PWM_Start+0xf6>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b0:	e003      	b.n	80037ba <HAL_TIM_PWM_Start+0xfe>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2202      	movs	r2, #2
 80037b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2201      	movs	r2, #1
 80037c0:	6839      	ldr	r1, [r7, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fdfc 	bl	80043c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2b      	ldr	r2, [pc, #172]	; (800387c <HAL_TIM_PWM_Start+0x1c0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d00e      	beq.n	80037f0 <HAL_TIM_PWM_Start+0x134>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a2a      	ldr	r2, [pc, #168]	; (8003880 <HAL_TIM_PWM_Start+0x1c4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d009      	beq.n	80037f0 <HAL_TIM_PWM_Start+0x134>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a28      	ldr	r2, [pc, #160]	; (8003884 <HAL_TIM_PWM_Start+0x1c8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d004      	beq.n	80037f0 <HAL_TIM_PWM_Start+0x134>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a27      	ldr	r2, [pc, #156]	; (8003888 <HAL_TIM_PWM_Start+0x1cc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d101      	bne.n	80037f4 <HAL_TIM_PWM_Start+0x138>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <HAL_TIM_PWM_Start+0x13a>
 80037f4:	2300      	movs	r3, #0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d007      	beq.n	800380a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003808:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1b      	ldr	r2, [pc, #108]	; (800387c <HAL_TIM_PWM_Start+0x1c0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00e      	beq.n	8003832 <HAL_TIM_PWM_Start+0x176>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381c:	d009      	beq.n	8003832 <HAL_TIM_PWM_Start+0x176>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1a      	ldr	r2, [pc, #104]	; (800388c <HAL_TIM_PWM_Start+0x1d0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d004      	beq.n	8003832 <HAL_TIM_PWM_Start+0x176>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a14      	ldr	r2, [pc, #80]	; (8003880 <HAL_TIM_PWM_Start+0x1c4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d115      	bne.n	800385e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	4b15      	ldr	r3, [pc, #84]	; (8003890 <HAL_TIM_PWM_Start+0x1d4>)
 800383a:	4013      	ands	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b06      	cmp	r3, #6
 8003842:	d015      	beq.n	8003870 <HAL_TIM_PWM_Start+0x1b4>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384a:	d011      	beq.n	8003870 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385c:	e008      	b.n	8003870 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e000      	b.n	8003872 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003870:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40014000 	.word	0x40014000
 8003884:	40014400 	.word	0x40014400
 8003888:	40014800 	.word	0x40014800
 800388c:	40000400 	.word	0x40000400
 8003890:	00010007 	.word	0x00010007

08003894 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e0ff      	b.n	8003ab2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b14      	cmp	r3, #20
 80038be:	f200 80f0 	bhi.w	8003aa2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80038c2:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c8:	0800391d 	.word	0x0800391d
 80038cc:	08003aa3 	.word	0x08003aa3
 80038d0:	08003aa3 	.word	0x08003aa3
 80038d4:	08003aa3 	.word	0x08003aa3
 80038d8:	0800395d 	.word	0x0800395d
 80038dc:	08003aa3 	.word	0x08003aa3
 80038e0:	08003aa3 	.word	0x08003aa3
 80038e4:	08003aa3 	.word	0x08003aa3
 80038e8:	0800399f 	.word	0x0800399f
 80038ec:	08003aa3 	.word	0x08003aa3
 80038f0:	08003aa3 	.word	0x08003aa3
 80038f4:	08003aa3 	.word	0x08003aa3
 80038f8:	080039df 	.word	0x080039df
 80038fc:	08003aa3 	.word	0x08003aa3
 8003900:	08003aa3 	.word	0x08003aa3
 8003904:	08003aa3 	.word	0x08003aa3
 8003908:	08003a21 	.word	0x08003a21
 800390c:	08003aa3 	.word	0x08003aa3
 8003910:	08003aa3 	.word	0x08003aa3
 8003914:	08003aa3 	.word	0x08003aa3
 8003918:	08003a61 	.word	0x08003a61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fa0c 	bl	8003d40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0208 	orr.w	r2, r2, #8
 8003936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0204 	bic.w	r2, r2, #4
 8003946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6999      	ldr	r1, [r3, #24]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	619a      	str	r2, [r3, #24]
      break;
 800395a:	e0a5      	b.n	8003aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fa72 	bl	8003e4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6999      	ldr	r1, [r3, #24]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	021a      	lsls	r2, r3, #8
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	619a      	str	r2, [r3, #24]
      break;
 800399c:	e084      	b.n	8003aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fad1 	bl	8003f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69da      	ldr	r2, [r3, #28]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0208 	orr.w	r2, r2, #8
 80039b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0204 	bic.w	r2, r2, #4
 80039c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69d9      	ldr	r1, [r3, #28]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	61da      	str	r2, [r3, #28]
      break;
 80039dc:	e064      	b.n	8003aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fb2f 	bl	8004048 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69da      	ldr	r2, [r3, #28]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69d9      	ldr	r1, [r3, #28]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	021a      	lsls	r2, r3, #8
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	61da      	str	r2, [r3, #28]
      break;
 8003a1e:	e043      	b.n	8003aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fb72 	bl	8004110 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0208 	orr.w	r2, r2, #8
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0204 	bic.w	r2, r2, #4
 8003a4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a5e:	e023      	b.n	8003aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fbb0 	bl	80041cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	021a      	lsls	r2, r3, #8
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003aa0:	e002      	b.n	8003aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop

08003abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e0b6      	b.n	8003c46 <HAL_TIM_ConfigClockSource+0x18a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b14:	d03e      	beq.n	8003b94 <HAL_TIM_ConfigClockSource+0xd8>
 8003b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1a:	f200 8087 	bhi.w	8003c2c <HAL_TIM_ConfigClockSource+0x170>
 8003b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b22:	f000 8086 	beq.w	8003c32 <HAL_TIM_ConfigClockSource+0x176>
 8003b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2a:	d87f      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x170>
 8003b2c:	2b70      	cmp	r3, #112	; 0x70
 8003b2e:	d01a      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0xaa>
 8003b30:	2b70      	cmp	r3, #112	; 0x70
 8003b32:	d87b      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x170>
 8003b34:	2b60      	cmp	r3, #96	; 0x60
 8003b36:	d050      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x11e>
 8003b38:	2b60      	cmp	r3, #96	; 0x60
 8003b3a:	d877      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x170>
 8003b3c:	2b50      	cmp	r3, #80	; 0x50
 8003b3e:	d03c      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0xfe>
 8003b40:	2b50      	cmp	r3, #80	; 0x50
 8003b42:	d873      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x170>
 8003b44:	2b40      	cmp	r3, #64	; 0x40
 8003b46:	d058      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x13e>
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d86f      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x170>
 8003b4c:	2b30      	cmp	r3, #48	; 0x30
 8003b4e:	d064      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x15e>
 8003b50:	2b30      	cmp	r3, #48	; 0x30
 8003b52:	d86b      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x170>
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d060      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x15e>
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	d867      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x170>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d05c      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x15e>
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d05a      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x15e>
 8003b64:	e062      	b.n	8003c2c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6899      	ldr	r1, [r3, #8]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f000 fc03 	bl	8004380 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	609a      	str	r2, [r3, #8]
      break;
 8003b92:	e04f      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	6899      	ldr	r1, [r3, #8]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f000 fbec 	bl	8004380 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bb6:	609a      	str	r2, [r3, #8]
      break;
 8003bb8:	e03c      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6859      	ldr	r1, [r3, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f000 fb60 	bl	800428c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2150      	movs	r1, #80	; 0x50
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fbb9 	bl	800434a <TIM_ITRx_SetConfig>
      break;
 8003bd8:	e02c      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6859      	ldr	r1, [r3, #4]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f000 fb7f 	bl	80042ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2160      	movs	r1, #96	; 0x60
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fba9 	bl	800434a <TIM_ITRx_SetConfig>
      break;
 8003bf8:	e01c      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6859      	ldr	r1, [r3, #4]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	461a      	mov	r2, r3
 8003c08:	f000 fb40 	bl	800428c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2140      	movs	r1, #64	; 0x40
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fb99 	bl	800434a <TIM_ITRx_SetConfig>
      break;
 8003c18:	e00c      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f000 fb90 	bl	800434a <TIM_ITRx_SetConfig>
      break;
 8003c2a:	e003      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c30:	e000      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003c32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a32      	ldr	r2, [pc, #200]	; (8003d2c <TIM_Base_SetConfig+0xdc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d007      	beq.n	8003c78 <TIM_Base_SetConfig+0x28>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6e:	d003      	beq.n	8003c78 <TIM_Base_SetConfig+0x28>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a2f      	ldr	r2, [pc, #188]	; (8003d30 <TIM_Base_SetConfig+0xe0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d108      	bne.n	8003c8a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a27      	ldr	r2, [pc, #156]	; (8003d2c <TIM_Base_SetConfig+0xdc>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <TIM_Base_SetConfig+0x6a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c98:	d00f      	beq.n	8003cba <TIM_Base_SetConfig+0x6a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a24      	ldr	r2, [pc, #144]	; (8003d30 <TIM_Base_SetConfig+0xe0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00b      	beq.n	8003cba <TIM_Base_SetConfig+0x6a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <TIM_Base_SetConfig+0xe4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d007      	beq.n	8003cba <TIM_Base_SetConfig+0x6a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a22      	ldr	r2, [pc, #136]	; (8003d38 <TIM_Base_SetConfig+0xe8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d003      	beq.n	8003cba <TIM_Base_SetConfig+0x6a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a21      	ldr	r2, [pc, #132]	; (8003d3c <TIM_Base_SetConfig+0xec>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d108      	bne.n	8003ccc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a0e      	ldr	r2, [pc, #56]	; (8003d2c <TIM_Base_SetConfig+0xdc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00b      	beq.n	8003d10 <TIM_Base_SetConfig+0xc0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a0e      	ldr	r2, [pc, #56]	; (8003d34 <TIM_Base_SetConfig+0xe4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d007      	beq.n	8003d10 <TIM_Base_SetConfig+0xc0>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a0d      	ldr	r2, [pc, #52]	; (8003d38 <TIM_Base_SetConfig+0xe8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d003      	beq.n	8003d10 <TIM_Base_SetConfig+0xc0>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a0c      	ldr	r2, [pc, #48]	; (8003d3c <TIM_Base_SetConfig+0xec>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d103      	bne.n	8003d18 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	615a      	str	r2, [r3, #20]
}
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40014000 	.word	0x40014000
 8003d38:	40014400 	.word	0x40014400
 8003d3c:	40014800 	.word	0x40014800

08003d40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f023 0201 	bic.w	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0303 	bic.w	r3, r3, #3
 8003d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f023 0302 	bic.w	r3, r3, #2
 8003d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a28      	ldr	r2, [pc, #160]	; (8003e3c <TIM_OC1_SetConfig+0xfc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00b      	beq.n	8003db8 <TIM_OC1_SetConfig+0x78>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a27      	ldr	r2, [pc, #156]	; (8003e40 <TIM_OC1_SetConfig+0x100>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d007      	beq.n	8003db8 <TIM_OC1_SetConfig+0x78>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a26      	ldr	r2, [pc, #152]	; (8003e44 <TIM_OC1_SetConfig+0x104>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_OC1_SetConfig+0x78>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a25      	ldr	r2, [pc, #148]	; (8003e48 <TIM_OC1_SetConfig+0x108>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d10c      	bne.n	8003dd2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f023 0308 	bic.w	r3, r3, #8
 8003dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f023 0304 	bic.w	r3, r3, #4
 8003dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a19      	ldr	r2, [pc, #100]	; (8003e3c <TIM_OC1_SetConfig+0xfc>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00b      	beq.n	8003df2 <TIM_OC1_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a18      	ldr	r2, [pc, #96]	; (8003e40 <TIM_OC1_SetConfig+0x100>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d007      	beq.n	8003df2 <TIM_OC1_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <TIM_OC1_SetConfig+0x104>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d003      	beq.n	8003df2 <TIM_OC1_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <TIM_OC1_SetConfig+0x108>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d111      	bne.n	8003e16 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	621a      	str	r2, [r3, #32]
}
 8003e30:	bf00      	nop
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40014000 	.word	0x40014000
 8003e44:	40014400 	.word	0x40014400
 8003e48:	40014800 	.word	0x40014800

08003e4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f023 0210 	bic.w	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f023 0320 	bic.w	r3, r3, #32
 8003e9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a24      	ldr	r2, [pc, #144]	; (8003f3c <TIM_OC2_SetConfig+0xf0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d10d      	bne.n	8003ecc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a1b      	ldr	r2, [pc, #108]	; (8003f3c <TIM_OC2_SetConfig+0xf0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00b      	beq.n	8003eec <TIM_OC2_SetConfig+0xa0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a1a      	ldr	r2, [pc, #104]	; (8003f40 <TIM_OC2_SetConfig+0xf4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d007      	beq.n	8003eec <TIM_OC2_SetConfig+0xa0>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a19      	ldr	r2, [pc, #100]	; (8003f44 <TIM_OC2_SetConfig+0xf8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_OC2_SetConfig+0xa0>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a18      	ldr	r2, [pc, #96]	; (8003f48 <TIM_OC2_SetConfig+0xfc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d113      	bne.n	8003f14 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ef2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003efa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	621a      	str	r2, [r3, #32]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40012c00 	.word	0x40012c00
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800

08003f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a23      	ldr	r2, [pc, #140]	; (8004038 <TIM_OC3_SetConfig+0xec>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d10d      	bne.n	8003fca <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fc8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a1a      	ldr	r2, [pc, #104]	; (8004038 <TIM_OC3_SetConfig+0xec>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00b      	beq.n	8003fea <TIM_OC3_SetConfig+0x9e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a19      	ldr	r2, [pc, #100]	; (800403c <TIM_OC3_SetConfig+0xf0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d007      	beq.n	8003fea <TIM_OC3_SetConfig+0x9e>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a18      	ldr	r2, [pc, #96]	; (8004040 <TIM_OC3_SetConfig+0xf4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d003      	beq.n	8003fea <TIM_OC3_SetConfig+0x9e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a17      	ldr	r2, [pc, #92]	; (8004044 <TIM_OC3_SetConfig+0xf8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d113      	bne.n	8004012 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	621a      	str	r2, [r3, #32]
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40014000 	.word	0x40014000
 8004040:	40014400 	.word	0x40014400
 8004044:	40014800 	.word	0x40014800

08004048 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	031b      	lsls	r3, r3, #12
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <TIM_OC4_SetConfig+0xb8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00b      	beq.n	80040c4 <TIM_OC4_SetConfig+0x7c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a15      	ldr	r2, [pc, #84]	; (8004104 <TIM_OC4_SetConfig+0xbc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d007      	beq.n	80040c4 <TIM_OC4_SetConfig+0x7c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a14      	ldr	r2, [pc, #80]	; (8004108 <TIM_OC4_SetConfig+0xc0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_OC4_SetConfig+0x7c>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a13      	ldr	r2, [pc, #76]	; (800410c <TIM_OC4_SetConfig+0xc4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d109      	bne.n	80040d8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	019b      	lsls	r3, r3, #6
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	621a      	str	r2, [r3, #32]
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40014000 	.word	0x40014000
 8004108:	40014400 	.word	0x40014400
 800410c:	40014800 	.word	0x40014800

08004110 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004154:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	041b      	lsls	r3, r3, #16
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a15      	ldr	r2, [pc, #84]	; (80041bc <TIM_OC5_SetConfig+0xac>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00b      	beq.n	8004182 <TIM_OC5_SetConfig+0x72>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a14      	ldr	r2, [pc, #80]	; (80041c0 <TIM_OC5_SetConfig+0xb0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d007      	beq.n	8004182 <TIM_OC5_SetConfig+0x72>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a13      	ldr	r2, [pc, #76]	; (80041c4 <TIM_OC5_SetConfig+0xb4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d003      	beq.n	8004182 <TIM_OC5_SetConfig+0x72>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <TIM_OC5_SetConfig+0xb8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d109      	bne.n	8004196 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004188:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	621a      	str	r2, [r3, #32]
}
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40012c00 	.word	0x40012c00
 80041c0:	40014000 	.word	0x40014000
 80041c4:	40014400 	.word	0x40014400
 80041c8:	40014800 	.word	0x40014800

080041cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	051b      	lsls	r3, r3, #20
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a16      	ldr	r2, [pc, #88]	; (800427c <TIM_OC6_SetConfig+0xb0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00b      	beq.n	8004240 <TIM_OC6_SetConfig+0x74>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a15      	ldr	r2, [pc, #84]	; (8004280 <TIM_OC6_SetConfig+0xb4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d007      	beq.n	8004240 <TIM_OC6_SetConfig+0x74>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a14      	ldr	r2, [pc, #80]	; (8004284 <TIM_OC6_SetConfig+0xb8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_OC6_SetConfig+0x74>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a13      	ldr	r2, [pc, #76]	; (8004288 <TIM_OC6_SetConfig+0xbc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d109      	bne.n	8004254 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004246:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	029b      	lsls	r3, r3, #10
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	621a      	str	r2, [r3, #32]
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40012c00 	.word	0x40012c00
 8004280:	40014000 	.word	0x40014000
 8004284:	40014400 	.word	0x40014400
 8004288:	40014800 	.word	0x40014800

0800428c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	f023 0201 	bic.w	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f023 030a 	bic.w	r3, r3, #10
 80042c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	621a      	str	r2, [r3, #32]
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b087      	sub	sp, #28
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f023 0210 	bic.w	r2, r3, #16
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004314:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	031b      	lsls	r3, r3, #12
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004326:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004360:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	f043 0307 	orr.w	r3, r3, #7
 800436c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	609a      	str	r2, [r3, #8]
}
 8004374:	bf00      	nop
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800439a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	021a      	lsls	r2, r3, #8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	609a      	str	r2, [r3, #8]
}
 80043b4:	bf00      	nop
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f003 031f 	and.w	r3, r3, #31
 80043d2:	2201      	movs	r2, #1
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a1a      	ldr	r2, [r3, #32]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	43db      	mvns	r3, r3
 80043e2:	401a      	ands	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a1a      	ldr	r2, [r3, #32]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 031f 	and.w	r3, r3, #31
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	fa01 f303 	lsl.w	r3, r1, r3
 80043f8:	431a      	orrs	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004420:	2302      	movs	r3, #2
 8004422:	e054      	b.n	80044ce <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a24      	ldr	r2, [pc, #144]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d108      	bne.n	8004460 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004454:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004466:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a17      	ldr	r2, [pc, #92]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00e      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448c:	d009      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a13      	ldr	r2, [pc, #76]	; (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d004      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a11      	ldr	r2, [pc, #68]	; (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d10c      	bne.n	80044bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40012c00 	.word	0x40012c00
 80044e0:	40000400 	.word	0x40000400
 80044e4:	40014000 	.word	0x40014000

080044e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e040      	b.n	800457c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fc f966 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2224      	movs	r2, #36	; 0x24
 8004514:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0201 	bic.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f82c 	bl	8004584 <UART_SetConfig>
 800452c:	4603      	mov	r3, r0
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e022      	b.n	800457c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f956 	bl	80047f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004552:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004562:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f9dd 	bl	8004934 <UART_CheckIdleState>
 800457a:	4603      	mov	r3, r0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4b8a      	ldr	r3, [pc, #552]	; (80047d8 <UART_SetConfig+0x254>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	6979      	ldr	r1, [r7, #20]
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a78      	ldr	r2, [pc, #480]	; (80047dc <UART_SetConfig+0x258>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d120      	bne.n	8004642 <UART_SetConfig+0xbe>
 8004600:	4b77      	ldr	r3, [pc, #476]	; (80047e0 <UART_SetConfig+0x25c>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	2b03      	cmp	r3, #3
 800460a:	d817      	bhi.n	800463c <UART_SetConfig+0xb8>
 800460c:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <UART_SetConfig+0x90>)
 800460e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004612:	bf00      	nop
 8004614:	08004625 	.word	0x08004625
 8004618:	08004631 	.word	0x08004631
 800461c:	08004637 	.word	0x08004637
 8004620:	0800462b 	.word	0x0800462b
 8004624:	2300      	movs	r3, #0
 8004626:	77fb      	strb	r3, [r7, #31]
 8004628:	e01d      	b.n	8004666 <UART_SetConfig+0xe2>
 800462a:	2302      	movs	r3, #2
 800462c:	77fb      	strb	r3, [r7, #31]
 800462e:	e01a      	b.n	8004666 <UART_SetConfig+0xe2>
 8004630:	2304      	movs	r3, #4
 8004632:	77fb      	strb	r3, [r7, #31]
 8004634:	e017      	b.n	8004666 <UART_SetConfig+0xe2>
 8004636:	2308      	movs	r3, #8
 8004638:	77fb      	strb	r3, [r7, #31]
 800463a:	e014      	b.n	8004666 <UART_SetConfig+0xe2>
 800463c:	2310      	movs	r3, #16
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e011      	b.n	8004666 <UART_SetConfig+0xe2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a67      	ldr	r2, [pc, #412]	; (80047e4 <UART_SetConfig+0x260>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d102      	bne.n	8004652 <UART_SetConfig+0xce>
 800464c:	2300      	movs	r3, #0
 800464e:	77fb      	strb	r3, [r7, #31]
 8004650:	e009      	b.n	8004666 <UART_SetConfig+0xe2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a64      	ldr	r2, [pc, #400]	; (80047e8 <UART_SetConfig+0x264>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d102      	bne.n	8004662 <UART_SetConfig+0xde>
 800465c:	2300      	movs	r3, #0
 800465e:	77fb      	strb	r3, [r7, #31]
 8004660:	e001      	b.n	8004666 <UART_SetConfig+0xe2>
 8004662:	2310      	movs	r3, #16
 8004664:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800466e:	d15b      	bne.n	8004728 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004670:	7ffb      	ldrb	r3, [r7, #31]
 8004672:	2b08      	cmp	r3, #8
 8004674:	d827      	bhi.n	80046c6 <UART_SetConfig+0x142>
 8004676:	a201      	add	r2, pc, #4	; (adr r2, 800467c <UART_SetConfig+0xf8>)
 8004678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467c:	080046a1 	.word	0x080046a1
 8004680:	080046a9 	.word	0x080046a9
 8004684:	080046b1 	.word	0x080046b1
 8004688:	080046c7 	.word	0x080046c7
 800468c:	080046b7 	.word	0x080046b7
 8004690:	080046c7 	.word	0x080046c7
 8004694:	080046c7 	.word	0x080046c7
 8004698:	080046c7 	.word	0x080046c7
 800469c:	080046bf 	.word	0x080046bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a0:	f7fe ff10 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 80046a4:	61b8      	str	r0, [r7, #24]
        break;
 80046a6:	e013      	b.n	80046d0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046a8:	f7fe ff2e 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 80046ac:	61b8      	str	r0, [r7, #24]
        break;
 80046ae:	e00f      	b.n	80046d0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b0:	4b4e      	ldr	r3, [pc, #312]	; (80047ec <UART_SetConfig+0x268>)
 80046b2:	61bb      	str	r3, [r7, #24]
        break;
 80046b4:	e00c      	b.n	80046d0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046b6:	f7fe fe8f 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 80046ba:	61b8      	str	r0, [r7, #24]
        break;
 80046bc:	e008      	b.n	80046d0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046c2:	61bb      	str	r3, [r7, #24]
        break;
 80046c4:	e004      	b.n	80046d0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	77bb      	strb	r3, [r7, #30]
        break;
 80046ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d074      	beq.n	80047c0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	005a      	lsls	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	085b      	lsrs	r3, r3, #1
 80046e0:	441a      	add	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b0f      	cmp	r3, #15
 80046f2:	d916      	bls.n	8004722 <UART_SetConfig+0x19e>
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fa:	d212      	bcs.n	8004722 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f023 030f 	bic.w	r3, r3, #15
 8004704:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	b29b      	uxth	r3, r3
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	b29a      	uxth	r2, r3
 8004712:	89fb      	ldrh	r3, [r7, #14]
 8004714:	4313      	orrs	r3, r2
 8004716:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	89fa      	ldrh	r2, [r7, #14]
 800471e:	60da      	str	r2, [r3, #12]
 8004720:	e04e      	b.n	80047c0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	77bb      	strb	r3, [r7, #30]
 8004726:	e04b      	b.n	80047c0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004728:	7ffb      	ldrb	r3, [r7, #31]
 800472a:	2b08      	cmp	r3, #8
 800472c:	d827      	bhi.n	800477e <UART_SetConfig+0x1fa>
 800472e:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <UART_SetConfig+0x1b0>)
 8004730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004734:	08004759 	.word	0x08004759
 8004738:	08004761 	.word	0x08004761
 800473c:	08004769 	.word	0x08004769
 8004740:	0800477f 	.word	0x0800477f
 8004744:	0800476f 	.word	0x0800476f
 8004748:	0800477f 	.word	0x0800477f
 800474c:	0800477f 	.word	0x0800477f
 8004750:	0800477f 	.word	0x0800477f
 8004754:	08004777 	.word	0x08004777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004758:	f7fe feb4 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 800475c:	61b8      	str	r0, [r7, #24]
        break;
 800475e:	e013      	b.n	8004788 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004760:	f7fe fed2 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 8004764:	61b8      	str	r0, [r7, #24]
        break;
 8004766:	e00f      	b.n	8004788 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004768:	4b20      	ldr	r3, [pc, #128]	; (80047ec <UART_SetConfig+0x268>)
 800476a:	61bb      	str	r3, [r7, #24]
        break;
 800476c:	e00c      	b.n	8004788 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800476e:	f7fe fe33 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8004772:	61b8      	str	r0, [r7, #24]
        break;
 8004774:	e008      	b.n	8004788 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800477a:	61bb      	str	r3, [r7, #24]
        break;
 800477c:	e004      	b.n	8004788 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	77bb      	strb	r3, [r7, #30]
        break;
 8004786:	bf00      	nop
    }

    if (pclk != 0U)
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d018      	beq.n	80047c0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	085a      	lsrs	r2, r3, #1
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	441a      	add	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	2b0f      	cmp	r3, #15
 80047a8:	d908      	bls.n	80047bc <UART_SetConfig+0x238>
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b0:	d204      	bcs.n	80047bc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	60da      	str	r2, [r3, #12]
 80047ba:	e001      	b.n	80047c0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80047cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3720      	adds	r7, #32
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	efff69f3 	.word	0xefff69f3
 80047dc:	40013800 	.word	0x40013800
 80047e0:	40021000 	.word	0x40021000
 80047e4:	40004400 	.word	0x40004400
 80047e8:	40004800 	.word	0x40004800
 80047ec:	007a1200 	.word	0x007a1200

080047f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	f003 0310 	and.w	r3, r3, #16
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01a      	beq.n	8004906 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ee:	d10a      	bne.n	8004906 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	605a      	str	r2, [r3, #4]
  }
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af02      	add	r7, sp, #8
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004944:	f7fc f84c 	bl	80009e0 <HAL_GetTick>
 8004948:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b08      	cmp	r3, #8
 8004956:	d10e      	bne.n	8004976 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f82d 	bl	80049c6 <UART_WaitOnFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e023      	b.n	80049be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b04      	cmp	r3, #4
 8004982:	d10e      	bne.n	80049a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f817 	bl	80049c6 <UART_WaitOnFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e00d      	b.n	80049be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2220      	movs	r2, #32
 80049a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b09c      	sub	sp, #112	; 0x70
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	4613      	mov	r3, r2
 80049d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d6:	e0a5      	b.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049de:	f000 80a1 	beq.w	8004b24 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e2:	f7fb fffd 	bl	80009e0 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d302      	bcc.n	80049f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80049f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d13e      	bne.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a0c:	667b      	str	r3, [r7, #100]	; 0x64
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a18:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e6      	bne.n	80049f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3308      	adds	r3, #8
 8004a30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a34:	e853 3f00 	ldrex	r3, [r3]
 8004a38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	f023 0301 	bic.w	r3, r3, #1
 8004a40:	663b      	str	r3, [r7, #96]	; 0x60
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3308      	adds	r3, #8
 8004a48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a52:	e841 2300 	strex	r3, r2, [r1]
 8004a56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1e5      	bne.n	8004a2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2220      	movs	r2, #32
 8004a62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e067      	b.n	8004b46 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d04f      	beq.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a92:	d147      	bne.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
 8004abe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ac4:	e841 2300 	strex	r3, r2, [r1]
 8004ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e6      	bne.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	e853 3f00 	ldrex	r3, [r3]
 8004ade:	613b      	str	r3, [r7, #16]
   return(result);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f023 0301 	bic.w	r3, r3, #1
 8004ae6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3308      	adds	r3, #8
 8004aee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004af0:	623a      	str	r2, [r7, #32]
 8004af2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	69f9      	ldr	r1, [r7, #28]
 8004af6:	6a3a      	ldr	r2, [r7, #32]
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e5      	bne.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e010      	b.n	8004b46 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69da      	ldr	r2, [r3, #28]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	bf0c      	ite	eq
 8004b34:	2301      	moveq	r3, #1
 8004b36:	2300      	movne	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	f43f af4a 	beq.w	80049d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3770      	adds	r7, #112	; 0x70
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <__libc_init_array>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	4d0d      	ldr	r5, [pc, #52]	; (8004b88 <__libc_init_array+0x38>)
 8004b54:	4c0d      	ldr	r4, [pc, #52]	; (8004b8c <__libc_init_array+0x3c>)
 8004b56:	1b64      	subs	r4, r4, r5
 8004b58:	10a4      	asrs	r4, r4, #2
 8004b5a:	2600      	movs	r6, #0
 8004b5c:	42a6      	cmp	r6, r4
 8004b5e:	d109      	bne.n	8004b74 <__libc_init_array+0x24>
 8004b60:	4d0b      	ldr	r5, [pc, #44]	; (8004b90 <__libc_init_array+0x40>)
 8004b62:	4c0c      	ldr	r4, [pc, #48]	; (8004b94 <__libc_init_array+0x44>)
 8004b64:	f000 f820 	bl	8004ba8 <_init>
 8004b68:	1b64      	subs	r4, r4, r5
 8004b6a:	10a4      	asrs	r4, r4, #2
 8004b6c:	2600      	movs	r6, #0
 8004b6e:	42a6      	cmp	r6, r4
 8004b70:	d105      	bne.n	8004b7e <__libc_init_array+0x2e>
 8004b72:	bd70      	pop	{r4, r5, r6, pc}
 8004b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b78:	4798      	blx	r3
 8004b7a:	3601      	adds	r6, #1
 8004b7c:	e7ee      	b.n	8004b5c <__libc_init_array+0xc>
 8004b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b82:	4798      	blx	r3
 8004b84:	3601      	adds	r6, #1
 8004b86:	e7f2      	b.n	8004b6e <__libc_init_array+0x1e>
 8004b88:	08004bf8 	.word	0x08004bf8
 8004b8c:	08004bf8 	.word	0x08004bf8
 8004b90:	08004bf8 	.word	0x08004bf8
 8004b94:	08004bfc 	.word	0x08004bfc

08004b98 <memset>:
 8004b98:	4402      	add	r2, r0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d100      	bne.n	8004ba2 <memset+0xa>
 8004ba0:	4770      	bx	lr
 8004ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba6:	e7f9      	b.n	8004b9c <memset+0x4>

08004ba8 <_init>:
 8004ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004baa:	bf00      	nop
 8004bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bae:	bc08      	pop	{r3}
 8004bb0:	469e      	mov	lr, r3
 8004bb2:	4770      	bx	lr

08004bb4 <_fini>:
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb6:	bf00      	nop
 8004bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bba:	bc08      	pop	{r3}
 8004bbc:	469e      	mov	lr, r3
 8004bbe:	4770      	bx	lr
