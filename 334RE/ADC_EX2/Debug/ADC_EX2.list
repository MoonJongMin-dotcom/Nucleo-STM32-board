
ADC_EX2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000402c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041ec  080041ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080041ec  080041ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041ec  080041ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000104  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000110  20000110  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a58e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000149e  00000000  00000000  0002a5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  0002ba68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000710  00000000  00000000  0002c1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ef39  00000000  00000000  0002c900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a5b6  00000000  00000000  0004b839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc660  00000000  00000000  00055def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011244f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f34  00000000  00000000  001124a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800419c 	.word	0x0800419c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800419c 	.word	0x0800419c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a08:	f000 fb14 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0c:	f000 f8aa 	bl	8000b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a10:	f000 f99c 	bl	8000d4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a14:	f000 f96a 	bl	8000cec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a18:	f000 f8e6 	bl	8000be8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // Calibrate The ADC On Power-Up For Better Accuracy
  if( HAL_ADCEx_Calibration_Start(&hadc1, ADC_CHANNEL_1) != HAL_OK ){
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4847      	ldr	r0, [pc, #284]	; (8000b3c <main+0x138>)
 8000a20:	f000 feb5 	bl	800178e <HAL_ADCEx_Calibration_Start>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <main+0x2a>
     	  Error_Handler();
 8000a2a:	f000 f9f5 	bl	8000e18 <Error_Handler>
  }
  if( HAL_ADCEx_Calibration_Start(&hadc1, ADC_CHANNEL_TEMPSENSOR) != HAL_OK ){
 8000a2e:	2110      	movs	r1, #16
 8000a30:	4842      	ldr	r0, [pc, #264]	; (8000b3c <main+0x138>)
 8000a32:	f000 feac 	bl	800178e <HAL_ADCEx_Calibration_Start>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <main+0x3c>
       	  Error_Handler();
 8000a3c:	f000 f9ec 	bl	8000e18 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000a40:	483e      	ldr	r0, [pc, #248]	; (8000b3c <main+0x138>)
 8000a42:	f000 fd13 	bl	800146c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000a46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a4a:	483c      	ldr	r0, [pc, #240]	; (8000b3c <main+0x138>)
 8000a4c:	f000 fdc4 	bl	80015d8 <HAL_ADC_PollForConversion>
	  adcVal[0] = HAL_ADC_GetValue(&hadc1);
 8000a50:	483a      	ldr	r0, [pc, #232]	; (8000b3c <main+0x138>)
 8000a52:	f000 fe8f 	bl	8001774 <HAL_ADC_GetValue>
 8000a56:	4603      	mov	r3, r0
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	4b39      	ldr	r3, [pc, #228]	; (8000b40 <main+0x13c>)
 8000a5c:	801a      	strh	r2, [r3, #0]

	  HAL_ADC_Start(&hadc1);
 8000a5e:	4837      	ldr	r0, [pc, #220]	; (8000b3c <main+0x138>)
 8000a60:	f000 fd04 	bl	800146c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a68:	4834      	ldr	r0, [pc, #208]	; (8000b3c <main+0x138>)
 8000a6a:	f000 fdb5 	bl	80015d8 <HAL_ADC_PollForConversion>
	  adcVal[1] = HAL_ADC_GetValue(&hadc1);
 8000a6e:	4833      	ldr	r0, [pc, #204]	; (8000b3c <main+0x138>)
 8000a70:	f000 fe80 	bl	8001774 <HAL_ADC_GetValue>
 8000a74:	4603      	mov	r3, r0
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <main+0x13c>)
 8000a7a:	805a      	strh	r2, [r3, #2]

	  vol1 = 3000 * adcVal[0] / 4096;
 8000a7c:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <main+0x13c>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a86:	fb02 f303 	mul.w	r3, r2, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	da01      	bge.n	8000a92 <main+0x8e>
 8000a8e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a92:	131b      	asrs	r3, r3, #12
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <main+0x140>)
 8000a98:	801a      	strh	r2, [r3, #0]
	  vol2 = 3000 * adcVal[1] / 4096;
 8000a9a:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <main+0x13c>)
 8000a9c:	885b      	ldrh	r3, [r3, #2]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000aa4:	fb02 f303 	mul.w	r3, r2, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	da01      	bge.n	8000ab0 <main+0xac>
 8000aac:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000ab0:	131b      	asrs	r3, r3, #12
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <main+0x144>)
 8000ab6:	801a      	strh	r2, [r3, #0]

	  /* LM35DZ 온도 = 전압(mV) / 10 */
	  temp1 = vol1 / 10.0;
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <main+0x140>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fcd5 	bl	800046c <__aeabi_i2d>
 8000ac2:	f04f 0200 	mov.w	r2, #0
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <main+0x148>)
 8000ac8:	f7ff fe64 	bl	8000794 <__aeabi_ddiv>
 8000acc:	4602      	mov	r2, r0
 8000ace:	460b      	mov	r3, r1
 8000ad0:	4610      	mov	r0, r2
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f7ff ff46 	bl	8000964 <__aeabi_d2f>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	4a1d      	ldr	r2, [pc, #116]	; (8000b50 <main+0x14c>)
 8000adc:	6013      	str	r3, [r2, #0]

	  /* 내장온도센서 = (Vsens - V25) / 2.5 + 25도 */
	  temp2 = ((float)vol2 - 760.0) / 2.5 + 25.0;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <main+0x144>)
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	ee07 3a90 	vmov	s15, r3
 8000ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aea:	ee17 0a90 	vmov	r0, s15
 8000aee:	f7ff fccf 	bl	8000490 <__aeabi_f2d>
 8000af2:	f04f 0200 	mov.w	r2, #0
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <main+0x150>)
 8000af8:	f7ff fb6a 	bl	80001d0 <__aeabi_dsub>
 8000afc:	4602      	mov	r2, r0
 8000afe:	460b      	mov	r3, r1
 8000b00:	4610      	mov	r0, r2
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 0200 	mov.w	r2, #0
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <main+0x154>)
 8000b0a:	f7ff fe43 	bl	8000794 <__aeabi_ddiv>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	460b      	mov	r3, r1
 8000b12:	4610      	mov	r0, r2
 8000b14:	4619      	mov	r1, r3
 8000b16:	f04f 0200 	mov.w	r2, #0
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <main+0x158>)
 8000b1c:	f7ff fb5a 	bl	80001d4 <__adddf3>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4610      	mov	r0, r2
 8000b26:	4619      	mov	r1, r3
 8000b28:	f7ff ff1c 	bl	8000964 <__aeabi_d2f>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a0c      	ldr	r2, [pc, #48]	; (8000b60 <main+0x15c>)
 8000b30:	6013      	str	r3, [r2, #0]

	  HAL_Delay(100);
 8000b32:	2064      	movs	r0, #100	; 0x64
 8000b34:	f000 fae4 	bl	8001100 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000b38:	e782      	b.n	8000a40 <main+0x3c>
 8000b3a:	bf00      	nop
 8000b3c:	20000028 	.word	0x20000028
 8000b40:	200000fc 	.word	0x200000fc
 8000b44:	20000100 	.word	0x20000100
 8000b48:	20000102 	.word	0x20000102
 8000b4c:	40240000 	.word	0x40240000
 8000b50:	20000104 	.word	0x20000104
 8000b54:	4087c000 	.word	0x4087c000
 8000b58:	40040000 	.word	0x40040000
 8000b5c:	40390000 	.word	0x40390000
 8000b60:	20000108 	.word	0x20000108

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b090      	sub	sp, #64	; 0x40
 8000b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	f107 0318 	add.w	r3, r7, #24
 8000b6e:	2228      	movs	r2, #40	; 0x28
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 fb0a 	bl	800418c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8e:	2310      	movs	r3, #16
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b92:	2302      	movs	r3, #2
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b96:	2300      	movs	r3, #0
 8000b98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b9a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 0318 	add.w	r3, r7, #24
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 fd25 	bl	80025f4 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bb0:	f000 f932 	bl	8000e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2102      	movs	r1, #2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fd4e 	bl	8003670 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000bda:	f000 f91d 	bl	8000e18 <Error_Handler>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3740      	adds	r7, #64	; 0x40
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
 8000c08:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c0a:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c12:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c1a:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c20:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c26:	4b30      	ldr	r3, [pc, #192]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000c2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000c34:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c40:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000c4c:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c4e:	2202      	movs	r2, #2
 8000c50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c52:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c5a:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c5c:	2204      	movs	r2, #4
 8000c5e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c6c:	481e      	ldr	r0, [pc, #120]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c6e:	f000 fa6b 	bl	8001148 <HAL_ADC_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c78:	f000 f8ce 	bl	8000e18 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	4818      	ldr	r0, [pc, #96]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000c88:	f001 f8b4 	bl	8001df4 <HAL_ADCEx_MultiModeConfigChannel>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000c92:	f000 f8c1 	bl	8000e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000cb4:	f000 fdde 	bl	8001874 <HAL_ADC_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000cbe:	f000 f8ab 	bl	8000e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <MX_ADC1_Init+0x100>)
 8000cd0:	f000 fdd0 	bl	8001874 <HAL_ADC_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000cda:	f000 f89d 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000028 	.word	0x20000028

08000cec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_USART2_UART_Init+0x58>)
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <MX_USART2_UART_Init+0x5c>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_USART2_UART_Init+0x58>)
 8000cf8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000cfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d30:	f002 fed4 	bl	8003adc <HAL_UART_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d3a:	f000 f86d 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000078 	.word	0x20000078
 8000d48:	40004400 	.word	0x40004400

08000d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d62:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <MX_GPIO_Init+0xc4>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	4a2a      	ldr	r2, [pc, #168]	; (8000e10 <MX_GPIO_Init+0xc4>)
 8000d68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d6c:	6153      	str	r3, [r2, #20]
 8000d6e:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <MX_GPIO_Init+0xc4>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d7a:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <MX_GPIO_Init+0xc4>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	4a24      	ldr	r2, [pc, #144]	; (8000e10 <MX_GPIO_Init+0xc4>)
 8000d80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d84:	6153      	str	r3, [r2, #20]
 8000d86:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <MX_GPIO_Init+0xc4>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <MX_GPIO_Init+0xc4>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	4a1e      	ldr	r2, [pc, #120]	; (8000e10 <MX_GPIO_Init+0xc4>)
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	6153      	str	r3, [r2, #20]
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <MX_GPIO_Init+0xc4>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <MX_GPIO_Init+0xc4>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <MX_GPIO_Init+0xc4>)
 8000db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db4:	6153      	str	r3, [r2, #20]
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <MX_GPIO_Init+0xc4>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dca:	f001 fbfb 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dd4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <MX_GPIO_Init+0xc8>)
 8000de6:	f001 fa7b 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dea:	2320      	movs	r3, #32
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e04:	f001 fa6c 	bl	80022e0 <HAL_GPIO_Init>

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	; 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40021000 	.word	0x40021000
 8000e14:	48000800 	.word	0x48000800

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <Error_Handler+0x8>
	...

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <HAL_MspInit+0x44>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <HAL_MspInit+0x44>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6193      	str	r3, [r2, #24]
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_MspInit+0x44>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_MspInit+0x44>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <HAL_MspInit+0x44>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	61d3      	str	r3, [r2, #28]
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_MspInit+0x44>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e5a:	2007      	movs	r0, #7
 8000e5c:	f001 fa0c 	bl	8002278 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40021000 	.word	0x40021000

08000e6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e8c:	d124      	bne.n	8000ed8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_ADC_MspInit+0x74>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <HAL_ADC_MspInit+0x74>)
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e98:	6153      	str	r3, [r2, #20]
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_ADC_MspInit+0x74>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_ADC_MspInit+0x74>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <HAL_ADC_MspInit+0x74>)
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	6153      	str	r3, [r2, #20]
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_ADC_MspInit+0x74>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed4:	f001 fa04 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <HAL_UART_MspInit+0x7c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d128      	bne.n	8000f58 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <HAL_UART_MspInit+0x80>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a16      	ldr	r2, [pc, #88]	; (8000f64 <HAL_UART_MspInit+0x80>)
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_UART_MspInit+0x80>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <HAL_UART_MspInit+0x80>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	4a10      	ldr	r2, [pc, #64]	; (8000f64 <HAL_UART_MspInit+0x80>)
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	6153      	str	r3, [r2, #20]
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_UART_MspInit+0x80>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f36:	230c      	movs	r3, #12
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f46:	2307      	movs	r3, #7
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f54:	f001 f9c4 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	; 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40004400 	.word	0x40004400
 8000f64:	40021000 	.word	0x40021000

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb4:	f000 f884 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <SystemInit+0x20>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <SystemInit+0x20>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001018 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <LoopForever+0x6>)
  ldr r1, =_edata
 8000fe6:	490e      	ldr	r1, [pc, #56]	; (8001020 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <LoopForever+0xe>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ffc:	4c0b      	ldr	r4, [pc, #44]	; (800102c <LoopForever+0x16>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800100a:	f7ff ffd7 	bl	8000fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800100e:	f003 f899 	bl	8004144 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001012:	f7ff fcf7 	bl	8000a04 <main>

08001016 <LoopForever>:

LoopForever:
    b LoopForever
 8001016:	e7fe      	b.n	8001016 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001018:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001024:	080041f4 	.word	0x080041f4
  ldr r2, =_sbss
 8001028:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800102c:	20000110 	.word	0x20000110

08001030 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC1_2_IRQHandler>
	...

08001034 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_Init+0x28>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_Init+0x28>)
 800103e:	f043 0310 	orr.w	r3, r3, #16
 8001042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001044:	2003      	movs	r0, #3
 8001046:	f001 f917 	bl	8002278 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f808 	bl	8001060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001050:	f7ff fee8 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40022000 	.word	0x40022000

08001060 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x54>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_InitTick+0x58>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001076:	fbb3 f3f1 	udiv	r3, r3, r1
 800107a:	fbb2 f3f3 	udiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f001 f921 	bl	80022c6 <HAL_SYSTICK_Config>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e00e      	b.n	80010ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d80a      	bhi.n	80010aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800109c:	f001 f8f7 	bl	800228e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a0:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_InitTick+0x5c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e000      	b.n	80010ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000004 	.word	0x20000004

080010c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008
 80010e4:	2000010c 	.word	0x2000010c

080010e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2000010c 	.word	0x2000010c

08001100 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff ffee 	bl	80010e8 <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001118:	d005      	beq.n	8001126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_Delay+0x44>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001126:	bf00      	nop
 8001128:	f7ff ffde 	bl	80010e8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d8f7      	bhi.n	8001128 <HAL_Delay+0x28>
  {
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000008 	.word	0x20000008

08001148 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b09a      	sub	sp, #104	; 0x68
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001156:	2300      	movs	r3, #0
 8001158:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e172      	b.n	800144e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	2b00      	cmp	r3, #0
 8001178:	d176      	bne.n	8001268 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	2b00      	cmp	r3, #0
 8001180:	d152      	bne.n	8001228 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff fe65 	bl	8000e6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d13b      	bne.n	8001228 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 ff49 	bl	8002048 <ADC_Disable>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d12f      	bne.n	8001228 <HAL_ADC_Init+0xe0>
 80011c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d12b      	bne.n	8001228 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011d8:	f023 0302 	bic.w	r3, r3, #2
 80011dc:	f043 0202 	orr.w	r2, r3, #2
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011f2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001202:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001204:	4b94      	ldr	r3, [pc, #592]	; (8001458 <HAL_ADC_Init+0x310>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a94      	ldr	r2, [pc, #592]	; (800145c <HAL_ADC_Init+0x314>)
 800120a:	fba2 2303 	umull	r2, r3, r2, r3
 800120e:	0c9a      	lsrs	r2, r3, #18
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800121a:	e002      	b.n	8001222 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	3b01      	subs	r3, #1
 8001220:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f9      	bne.n	800121c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d007      	beq.n	8001246 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001244:	d110      	bne.n	8001268 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f023 0312 	bic.w	r3, r3, #18
 800124e:	f043 0210 	orr.w	r2, r3, #16
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f043 0201 	orr.w	r2, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b00      	cmp	r3, #0
 8001272:	f040 80df 	bne.w	8001434 <HAL_ADC_Init+0x2ec>
 8001276:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800127a:	2b00      	cmp	r3, #0
 800127c:	f040 80da 	bne.w	8001434 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 80d2 	bne.w	8001434 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001298:	f043 0202 	orr.w	r2, r3, #2
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012a0:	4b6f      	ldr	r3, [pc, #444]	; (8001460 <HAL_ADC_Init+0x318>)
 80012a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ac:	d102      	bne.n	80012b4 <HAL_ADC_Init+0x16c>
 80012ae:	4b6d      	ldr	r3, [pc, #436]	; (8001464 <HAL_ADC_Init+0x31c>)
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	e002      	b.n	80012ba <HAL_ADC_Init+0x172>
 80012b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012b8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d108      	bne.n	80012da <HAL_ADC_Init+0x192>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_ADC_Init+0x192>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_ADC_Init+0x194>
 80012da:	2300      	movs	r3, #0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d11c      	bne.n	800131a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012e0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d010      	beq.n	8001308 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d107      	bne.n	8001302 <HAL_ADC_Init+0x1ba>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d101      	bne.n	8001302 <HAL_ADC_Init+0x1ba>
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_ADC_Init+0x1bc>
 8001302:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001304:	2b00      	cmp	r3, #0
 8001306:	d108      	bne.n	800131a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	431a      	orrs	r2, r3
 8001316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001318:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7e5b      	ldrb	r3, [r3, #25]
 800131e:	035b      	lsls	r3, r3, #13
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001324:	2a01      	cmp	r2, #1
 8001326:	d002      	beq.n	800132e <HAL_ADC_Init+0x1e6>
 8001328:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800132c:	e000      	b.n	8001330 <HAL_ADC_Init+0x1e8>
 800132e:	2200      	movs	r2, #0
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	4313      	orrs	r3, r2
 800133e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001340:	4313      	orrs	r3, r2
 8001342:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d11b      	bne.n	8001386 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7e5b      	ldrb	r3, [r3, #25]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d109      	bne.n	800136a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	3b01      	subs	r3, #1
 800135c:	045a      	lsls	r2, r3, #17
 800135e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001360:	4313      	orrs	r3, r2
 8001362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001366:	663b      	str	r3, [r7, #96]	; 0x60
 8001368:	e00d      	b.n	8001386 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001372:	f043 0220 	orr.w	r2, r3, #32
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f043 0201 	orr.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	2b01      	cmp	r3, #1
 800138c:	d007      	beq.n	800139e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	4313      	orrs	r3, r2
 8001398:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800139a:	4313      	orrs	r3, r2
 800139c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 030c 	and.w	r3, r3, #12
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d114      	bne.n	80013d6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013ba:	f023 0302 	bic.w	r3, r3, #2
 80013be:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7e1b      	ldrb	r3, [r3, #24]
 80013c4:	039a      	lsls	r2, r3, #14
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4313      	orrs	r3, r2
 80013d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013d2:	4313      	orrs	r3, r2
 80013d4:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <HAL_ADC_Init+0x320>)
 80013de:	4013      	ands	r3, r2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80013e6:	430b      	orrs	r3, r1
 80013e8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d10c      	bne.n	800140c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	f023 010f 	bic.w	r1, r3, #15
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	1e5a      	subs	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	631a      	str	r2, [r3, #48]	; 0x30
 800140a:	e007      	b.n	800141c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 020f 	bic.w	r2, r2, #15
 800141a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f023 0303 	bic.w	r3, r3, #3
 800142a:	f043 0201 	orr.w	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	641a      	str	r2, [r3, #64]	; 0x40
 8001432:	e00a      	b.n	800144a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f023 0312 	bic.w	r3, r3, #18
 800143c:	f043 0210 	orr.w	r2, r3, #16
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001444:	2301      	movs	r3, #1
 8001446:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800144a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800144e:	4618      	mov	r0, r3
 8001450:	3768      	adds	r7, #104	; 0x68
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000000 	.word	0x20000000
 800145c:	431bde83 	.word	0x431bde83
 8001460:	50000300 	.word	0x50000300
 8001464:	50000100 	.word	0x50000100
 8001468:	fff0c007 	.word	0xfff0c007

0800146c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	2b00      	cmp	r3, #0
 8001484:	f040 809c 	bne.w	80015c0 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800148e:	2b01      	cmp	r3, #1
 8001490:	d101      	bne.n	8001496 <HAL_ADC_Start+0x2a>
 8001492:	2302      	movs	r3, #2
 8001494:	e097      	b.n	80015c6 <HAL_ADC_Start+0x15a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 fd6e 	bl	8001f80 <ADC_Enable>
 80014a4:	4603      	mov	r3, r0
 80014a6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f040 8083 	bne.w	80015b6 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014c4:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <HAL_ADC_Start+0x164>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <HAL_ADC_Start+0x6e>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014d8:	d115      	bne.n	8001506 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d027      	beq.n	8001544 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001504:	e01e      	b.n	8001544 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800151a:	d004      	beq.n	8001526 <HAL_ADC_Start+0xba>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a2c      	ldr	r2, [pc, #176]	; (80015d4 <HAL_ADC_Start+0x168>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d10e      	bne.n	8001544 <HAL_ADC_Start+0xd8>
 8001526:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d007      	beq.n	8001544 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800153c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800154c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001550:	d106      	bne.n	8001560 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f023 0206 	bic.w	r2, r3, #6
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	645a      	str	r2, [r3, #68]	; 0x44
 800155e:	e002      	b.n	8001566 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	221c      	movs	r2, #28
 8001574:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <HAL_ADC_Start+0x164>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 031f 	and.w	r3, r3, #31
 800157e:	2b00      	cmp	r3, #0
 8001580:	d010      	beq.n	80015a4 <HAL_ADC_Start+0x138>
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <HAL_ADC_Start+0x164>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	2b05      	cmp	r3, #5
 800158c:	d00a      	beq.n	80015a4 <HAL_ADC_Start+0x138>
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_ADC_Start+0x164>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	2b09      	cmp	r3, #9
 8001598:	d004      	beq.n	80015a4 <HAL_ADC_Start+0x138>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015a2:	d10f      	bne.n	80015c4 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0204 	orr.w	r2, r2, #4
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	e006      	b.n	80015c4 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015be:	e001      	b.n	80015c4 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015c0:	2302      	movs	r3, #2
 80015c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	50000300 	.word	0x50000300
 80015d4:	50000100 	.word	0x50000100

080015d8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d102      	bne.n	80015f4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80015ee:	2308      	movs	r3, #8
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	e02e      	b.n	8001652 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015f4:	4b5e      	ldr	r3, [pc, #376]	; (8001770 <HAL_ADC_PollForConversion+0x198>)
 80015f6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	2b00      	cmp	r3, #0
 8001602:	d112      	bne.n	800162a <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b01      	cmp	r3, #1
 8001610:	d11d      	bne.n	800164e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f043 0220 	orr.w	r2, r3, #32
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e09d      	b.n	8001766 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f043 0220 	orr.w	r2, r3, #32
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e08b      	b.n	8001766 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800164e:	230c      	movs	r3, #12
 8001650:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001652:	4b47      	ldr	r3, [pc, #284]	; (8001770 <HAL_ADC_PollForConversion+0x198>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 031f 	and.w	r3, r3, #31
 800165a:	2b00      	cmp	r3, #0
 800165c:	d004      	beq.n	8001668 <HAL_ADC_PollForConversion+0x90>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001666:	d104      	bne.n	8001672 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	e003      	b.n	800167a <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001672:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800167a:	f7ff fd35 	bl	80010e8 <HAL_GetTick>
 800167e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001680:	e021      	b.n	80016c6 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001688:	d01d      	beq.n	80016c6 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d007      	beq.n	80016a0 <HAL_ADC_PollForConversion+0xc8>
 8001690:	f7ff fd2a 	bl	80010e8 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d212      	bcs.n	80016c6 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10b      	bne.n	80016c6 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f043 0204 	orr.w	r2, r3, #4
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e04f      	b.n	8001766 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0d6      	beq.n	8001682 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d131      	bne.n	8001752 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d12c      	bne.n	8001752 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b08      	cmp	r3, #8
 8001704:	d125      	bne.n	8001752 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d112      	bne.n	800173a <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d112      	bne.n	8001752 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	f043 0201 	orr.w	r2, r3, #1
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	641a      	str	r2, [r3, #64]	; 0x40
 8001738:	e00b      	b.n	8001752 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f043 0220 	orr.w	r2, r3, #32
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f043 0201 	orr.w	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d103      	bne.n	8001764 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	50000300 	.word	0x50000300

08001774 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_ADCEx_Calibration_Start+0x1c>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e05f      	b.n	800186a <HAL_ADCEx_Calibration_Start+0xdc>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fc48 	bl	8002048 <ADC_Disable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d14e      	bne.n	8001860 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80017d6:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d107      	bne.n	80017ee <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017ec:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017fc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80017fe:	f7ff fc73 	bl	80010e8 <HAL_GetTick>
 8001802:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001804:	e01c      	b.n	8001840 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001806:	f7ff fc6f 	bl	80010e8 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b0a      	cmp	r3, #10
 8001812:	d915      	bls.n	8001840 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800181e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001822:	d10d      	bne.n	8001840 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f023 0312 	bic.w	r3, r3, #18
 800182c:	f043 0210 	orr.w	r2, r3, #16
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e014      	b.n	800186a <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800184a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800184e:	d0da      	beq.n	8001806 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	f023 0303 	bic.w	r3, r3, #3
 8001858:	f043 0201 	orr.w	r2, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001874:	b480      	push	{r7}
 8001876:	b09b      	sub	sp, #108	; 0x6c
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x22>
 8001892:	2302      	movs	r3, #2
 8001894:	e2a4      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x56c>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 8288 	bne.w	8001dbe <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d81c      	bhi.n	80018f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	461a      	mov	r2, r3
 80018ca:	231f      	movs	r3, #31
 80018cc:	4093      	lsls	r3, r2
 80018ce:	43db      	mvns	r3, r3
 80018d0:	4019      	ands	r1, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fa00 f203 	lsl.w	r2, r0, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	631a      	str	r2, [r3, #48]	; 0x30
 80018ee:	e063      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b09      	cmp	r3, #9
 80018f6:	d81e      	bhi.n	8001936 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	3b1e      	subs	r3, #30
 800190c:	221f      	movs	r2, #31
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	4019      	ands	r1, r3
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	3b1e      	subs	r3, #30
 8001928:	fa00 f203 	lsl.w	r2, r0, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	635a      	str	r2, [r3, #52]	; 0x34
 8001934:	e040      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b0e      	cmp	r3, #14
 800193c:	d81e      	bhi.n	800197c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	3b3c      	subs	r3, #60	; 0x3c
 8001952:	221f      	movs	r2, #31
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	4019      	ands	r1, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	3b3c      	subs	r3, #60	; 0x3c
 800196e:	fa00 f203 	lsl.w	r2, r0, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	639a      	str	r2, [r3, #56]	; 0x38
 800197a:	e01d      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	3b5a      	subs	r3, #90	; 0x5a
 8001990:	221f      	movs	r2, #31
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	4019      	ands	r1, r3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	3b5a      	subs	r3, #90	; 0x5a
 80019ac:	fa00 f203 	lsl.w	r2, r0, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 80e5 	bne.w	8001b92 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b09      	cmp	r3, #9
 80019ce:	d91c      	bls.n	8001a0a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6999      	ldr	r1, [r3, #24]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	3b1e      	subs	r3, #30
 80019e2:	2207      	movs	r2, #7
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4019      	ands	r1, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	6898      	ldr	r0, [r3, #8]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	3b1e      	subs	r3, #30
 80019fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	619a      	str	r2, [r3, #24]
 8001a08:	e019      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6959      	ldr	r1, [r3, #20]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	2207      	movs	r2, #7
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	4019      	ands	r1, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	6898      	ldr	r0, [r3, #8]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	fa00 f203 	lsl.w	r2, r0, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	08db      	lsrs	r3, r3, #3
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d84f      	bhi.n	8001b00 <HAL_ADC_ConfigChannel+0x28c>
 8001a60:	a201      	add	r2, pc, #4	; (adr r2, 8001a68 <HAL_ADC_ConfigChannel+0x1f4>)
 8001a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a66:	bf00      	nop
 8001a68:	08001a79 	.word	0x08001a79
 8001a6c:	08001a9b 	.word	0x08001a9b
 8001a70:	08001abd 	.word	0x08001abd
 8001a74:	08001adf 	.word	0x08001adf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a7e:	4b94      	ldr	r3, [pc, #592]	; (8001cd0 <HAL_ADC_ConfigChannel+0x45c>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	0691      	lsls	r1, r2, #26
 8001a88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a96:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a98:	e07e      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001aa0:	4b8b      	ldr	r3, [pc, #556]	; (8001cd0 <HAL_ADC_ConfigChannel+0x45c>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	0691      	lsls	r1, r2, #26
 8001aaa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aac:	430a      	orrs	r2, r1
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ab8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001aba:	e06d      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ac2:	4b83      	ldr	r3, [pc, #524]	; (8001cd0 <HAL_ADC_ConfigChannel+0x45c>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	0691      	lsls	r1, r2, #26
 8001acc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ada:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001adc:	e05c      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ae4:	4b7a      	ldr	r3, [pc, #488]	; (8001cd0 <HAL_ADC_ConfigChannel+0x45c>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	0691      	lsls	r1, r2, #26
 8001aee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001af0:	430a      	orrs	r2, r1
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001afc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001afe:	e04b      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	069b      	lsls	r3, r3, #26
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d107      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b22:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	069b      	lsls	r3, r3, #26
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d107      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b46:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	069b      	lsls	r3, r3, #26
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d107      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b6a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	069b      	lsls	r3, r3, #26
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d10a      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b8e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001b90:	e001      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001b92:	bf00      	nop
 8001b94:	e000      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001b96:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d108      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x344>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x344>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_ADC_ConfigChannel+0x346>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 810a 	bne.w	8001dd4 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d00f      	beq.n	8001be8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	400a      	ands	r2, r1
 8001be2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001be6:	e049      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b09      	cmp	r3, #9
 8001c08:	d91c      	bls.n	8001c44 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6999      	ldr	r1, [r3, #24]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4613      	mov	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	3b1b      	subs	r3, #27
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4019      	ands	r1, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6898      	ldr	r0, [r3, #8]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	3b1b      	subs	r3, #27
 8001c36:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	619a      	str	r2, [r3, #24]
 8001c42:	e01b      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6959      	ldr	r1, [r3, #20]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	2207      	movs	r2, #7
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	4019      	ands	r1, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6898      	ldr	r0, [r3, #8]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	fa00 f203 	lsl.w	r2, r0, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_ADC_ConfigChannel+0x460>)
 8001c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b10      	cmp	r3, #16
 8001c86:	d105      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d015      	beq.n	8001cc0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c98:	2b11      	cmp	r3, #17
 8001c9a:	d105      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00b      	beq.n	8001cc0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001cac:	2b12      	cmp	r3, #18
 8001cae:	f040 8091 	bne.w	8001dd4 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f040 808a 	bne.w	8001dd4 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cc8:	d108      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x468>
 8001cca:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_ADC_ConfigChannel+0x464>)
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	e008      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x46e>
 8001cd0:	83fff000 	.word	0x83fff000
 8001cd4:	50000300 	.word	0x50000300
 8001cd8:	50000100 	.word	0x50000100
 8001cdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ce0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d108      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x48e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x48e>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x490>
 8001d02:	2300      	movs	r3, #0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d150      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d08:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d010      	beq.n	8001d30 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d107      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x4b6>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x4b6>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x4b8>
 8001d2a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d13c      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b10      	cmp	r3, #16
 8001d36:	d11d      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x500>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d40:	d118      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d4c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d4e:	4b27      	ldr	r3, [pc, #156]	; (8001dec <HAL_ADC_ConfigChannel+0x578>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a27      	ldr	r2, [pc, #156]	; (8001df0 <HAL_ADC_ConfigChannel+0x57c>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	0c9a      	lsrs	r2, r3, #18
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d64:	e002      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f9      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d72:	e02e      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b11      	cmp	r3, #17
 8001d7a:	d10b      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x520>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d84:	d106      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d90:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d92:	e01e      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b12      	cmp	r3, #18
 8001d9a:	d11a      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001da8:	e013      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f043 0220 	orr.w	r2, r3, #32
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001dbc:	e00a      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f043 0220 	orr.w	r2, r3, #32
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001dd0:	e000      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dd2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ddc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	376c      	adds	r7, #108	; 0x6c
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	20000000 	.word	0x20000000
 8001df0:	431bde83 	.word	0x431bde83

08001df4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b099      	sub	sp, #100	; 0x64
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e0c:	d102      	bne.n	8001e14 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001e0e:	4b5a      	ldr	r3, [pc, #360]	; (8001f78 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	e002      	b.n	8001e1a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001e14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e18:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0a2      	b.n	8001f6a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e09b      	b.n	8001f6a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d17f      	bne.n	8001f48 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d179      	bne.n	8001f48 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e54:	4b49      	ldr	r3, [pc, #292]	; (8001f7c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001e56:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d040      	beq.n	8001ee2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e72:	035b      	lsls	r3, r3, #13
 8001e74:	430b      	orrs	r3, r1
 8001e76:	431a      	orrs	r2, r3
 8001e78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e7a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d15c      	bne.n	8001f5c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d107      	bne.n	8001ebe <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001ebe:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d14b      	bne.n	8001f5c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ecc:	f023 030f 	bic.w	r3, r3, #15
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	6811      	ldr	r1, [r2, #0]
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	6892      	ldr	r2, [r2, #8]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	431a      	orrs	r2, r3
 8001edc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ede:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ee0:	e03c      	b.n	8001f5c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eec:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d108      	bne.n	8001f0e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d123      	bne.n	8001f5c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d107      	bne.n	8001f30 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001f30:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d112      	bne.n	8001f5c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f3e:	f023 030f 	bic.w	r3, r3, #15
 8001f42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f44:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f46:	e009      	b.n	8001f5c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f043 0220 	orr.w	r2, r3, #32
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001f5a:	e000      	b.n	8001f5e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f5c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3764      	adds	r7, #100	; 0x64
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	50000100 	.word	0x50000100
 8001f7c:	50000300 	.word	0x50000300

08001f80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d108      	bne.n	8001fac <ADC_Enable+0x2c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <ADC_Enable+0x2c>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <ADC_Enable+0x2e>
 8001fac:	2300      	movs	r3, #0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d143      	bne.n	800203a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	4b22      	ldr	r3, [pc, #136]	; (8002044 <ADC_Enable+0xc4>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00d      	beq.n	8001fdc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f043 0210 	orr.w	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e02f      	b.n	800203c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001fec:	f7ff f87c 	bl	80010e8 <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ff2:	e01b      	b.n	800202c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ff4:	f7ff f878 	bl	80010e8 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d914      	bls.n	800202c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d00d      	beq.n	800202c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f043 0210 	orr.w	r2, r3, #16
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	f043 0201 	orr.w	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e007      	b.n	800203c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d1dc      	bne.n	8001ff4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	8000003f 	.word	0x8000003f

08002048 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d108      	bne.n	8002074 <ADC_Disable+0x2c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <ADC_Disable+0x2c>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <ADC_Disable+0x2e>
 8002074:	2300      	movs	r3, #0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d047      	beq.n	800210a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 030d 	and.w	r3, r3, #13
 8002084:	2b01      	cmp	r3, #1
 8002086:	d10f      	bne.n	80020a8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0202 	orr.w	r2, r2, #2
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2203      	movs	r2, #3
 800209e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80020a0:	f7ff f822 	bl	80010e8 <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020a6:	e029      	b.n	80020fc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f043 0210 	orr.w	r2, r3, #16
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b8:	f043 0201 	orr.w	r2, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e023      	b.n	800210c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020c4:	f7ff f810 	bl	80010e8 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d914      	bls.n	80020fc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d10d      	bne.n	80020fc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f043 0210 	orr.w	r2, r3, #16
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f0:	f043 0201 	orr.w	r2, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e007      	b.n	800210c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b01      	cmp	r3, #1
 8002108:	d0dc      	beq.n	80020c4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002130:	4013      	ands	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800213c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002146:	4a04      	ldr	r2, [pc, #16]	; (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	60d3      	str	r3, [r2, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <__NVIC_GetPriorityGrouping+0x18>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f003 0307 	and.w	r3, r3, #7
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	; (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	; (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
         );
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002244:	d301      	bcc.n	800224a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002246:	2301      	movs	r3, #1
 8002248:	e00f      	b.n	800226a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <SysTick_Config+0x40>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002252:	210f      	movs	r1, #15
 8002254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002258:	f7ff ff8e 	bl	8002178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <SysTick_Config+0x40>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <SysTick_Config+0x40>)
 8002264:	2207      	movs	r2, #7
 8002266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	e000e010 	.word	0xe000e010

08002278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ff47 	bl	8002114 <__NVIC_SetPriorityGrouping>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a0:	f7ff ff5c 	bl	800215c <__NVIC_GetPriorityGrouping>
 80022a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7ff ff8e 	bl	80021cc <NVIC_EncodePriority>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff5d 	bl	8002178 <__NVIC_SetPriority>
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ffb0 	bl	8002234 <SysTick_Config>
 80022d4:	4603      	mov	r3, r0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ee:	e14e      	b.n	800258e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2101      	movs	r1, #1
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	4013      	ands	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8140 	beq.w	8002588 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d005      	beq.n	8002320 <HAL_GPIO_Init+0x40>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d130      	bne.n	8002382 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002356:	2201      	movs	r2, #1
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	f003 0201 	and.w	r2, r3, #1
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b03      	cmp	r3, #3
 800238c:	d017      	beq.n	80023be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	2203      	movs	r2, #3
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d123      	bne.n	8002412 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	08da      	lsrs	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3208      	adds	r2, #8
 80023d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	08da      	lsrs	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3208      	adds	r2, #8
 800240c:	6939      	ldr	r1, [r7, #16]
 800240e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0203 	and.w	r2, r3, #3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 809a 	beq.w	8002588 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002454:	4b55      	ldr	r3, [pc, #340]	; (80025ac <HAL_GPIO_Init+0x2cc>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	4a54      	ldr	r2, [pc, #336]	; (80025ac <HAL_GPIO_Init+0x2cc>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6193      	str	r3, [r2, #24]
 8002460:	4b52      	ldr	r3, [pc, #328]	; (80025ac <HAL_GPIO_Init+0x2cc>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800246c:	4a50      	ldr	r2, [pc, #320]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3302      	adds	r3, #2
 8002474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	220f      	movs	r2, #15
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002496:	d013      	beq.n	80024c0 <HAL_GPIO_Init+0x1e0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a46      	ldr	r2, [pc, #280]	; (80025b4 <HAL_GPIO_Init+0x2d4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d00d      	beq.n	80024bc <HAL_GPIO_Init+0x1dc>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a45      	ldr	r2, [pc, #276]	; (80025b8 <HAL_GPIO_Init+0x2d8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d007      	beq.n	80024b8 <HAL_GPIO_Init+0x1d8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a44      	ldr	r2, [pc, #272]	; (80025bc <HAL_GPIO_Init+0x2dc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d101      	bne.n	80024b4 <HAL_GPIO_Init+0x1d4>
 80024b0:	2303      	movs	r3, #3
 80024b2:	e006      	b.n	80024c2 <HAL_GPIO_Init+0x1e2>
 80024b4:	2305      	movs	r3, #5
 80024b6:	e004      	b.n	80024c2 <HAL_GPIO_Init+0x1e2>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e002      	b.n	80024c2 <HAL_GPIO_Init+0x1e2>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <HAL_GPIO_Init+0x1e2>
 80024c0:	2300      	movs	r3, #0
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	f002 0203 	and.w	r2, r2, #3
 80024c8:	0092      	lsls	r2, r2, #2
 80024ca:	4093      	lsls	r3, r2
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024d2:	4937      	ldr	r1, [pc, #220]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	3302      	adds	r3, #2
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e0:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <HAL_GPIO_Init+0x2e0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002504:	4a2e      	ldr	r2, [pc, #184]	; (80025c0 <HAL_GPIO_Init+0x2e0>)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800250a:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <HAL_GPIO_Init+0x2e0>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800252e:	4a24      	ldr	r2, [pc, #144]	; (80025c0 <HAL_GPIO_Init+0x2e0>)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002534:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <HAL_GPIO_Init+0x2e0>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	43db      	mvns	r3, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002558:	4a19      	ldr	r2, [pc, #100]	; (80025c0 <HAL_GPIO_Init+0x2e0>)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800255e:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <HAL_GPIO_Init+0x2e0>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002582:	4a0f      	ldr	r2, [pc, #60]	; (80025c0 <HAL_GPIO_Init+0x2e0>)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3301      	adds	r3, #1
 800258c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	f47f aea9 	bne.w	80022f0 <HAL_GPIO_Init+0x10>
  }
}
 800259e:	bf00      	nop
 80025a0:	bf00      	nop
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40010000 	.word	0x40010000
 80025b4:	48000400 	.word	0x48000400
 80025b8:	48000800 	.word	0x48000800
 80025bc:	48000c00 	.word	0x48000c00
 80025c0:	40010400 	.word	0x40010400

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025e0:	e002      	b.n	80025e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002600:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002604:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	f001 b823 	b.w	8003660 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 817d 	beq.w	800292a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002630:	4bbc      	ldr	r3, [pc, #752]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b04      	cmp	r3, #4
 800263a:	d00c      	beq.n	8002656 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800263c:	4bb9      	ldr	r3, [pc, #740]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b08      	cmp	r3, #8
 8002646:	d15c      	bne.n	8002702 <HAL_RCC_OscConfig+0x10e>
 8002648:	4bb6      	ldr	r3, [pc, #728]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002654:	d155      	bne.n	8002702 <HAL_RCC_OscConfig+0x10e>
 8002656:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800265a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800266a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d102      	bne.n	8002688 <HAL_RCC_OscConfig+0x94>
 8002682:	4ba8      	ldr	r3, [pc, #672]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	e015      	b.n	80026b4 <HAL_RCC_OscConfig+0xc0>
 8002688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800268c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800269c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026a0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80026a4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80026b0:	4b9c      	ldr	r3, [pc, #624]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026b8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80026bc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80026c0:	fa92 f2a2 	rbit	r2, r2
 80026c4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80026c8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80026cc:	fab2 f282 	clz	r2, r2
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	f042 0220 	orr.w	r2, r2, #32
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	f002 021f 	and.w	r2, r2, #31
 80026dc:	2101      	movs	r1, #1
 80026de:	fa01 f202 	lsl.w	r2, r1, r2
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 811f 	beq.w	8002928 <HAL_RCC_OscConfig+0x334>
 80026ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f040 8116 	bne.w	8002928 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	f000 bfaf 	b.w	8003660 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002712:	d106      	bne.n	8002722 <HAL_RCC_OscConfig+0x12e>
 8002714:	4b83      	ldr	r3, [pc, #524]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a82      	ldr	r2, [pc, #520]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 800271a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	e036      	b.n	8002790 <HAL_RCC_OscConfig+0x19c>
 8002722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x158>
 8002732:	4b7c      	ldr	r3, [pc, #496]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a7b      	ldr	r2, [pc, #492]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 8002738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b79      	ldr	r3, [pc, #484]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a78      	ldr	r2, [pc, #480]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 8002744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e021      	b.n	8002790 <HAL_RCC_OscConfig+0x19c>
 800274c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002750:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x184>
 800275e:	4b71      	ldr	r3, [pc, #452]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a70      	ldr	r2, [pc, #448]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 8002764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b6e      	ldr	r3, [pc, #440]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a6d      	ldr	r2, [pc, #436]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e00b      	b.n	8002790 <HAL_RCC_OscConfig+0x19c>
 8002778:	4b6a      	ldr	r3, [pc, #424]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a69      	ldr	r2, [pc, #420]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 800277e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b67      	ldr	r3, [pc, #412]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a66      	ldr	r2, [pc, #408]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 800278a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002790:	4b64      	ldr	r3, [pc, #400]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	f023 020f 	bic.w	r2, r3, #15
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	495f      	ldr	r1, [pc, #380]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d059      	beq.n	800286e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ba:	f7fe fc95 	bl	80010e8 <HAL_GetTick>
 80027be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	e00a      	b.n	80027da <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe fc90 	bl	80010e8 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b64      	cmp	r3, #100	; 0x64
 80027d2:	d902      	bls.n	80027da <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	f000 bf43 	b.w	8003660 <HAL_RCC_OscConfig+0x106c>
 80027da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027de:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80027ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d102      	bne.n	800280c <HAL_RCC_OscConfig+0x218>
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	e015      	b.n	8002838 <HAL_RCC_OscConfig+0x244>
 800280c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002810:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002824:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002828:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002834:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800283c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002840:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002844:	fa92 f2a2 	rbit	r2, r2
 8002848:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800284c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002850:	fab2 f282 	clz	r2, r2
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	f042 0220 	orr.w	r2, r2, #32
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	f002 021f 	and.w	r2, r2, #31
 8002860:	2101      	movs	r1, #1
 8002862:	fa01 f202 	lsl.w	r2, r1, r2
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0ab      	beq.n	80027c4 <HAL_RCC_OscConfig+0x1d0>
 800286c:	e05d      	b.n	800292a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7fe fc3b 	bl	80010e8 <HAL_GetTick>
 8002872:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002876:	e00a      	b.n	800288e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002878:	f7fe fc36 	bl	80010e8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b64      	cmp	r3, #100	; 0x64
 8002886:	d902      	bls.n	800288e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	f000 bee9 	b.w	8003660 <HAL_RCC_OscConfig+0x106c>
 800288e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002892:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80028a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d102      	bne.n	80028c0 <HAL_RCC_OscConfig+0x2cc>
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	e015      	b.n	80028ec <HAL_RCC_OscConfig+0x2f8>
 80028c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028c4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80028d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028d8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80028dc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_RCC_OscConfig+0x330>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028f0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80028f4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80028f8:	fa92 f2a2 	rbit	r2, r2
 80028fc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002900:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002904:	fab2 f282 	clz	r2, r2
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	f042 0220 	orr.w	r2, r2, #32
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	f002 021f 	and.w	r2, r2, #31
 8002914:	2101      	movs	r1, #1
 8002916:	fa01 f202 	lsl.w	r2, r1, r2
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ab      	bne.n	8002878 <HAL_RCC_OscConfig+0x284>
 8002920:	e003      	b.n	800292a <HAL_RCC_OscConfig+0x336>
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 817d 	beq.w	8002c3a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002940:	4ba6      	ldr	r3, [pc, #664]	; (8002bdc <HAL_RCC_OscConfig+0x5e8>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 030c 	and.w	r3, r3, #12
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800294c:	4ba3      	ldr	r3, [pc, #652]	; (8002bdc <HAL_RCC_OscConfig+0x5e8>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b08      	cmp	r3, #8
 8002956:	d172      	bne.n	8002a3e <HAL_RCC_OscConfig+0x44a>
 8002958:	4ba0      	ldr	r3, [pc, #640]	; (8002bdc <HAL_RCC_OscConfig+0x5e8>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d16c      	bne.n	8002a3e <HAL_RCC_OscConfig+0x44a>
 8002964:	2302      	movs	r3, #2
 8002966:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002976:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d102      	bne.n	8002994 <HAL_RCC_OscConfig+0x3a0>
 800298e:	4b93      	ldr	r3, [pc, #588]	; (8002bdc <HAL_RCC_OscConfig+0x5e8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	e013      	b.n	80029bc <HAL_RCC_OscConfig+0x3c8>
 8002994:	2302      	movs	r3, #2
 8002996:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80029a6:	2302      	movs	r3, #2
 80029a8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80029ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80029b8:	4b88      	ldr	r3, [pc, #544]	; (8002bdc <HAL_RCC_OscConfig+0x5e8>)
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	2202      	movs	r2, #2
 80029be:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80029c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80029c6:	fa92 f2a2 	rbit	r2, r2
 80029ca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80029ce:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80029d2:	fab2 f282 	clz	r2, r2
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	f042 0220 	orr.w	r2, r2, #32
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	f002 021f 	and.w	r2, r2, #31
 80029e2:	2101      	movs	r1, #1
 80029e4:	fa01 f202 	lsl.w	r2, r1, r2
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCC_OscConfig+0x410>
 80029ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d002      	beq.n	8002a04 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f000 be2e 	b.w	8003660 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a04:	4b75      	ldr	r3, [pc, #468]	; (8002bdc <HAL_RCC_OscConfig+0x5e8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	21f8      	movs	r1, #248	; 0xf8
 8002a1a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a22:	fa91 f1a1 	rbit	r1, r1
 8002a26:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002a2a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002a2e:	fab1 f181 	clz	r1, r1
 8002a32:	b2c9      	uxtb	r1, r1
 8002a34:	408b      	lsls	r3, r1
 8002a36:	4969      	ldr	r1, [pc, #420]	; (8002bdc <HAL_RCC_OscConfig+0x5e8>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3c:	e0fd      	b.n	8002c3a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8088 	beq.w	8002b60 <HAL_RCC_OscConfig+0x56c>
 8002a50:	2301      	movs	r3, #1
 8002a52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a62:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	461a      	mov	r2, r3
 8002a78:	2301      	movs	r3, #1
 8002a7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7fe fb34 	bl	80010e8 <HAL_GetTick>
 8002a80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a86:	f7fe fb2f 	bl	80010e8 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d902      	bls.n	8002a9c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	f000 bde2 	b.w	8003660 <HAL_RCC_OscConfig+0x106c>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002aae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d102      	bne.n	8002acc <HAL_RCC_OscConfig+0x4d8>
 8002ac6:	4b45      	ldr	r3, [pc, #276]	; (8002bdc <HAL_RCC_OscConfig+0x5e8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	e013      	b.n	8002af4 <HAL_RCC_OscConfig+0x500>
 8002acc:	2302      	movs	r3, #2
 8002ace:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002ade:	2302      	movs	r3, #2
 8002ae0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ae4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002af0:	4b3a      	ldr	r3, [pc, #232]	; (8002bdc <HAL_RCC_OscConfig+0x5e8>)
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	2202      	movs	r2, #2
 8002af6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002afa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002afe:	fa92 f2a2 	rbit	r2, r2
 8002b02:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002b06:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b0a:	fab2 f282 	clz	r2, r2
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	f042 0220 	orr.w	r2, r2, #32
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	f002 021f 	and.w	r2, r2, #31
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0af      	beq.n	8002a86 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <HAL_RCC_OscConfig+0x5e8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	21f8      	movs	r1, #248	; 0xf8
 8002b3c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b44:	fa91 f1a1 	rbit	r1, r1
 8002b48:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b4c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b50:	fab1 f181 	clz	r1, r1
 8002b54:	b2c9      	uxtb	r1, r1
 8002b56:	408b      	lsls	r3, r1
 8002b58:	4920      	ldr	r1, [pc, #128]	; (8002bdc <HAL_RCC_OscConfig+0x5e8>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
 8002b5e:	e06c      	b.n	8002c3a <HAL_RCC_OscConfig+0x646>
 8002b60:	2301      	movs	r3, #1
 8002b62:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	461a      	mov	r2, r3
 8002b88:	2300      	movs	r3, #0
 8002b8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe faac 	bl	80010e8 <HAL_GetTick>
 8002b90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b96:	f7fe faa7 	bl	80010e8 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d902      	bls.n	8002bac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	f000 bd5a 	b.w	8003660 <HAL_RCC_OscConfig+0x106c>
 8002bac:	2302      	movs	r3, #2
 8002bae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d104      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5ec>
 8002bd6:	4b01      	ldr	r3, [pc, #4]	; (8002bdc <HAL_RCC_OscConfig+0x5e8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	e015      	b.n	8002c08 <HAL_RCC_OscConfig+0x614>
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	2302      	movs	r3, #2
 8002be2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002bf8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c04:	4bc8      	ldr	r3, [pc, #800]	; (8002f28 <HAL_RCC_OscConfig+0x934>)
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002c0e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c12:	fa92 f2a2 	rbit	r2, r2
 8002c16:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002c1a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c1e:	fab2 f282 	clz	r2, r2
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	f042 0220 	orr.w	r2, r2, #32
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	f002 021f 	and.w	r2, r2, #31
 8002c2e:	2101      	movs	r1, #1
 8002c30:	fa01 f202 	lsl.w	r2, r1, r2
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1ad      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8110 	beq.w	8002e70 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d079      	beq.n	8002d54 <HAL_RCC_OscConfig+0x760>
 8002c60:	2301      	movs	r3, #1
 8002c62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4bab      	ldr	r3, [pc, #684]	; (8002f2c <HAL_RCC_OscConfig+0x938>)
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	461a      	mov	r2, r3
 8002c86:	2301      	movs	r3, #1
 8002c88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8a:	f7fe fa2d 	bl	80010e8 <HAL_GetTick>
 8002c8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c94:	f7fe fa28 	bl	80010e8 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d902      	bls.n	8002caa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	f000 bcdb 	b.w	8003660 <HAL_RCC_OscConfig+0x106c>
 8002caa:	2302      	movs	r3, #2
 8002cac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fa93 f2a3 	rbit	r2, r3
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ce8:	2202      	movs	r2, #2
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	fa93 f2a3 	rbit	r2, r3
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d02:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d04:	4b88      	ldr	r3, [pc, #544]	; (8002f28 <HAL_RCC_OscConfig+0x934>)
 8002d06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d10:	2102      	movs	r1, #2
 8002d12:	6019      	str	r1, [r3, #0]
 8002d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	fa93 f1a3 	rbit	r1, r3
 8002d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d2a:	6019      	str	r1, [r3, #0]
  return result;
 8002d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f003 031f 	and.w	r3, r3, #31
 8002d46:	2101      	movs	r1, #1
 8002d48:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0a0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x6a0>
 8002d52:	e08d      	b.n	8002e70 <HAL_RCC_OscConfig+0x87c>
 8002d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	fa93 f2a3 	rbit	r2, r3
 8002d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d76:	601a      	str	r2, [r3, #0]
  return result;
 8002d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d80:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b68      	ldr	r3, [pc, #416]	; (8002f2c <HAL_RCC_OscConfig+0x938>)
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	461a      	mov	r2, r3
 8002d92:	2300      	movs	r3, #0
 8002d94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d96:	f7fe f9a7 	bl	80010e8 <HAL_GetTick>
 8002d9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da0:	f7fe f9a2 	bl	80010e8 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d902      	bls.n	8002db6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	f000 bc55 	b.w	8003660 <HAL_RCC_OscConfig+0x106c>
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	fa93 f2a3 	rbit	r2, r3
 8002dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dde:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002de2:	2202      	movs	r2, #2
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	fa93 f2a3 	rbit	r2, r3
 8002df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e06:	2202      	movs	r2, #2
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	fa93 f2a3 	rbit	r2, r3
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e22:	4b41      	ldr	r3, [pc, #260]	; (8002f28 <HAL_RCC_OscConfig+0x934>)
 8002e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e2e:	2102      	movs	r1, #2
 8002e30:	6019      	str	r1, [r3, #0]
 8002e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e36:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	fa93 f1a3 	rbit	r1, r3
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e48:	6019      	str	r1, [r3, #0]
  return result;
 8002e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2101      	movs	r1, #1
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d197      	bne.n	8002da0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 81a1 	beq.w	80031c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8c:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <HAL_RCC_OscConfig+0x934>)
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d116      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e98:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <HAL_RCC_OscConfig+0x934>)
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	4a22      	ldr	r2, [pc, #136]	; (8002f28 <HAL_RCC_OscConfig+0x934>)
 8002e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	61d3      	str	r3, [r2, #28]
 8002ea4:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <HAL_RCC_OscConfig+0x934>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ebe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HAL_RCC_OscConfig+0x93c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d11a      	bne.n	8002f08 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <HAL_RCC_OscConfig+0x93c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <HAL_RCC_OscConfig+0x93c>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002edc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ede:	f7fe f903 	bl	80010e8 <HAL_GetTick>
 8002ee2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee6:	e009      	b.n	8002efc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee8:	f7fe f8fe 	bl	80010e8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b64      	cmp	r3, #100	; 0x64
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e3b1      	b.n	8003660 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <HAL_RCC_OscConfig+0x93c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0ef      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d10d      	bne.n	8002f34 <HAL_RCC_OscConfig+0x940>
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_RCC_OscConfig+0x934>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4a02      	ldr	r2, [pc, #8]	; (8002f28 <HAL_RCC_OscConfig+0x934>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6213      	str	r3, [r2, #32]
 8002f24:	e03c      	b.n	8002fa0 <HAL_RCC_OscConfig+0x9ac>
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	10908120 	.word	0x10908120
 8002f30:	40007000 	.word	0x40007000
 8002f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10c      	bne.n	8002f5e <HAL_RCC_OscConfig+0x96a>
 8002f44:	4bc1      	ldr	r3, [pc, #772]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	4ac0      	ldr	r2, [pc, #768]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 8002f4a:	f023 0301 	bic.w	r3, r3, #1
 8002f4e:	6213      	str	r3, [r2, #32]
 8002f50:	4bbe      	ldr	r3, [pc, #760]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	4abd      	ldr	r2, [pc, #756]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 8002f56:	f023 0304 	bic.w	r3, r3, #4
 8002f5a:	6213      	str	r3, [r2, #32]
 8002f5c:	e020      	b.n	8002fa0 <HAL_RCC_OscConfig+0x9ac>
 8002f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b05      	cmp	r3, #5
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x994>
 8002f6e:	4bb7      	ldr	r3, [pc, #732]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4ab6      	ldr	r2, [pc, #728]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 8002f74:	f043 0304 	orr.w	r3, r3, #4
 8002f78:	6213      	str	r3, [r2, #32]
 8002f7a:	4bb4      	ldr	r3, [pc, #720]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4ab3      	ldr	r2, [pc, #716]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6213      	str	r3, [r2, #32]
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCC_OscConfig+0x9ac>
 8002f88:	4bb0      	ldr	r3, [pc, #704]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4aaf      	ldr	r2, [pc, #700]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	6213      	str	r3, [r2, #32]
 8002f94:	4bad      	ldr	r3, [pc, #692]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4aac      	ldr	r2, [pc, #688]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 8002f9a:	f023 0304 	bic.w	r3, r3, #4
 8002f9e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8081 	beq.w	80030b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb2:	f7fe f899 	bl	80010e8 <HAL_GetTick>
 8002fb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fbc:	f7fe f894 	bl	80010e8 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e345      	b.n	8003660 <HAL_RCC_OscConfig+0x106c>
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002fdc:	2202      	movs	r2, #2
 8002fde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	fa93 f2a3 	rbit	r2, r3
 8002fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003000:	2202      	movs	r2, #2
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003008:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	fa93 f2a3 	rbit	r2, r3
 8003012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003016:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800301a:	601a      	str	r2, [r3, #0]
  return result;
 800301c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003020:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003024:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	095b      	lsrs	r3, r3, #5
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f043 0302 	orr.w	r3, r3, #2
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d102      	bne.n	8003040 <HAL_RCC_OscConfig+0xa4c>
 800303a:	4b84      	ldr	r3, [pc, #528]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	e013      	b.n	8003068 <HAL_RCC_OscConfig+0xa74>
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003048:	2202      	movs	r2, #2
 800304a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003050:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	fa93 f2a3 	rbit	r2, r3
 800305a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	4b79      	ldr	r3, [pc, #484]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800306c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003070:	2102      	movs	r1, #2
 8003072:	6011      	str	r1, [r2, #0]
 8003074:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003078:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	fa92 f1a2 	rbit	r1, r2
 8003082:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003086:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800308a:	6011      	str	r1, [r2, #0]
  return result;
 800308c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003090:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	fab2 f282 	clz	r2, r2
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	f002 021f 	and.w	r2, r2, #31
 80030a6:	2101      	movs	r1, #1
 80030a8:	fa01 f202 	lsl.w	r2, r1, r2
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d084      	beq.n	8002fbc <HAL_RCC_OscConfig+0x9c8>
 80030b2:	e07f      	b.n	80031b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b4:	f7fe f818 	bl	80010e8 <HAL_GetTick>
 80030b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030bc:	e00b      	b.n	80030d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7fe f813 	bl	80010e8 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e2c4      	b.n	8003660 <HAL_RCC_OscConfig+0x106c>
 80030d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80030de:	2202      	movs	r2, #2
 80030e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	fa93 f2a3 	rbit	r2, r3
 80030f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003102:	2202      	movs	r2, #2
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	fa93 f2a3 	rbit	r2, r3
 8003114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003118:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800311c:	601a      	str	r2, [r3, #0]
  return result;
 800311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003122:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003126:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003128:	fab3 f383 	clz	r3, r3
 800312c:	b2db      	uxtb	r3, r3
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f043 0302 	orr.w	r3, r3, #2
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d102      	bne.n	8003142 <HAL_RCC_OscConfig+0xb4e>
 800313c:	4b43      	ldr	r3, [pc, #268]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	e013      	b.n	800316a <HAL_RCC_OscConfig+0xb76>
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800314a:	2202      	movs	r2, #2
 800314c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003152:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	fa93 f2a3 	rbit	r2, r3
 800315c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003160:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	4b39      	ldr	r3, [pc, #228]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800316e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003172:	2102      	movs	r1, #2
 8003174:	6011      	str	r1, [r2, #0]
 8003176:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800317a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	fa92 f1a2 	rbit	r1, r2
 8003184:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003188:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800318c:	6011      	str	r1, [r2, #0]
  return result;
 800318e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003192:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	fab2 f282 	clz	r2, r2
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	f002 021f 	and.w	r2, r2, #31
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f202 	lsl.w	r2, r1, r2
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d184      	bne.n	80030be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d105      	bne.n	80031c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031bc:	4b23      	ldr	r3, [pc, #140]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	4a22      	ldr	r2, [pc, #136]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 80031c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8242 	beq.w	800365e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031da:	4b1c      	ldr	r3, [pc, #112]	; (800324c <HAL_RCC_OscConfig+0xc58>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	f000 8213 	beq.w	800360e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	f040 8162 	bne.w	80034be <HAL_RCC_OscConfig+0xeca>
 80031fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003202:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003206:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	fa93 f2a3 	rbit	r2, r3
 8003216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800321e:	601a      	str	r2, [r3, #0]
  return result;
 8003220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003224:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003228:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003234:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	461a      	mov	r2, r3
 800323c:	2300      	movs	r3, #0
 800323e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7fd ff52 	bl	80010e8 <HAL_GetTick>
 8003244:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003248:	e00c      	b.n	8003264 <HAL_RCC_OscConfig+0xc70>
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003250:	f7fd ff4a 	bl	80010e8 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e1fd      	b.n	8003660 <HAL_RCC_OscConfig+0x106c>
 8003264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003268:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800326c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003276:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	fa93 f2a3 	rbit	r2, r3
 8003280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003284:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003288:	601a      	str	r2, [r3, #0]
  return result;
 800328a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003292:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	b2db      	uxtb	r3, r3
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	b2db      	uxtb	r3, r3
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d102      	bne.n	80032ae <HAL_RCC_OscConfig+0xcba>
 80032a8:	4bb0      	ldr	r3, [pc, #704]	; (800356c <HAL_RCC_OscConfig+0xf78>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	e027      	b.n	80032fe <HAL_RCC_OscConfig+0xd0a>
 80032ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80032b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	fa93 f2a3 	rbit	r2, r3
 80032ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80032dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	fa93 f2a3 	rbit	r2, r3
 80032f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	4b9c      	ldr	r3, [pc, #624]	; (800356c <HAL_RCC_OscConfig+0xf78>)
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003302:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003306:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800330a:	6011      	str	r1, [r2, #0]
 800330c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003310:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	fa92 f1a2 	rbit	r1, r2
 800331a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800331e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003322:	6011      	str	r1, [r2, #0]
  return result;
 8003324:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003328:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	fab2 f282 	clz	r2, r2
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	f042 0220 	orr.w	r2, r2, #32
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	f002 021f 	and.w	r2, r2, #31
 800333e:	2101      	movs	r1, #1
 8003340:	fa01 f202 	lsl.w	r2, r1, r2
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d182      	bne.n	8003250 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800334a:	4b88      	ldr	r3, [pc, #544]	; (800356c <HAL_RCC_OscConfig+0xf78>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003356:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800335e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003362:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	430b      	orrs	r3, r1
 800336c:	497f      	ldr	r1, [pc, #508]	; (800356c <HAL_RCC_OscConfig+0xf78>)
 800336e:	4313      	orrs	r3, r2
 8003370:	604b      	str	r3, [r1, #4]
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800337a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800337e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	fa93 f2a3 	rbit	r2, r3
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003396:	601a      	str	r2, [r3, #0]
  return result;
 8003398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033a0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a2:	fab3 f383 	clz	r3, r3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	461a      	mov	r2, r3
 80033b4:	2301      	movs	r3, #1
 80033b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fd fe96 	bl	80010e8 <HAL_GetTick>
 80033bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033c0:	e009      	b.n	80033d6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c2:	f7fd fe91 	bl	80010e8 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e144      	b.n	8003660 <HAL_RCC_OscConfig+0x106c>
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80033de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	fa93 f2a3 	rbit	r2, r3
 80033f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80033fa:	601a      	str	r2, [r3, #0]
  return result;
 80033fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003400:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003404:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b01      	cmp	r3, #1
 8003418:	d102      	bne.n	8003420 <HAL_RCC_OscConfig+0xe2c>
 800341a:	4b54      	ldr	r3, [pc, #336]	; (800356c <HAL_RCC_OscConfig+0xf78>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	e027      	b.n	8003470 <HAL_RCC_OscConfig+0xe7c>
 8003420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003424:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003428:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800342c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003432:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	fa93 f2a3 	rbit	r2, r3
 800343c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003440:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800344e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003458:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	fa93 f2a3 	rbit	r2, r3
 8003462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003466:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	4b3f      	ldr	r3, [pc, #252]	; (800356c <HAL_RCC_OscConfig+0xf78>)
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003474:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003478:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800347c:	6011      	str	r1, [r2, #0]
 800347e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003482:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	fa92 f1a2 	rbit	r1, r2
 800348c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003490:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003494:	6011      	str	r1, [r2, #0]
  return result;
 8003496:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800349a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	fab2 f282 	clz	r2, r2
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	f042 0220 	orr.w	r2, r2, #32
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	f002 021f 	and.w	r2, r2, #31
 80034b0:	2101      	movs	r1, #1
 80034b2:	fa01 f202 	lsl.w	r2, r1, r2
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d082      	beq.n	80033c2 <HAL_RCC_OscConfig+0xdce>
 80034bc:	e0cf      	b.n	800365e <HAL_RCC_OscConfig+0x106a>
 80034be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80034c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	fa93 f2a3 	rbit	r2, r3
 80034da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034de:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80034e2:	601a      	str	r2, [r3, #0]
  return result;
 80034e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80034ec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ee:	fab3 f383 	clz	r3, r3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	461a      	mov	r2, r3
 8003500:	2300      	movs	r3, #0
 8003502:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fd fdf0 	bl	80010e8 <HAL_GetTick>
 8003508:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350c:	e009      	b.n	8003522 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800350e:	f7fd fdeb 	bl	80010e8 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e09e      	b.n	8003660 <HAL_RCC_OscConfig+0x106c>
 8003522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003526:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800352a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800352e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003534:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	fa93 f2a3 	rbit	r2, r3
 800353e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003542:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003546:	601a      	str	r2, [r3, #0]
  return result;
 8003548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003550:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003552:	fab3 f383 	clz	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	095b      	lsrs	r3, r3, #5
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b01      	cmp	r3, #1
 8003564:	d104      	bne.n	8003570 <HAL_RCC_OscConfig+0xf7c>
 8003566:	4b01      	ldr	r3, [pc, #4]	; (800356c <HAL_RCC_OscConfig+0xf78>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	e029      	b.n	80035c0 <HAL_RCC_OscConfig+0xfcc>
 800356c:	40021000 	.word	0x40021000
 8003570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003574:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800357c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003582:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	fa93 f2a3 	rbit	r2, r3
 800358c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003590:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800359e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	fa93 f2a3 	rbit	r2, r3
 80035b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	4b2b      	ldr	r3, [pc, #172]	; (800366c <HAL_RCC_OscConfig+0x1078>)
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035c4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80035c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035cc:	6011      	str	r1, [r2, #0]
 80035ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035d2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	fa92 f1a2 	rbit	r1, r2
 80035dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035e0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80035e4:	6011      	str	r1, [r2, #0]
  return result;
 80035e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	fab2 f282 	clz	r2, r2
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	f042 0220 	orr.w	r2, r2, #32
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	f002 021f 	and.w	r2, r2, #31
 8003600:	2101      	movs	r1, #1
 8003602:	fa01 f202 	lsl.w	r2, r1, r2
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d180      	bne.n	800350e <HAL_RCC_OscConfig+0xf1a>
 800360c:	e027      	b.n	800365e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800360e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003612:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e01e      	b.n	8003660 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003622:	4b12      	ldr	r3, [pc, #72]	; (800366c <HAL_RCC_OscConfig+0x1078>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800362a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800362e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003636:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	429a      	cmp	r2, r3
 8003640:	d10b      	bne.n	800365a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003642:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003646:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800364a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003656:	429a      	cmp	r2, r3
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000

08003670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b09e      	sub	sp, #120	; 0x78
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e162      	b.n	800394e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003688:	4b90      	ldr	r3, [pc, #576]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d910      	bls.n	80036b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4b8d      	ldr	r3, [pc, #564]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 0207 	bic.w	r2, r3, #7
 800369e:	498b      	ldr	r1, [pc, #556]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b89      	ldr	r3, [pc, #548]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e14a      	b.n	800394e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c4:	4b82      	ldr	r3, [pc, #520]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	497f      	ldr	r1, [pc, #508]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80dc 	beq.w	800389c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d13c      	bne.n	8003766 <HAL_RCC_ClockConfig+0xf6>
 80036ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80036fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fc:	fab3 f383 	clz	r3, r3
 8003700:	b2db      	uxtb	r3, r3
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d102      	bne.n	8003716 <HAL_RCC_ClockConfig+0xa6>
 8003710:	4b6f      	ldr	r3, [pc, #444]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	e00f      	b.n	8003736 <HAL_RCC_ClockConfig+0xc6>
 8003716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800371a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	667b      	str	r3, [r7, #100]	; 0x64
 8003724:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003728:	663b      	str	r3, [r7, #96]	; 0x60
 800372a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800372c:	fa93 f3a3 	rbit	r3, r3
 8003730:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003732:	4b67      	ldr	r3, [pc, #412]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800373a:	65ba      	str	r2, [r7, #88]	; 0x58
 800373c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800373e:	fa92 f2a2 	rbit	r2, r2
 8003742:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003744:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003746:	fab2 f282 	clz	r2, r2
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	f042 0220 	orr.w	r2, r2, #32
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	f002 021f 	and.w	r2, r2, #31
 8003756:	2101      	movs	r1, #1
 8003758:	fa01 f202 	lsl.w	r2, r1, r2
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d17b      	bne.n	800385a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e0f3      	b.n	800394e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d13c      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x178>
 800376e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003772:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800377c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	d102      	bne.n	8003798 <HAL_RCC_ClockConfig+0x128>
 8003792:	4b4f      	ldr	r3, [pc, #316]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	e00f      	b.n	80037b8 <HAL_RCC_ClockConfig+0x148>
 8003798:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800379c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	647b      	str	r3, [r7, #68]	; 0x44
 80037a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037aa:	643b      	str	r3, [r7, #64]	; 0x40
 80037ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037b4:	4b46      	ldr	r3, [pc, #280]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80037be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037c0:	fa92 f2a2 	rbit	r2, r2
 80037c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80037c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037c8:	fab2 f282 	clz	r2, r2
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	f042 0220 	orr.w	r2, r2, #32
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	f002 021f 	and.w	r2, r2, #31
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f202 	lsl.w	r2, r1, r2
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d13a      	bne.n	800385a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0b2      	b.n	800394e <HAL_RCC_ClockConfig+0x2de>
 80037e8:	2302      	movs	r3, #2
 80037ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d102      	bne.n	8003810 <HAL_RCC_ClockConfig+0x1a0>
 800380a:	4b31      	ldr	r3, [pc, #196]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	e00d      	b.n	800382c <HAL_RCC_ClockConfig+0x1bc>
 8003810:	2302      	movs	r3, #2
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
 800381c:	2302      	movs	r3, #2
 800381e:	623b      	str	r3, [r7, #32]
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	fa93 f3a3 	rbit	r3, r3
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	4b29      	ldr	r3, [pc, #164]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	2202      	movs	r2, #2
 800382e:	61ba      	str	r2, [r7, #24]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	fa92 f2a2 	rbit	r2, r2
 8003836:	617a      	str	r2, [r7, #20]
  return result;
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	fab2 f282 	clz	r2, r2
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	f042 0220 	orr.w	r2, r2, #32
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	f002 021f 	and.w	r2, r2, #31
 800384a:	2101      	movs	r1, #1
 800384c:	fa01 f202 	lsl.w	r2, r1, r2
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e079      	b.n	800394e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385a:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	491a      	ldr	r1, [pc, #104]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003868:	4313      	orrs	r3, r2
 800386a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800386c:	f7fd fc3c 	bl	80010e8 <HAL_GetTick>
 8003870:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	e00a      	b.n	800388a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7fd fc38 	bl	80010e8 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e061      	b.n	800394e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 020c 	and.w	r2, r3, #12
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	429a      	cmp	r2, r3
 800389a:	d1eb      	bne.n	8003874 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d214      	bcs.n	80038d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 0207 	bic.w	r2, r3, #7
 80038b2:	4906      	ldr	r1, [pc, #24]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	4b04      	ldr	r3, [pc, #16]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e040      	b.n	800394e <HAL_RCC_ClockConfig+0x2de>
 80038cc:	40022000 	.word	0x40022000
 80038d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e0:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <HAL_RCC_ClockConfig+0x2e8>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	491a      	ldr	r1, [pc, #104]	; (8003958 <HAL_RCC_ClockConfig+0x2e8>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038fe:	4b16      	ldr	r3, [pc, #88]	; (8003958 <HAL_RCC_ClockConfig+0x2e8>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4912      	ldr	r1, [pc, #72]	; (8003958 <HAL_RCC_ClockConfig+0x2e8>)
 800390e:	4313      	orrs	r3, r2
 8003910:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003912:	f000 f829 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003916:	4601      	mov	r1, r0
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <HAL_RCC_ClockConfig+0x2e8>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003920:	22f0      	movs	r2, #240	; 0xf0
 8003922:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	fa92 f2a2 	rbit	r2, r2
 800392a:	60fa      	str	r2, [r7, #12]
  return result;
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	fab2 f282 	clz	r2, r2
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	40d3      	lsrs	r3, r2
 8003936:	4a09      	ldr	r2, [pc, #36]	; (800395c <HAL_RCC_ClockConfig+0x2ec>)
 8003938:	5cd3      	ldrb	r3, [r2, r3]
 800393a:	fa21 f303 	lsr.w	r3, r1, r3
 800393e:	4a08      	ldr	r2, [pc, #32]	; (8003960 <HAL_RCC_ClockConfig+0x2f0>)
 8003940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <HAL_RCC_ClockConfig+0x2f4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fd fb8a 	bl	8001060 <HAL_InitTick>
  
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3778      	adds	r7, #120	; 0x78
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
 800395c:	080041b4 	.word	0x080041b4
 8003960:	20000000 	.word	0x20000000
 8003964:	20000004 	.word	0x20000004

08003968 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003968:	b480      	push	{r7}
 800396a:	b08b      	sub	sp, #44	; 0x2c
 800396c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	2300      	movs	r3, #0
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	2300      	movs	r3, #0
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003982:	4b29      	ldr	r3, [pc, #164]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b04      	cmp	r3, #4
 8003990:	d002      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x30>
 8003992:	2b08      	cmp	r3, #8
 8003994:	d003      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0x36>
 8003996:	e03c      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003998:	4b24      	ldr	r3, [pc, #144]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xc4>)
 800399a:	623b      	str	r3, [r7, #32]
      break;
 800399c:	e03c      	b.n	8003a18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80039a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80039a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	fa92 f2a2 	rbit	r2, r2
 80039b0:	607a      	str	r2, [r7, #4]
  return result;
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	fab2 f282 	clz	r2, r2
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	40d3      	lsrs	r3, r2
 80039bc:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <HAL_RCC_GetSysClockFreq+0xc8>)
 80039be:	5cd3      	ldrb	r3, [r2, r3]
 80039c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80039c2:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	220f      	movs	r2, #15
 80039cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	fa92 f2a2 	rbit	r2, r2
 80039d4:	60fa      	str	r2, [r7, #12]
  return result;
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	fab2 f282 	clz	r2, r2
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	40d3      	lsrs	r3, r2
 80039e0:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039e2:	5cd3      	ldrb	r3, [r2, r3]
 80039e4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039f0:	4a0e      	ldr	r2, [pc, #56]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xc4>)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003a00:	e004      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	4a0c      	ldr	r2, [pc, #48]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	623b      	str	r3, [r7, #32]
      break;
 8003a10:	e002      	b.n	8003a18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a12:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a14:	623b      	str	r3, [r7, #32]
      break;
 8003a16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a18:	6a3b      	ldr	r3, [r7, #32]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	372c      	adds	r7, #44	; 0x2c
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	007a1200 	.word	0x007a1200
 8003a30:	080041cc 	.word	0x080041cc
 8003a34:	080041dc 	.word	0x080041dc
 8003a38:	003d0900 	.word	0x003d0900

08003a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a40:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a42:	681b      	ldr	r3, [r3, #0]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000000 	.word	0x20000000

08003a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a5a:	f7ff ffef 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8003a5e:	4601      	mov	r1, r0
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a68:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	fa92 f2a2 	rbit	r2, r2
 8003a74:	603a      	str	r2, [r7, #0]
  return result;
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	fab2 f282 	clz	r2, r2
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	40d3      	lsrs	r3, r2
 8003a80:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a82:	5cd3      	ldrb	r3, [r2, r3]
 8003a84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000
 8003a94:	080041c4 	.word	0x080041c4

08003a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a9e:	f7ff ffcd 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8003aa2:	4601      	mov	r1, r0
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003aac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003ab0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	fa92 f2a2 	rbit	r2, r2
 8003ab8:	603a      	str	r2, [r7, #0]
  return result;
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	fab2 f282 	clz	r2, r2
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	40d3      	lsrs	r3, r2
 8003ac4:	4a04      	ldr	r2, [pc, #16]	; (8003ad8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003ac6:	5cd3      	ldrb	r3, [r2, r3]
 8003ac8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	080041c4 	.word	0x080041c4

08003adc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e040      	b.n	8003b70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd f9f0 	bl	8000ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2224      	movs	r2, #36	; 0x24
 8003b08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f82c 	bl	8003b78 <UART_SetConfig>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e022      	b.n	8003b70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f956 	bl	8003de4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f9dd 	bl	8003f28 <UART_CheckIdleState>
 8003b6e:	4603      	mov	r3, r0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4b8a      	ldr	r3, [pc, #552]	; (8003dcc <UART_SetConfig+0x254>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	6979      	ldr	r1, [r7, #20]
 8003bac:	430b      	orrs	r3, r1
 8003bae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a78      	ldr	r2, [pc, #480]	; (8003dd0 <UART_SetConfig+0x258>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d120      	bne.n	8003c36 <UART_SetConfig+0xbe>
 8003bf4:	4b77      	ldr	r3, [pc, #476]	; (8003dd4 <UART_SetConfig+0x25c>)
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d817      	bhi.n	8003c30 <UART_SetConfig+0xb8>
 8003c00:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <UART_SetConfig+0x90>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c25 	.word	0x08003c25
 8003c10:	08003c2b 	.word	0x08003c2b
 8003c14:	08003c1f 	.word	0x08003c1f
 8003c18:	2300      	movs	r3, #0
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e01d      	b.n	8003c5a <UART_SetConfig+0xe2>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	77fb      	strb	r3, [r7, #31]
 8003c22:	e01a      	b.n	8003c5a <UART_SetConfig+0xe2>
 8003c24:	2304      	movs	r3, #4
 8003c26:	77fb      	strb	r3, [r7, #31]
 8003c28:	e017      	b.n	8003c5a <UART_SetConfig+0xe2>
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	e014      	b.n	8003c5a <UART_SetConfig+0xe2>
 8003c30:	2310      	movs	r3, #16
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e011      	b.n	8003c5a <UART_SetConfig+0xe2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a67      	ldr	r2, [pc, #412]	; (8003dd8 <UART_SetConfig+0x260>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d102      	bne.n	8003c46 <UART_SetConfig+0xce>
 8003c40:	2300      	movs	r3, #0
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e009      	b.n	8003c5a <UART_SetConfig+0xe2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a64      	ldr	r2, [pc, #400]	; (8003ddc <UART_SetConfig+0x264>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d102      	bne.n	8003c56 <UART_SetConfig+0xde>
 8003c50:	2300      	movs	r3, #0
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e001      	b.n	8003c5a <UART_SetConfig+0xe2>
 8003c56:	2310      	movs	r3, #16
 8003c58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c62:	d15b      	bne.n	8003d1c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003c64:	7ffb      	ldrb	r3, [r7, #31]
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d827      	bhi.n	8003cba <UART_SetConfig+0x142>
 8003c6a:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <UART_SetConfig+0xf8>)
 8003c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c70:	08003c95 	.word	0x08003c95
 8003c74:	08003c9d 	.word	0x08003c9d
 8003c78:	08003ca5 	.word	0x08003ca5
 8003c7c:	08003cbb 	.word	0x08003cbb
 8003c80:	08003cab 	.word	0x08003cab
 8003c84:	08003cbb 	.word	0x08003cbb
 8003c88:	08003cbb 	.word	0x08003cbb
 8003c8c:	08003cbb 	.word	0x08003cbb
 8003c90:	08003cb3 	.word	0x08003cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c94:	f7ff fede 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 8003c98:	61b8      	str	r0, [r7, #24]
        break;
 8003c9a:	e013      	b.n	8003cc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c9c:	f7ff fefc 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 8003ca0:	61b8      	str	r0, [r7, #24]
        break;
 8003ca2:	e00f      	b.n	8003cc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ca4:	4b4e      	ldr	r3, [pc, #312]	; (8003de0 <UART_SetConfig+0x268>)
 8003ca6:	61bb      	str	r3, [r7, #24]
        break;
 8003ca8:	e00c      	b.n	8003cc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003caa:	f7ff fe5d 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003cae:	61b8      	str	r0, [r7, #24]
        break;
 8003cb0:	e008      	b.n	8003cc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cb6:	61bb      	str	r3, [r7, #24]
        break;
 8003cb8:	e004      	b.n	8003cc4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	77bb      	strb	r3, [r7, #30]
        break;
 8003cc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d074      	beq.n	8003db4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	005a      	lsls	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	441a      	add	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b0f      	cmp	r3, #15
 8003ce6:	d916      	bls.n	8003d16 <UART_SetConfig+0x19e>
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cee:	d212      	bcs.n	8003d16 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	f023 030f 	bic.w	r3, r3, #15
 8003cf8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	89fb      	ldrh	r3, [r7, #14]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	89fa      	ldrh	r2, [r7, #14]
 8003d12:	60da      	str	r2, [r3, #12]
 8003d14:	e04e      	b.n	8003db4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	77bb      	strb	r3, [r7, #30]
 8003d1a:	e04b      	b.n	8003db4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d1c:	7ffb      	ldrb	r3, [r7, #31]
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d827      	bhi.n	8003d72 <UART_SetConfig+0x1fa>
 8003d22:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <UART_SetConfig+0x1b0>)
 8003d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	08003d55 	.word	0x08003d55
 8003d30:	08003d5d 	.word	0x08003d5d
 8003d34:	08003d73 	.word	0x08003d73
 8003d38:	08003d63 	.word	0x08003d63
 8003d3c:	08003d73 	.word	0x08003d73
 8003d40:	08003d73 	.word	0x08003d73
 8003d44:	08003d73 	.word	0x08003d73
 8003d48:	08003d6b 	.word	0x08003d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d4c:	f7ff fe82 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 8003d50:	61b8      	str	r0, [r7, #24]
        break;
 8003d52:	e013      	b.n	8003d7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d54:	f7ff fea0 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 8003d58:	61b8      	str	r0, [r7, #24]
        break;
 8003d5a:	e00f      	b.n	8003d7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d5c:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <UART_SetConfig+0x268>)
 8003d5e:	61bb      	str	r3, [r7, #24]
        break;
 8003d60:	e00c      	b.n	8003d7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d62:	f7ff fe01 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003d66:	61b8      	str	r0, [r7, #24]
        break;
 8003d68:	e008      	b.n	8003d7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d6e:	61bb      	str	r3, [r7, #24]
        break;
 8003d70:	e004      	b.n	8003d7c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	77bb      	strb	r3, [r7, #30]
        break;
 8003d7a:	bf00      	nop
    }

    if (pclk != 0U)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d018      	beq.n	8003db4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	085a      	lsrs	r2, r3, #1
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	441a      	add	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2b0f      	cmp	r3, #15
 8003d9c:	d908      	bls.n	8003db0 <UART_SetConfig+0x238>
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da4:	d204      	bcs.n	8003db0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	60da      	str	r2, [r3, #12]
 8003dae:	e001      	b.n	8003db4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003dc0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	efff69f3 	.word	0xefff69f3
 8003dd0:	40013800 	.word	0x40013800
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	40004400 	.word	0x40004400
 8003ddc:	40004800 	.word	0x40004800
 8003de0:	007a1200 	.word	0x007a1200

08003de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01a      	beq.n	8003efa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ee2:	d10a      	bne.n	8003efa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  }
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f38:	f7fd f8d6 	bl	80010e8 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d10e      	bne.n	8003f6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f82d 	bl	8003fba <UART_WaitOnFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e023      	b.n	8003fb2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d10e      	bne.n	8003f96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f817 	bl	8003fba <UART_WaitOnFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e00d      	b.n	8003fb2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b09c      	sub	sp, #112	; 0x70
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fca:	e0a5      	b.n	8004118 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd2:	f000 80a1 	beq.w	8004118 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd6:	f7fd f887 	bl	80010e8 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d302      	bcc.n	8003fec <UART_WaitOnFlagUntilTimeout+0x32>
 8003fe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d13e      	bne.n	800406a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ffc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004000:	667b      	str	r3, [r7, #100]	; 0x64
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800400a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800400c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004010:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e6      	bne.n	8003fec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3308      	adds	r3, #8
 8004024:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	663b      	str	r3, [r7, #96]	; 0x60
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3308      	adds	r3, #8
 800403c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800403e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004040:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800404c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e5      	bne.n	800401e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2220      	movs	r2, #32
 8004056:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e067      	b.n	800413a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d04f      	beq.n	8004118 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004086:	d147      	bne.n	8004118 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004090:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b0:	637b      	str	r3, [r7, #52]	; 0x34
 80040b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e6      	bne.n	8004092 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3308      	adds	r3, #8
 80040ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	613b      	str	r3, [r7, #16]
   return(result);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	66bb      	str	r3, [r7, #104]	; 0x68
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3308      	adds	r3, #8
 80040e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040e4:	623a      	str	r2, [r7, #32]
 80040e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	69f9      	ldr	r1, [r7, #28]
 80040ea:	6a3a      	ldr	r2, [r7, #32]
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e5      	bne.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e010      	b.n	800413a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	4013      	ands	r3, r2
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	429a      	cmp	r2, r3
 8004126:	bf0c      	ite	eq
 8004128:	2301      	moveq	r3, #1
 800412a:	2300      	movne	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	429a      	cmp	r2, r3
 8004134:	f43f af4a 	beq.w	8003fcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3770      	adds	r7, #112	; 0x70
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <__libc_init_array>:
 8004144:	b570      	push	{r4, r5, r6, lr}
 8004146:	4d0d      	ldr	r5, [pc, #52]	; (800417c <__libc_init_array+0x38>)
 8004148:	4c0d      	ldr	r4, [pc, #52]	; (8004180 <__libc_init_array+0x3c>)
 800414a:	1b64      	subs	r4, r4, r5
 800414c:	10a4      	asrs	r4, r4, #2
 800414e:	2600      	movs	r6, #0
 8004150:	42a6      	cmp	r6, r4
 8004152:	d109      	bne.n	8004168 <__libc_init_array+0x24>
 8004154:	4d0b      	ldr	r5, [pc, #44]	; (8004184 <__libc_init_array+0x40>)
 8004156:	4c0c      	ldr	r4, [pc, #48]	; (8004188 <__libc_init_array+0x44>)
 8004158:	f000 f820 	bl	800419c <_init>
 800415c:	1b64      	subs	r4, r4, r5
 800415e:	10a4      	asrs	r4, r4, #2
 8004160:	2600      	movs	r6, #0
 8004162:	42a6      	cmp	r6, r4
 8004164:	d105      	bne.n	8004172 <__libc_init_array+0x2e>
 8004166:	bd70      	pop	{r4, r5, r6, pc}
 8004168:	f855 3b04 	ldr.w	r3, [r5], #4
 800416c:	4798      	blx	r3
 800416e:	3601      	adds	r6, #1
 8004170:	e7ee      	b.n	8004150 <__libc_init_array+0xc>
 8004172:	f855 3b04 	ldr.w	r3, [r5], #4
 8004176:	4798      	blx	r3
 8004178:	3601      	adds	r6, #1
 800417a:	e7f2      	b.n	8004162 <__libc_init_array+0x1e>
 800417c:	080041ec 	.word	0x080041ec
 8004180:	080041ec 	.word	0x080041ec
 8004184:	080041ec 	.word	0x080041ec
 8004188:	080041f0 	.word	0x080041f0

0800418c <memset>:
 800418c:	4402      	add	r2, r0
 800418e:	4603      	mov	r3, r0
 8004190:	4293      	cmp	r3, r2
 8004192:	d100      	bne.n	8004196 <memset+0xa>
 8004194:	4770      	bx	lr
 8004196:	f803 1b01 	strb.w	r1, [r3], #1
 800419a:	e7f9      	b.n	8004190 <memset+0x4>

0800419c <_init>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr

080041a8 <_fini>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr
