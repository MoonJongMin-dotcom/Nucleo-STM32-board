
2022_09_16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000326c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080033f4  080033f4  000133f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034a0  080034a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034a0  080034a0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034a0  080034a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034a0  080034a0  000134a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034a4  080034a4  000134a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000b8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  20000128  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008d77  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000147f  00000000  00000000  00028e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  0002a298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000650  00000000  00000000  0002a970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd46  00000000  00000000  0002afc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009808  00000000  00000000  0004ad06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba8ef  00000000  00000000  0005450e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010edfd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000210c  00000000  00000000  0010ee50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080033dc 	.word	0x080033dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080033dc 	.word	0x080033dc

080001c8 <__io_putchar>:

  */

PUTCHAR_PROTOTYPE

{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  /* Place your implementation of fputc here */

  /* e.g. write a character to the USART1 and Loop until the end of transmission */

  if (ch == '\n')
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2b0a      	cmp	r3, #10
 80001d4:	d106      	bne.n	80001e4 <__io_putchar+0x1c>

    HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 80001d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001da:	2201      	movs	r2, #1
 80001dc:	4907      	ldr	r1, [pc, #28]	; (80001fc <__io_putchar+0x34>)
 80001de:	4808      	ldr	r0, [pc, #32]	; (8000200 <__io_putchar+0x38>)
 80001e0:	f002 f852 	bl	8002288 <HAL_UART_Transmit>

  HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80001e4:	1d39      	adds	r1, r7, #4
 80001e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001ea:	2201      	movs	r2, #1
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__io_putchar+0x38>)
 80001ee:	f002 f84b 	bl	8002288 <HAL_UART_Transmit>



  return ch;
 80001f2:	687b      	ldr	r3, [r7, #4]

}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	080033f4 	.word	0x080033f4
 8000200:	2000008c 	.word	0x2000008c

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000208:	f000 fa68 	bl	80006dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020c:	f000 f818 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000210:	f000 f888 	bl	8000324 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000214:	f000 f856 	bl	80002c4 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello World\n");
 8000218:	4808      	ldr	r0, [pc, #32]	; (800023c <main+0x38>)
 800021a:	f002 fc4f 	bl	8002abc <puts>
	  HAL_Delay(500);
 800021e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000222:	f000 fac1 	bl	80007a8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000226:	2120      	movs	r1, #32
 8000228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022c:	f000 fd50 	bl	8000cd0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000234:	f000 fab8 	bl	80007a8 <HAL_Delay>
	  printf("Hello World\n");
 8000238:	e7ee      	b.n	8000218 <main+0x14>
 800023a:	bf00      	nop
 800023c:	080033f8 	.word	0x080033f8

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b090      	sub	sp, #64	; 0x40
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	2228      	movs	r2, #40	; 0x28
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fbbe 	bl	80029d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000262:	2302      	movs	r3, #2
 8000264:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026a:	2310      	movs	r3, #16
 800026c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026e:	2302      	movs	r3, #2
 8000270:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000272:	2300      	movs	r3, #0
 8000274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000276:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800027a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027c:	f107 0318 	add.w	r3, r7, #24
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fd3f 	bl	8000d04 <HAL_RCC_OscConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800028c:	f000 f8b0 	bl	80003f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000290:	230f      	movs	r3, #15
 8000292:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000294:	2302      	movs	r3, #2
 8000296:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fd68 	bl	8001d80 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002b6:	f000 f89b 	bl	80003f0 <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3740      	adds	r7, #64	; 0x40
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002c8:	4b14      	ldr	r3, [pc, #80]	; (800031c <MX_USART2_UART_Init+0x58>)
 80002ca:	4a15      	ldr	r2, [pc, #84]	; (8000320 <MX_USART2_UART_Init+0x5c>)
 80002cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002ce:	4b13      	ldr	r3, [pc, #76]	; (800031c <MX_USART2_UART_Init+0x58>)
 80002d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80002d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002d6:	4b11      	ldr	r3, [pc, #68]	; (800031c <MX_USART2_UART_Init+0x58>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <MX_USART2_UART_Init+0x58>)
 80002de:	2200      	movs	r2, #0
 80002e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_USART2_UART_Init+0x58>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <MX_USART2_UART_Init+0x58>)
 80002ea:	220c      	movs	r2, #12
 80002ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <MX_USART2_UART_Init+0x58>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <MX_USART2_UART_Init+0x58>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002fa:	4b08      	ldr	r3, [pc, #32]	; (800031c <MX_USART2_UART_Init+0x58>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <MX_USART2_UART_Init+0x58>)
 8000302:	2200      	movs	r2, #0
 8000304:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000306:	4805      	ldr	r0, [pc, #20]	; (800031c <MX_USART2_UART_Init+0x58>)
 8000308:	f001 ff70 	bl	80021ec <HAL_UART_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000312:	f000 f86d 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	2000008c 	.word	0x2000008c
 8000320:	40004400 	.word	0x40004400

08000324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b08a      	sub	sp, #40	; 0x28
 8000328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032a:	f107 0314 	add.w	r3, r7, #20
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033a:	4b2b      	ldr	r3, [pc, #172]	; (80003e8 <MX_GPIO_Init+0xc4>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a2a      	ldr	r2, [pc, #168]	; (80003e8 <MX_GPIO_Init+0xc4>)
 8000340:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000344:	6153      	str	r3, [r2, #20]
 8000346:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <MX_GPIO_Init+0xc4>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800034e:	613b      	str	r3, [r7, #16]
 8000350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000352:	4b25      	ldr	r3, [pc, #148]	; (80003e8 <MX_GPIO_Init+0xc4>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a24      	ldr	r2, [pc, #144]	; (80003e8 <MX_GPIO_Init+0xc4>)
 8000358:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800035c:	6153      	str	r3, [r2, #20]
 800035e:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <MX_GPIO_Init+0xc4>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036a:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <MX_GPIO_Init+0xc4>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a1e      	ldr	r2, [pc, #120]	; (80003e8 <MX_GPIO_Init+0xc4>)
 8000370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000374:	6153      	str	r3, [r2, #20]
 8000376:	4b1c      	ldr	r3, [pc, #112]	; (80003e8 <MX_GPIO_Init+0xc4>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000382:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <MX_GPIO_Init+0xc4>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a18      	ldr	r2, [pc, #96]	; (80003e8 <MX_GPIO_Init+0xc4>)
 8000388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <MX_GPIO_Init+0xc4>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	2120      	movs	r1, #32
 800039e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a2:	f000 fc7d 	bl	8000ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003b6:	f107 0314 	add.w	r3, r7, #20
 80003ba:	4619      	mov	r1, r3
 80003bc:	480b      	ldr	r0, [pc, #44]	; (80003ec <MX_GPIO_Init+0xc8>)
 80003be:	f000 fafd 	bl	80009bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003c2:	2320      	movs	r3, #32
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c6:	2301      	movs	r3, #1
 80003c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ce:	2300      	movs	r3, #0
 80003d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003d2:	f107 0314 	add.w	r3, r7, #20
 80003d6:	4619      	mov	r1, r3
 80003d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003dc:	f000 faee 	bl	80009bc <HAL_GPIO_Init>

}
 80003e0:	bf00      	nop
 80003e2:	3728      	adds	r7, #40	; 0x28
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40021000 	.word	0x40021000
 80003ec:	48000800 	.word	0x48000800

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <Error_Handler+0x8>
	...

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <HAL_MspInit+0x44>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <HAL_MspInit+0x44>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <HAL_MspInit+0x44>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <HAL_MspInit+0x44>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a08      	ldr	r2, [pc, #32]	; (8000440 <HAL_MspInit+0x44>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <HAL_MspInit+0x44>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000432:	2007      	movs	r0, #7
 8000434:	f000 fa8e 	bl	8000954 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000

08000444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a17      	ldr	r2, [pc, #92]	; (80004c0 <HAL_UART_MspInit+0x7c>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d128      	bne.n	80004b8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000466:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <HAL_UART_MspInit+0x80>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a16      	ldr	r2, [pc, #88]	; (80004c4 <HAL_UART_MspInit+0x80>)
 800046c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <HAL_UART_MspInit+0x80>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <HAL_UART_MspInit+0x80>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a10      	ldr	r2, [pc, #64]	; (80004c4 <HAL_UART_MspInit+0x80>)
 8000484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <HAL_UART_MspInit+0x80>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000496:	230c      	movs	r3, #12
 8000498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049a:	2302      	movs	r3, #2
 800049c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a2:	2303      	movs	r3, #3
 80004a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004a6:	2307      	movs	r3, #7
 80004a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	4619      	mov	r1, r3
 80004b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b4:	f000 fa82 	bl	80009bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004b8:	bf00      	nop
 80004ba:	3728      	adds	r7, #40	; 0x28
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40004400 	.word	0x40004400
 80004c4:	40021000 	.word	0x40021000

080004c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <NMI_Handler+0x4>

080004ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d2:	e7fe      	b.n	80004d2 <HardFault_Handler+0x4>

080004d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <MemManage_Handler+0x4>

080004da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004de:	e7fe      	b.n	80004de <BusFault_Handler+0x4>

080004e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <UsageFault_Handler+0x4>

080004e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000514:	f000 f928 	bl	8000768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	e00a      	b.n	8000544 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800052e:	f3af 8000 	nop.w
 8000532:	4601      	mov	r1, r0
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	60ba      	str	r2, [r7, #8]
 800053a:	b2ca      	uxtb	r2, r1
 800053c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	3301      	adds	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	429a      	cmp	r2, r3
 800054a:	dbf0      	blt.n	800052e <_read+0x12>
	}

return len;
 800054c:	687b      	ldr	r3, [r7, #4]
}
 800054e:	4618      	mov	r0, r3
 8000550:	3718      	adds	r7, #24
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	b086      	sub	sp, #24
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	60b9      	str	r1, [r7, #8]
 8000560:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	e009      	b.n	800057c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	60ba      	str	r2, [r7, #8]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fe29 	bl	80001c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	3301      	adds	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	429a      	cmp	r2, r3
 8000582:	dbf1      	blt.n	8000568 <_write+0x12>
	}
	return len;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <_close>:

int _close(int file)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
	return -1;
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
}
 800059a:	4618      	mov	r0, r3
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005b6:	605a      	str	r2, [r3, #4]
	return 0;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <_isatty>:

int _isatty(int file)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
	return 1;
 80005ce:	2301      	movs	r3, #1
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
	return 0;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <_sbrk+0x5c>)
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <_sbrk+0x60>)
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <_sbrk+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <_sbrk+0x64>)
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <_sbrk+0x68>)
 8000618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	429a      	cmp	r2, r3
 8000626:	d207      	bcs.n	8000638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000628:	f002 f9a8 	bl	800297c <__errno>
 800062c:	4603      	mov	r3, r0
 800062e:	220c      	movs	r2, #12
 8000630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	e009      	b.n	800064c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <_sbrk+0x64>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <_sbrk+0x64>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	4a05      	ldr	r2, [pc, #20]	; (800065c <_sbrk+0x64>)
 8000648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20003000 	.word	0x20003000
 8000658:	00000400 	.word	0x00000400
 800065c:	20000110 	.word	0x20000110
 8000660:	20000128 	.word	0x20000128

08000664 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <SystemInit+0x20>)
 800066a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800066e:	4a05      	ldr	r2, [pc, #20]	; (8000684 <SystemInit+0x20>)
 8000670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800068c:	480d      	ldr	r0, [pc, #52]	; (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800068e:	490e      	ldr	r1, [pc, #56]	; (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000690:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a4:	4c0b      	ldr	r4, [pc, #44]	; (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006b2:	f7ff ffd7 	bl	8000664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b6:	f002 f967 	bl	8002988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ba:	f7ff fda3 	bl	8000204 <main>

080006be <LoopForever>:

LoopForever:
    b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006cc:	080034a8 	.word	0x080034a8
  ldr r2, =_sbss
 80006d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006d4:	20000128 	.word	0x20000128

080006d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_2_IRQHandler>
	...

080006dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_Init+0x28>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <HAL_Init+0x28>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ec:	2003      	movs	r0, #3
 80006ee:	f000 f931 	bl	8000954 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f000 f808 	bl	8000708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f8:	f7ff fe80 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40022000 	.word	0x40022000

08000708 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_InitTick+0x54>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_InitTick+0x58>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000722:	fbb2 f3f3 	udiv	r3, r2, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f93b 	bl	80009a2 <HAL_SYSTICK_Config>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e00e      	b.n	8000754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d80a      	bhi.n	8000752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073c:	2200      	movs	r2, #0
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f000 f911 	bl	800096a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_InitTick+0x5c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800074e:	2300      	movs	r3, #0
 8000750:	e000      	b.n	8000754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000000 	.word	0x20000000
 8000760:	20000008 	.word	0x20000008
 8000764:	20000004 	.word	0x20000004

08000768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_IncTick+0x20>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x24>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_IncTick+0x24>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000008 	.word	0x20000008
 800078c:	20000114 	.word	0x20000114

08000790 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;  
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <HAL_GetTick+0x14>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000114 	.word	0x20000114

080007a8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b0:	f7ff ffee 	bl	8000790 <HAL_GetTick>
 80007b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c0:	d005      	beq.n	80007ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <HAL_Delay+0x44>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	461a      	mov	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4413      	add	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007ce:	bf00      	nop
 80007d0:	f7ff ffde 	bl	8000790 <HAL_GetTick>
 80007d4:	4602      	mov	r2, r0
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d8f7      	bhi.n	80007d0 <HAL_Delay+0x28>
  {
  }
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000008 	.word	0x20000008

080007f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <__NVIC_SetPriorityGrouping+0x44>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800080c:	4013      	ands	r3, r2
 800080e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800081c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000822:	4a04      	ldr	r2, [pc, #16]	; (8000834 <__NVIC_SetPriorityGrouping+0x44>)
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	60d3      	str	r3, [r2, #12]
}
 8000828:	bf00      	nop
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <__NVIC_GetPriorityGrouping+0x18>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	0a1b      	lsrs	r3, r3, #8
 8000842:	f003 0307 	and.w	r3, r3, #7
}
 8000846:	4618      	mov	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	2b00      	cmp	r3, #0
 8000866:	db0a      	blt.n	800087e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	b2da      	uxtb	r2, r3
 800086c:	490c      	ldr	r1, [pc, #48]	; (80008a0 <__NVIC_SetPriority+0x4c>)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	0112      	lsls	r2, r2, #4
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	440b      	add	r3, r1
 8000878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800087c:	e00a      	b.n	8000894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4908      	ldr	r1, [pc, #32]	; (80008a4 <__NVIC_SetPriority+0x50>)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	f003 030f 	and.w	r3, r3, #15
 800088a:	3b04      	subs	r3, #4
 800088c:	0112      	lsls	r2, r2, #4
 800088e:	b2d2      	uxtb	r2, r2
 8000890:	440b      	add	r3, r1
 8000892:	761a      	strb	r2, [r3, #24]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000e100 	.word	0xe000e100
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b089      	sub	sp, #36	; 0x24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	f1c3 0307 	rsb	r3, r3, #7
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	bf28      	it	cs
 80008c6:	2304      	movcs	r3, #4
 80008c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3304      	adds	r3, #4
 80008ce:	2b06      	cmp	r3, #6
 80008d0:	d902      	bls.n	80008d8 <NVIC_EncodePriority+0x30>
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3b03      	subs	r3, #3
 80008d6:	e000      	b.n	80008da <NVIC_EncodePriority+0x32>
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	f04f 32ff 	mov.w	r2, #4294967295
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43da      	mvns	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	401a      	ands	r2, r3
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f0:	f04f 31ff 	mov.w	r1, #4294967295
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	fa01 f303 	lsl.w	r3, r1, r3
 80008fa:	43d9      	mvns	r1, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000900:	4313      	orrs	r3, r2
         );
}
 8000902:	4618      	mov	r0, r3
 8000904:	3724      	adds	r7, #36	; 0x24
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3b01      	subs	r3, #1
 800091c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000920:	d301      	bcc.n	8000926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000922:	2301      	movs	r3, #1
 8000924:	e00f      	b.n	8000946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <SysTick_Config+0x40>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800092e:	210f      	movs	r1, #15
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f7ff ff8e 	bl	8000854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <SysTick_Config+0x40>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <SysTick_Config+0x40>)
 8000940:	2207      	movs	r2, #7
 8000942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	e000e010 	.word	0xe000e010

08000954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff ff47 	bl	80007f0 <__NVIC_SetPriorityGrouping>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b086      	sub	sp, #24
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800097c:	f7ff ff5c 	bl	8000838 <__NVIC_GetPriorityGrouping>
 8000980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	68b9      	ldr	r1, [r7, #8]
 8000986:	6978      	ldr	r0, [r7, #20]
 8000988:	f7ff ff8e 	bl	80008a8 <NVIC_EncodePriority>
 800098c:	4602      	mov	r2, r0
 800098e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff5d 	bl	8000854 <__NVIC_SetPriority>
}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ffb0 	bl	8000910 <SysTick_Config>
 80009b0:	4603      	mov	r3, r0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009bc:	b480      	push	{r7}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ca:	e14e      	b.n	8000c6a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	2101      	movs	r1, #1
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	fa01 f303 	lsl.w	r3, r1, r3
 80009d8:	4013      	ands	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f000 8140 	beq.w	8000c64 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f003 0303 	and.w	r3, r3, #3
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d005      	beq.n	80009fc <HAL_GPIO_Init+0x40>
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f003 0303 	and.w	r3, r3, #3
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d130      	bne.n	8000a5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	2203      	movs	r2, #3
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	68da      	ldr	r2, [r3, #12]
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a32:	2201      	movs	r2, #1
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	091b      	lsrs	r3, r3, #4
 8000a48:	f003 0201 	and.w	r2, r3, #1
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f003 0303 	and.w	r3, r3, #3
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d017      	beq.n	8000a9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2203      	movs	r2, #3
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f003 0303 	and.w	r3, r3, #3
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d123      	bne.n	8000aee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	08da      	lsrs	r2, r3, #3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3208      	adds	r2, #8
 8000aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	220f      	movs	r2, #15
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	691a      	ldr	r2, [r3, #16]
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	f003 0307 	and.w	r3, r3, #7
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	08da      	lsrs	r2, r3, #3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3208      	adds	r2, #8
 8000ae8:	6939      	ldr	r1, [r7, #16]
 8000aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	2203      	movs	r2, #3
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f003 0203 	and.w	r2, r3, #3
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f000 809a 	beq.w	8000c64 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b30:	4b55      	ldr	r3, [pc, #340]	; (8000c88 <HAL_GPIO_Init+0x2cc>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a54      	ldr	r2, [pc, #336]	; (8000c88 <HAL_GPIO_Init+0x2cc>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b52      	ldr	r3, [pc, #328]	; (8000c88 <HAL_GPIO_Init+0x2cc>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b48:	4a50      	ldr	r2, [pc, #320]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	089b      	lsrs	r3, r3, #2
 8000b4e:	3302      	adds	r3, #2
 8000b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	f003 0303 	and.w	r3, r3, #3
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	220f      	movs	r2, #15
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	43db      	mvns	r3, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b72:	d013      	beq.n	8000b9c <HAL_GPIO_Init+0x1e0>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a46      	ldr	r2, [pc, #280]	; (8000c90 <HAL_GPIO_Init+0x2d4>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d00d      	beq.n	8000b98 <HAL_GPIO_Init+0x1dc>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a45      	ldr	r2, [pc, #276]	; (8000c94 <HAL_GPIO_Init+0x2d8>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d007      	beq.n	8000b94 <HAL_GPIO_Init+0x1d8>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a44      	ldr	r2, [pc, #272]	; (8000c98 <HAL_GPIO_Init+0x2dc>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d101      	bne.n	8000b90 <HAL_GPIO_Init+0x1d4>
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	e006      	b.n	8000b9e <HAL_GPIO_Init+0x1e2>
 8000b90:	2305      	movs	r3, #5
 8000b92:	e004      	b.n	8000b9e <HAL_GPIO_Init+0x1e2>
 8000b94:	2302      	movs	r3, #2
 8000b96:	e002      	b.n	8000b9e <HAL_GPIO_Init+0x1e2>
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e000      	b.n	8000b9e <HAL_GPIO_Init+0x1e2>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	f002 0203 	and.w	r2, r2, #3
 8000ba4:	0092      	lsls	r2, r2, #2
 8000ba6:	4093      	lsls	r3, r2
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bae:	4937      	ldr	r1, [pc, #220]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	3302      	adds	r3, #2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bbc:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <HAL_GPIO_Init+0x2e0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000be0:	4a2e      	ldr	r2, [pc, #184]	; (8000c9c <HAL_GPIO_Init+0x2e0>)
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000be6:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <HAL_GPIO_Init+0x2e0>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c0a:	4a24      	ldr	r2, [pc, #144]	; (8000c9c <HAL_GPIO_Init+0x2e0>)
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c10:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <HAL_GPIO_Init+0x2e0>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d003      	beq.n	8000c34 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c34:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <HAL_GPIO_Init+0x2e0>)
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_GPIO_Init+0x2e0>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <HAL_GPIO_Init+0x2e0>)
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	3301      	adds	r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	fa22 f303 	lsr.w	r3, r2, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f47f aea9 	bne.w	80009cc <HAL_GPIO_Init+0x10>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	bf00      	nop
 8000c7e:	371c      	adds	r7, #28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010000 	.word	0x40010000
 8000c90:	48000400 	.word	0x48000400
 8000c94:	48000800 	.word	0x48000800
 8000c98:	48000c00 	.word	0x48000c00
 8000c9c:	40010400 	.word	0x40010400

08000ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]
 8000cac:	4613      	mov	r3, r2
 8000cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cb0:	787b      	ldrb	r3, [r7, #1]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cb6:	887a      	ldrh	r2, [r7, #2]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cbc:	e002      	b.n	8000cc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cbe:	887a      	ldrh	r2, [r7, #2]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ce2:	887a      	ldrh	r2, [r7, #2]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	041a      	lsls	r2, r3, #16
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	43d9      	mvns	r1, r3
 8000cee:	887b      	ldrh	r3, [r7, #2]
 8000cf0:	400b      	ands	r3, r1
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	619a      	str	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d14:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	f001 b823 	b.w	8001d70 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 817d 	beq.w	800103a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d40:	4bbc      	ldr	r3, [pc, #752]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 030c 	and.w	r3, r3, #12
 8000d48:	2b04      	cmp	r3, #4
 8000d4a:	d00c      	beq.n	8000d66 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d4c:	4bb9      	ldr	r3, [pc, #740]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 030c 	and.w	r3, r3, #12
 8000d54:	2b08      	cmp	r3, #8
 8000d56:	d15c      	bne.n	8000e12 <HAL_RCC_OscConfig+0x10e>
 8000d58:	4bb6      	ldr	r3, [pc, #728]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d64:	d155      	bne.n	8000e12 <HAL_RCC_OscConfig+0x10e>
 8000d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d6a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d72:	fa93 f3a3 	rbit	r3, r3
 8000d76:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d7a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d7e:	fab3 f383 	clz	r3, r3
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	095b      	lsrs	r3, r3, #5
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d102      	bne.n	8000d98 <HAL_RCC_OscConfig+0x94>
 8000d92:	4ba8      	ldr	r3, [pc, #672]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	e015      	b.n	8000dc4 <HAL_RCC_OscConfig+0xc0>
 8000d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d9c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000da4:	fa93 f3a3 	rbit	r3, r3
 8000da8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000dac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000db4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000db8:	fa93 f3a3 	rbit	r3, r3
 8000dbc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000dc0:	4b9c      	ldr	r3, [pc, #624]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dc8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000dcc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000dd0:	fa92 f2a2 	rbit	r2, r2
 8000dd4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000dd8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000ddc:	fab2 f282 	clz	r2, r2
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	f042 0220 	orr.w	r2, r2, #32
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	f002 021f 	and.w	r2, r2, #31
 8000dec:	2101      	movs	r1, #1
 8000dee:	fa01 f202 	lsl.w	r2, r1, r2
 8000df2:	4013      	ands	r3, r2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 811f 	beq.w	8001038 <HAL_RCC_OscConfig+0x334>
 8000dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f040 8116 	bne.w	8001038 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	f000 bfaf 	b.w	8001d70 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e22:	d106      	bne.n	8000e32 <HAL_RCC_OscConfig+0x12e>
 8000e24:	4b83      	ldr	r3, [pc, #524]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a82      	ldr	r2, [pc, #520]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e036      	b.n	8000ea0 <HAL_RCC_OscConfig+0x19c>
 8000e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10c      	bne.n	8000e5c <HAL_RCC_OscConfig+0x158>
 8000e42:	4b7c      	ldr	r3, [pc, #496]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a7b      	ldr	r2, [pc, #492]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	4b79      	ldr	r3, [pc, #484]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a78      	ldr	r2, [pc, #480]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e021      	b.n	8000ea0 <HAL_RCC_OscConfig+0x19c>
 8000e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e6c:	d10c      	bne.n	8000e88 <HAL_RCC_OscConfig+0x184>
 8000e6e:	4b71      	ldr	r3, [pc, #452]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a70      	ldr	r2, [pc, #448]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	4b6e      	ldr	r3, [pc, #440]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a6d      	ldr	r2, [pc, #436]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	e00b      	b.n	8000ea0 <HAL_RCC_OscConfig+0x19c>
 8000e88:	4b6a      	ldr	r3, [pc, #424]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a69      	ldr	r2, [pc, #420]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4b67      	ldr	r3, [pc, #412]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a66      	ldr	r2, [pc, #408]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ea0:	4b64      	ldr	r3, [pc, #400]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea4:	f023 020f 	bic.w	r2, r3, #15
 8000ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	495f      	ldr	r1, [pc, #380]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d059      	beq.n	8000f7e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eca:	f7ff fc61 	bl	8000790 <HAL_GetTick>
 8000ece:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed2:	e00a      	b.n	8000eea <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed4:	f7ff fc5c 	bl	8000790 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b64      	cmp	r3, #100	; 0x64
 8000ee2:	d902      	bls.n	8000eea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	f000 bf43 	b.w	8001d70 <HAL_RCC_OscConfig+0x106c>
 8000eea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000ef6:	fa93 f3a3 	rbit	r3, r3
 8000efa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000efe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f02:	fab3 f383 	clz	r3, r3
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	095b      	lsrs	r3, r3, #5
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d102      	bne.n	8000f1c <HAL_RCC_OscConfig+0x218>
 8000f16:	4b47      	ldr	r3, [pc, #284]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	e015      	b.n	8000f48 <HAL_RCC_OscConfig+0x244>
 8000f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f20:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f24:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f28:	fa93 f3a3 	rbit	r3, r3
 8000f2c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f34:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f38:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f3c:	fa93 f3a3 	rbit	r3, r3
 8000f40:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f44:	4b3b      	ldr	r3, [pc, #236]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f4c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f50:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f54:	fa92 f2a2 	rbit	r2, r2
 8000f58:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f5c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f60:	fab2 f282 	clz	r2, r2
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	f042 0220 	orr.w	r2, r2, #32
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	f002 021f 	and.w	r2, r2, #31
 8000f70:	2101      	movs	r1, #1
 8000f72:	fa01 f202 	lsl.w	r2, r1, r2
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0ab      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x1d0>
 8000f7c:	e05d      	b.n	800103a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fc07 	bl	8000790 <HAL_GetTick>
 8000f82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f86:	e00a      	b.n	8000f9e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fc02 	bl	8000790 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b64      	cmp	r3, #100	; 0x64
 8000f96:	d902      	bls.n	8000f9e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	f000 bee9 	b.w	8001d70 <HAL_RCC_OscConfig+0x106c>
 8000f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000faa:	fa93 f3a3 	rbit	r3, r3
 8000fae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000fb2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb6:	fab3 f383 	clz	r3, r3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	095b      	lsrs	r3, r3, #5
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d102      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x2cc>
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	e015      	b.n	8000ffc <HAL_RCC_OscConfig+0x2f8>
 8000fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000ff0:	fa93 f3a3 	rbit	r3, r3
 8000ff4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_RCC_OscConfig+0x330>)
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001000:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001004:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001008:	fa92 f2a2 	rbit	r2, r2
 800100c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001010:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001014:	fab2 f282 	clz	r2, r2
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	f042 0220 	orr.w	r2, r2, #32
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	f002 021f 	and.w	r2, r2, #31
 8001024:	2101      	movs	r1, #1
 8001026:	fa01 f202 	lsl.w	r2, r1, r2
 800102a:	4013      	ands	r3, r2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1ab      	bne.n	8000f88 <HAL_RCC_OscConfig+0x284>
 8001030:	e003      	b.n	800103a <HAL_RCC_OscConfig+0x336>
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800103e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 817d 	beq.w	800134a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001050:	4ba6      	ldr	r3, [pc, #664]	; (80012ec <HAL_RCC_OscConfig+0x5e8>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 030c 	and.w	r3, r3, #12
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00b      	beq.n	8001074 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800105c:	4ba3      	ldr	r3, [pc, #652]	; (80012ec <HAL_RCC_OscConfig+0x5e8>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	2b08      	cmp	r3, #8
 8001066:	d172      	bne.n	800114e <HAL_RCC_OscConfig+0x44a>
 8001068:	4ba0      	ldr	r3, [pc, #640]	; (80012ec <HAL_RCC_OscConfig+0x5e8>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d16c      	bne.n	800114e <HAL_RCC_OscConfig+0x44a>
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800107e:	fa93 f3a3 	rbit	r3, r3
 8001082:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001086:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108a:	fab3 f383 	clz	r3, r3
 800108e:	b2db      	uxtb	r3, r3
 8001090:	095b      	lsrs	r3, r3, #5
 8001092:	b2db      	uxtb	r3, r3
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b01      	cmp	r3, #1
 800109c:	d102      	bne.n	80010a4 <HAL_RCC_OscConfig+0x3a0>
 800109e:	4b93      	ldr	r3, [pc, #588]	; (80012ec <HAL_RCC_OscConfig+0x5e8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	e013      	b.n	80010cc <HAL_RCC_OscConfig+0x3c8>
 80010a4:	2302      	movs	r3, #2
 80010a6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010aa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010b6:	2302      	movs	r3, #2
 80010b8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010c0:	fa93 f3a3 	rbit	r3, r3
 80010c4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80010c8:	4b88      	ldr	r3, [pc, #544]	; (80012ec <HAL_RCC_OscConfig+0x5e8>)
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	2202      	movs	r2, #2
 80010ce:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80010d2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010d6:	fa92 f2a2 	rbit	r2, r2
 80010da:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010de:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010e2:	fab2 f282 	clz	r2, r2
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	f042 0220 	orr.w	r2, r2, #32
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	f002 021f 	and.w	r2, r2, #31
 80010f2:	2101      	movs	r1, #1
 80010f4:	fa01 f202 	lsl.w	r2, r1, r2
 80010f8:	4013      	ands	r3, r2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00a      	beq.n	8001114 <HAL_RCC_OscConfig+0x410>
 80010fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001102:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d002      	beq.n	8001114 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	f000 be2e 	b.w	8001d70 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001114:	4b75      	ldr	r3, [pc, #468]	; (80012ec <HAL_RCC_OscConfig+0x5e8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800111c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001120:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	21f8      	movs	r1, #248	; 0xf8
 800112a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001132:	fa91 f1a1 	rbit	r1, r1
 8001136:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800113a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800113e:	fab1 f181 	clz	r1, r1
 8001142:	b2c9      	uxtb	r1, r1
 8001144:	408b      	lsls	r3, r1
 8001146:	4969      	ldr	r1, [pc, #420]	; (80012ec <HAL_RCC_OscConfig+0x5e8>)
 8001148:	4313      	orrs	r3, r2
 800114a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114c:	e0fd      	b.n	800134a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800114e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001152:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 8088 	beq.w	8001270 <HAL_RCC_OscConfig+0x56c>
 8001160:	2301      	movs	r3, #1
 8001162:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800116a:	fa93 f3a3 	rbit	r3, r3
 800116e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001172:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001176:	fab3 f383 	clz	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001180:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	461a      	mov	r2, r3
 8001188:	2301      	movs	r3, #1
 800118a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fb00 	bl	8000790 <HAL_GetTick>
 8001190:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	e00a      	b.n	80011ac <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001196:	f7ff fafb 	bl	8000790 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d902      	bls.n	80011ac <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	f000 bde2 	b.w	8001d70 <HAL_RCC_OscConfig+0x106c>
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80011be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c2:	fab3 f383 	clz	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	095b      	lsrs	r3, r3, #5
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d102      	bne.n	80011dc <HAL_RCC_OscConfig+0x4d8>
 80011d6:	4b45      	ldr	r3, [pc, #276]	; (80012ec <HAL_RCC_OscConfig+0x5e8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	e013      	b.n	8001204 <HAL_RCC_OscConfig+0x500>
 80011dc:	2302      	movs	r3, #2
 80011de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011e6:	fa93 f3a3 	rbit	r3, r3
 80011ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011ee:	2302      	movs	r3, #2
 80011f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011f8:	fa93 f3a3 	rbit	r3, r3
 80011fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001200:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <HAL_RCC_OscConfig+0x5e8>)
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	2202      	movs	r2, #2
 8001206:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800120a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800120e:	fa92 f2a2 	rbit	r2, r2
 8001212:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001216:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800121a:	fab2 f282 	clz	r2, r2
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	f042 0220 	orr.w	r2, r2, #32
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	f002 021f 	and.w	r2, r2, #31
 800122a:	2101      	movs	r1, #1
 800122c:	fa01 f202 	lsl.w	r2, r1, r2
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0af      	beq.n	8001196 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <HAL_RCC_OscConfig+0x5e8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800123e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	21f8      	movs	r1, #248	; 0xf8
 800124c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001254:	fa91 f1a1 	rbit	r1, r1
 8001258:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800125c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001260:	fab1 f181 	clz	r1, r1
 8001264:	b2c9      	uxtb	r1, r1
 8001266:	408b      	lsls	r3, r1
 8001268:	4920      	ldr	r1, [pc, #128]	; (80012ec <HAL_RCC_OscConfig+0x5e8>)
 800126a:	4313      	orrs	r3, r2
 800126c:	600b      	str	r3, [r1, #0]
 800126e:	e06c      	b.n	800134a <HAL_RCC_OscConfig+0x646>
 8001270:	2301      	movs	r3, #1
 8001272:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001282:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001286:	fab3 f383 	clz	r3, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001290:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	461a      	mov	r2, r3
 8001298:	2300      	movs	r3, #0
 800129a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fa78 	bl	8000790 <HAL_GetTick>
 80012a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a4:	e00a      	b.n	80012bc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a6:	f7ff fa73 	bl	8000790 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d902      	bls.n	80012bc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	f000 bd5a 	b.w	8001d70 <HAL_RCC_OscConfig+0x106c>
 80012bc:	2302      	movs	r3, #2
 80012be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80012ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d2:	fab3 f383 	clz	r3, r3
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	095b      	lsrs	r3, r3, #5
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d104      	bne.n	80012f0 <HAL_RCC_OscConfig+0x5ec>
 80012e6:	4b01      	ldr	r3, [pc, #4]	; (80012ec <HAL_RCC_OscConfig+0x5e8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	e015      	b.n	8001318 <HAL_RCC_OscConfig+0x614>
 80012ec:	40021000 	.word	0x40021000
 80012f0:	2302      	movs	r3, #2
 80012f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001302:	2302      	movs	r3, #2
 8001304:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001308:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800130c:	fa93 f3a3 	rbit	r3, r3
 8001310:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001314:	4bc8      	ldr	r3, [pc, #800]	; (8001638 <HAL_RCC_OscConfig+0x934>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	2202      	movs	r2, #2
 800131a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800131e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001322:	fa92 f2a2 	rbit	r2, r2
 8001326:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800132a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800132e:	fab2 f282 	clz	r2, r2
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	f042 0220 	orr.w	r2, r2, #32
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	f002 021f 	and.w	r2, r2, #31
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	4013      	ands	r3, r2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1ad      	bne.n	80012a6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 8110 	beq.w	8001580 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001364:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d079      	beq.n	8001464 <HAL_RCC_OscConfig+0x760>
 8001370:	2301      	movs	r3, #1
 8001372:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001376:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001386:	fab3 f383 	clz	r3, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	4bab      	ldr	r3, [pc, #684]	; (800163c <HAL_RCC_OscConfig+0x938>)
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	461a      	mov	r2, r3
 8001396:	2301      	movs	r3, #1
 8001398:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139a:	f7ff f9f9 	bl	8000790 <HAL_GetTick>
 800139e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a2:	e00a      	b.n	80013ba <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a4:	f7ff f9f4 	bl	8000790 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d902      	bls.n	80013ba <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	f000 bcdb 	b.w	8001d70 <HAL_RCC_OscConfig+0x106c>
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013c4:	fa93 f3a3 	rbit	r3, r3
 80013c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80013cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013d4:	2202      	movs	r2, #2
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013dc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	fa93 f2a3 	rbit	r2, r3
 80013e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013f8:	2202      	movs	r2, #2
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	fa93 f2a3 	rbit	r2, r3
 800140a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001412:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001414:	4b88      	ldr	r3, [pc, #544]	; (8001638 <HAL_RCC_OscConfig+0x934>)
 8001416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001420:	2102      	movs	r1, #2
 8001422:	6019      	str	r1, [r3, #0]
 8001424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001428:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	fa93 f1a3 	rbit	r1, r3
 8001432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001436:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800143a:	6019      	str	r1, [r3, #0]
  return result;
 800143c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001440:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	fab3 f383 	clz	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	2101      	movs	r1, #1
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0a0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x6a0>
 8001462:	e08d      	b.n	8001580 <HAL_RCC_OscConfig+0x87c>
 8001464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001468:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001474:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	fa93 f2a3 	rbit	r2, r3
 800147e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001482:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001486:	601a      	str	r2, [r3, #0]
  return result;
 8001488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001490:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001492:	fab3 f383 	clz	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	4b68      	ldr	r3, [pc, #416]	; (800163c <HAL_RCC_OscConfig+0x938>)
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	461a      	mov	r2, r3
 80014a2:	2300      	movs	r3, #0
 80014a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a6:	f7ff f973 	bl	8000790 <HAL_GetTick>
 80014aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ae:	e00a      	b.n	80014c6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b0:	f7ff f96e 	bl	8000790 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d902      	bls.n	80014c6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	f000 bc55 	b.w	8001d70 <HAL_RCC_OscConfig+0x106c>
 80014c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014ce:	2202      	movs	r2, #2
 80014d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	fa93 f2a3 	rbit	r2, r3
 80014e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014f2:	2202      	movs	r2, #2
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	fa93 f2a3 	rbit	r2, r3
 8001504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001516:	2202      	movs	r2, #2
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	fa93 f2a3 	rbit	r2, r3
 8001528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001530:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <HAL_RCC_OscConfig+0x934>)
 8001534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800153e:	2102      	movs	r1, #2
 8001540:	6019      	str	r1, [r3, #0]
 8001542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001546:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	fa93 f1a3 	rbit	r1, r3
 8001550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001554:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001558:	6019      	str	r1, [r3, #0]
  return result;
 800155a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	fab3 f383 	clz	r3, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f003 031f 	and.w	r3, r3, #31
 8001574:	2101      	movs	r1, #1
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d197      	bne.n	80014b0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001584:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 81a1 	beq.w	80018d8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159c:	4b26      	ldr	r3, [pc, #152]	; (8001638 <HAL_RCC_OscConfig+0x934>)
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d116      	bne.n	80015d6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a8:	4b23      	ldr	r3, [pc, #140]	; (8001638 <HAL_RCC_OscConfig+0x934>)
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	4a22      	ldr	r2, [pc, #136]	; (8001638 <HAL_RCC_OscConfig+0x934>)
 80015ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b2:	61d3      	str	r3, [r2, #28]
 80015b4:	4b20      	ldr	r3, [pc, #128]	; (8001638 <HAL_RCC_OscConfig+0x934>)
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ca:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015ce:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015d0:	2301      	movs	r3, #1
 80015d2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <HAL_RCC_OscConfig+0x93c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d11a      	bne.n	8001618 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_RCC_OscConfig+0x93c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a16      	ldr	r2, [pc, #88]	; (8001640 <HAL_RCC_OscConfig+0x93c>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ee:	f7ff f8cf 	bl	8000790 <HAL_GetTick>
 80015f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f6:	e009      	b.n	800160c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f8:	f7ff f8ca 	bl	8000790 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b64      	cmp	r3, #100	; 0x64
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e3b1      	b.n	8001d70 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <HAL_RCC_OscConfig+0x93c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0ef      	beq.n	80015f8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d10d      	bne.n	8001644 <HAL_RCC_OscConfig+0x940>
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_RCC_OscConfig+0x934>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a02      	ldr	r2, [pc, #8]	; (8001638 <HAL_RCC_OscConfig+0x934>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	e03c      	b.n	80016b0 <HAL_RCC_OscConfig+0x9ac>
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	10908120 	.word	0x10908120
 8001640:	40007000 	.word	0x40007000
 8001644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001648:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10c      	bne.n	800166e <HAL_RCC_OscConfig+0x96a>
 8001654:	4bc1      	ldr	r3, [pc, #772]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4ac0      	ldr	r2, [pc, #768]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 800165a:	f023 0301 	bic.w	r3, r3, #1
 800165e:	6213      	str	r3, [r2, #32]
 8001660:	4bbe      	ldr	r3, [pc, #760]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4abd      	ldr	r2, [pc, #756]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 8001666:	f023 0304 	bic.w	r3, r3, #4
 800166a:	6213      	str	r3, [r2, #32]
 800166c:	e020      	b.n	80016b0 <HAL_RCC_OscConfig+0x9ac>
 800166e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001672:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b05      	cmp	r3, #5
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x994>
 800167e:	4bb7      	ldr	r3, [pc, #732]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4ab6      	ldr	r2, [pc, #728]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6213      	str	r3, [r2, #32]
 800168a:	4bb4      	ldr	r3, [pc, #720]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4ab3      	ldr	r2, [pc, #716]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0x9ac>
 8001698:	4bb0      	ldr	r3, [pc, #704]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4aaf      	ldr	r2, [pc, #700]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 800169e:	f023 0301 	bic.w	r3, r3, #1
 80016a2:	6213      	str	r3, [r2, #32]
 80016a4:	4bad      	ldr	r3, [pc, #692]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4aac      	ldr	r2, [pc, #688]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 80016aa:	f023 0304 	bic.w	r3, r3, #4
 80016ae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 8081 	beq.w	80017c4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c2:	f7ff f865 	bl	8000790 <HAL_GetTick>
 80016c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016cc:	f7ff f860 	bl	8000790 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e345      	b.n	8001d70 <HAL_RCC_OscConfig+0x106c>
 80016e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016ec:	2202      	movs	r2, #2
 80016ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	fa93 f2a3 	rbit	r2, r3
 80016fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001702:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001710:	2202      	movs	r2, #2
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001718:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	fa93 f2a3 	rbit	r2, r3
 8001722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001726:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800172a:	601a      	str	r2, [r3, #0]
  return result;
 800172c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001730:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001734:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001736:	fab3 f383 	clz	r3, r3
 800173a:	b2db      	uxtb	r3, r3
 800173c:	095b      	lsrs	r3, r3, #5
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d102      	bne.n	8001750 <HAL_RCC_OscConfig+0xa4c>
 800174a:	4b84      	ldr	r3, [pc, #528]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	e013      	b.n	8001778 <HAL_RCC_OscConfig+0xa74>
 8001750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001754:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001758:	2202      	movs	r2, #2
 800175a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001760:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	fa93 f2a3 	rbit	r2, r3
 800176a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	4b79      	ldr	r3, [pc, #484]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800177c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001780:	2102      	movs	r1, #2
 8001782:	6011      	str	r1, [r2, #0]
 8001784:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001788:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	fa92 f1a2 	rbit	r1, r2
 8001792:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001796:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800179a:	6011      	str	r1, [r2, #0]
  return result;
 800179c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017a0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	fab2 f282 	clz	r2, r2
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	f002 021f 	and.w	r2, r2, #31
 80017b6:	2101      	movs	r1, #1
 80017b8:	fa01 f202 	lsl.w	r2, r1, r2
 80017bc:	4013      	ands	r3, r2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d084      	beq.n	80016cc <HAL_RCC_OscConfig+0x9c8>
 80017c2:	e07f      	b.n	80018c4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c4:	f7fe ffe4 	bl	8000790 <HAL_GetTick>
 80017c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017cc:	e00b      	b.n	80017e6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7fe ffdf 	bl	8000790 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	; 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e2c4      	b.n	8001d70 <HAL_RCC_OscConfig+0x106c>
 80017e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017ee:	2202      	movs	r2, #2
 80017f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fa93 f2a3 	rbit	r2, r3
 8001800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001804:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001812:	2202      	movs	r2, #2
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	fa93 f2a3 	rbit	r2, r3
 8001824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001828:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800182c:	601a      	str	r2, [r3, #0]
  return result;
 800182e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001832:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001836:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001838:	fab3 f383 	clz	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	b2db      	uxtb	r3, r3
 8001842:	f043 0302 	orr.w	r3, r3, #2
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d102      	bne.n	8001852 <HAL_RCC_OscConfig+0xb4e>
 800184c:	4b43      	ldr	r3, [pc, #268]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	e013      	b.n	800187a <HAL_RCC_OscConfig+0xb76>
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800185a:	2202      	movs	r2, #2
 800185c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001862:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fa93 f2a3 	rbit	r2, r3
 800186c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001870:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	4b39      	ldr	r3, [pc, #228]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800187e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001882:	2102      	movs	r1, #2
 8001884:	6011      	str	r1, [r2, #0]
 8001886:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800188a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	fa92 f1a2 	rbit	r1, r2
 8001894:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001898:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800189c:	6011      	str	r1, [r2, #0]
  return result;
 800189e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018a2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	fab2 f282 	clz	r2, r2
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	f002 021f 	and.w	r2, r2, #31
 80018b8:	2101      	movs	r1, #1
 80018ba:	fa01 f202 	lsl.w	r2, r1, r2
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d184      	bne.n	80017ce <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018c4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d105      	bne.n	80018d8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018cc:	4b23      	ldr	r3, [pc, #140]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	4a22      	ldr	r2, [pc, #136]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 80018d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 8242 	beq.w	8001d6e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <HAL_RCC_OscConfig+0xc58>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	f000 8213 	beq.w	8001d1e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	2b02      	cmp	r3, #2
 8001906:	f040 8162 	bne.w	8001bce <HAL_RCC_OscConfig+0xeca>
 800190a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001912:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	fa93 f2a3 	rbit	r2, r3
 8001926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800192e:	601a      	str	r2, [r3, #0]
  return result;
 8001930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001934:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001938:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001944:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	461a      	mov	r2, r3
 800194c:	2300      	movs	r3, #0
 800194e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7fe ff1e 	bl	8000790 <HAL_GetTick>
 8001954:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001958:	e00c      	b.n	8001974 <HAL_RCC_OscConfig+0xc70>
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001960:	f7fe ff16 	bl	8000790 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e1fd      	b.n	8001d70 <HAL_RCC_OscConfig+0x106c>
 8001974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001978:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800197c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001986:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	fa93 f2a3 	rbit	r2, r3
 8001990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001994:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001998:	601a      	str	r2, [r3, #0]
  return result;
 800199a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d102      	bne.n	80019be <HAL_RCC_OscConfig+0xcba>
 80019b8:	4bb0      	ldr	r3, [pc, #704]	; (8001c7c <HAL_RCC_OscConfig+0xf78>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	e027      	b.n	8001a0e <HAL_RCC_OscConfig+0xd0a>
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	fa93 f2a3 	rbit	r2, r3
 8001a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a04:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	4b9c      	ldr	r3, [pc, #624]	; (8001c7c <HAL_RCC_OscConfig+0xf78>)
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a12:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a1a:	6011      	str	r1, [r2, #0]
 8001a1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a20:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	fa92 f1a2 	rbit	r1, r2
 8001a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a2e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a32:	6011      	str	r1, [r2, #0]
  return result;
 8001a34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a38:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	fab2 f282 	clz	r2, r2
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f042 0220 	orr.w	r2, r2, #32
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	f002 021f 	and.w	r2, r2, #31
 8001a4e:	2101      	movs	r1, #1
 8001a50:	fa01 f202 	lsl.w	r2, r1, r2
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d182      	bne.n	8001960 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a5a:	4b88      	ldr	r3, [pc, #544]	; (8001c7c <HAL_RCC_OscConfig+0xf78>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	497f      	ldr	r1, [pc, #508]	; (8001c7c <HAL_RCC_OscConfig+0xf78>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
 8001a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a86:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a94:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fa93 f2a3 	rbit	r2, r3
 8001a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001aa6:	601a      	str	r2, [r3, #0]
  return result;
 8001aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ab0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001abc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7fe fe62 	bl	8000790 <HAL_GetTick>
 8001acc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad0:	e009      	b.n	8001ae6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7fe fe5d 	bl	8000790 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e144      	b.n	8001d70 <HAL_RCC_OscConfig+0x106c>
 8001ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aea:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	fa93 f2a3 	rbit	r2, r3
 8001b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b06:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b0a:	601a      	str	r2, [r3, #0]
  return result;
 8001b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b10:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	095b      	lsrs	r3, r3, #5
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d102      	bne.n	8001b30 <HAL_RCC_OscConfig+0xe2c>
 8001b2a:	4b54      	ldr	r3, [pc, #336]	; (8001c7c <HAL_RCC_OscConfig+0xf78>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	e027      	b.n	8001b80 <HAL_RCC_OscConfig+0xe7c>
 8001b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b34:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b42:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	fa93 f2a3 	rbit	r2, r3
 8001b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b50:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b68:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	fa93 f2a3 	rbit	r2, r3
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	4b3f      	ldr	r3, [pc, #252]	; (8001c7c <HAL_RCC_OscConfig+0xf78>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b84:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b8c:	6011      	str	r1, [r2, #0]
 8001b8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b92:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	fa92 f1a2 	rbit	r1, r2
 8001b9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ba0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ba4:	6011      	str	r1, [r2, #0]
  return result;
 8001ba6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001baa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	fab2 f282 	clz	r2, r2
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	f042 0220 	orr.w	r2, r2, #32
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	f002 021f 	and.w	r2, r2, #31
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d082      	beq.n	8001ad2 <HAL_RCC_OscConfig+0xdce>
 8001bcc:	e0cf      	b.n	8001d6e <HAL_RCC_OscConfig+0x106a>
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	fa93 f2a3 	rbit	r2, r3
 8001bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bf2:	601a      	str	r2, [r3, #0]
  return result;
 8001bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bfc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2300      	movs	r3, #0
 8001c12:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7fe fdbc 	bl	8000790 <HAL_GetTick>
 8001c18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1c:	e009      	b.n	8001c32 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1e:	f7fe fdb7 	bl	8000790 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e09e      	b.n	8001d70 <HAL_RCC_OscConfig+0x106c>
 8001c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c36:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c44:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	fa93 f2a3 	rbit	r2, r3
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c56:	601a      	str	r2, [r3, #0]
  return result;
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	095b      	lsrs	r3, r3, #5
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d104      	bne.n	8001c80 <HAL_RCC_OscConfig+0xf7c>
 8001c76:	4b01      	ldr	r3, [pc, #4]	; (8001c7c <HAL_RCC_OscConfig+0xf78>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	e029      	b.n	8001cd0 <HAL_RCC_OscConfig+0xfcc>
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	fa93 f2a3 	rbit	r2, r3
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001caa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	fa93 f2a3 	rbit	r2, r3
 8001cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_OscConfig+0x1078>)
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cd4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cdc:	6011      	str	r1, [r2, #0]
 8001cde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	fa92 f1a2 	rbit	r1, r2
 8001cec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cf0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cf4:	6011      	str	r1, [r2, #0]
  return result;
 8001cf6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cfa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	fab2 f282 	clz	r2, r2
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	f042 0220 	orr.w	r2, r2, #32
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	f002 021f 	and.w	r2, r2, #31
 8001d10:	2101      	movs	r1, #1
 8001d12:	fa01 f202 	lsl.w	r2, r1, r2
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d180      	bne.n	8001c1e <HAL_RCC_OscConfig+0xf1a>
 8001d1c:	e027      	b.n	8001d6e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e01e      	b.n	8001d70 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_OscConfig+0x1078>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d3a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d3e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d10b      	bne.n	8001d6a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000

08001d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b09e      	sub	sp, #120	; 0x78
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e162      	b.n	800205e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d98:	4b90      	ldr	r3, [pc, #576]	; (8001fdc <HAL_RCC_ClockConfig+0x25c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d910      	bls.n	8001dc8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b8d      	ldr	r3, [pc, #564]	; (8001fdc <HAL_RCC_ClockConfig+0x25c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 0207 	bic.w	r2, r3, #7
 8001dae:	498b      	ldr	r1, [pc, #556]	; (8001fdc <HAL_RCC_ClockConfig+0x25c>)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b89      	ldr	r3, [pc, #548]	; (8001fdc <HAL_RCC_ClockConfig+0x25c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e14a      	b.n	800205e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd4:	4b82      	ldr	r3, [pc, #520]	; (8001fe0 <HAL_RCC_ClockConfig+0x260>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	497f      	ldr	r1, [pc, #508]	; (8001fe0 <HAL_RCC_ClockConfig+0x260>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80dc 	beq.w	8001fac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d13c      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xf6>
 8001dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e00:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d102      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xa6>
 8001e20:	4b6f      	ldr	r3, [pc, #444]	; (8001fe0 <HAL_RCC_ClockConfig+0x260>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	e00f      	b.n	8001e46 <HAL_RCC_ClockConfig+0xc6>
 8001e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	667b      	str	r3, [r7, #100]	; 0x64
 8001e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e38:	663b      	str	r3, [r7, #96]	; 0x60
 8001e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e42:	4b67      	ldr	r3, [pc, #412]	; (8001fe0 <HAL_RCC_ClockConfig+0x260>)
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e4e:	fa92 f2a2 	rbit	r2, r2
 8001e52:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e56:	fab2 f282 	clz	r2, r2
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	f042 0220 	orr.w	r2, r2, #32
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	f002 021f 	and.w	r2, r2, #31
 8001e66:	2101      	movs	r1, #1
 8001e68:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d17b      	bne.n	8001f6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e0f3      	b.n	800205e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d13c      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x178>
 8001e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	095b      	lsrs	r3, r3, #5
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d102      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x128>
 8001ea2:	4b4f      	ldr	r3, [pc, #316]	; (8001fe0 <HAL_RCC_ClockConfig+0x260>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	e00f      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x148>
 8001ea8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8001eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eba:	643b      	str	r3, [r7, #64]	; 0x40
 8001ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ec4:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <HAL_RCC_ClockConfig+0x260>)
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ecc:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ed0:	fa92 f2a2 	rbit	r2, r2
 8001ed4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ed8:	fab2 f282 	clz	r2, r2
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	f042 0220 	orr.w	r2, r2, #32
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f002 021f 	and.w	r2, r2, #31
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f202 	lsl.w	r2, r1, r2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d13a      	bne.n	8001f6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0b2      	b.n	800205e <HAL_RCC_ClockConfig+0x2de>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	095b      	lsrs	r3, r3, #5
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d102      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x1a0>
 8001f1a:	4b31      	ldr	r3, [pc, #196]	; (8001fe0 <HAL_RCC_ClockConfig+0x260>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	e00d      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1bc>
 8001f20:	2302      	movs	r3, #2
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	623b      	str	r3, [r7, #32]
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_RCC_ClockConfig+0x260>)
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	61ba      	str	r2, [r7, #24]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	fa92 f2a2 	rbit	r2, r2
 8001f46:	617a      	str	r2, [r7, #20]
  return result;
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	fab2 f282 	clz	r2, r2
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	f042 0220 	orr.w	r2, r2, #32
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	f002 021f 	and.w	r2, r2, #31
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e079      	b.n	800205e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_RCC_ClockConfig+0x260>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f023 0203 	bic.w	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	491a      	ldr	r1, [pc, #104]	; (8001fe0 <HAL_RCC_ClockConfig+0x260>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f7c:	f7fe fc08 	bl	8000790 <HAL_GetTick>
 8001f80:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f84:	f7fe fc04 	bl	8000790 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e061      	b.n	800205e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_RCC_ClockConfig+0x260>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 020c 	and.w	r2, r3, #12
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d1eb      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCC_ClockConfig+0x25c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d214      	bcs.n	8001fe4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_RCC_ClockConfig+0x25c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 0207 	bic.w	r2, r3, #7
 8001fc2:	4906      	ldr	r1, [pc, #24]	; (8001fdc <HAL_RCC_ClockConfig+0x25c>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <HAL_RCC_ClockConfig+0x25c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e040      	b.n	800205e <HAL_RCC_ClockConfig+0x2de>
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_RCC_ClockConfig+0x2e8>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	491a      	ldr	r1, [pc, #104]	; (8002068 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d009      	beq.n	8002022 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <HAL_RCC_ClockConfig+0x2e8>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4912      	ldr	r1, [pc, #72]	; (8002068 <HAL_RCC_ClockConfig+0x2e8>)
 800201e:	4313      	orrs	r3, r2
 8002020:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002022:	f000 f829 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 8002026:	4601      	mov	r1, r0
 8002028:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_RCC_ClockConfig+0x2e8>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002030:	22f0      	movs	r2, #240	; 0xf0
 8002032:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	fa92 f2a2 	rbit	r2, r2
 800203a:	60fa      	str	r2, [r7, #12]
  return result;
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	fab2 f282 	clz	r2, r2
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	40d3      	lsrs	r3, r2
 8002046:	4a09      	ldr	r2, [pc, #36]	; (800206c <HAL_RCC_ClockConfig+0x2ec>)
 8002048:	5cd3      	ldrb	r3, [r2, r3]
 800204a:	fa21 f303 	lsr.w	r3, r1, r3
 800204e:	4a08      	ldr	r2, [pc, #32]	; (8002070 <HAL_RCC_ClockConfig+0x2f0>)
 8002050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_RCC_ClockConfig+0x2f4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fb56 	bl	8000708 <HAL_InitTick>
  
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3778      	adds	r7, #120	; 0x78
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	08003404 	.word	0x08003404
 8002070:	20000000 	.word	0x20000000
 8002074:	20000004 	.word	0x20000004

08002078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b08b      	sub	sp, #44	; 0x2c
 800207c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002092:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d002      	beq.n	80020a8 <HAL_RCC_GetSysClockFreq+0x30>
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d003      	beq.n	80020ae <HAL_RCC_GetSysClockFreq+0x36>
 80020a6:	e03c      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a8:	4b24      	ldr	r3, [pc, #144]	; (800213c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020aa:	623b      	str	r3, [r7, #32]
      break;
 80020ac:	e03c      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	fa92 f2a2 	rbit	r2, r2
 80020c0:	607a      	str	r2, [r7, #4]
  return result;
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	fab2 f282 	clz	r2, r2
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	40d3      	lsrs	r3, r2
 80020cc:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	220f      	movs	r2, #15
 80020dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	fa92 f2a2 	rbit	r2, r2
 80020e4:	60fa      	str	r2, [r7, #12]
  return result;
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	fab2 f282 	clz	r2, r2
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	40d3      	lsrs	r3, r2
 80020f0:	4a14      	ldr	r2, [pc, #80]	; (8002144 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020f2:	5cd3      	ldrb	r3, [r2, r3]
 80020f4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002100:	4a0e      	ldr	r2, [pc, #56]	; (800213c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	fbb2 f2f3 	udiv	r2, r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fb02 f303 	mul.w	r3, r2, r3
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
 8002110:	e004      	b.n	800211c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	623b      	str	r3, [r7, #32]
      break;
 8002120:	e002      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002124:	623b      	str	r3, [r7, #32]
      break;
 8002126:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002128:	6a3b      	ldr	r3, [r7, #32]
}
 800212a:	4618      	mov	r0, r3
 800212c:	372c      	adds	r7, #44	; 0x2c
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	007a1200 	.word	0x007a1200
 8002140:	0800341c 	.word	0x0800341c
 8002144:	0800342c 	.word	0x0800342c
 8002148:	003d0900 	.word	0x003d0900

0800214c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <HAL_RCC_GetHCLKFreq+0x14>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000000 	.word	0x20000000

08002164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800216a:	f7ff ffef 	bl	800214c <HAL_RCC_GetHCLKFreq>
 800216e:	4601      	mov	r1, r0
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002178:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800217c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	fa92 f2a2 	rbit	r2, r2
 8002184:	603a      	str	r2, [r7, #0]
  return result;
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	fab2 f282 	clz	r2, r2
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	40d3      	lsrs	r3, r2
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002192:	5cd3      	ldrb	r3, [r2, r3]
 8002194:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08003414 	.word	0x08003414

080021a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021ae:	f7ff ffcd 	bl	800214c <HAL_RCC_GetHCLKFreq>
 80021b2:	4601      	mov	r1, r0
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	fa92 f2a2 	rbit	r2, r2
 80021c8:	603a      	str	r2, [r7, #0]
  return result;
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	fab2 f282 	clz	r2, r2
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	40d3      	lsrs	r3, r2
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	08003414 	.word	0x08003414

080021ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e040      	b.n	8002280 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7fe f918 	bl	8000444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2224      	movs	r2, #36	; 0x24
 8002218:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f8c0 	bl	80023b0 <UART_SetConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e022      	b.n	8002280 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f9ea 	bl	800261c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fa71 	bl	8002760 <UART_CheckIdleState>
 800227e:	4603      	mov	r3, r0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800229c:	2b20      	cmp	r3, #32
 800229e:	f040 8082 	bne.w	80023a6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <HAL_UART_Transmit+0x26>
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e07a      	b.n	80023a8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_UART_Transmit+0x38>
 80022bc:	2302      	movs	r3, #2
 80022be:	e073      	b.n	80023a8 <HAL_UART_Transmit+0x120>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2221      	movs	r2, #33	; 0x21
 80022d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022d6:	f7fe fa5b 	bl	8000790 <HAL_GetTick>
 80022da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	88fa      	ldrh	r2, [r7, #6]
 80022e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	88fa      	ldrh	r2, [r7, #6]
 80022e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f4:	d108      	bne.n	8002308 <HAL_UART_Transmit+0x80>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d104      	bne.n	8002308 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	61bb      	str	r3, [r7, #24]
 8002306:	e003      	b.n	8002310 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002318:	e02d      	b.n	8002376 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2200      	movs	r2, #0
 8002322:	2180      	movs	r1, #128	; 0x80
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fa64 	bl	80027f2 <UART_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e039      	b.n	80023a8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10b      	bne.n	8002352 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	881a      	ldrh	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002346:	b292      	uxth	r2, r2
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	3302      	adds	r3, #2
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	e008      	b.n	8002364 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	781a      	ldrb	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	b292      	uxth	r2, r2
 800235c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3301      	adds	r3, #1
 8002362:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800236a:	b29b      	uxth	r3, r3
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1cb      	bne.n	800231a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2200      	movs	r2, #0
 800238a:	2140      	movs	r1, #64	; 0x40
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 fa30 	bl	80027f2 <UART_WaitOnFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e005      	b.n	80023a8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e000      	b.n	80023a8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
  }
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b8a      	ldr	r3, [pc, #552]	; (8002604 <UART_SetConfig+0x254>)
 80023dc:	4013      	ands	r3, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	6979      	ldr	r1, [r7, #20]
 80023e4:	430b      	orrs	r3, r1
 80023e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a78      	ldr	r2, [pc, #480]	; (8002608 <UART_SetConfig+0x258>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d120      	bne.n	800246e <UART_SetConfig+0xbe>
 800242c:	4b77      	ldr	r3, [pc, #476]	; (800260c <UART_SetConfig+0x25c>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b03      	cmp	r3, #3
 8002436:	d817      	bhi.n	8002468 <UART_SetConfig+0xb8>
 8002438:	a201      	add	r2, pc, #4	; (adr r2, 8002440 <UART_SetConfig+0x90>)
 800243a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243e:	bf00      	nop
 8002440:	08002451 	.word	0x08002451
 8002444:	0800245d 	.word	0x0800245d
 8002448:	08002463 	.word	0x08002463
 800244c:	08002457 	.word	0x08002457
 8002450:	2300      	movs	r3, #0
 8002452:	77fb      	strb	r3, [r7, #31]
 8002454:	e01d      	b.n	8002492 <UART_SetConfig+0xe2>
 8002456:	2302      	movs	r3, #2
 8002458:	77fb      	strb	r3, [r7, #31]
 800245a:	e01a      	b.n	8002492 <UART_SetConfig+0xe2>
 800245c:	2304      	movs	r3, #4
 800245e:	77fb      	strb	r3, [r7, #31]
 8002460:	e017      	b.n	8002492 <UART_SetConfig+0xe2>
 8002462:	2308      	movs	r3, #8
 8002464:	77fb      	strb	r3, [r7, #31]
 8002466:	e014      	b.n	8002492 <UART_SetConfig+0xe2>
 8002468:	2310      	movs	r3, #16
 800246a:	77fb      	strb	r3, [r7, #31]
 800246c:	e011      	b.n	8002492 <UART_SetConfig+0xe2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a67      	ldr	r2, [pc, #412]	; (8002610 <UART_SetConfig+0x260>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d102      	bne.n	800247e <UART_SetConfig+0xce>
 8002478:	2300      	movs	r3, #0
 800247a:	77fb      	strb	r3, [r7, #31]
 800247c:	e009      	b.n	8002492 <UART_SetConfig+0xe2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a64      	ldr	r2, [pc, #400]	; (8002614 <UART_SetConfig+0x264>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d102      	bne.n	800248e <UART_SetConfig+0xde>
 8002488:	2300      	movs	r3, #0
 800248a:	77fb      	strb	r3, [r7, #31]
 800248c:	e001      	b.n	8002492 <UART_SetConfig+0xe2>
 800248e:	2310      	movs	r3, #16
 8002490:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800249a:	d15b      	bne.n	8002554 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800249c:	7ffb      	ldrb	r3, [r7, #31]
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d827      	bhi.n	80024f2 <UART_SetConfig+0x142>
 80024a2:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <UART_SetConfig+0xf8>)
 80024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a8:	080024cd 	.word	0x080024cd
 80024ac:	080024d5 	.word	0x080024d5
 80024b0:	080024dd 	.word	0x080024dd
 80024b4:	080024f3 	.word	0x080024f3
 80024b8:	080024e3 	.word	0x080024e3
 80024bc:	080024f3 	.word	0x080024f3
 80024c0:	080024f3 	.word	0x080024f3
 80024c4:	080024f3 	.word	0x080024f3
 80024c8:	080024eb 	.word	0x080024eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024cc:	f7ff fe4a 	bl	8002164 <HAL_RCC_GetPCLK1Freq>
 80024d0:	61b8      	str	r0, [r7, #24]
        break;
 80024d2:	e013      	b.n	80024fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80024d4:	f7ff fe68 	bl	80021a8 <HAL_RCC_GetPCLK2Freq>
 80024d8:	61b8      	str	r0, [r7, #24]
        break;
 80024da:	e00f      	b.n	80024fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024dc:	4b4e      	ldr	r3, [pc, #312]	; (8002618 <UART_SetConfig+0x268>)
 80024de:	61bb      	str	r3, [r7, #24]
        break;
 80024e0:	e00c      	b.n	80024fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024e2:	f7ff fdc9 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 80024e6:	61b8      	str	r0, [r7, #24]
        break;
 80024e8:	e008      	b.n	80024fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ee:	61bb      	str	r3, [r7, #24]
        break;
 80024f0:	e004      	b.n	80024fc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	77bb      	strb	r3, [r7, #30]
        break;
 80024fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d074      	beq.n	80025ec <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	005a      	lsls	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	085b      	lsrs	r3, r3, #1
 800250c:	441a      	add	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	b29b      	uxth	r3, r3
 8002518:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b0f      	cmp	r3, #15
 800251e:	d916      	bls.n	800254e <UART_SetConfig+0x19e>
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002526:	d212      	bcs.n	800254e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	b29b      	uxth	r3, r3
 800252c:	f023 030f 	bic.w	r3, r3, #15
 8002530:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	085b      	lsrs	r3, r3, #1
 8002536:	b29b      	uxth	r3, r3
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	b29a      	uxth	r2, r3
 800253e:	89fb      	ldrh	r3, [r7, #14]
 8002540:	4313      	orrs	r3, r2
 8002542:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	89fa      	ldrh	r2, [r7, #14]
 800254a:	60da      	str	r2, [r3, #12]
 800254c:	e04e      	b.n	80025ec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	77bb      	strb	r3, [r7, #30]
 8002552:	e04b      	b.n	80025ec <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002554:	7ffb      	ldrb	r3, [r7, #31]
 8002556:	2b08      	cmp	r3, #8
 8002558:	d827      	bhi.n	80025aa <UART_SetConfig+0x1fa>
 800255a:	a201      	add	r2, pc, #4	; (adr r2, 8002560 <UART_SetConfig+0x1b0>)
 800255c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002560:	08002585 	.word	0x08002585
 8002564:	0800258d 	.word	0x0800258d
 8002568:	08002595 	.word	0x08002595
 800256c:	080025ab 	.word	0x080025ab
 8002570:	0800259b 	.word	0x0800259b
 8002574:	080025ab 	.word	0x080025ab
 8002578:	080025ab 	.word	0x080025ab
 800257c:	080025ab 	.word	0x080025ab
 8002580:	080025a3 	.word	0x080025a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002584:	f7ff fdee 	bl	8002164 <HAL_RCC_GetPCLK1Freq>
 8002588:	61b8      	str	r0, [r7, #24]
        break;
 800258a:	e013      	b.n	80025b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800258c:	f7ff fe0c 	bl	80021a8 <HAL_RCC_GetPCLK2Freq>
 8002590:	61b8      	str	r0, [r7, #24]
        break;
 8002592:	e00f      	b.n	80025b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <UART_SetConfig+0x268>)
 8002596:	61bb      	str	r3, [r7, #24]
        break;
 8002598:	e00c      	b.n	80025b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800259a:	f7ff fd6d 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 800259e:	61b8      	str	r0, [r7, #24]
        break;
 80025a0:	e008      	b.n	80025b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025a6:	61bb      	str	r3, [r7, #24]
        break;
 80025a8:	e004      	b.n	80025b4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	77bb      	strb	r3, [r7, #30]
        break;
 80025b2:	bf00      	nop
    }

    if (pclk != 0U)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d018      	beq.n	80025ec <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	085a      	lsrs	r2, r3, #1
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	441a      	add	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	2b0f      	cmp	r3, #15
 80025d4:	d908      	bls.n	80025e8 <UART_SetConfig+0x238>
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025dc:	d204      	bcs.n	80025e8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	e001      	b.n	80025ec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80025f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	efff69f3 	.word	0xefff69f3
 8002608:	40013800 	.word	0x40013800
 800260c:	40021000 	.word	0x40021000
 8002610:	40004400 	.word	0x40004400
 8002614:	40004800 	.word	0x40004800
 8002618:	007a1200 	.word	0x007a1200

0800261c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01a      	beq.n	8002732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800271a:	d10a      	bne.n	8002732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	605a      	str	r2, [r3, #4]
  }
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af02      	add	r7, sp, #8
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002770:	f7fe f80e 	bl	8000790 <HAL_GetTick>
 8002774:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b08      	cmp	r3, #8
 8002782:	d10e      	bne.n	80027a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f82d 	bl	80027f2 <UART_WaitOnFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e023      	b.n	80027ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d10e      	bne.n	80027ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f817 	bl	80027f2 <UART_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e00d      	b.n	80027ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2220      	movs	r2, #32
 80027d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b09c      	sub	sp, #112	; 0x70
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002802:	e0a5      	b.n	8002950 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280a:	f000 80a1 	beq.w	8002950 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280e:	f7fd ffbf 	bl	8000790 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800281a:	429a      	cmp	r2, r3
 800281c:	d302      	bcc.n	8002824 <UART_WaitOnFlagUntilTimeout+0x32>
 800281e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002820:	2b00      	cmp	r3, #0
 8002822:	d13e      	bne.n	80028a2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800282c:	e853 3f00 	ldrex	r3, [r3]
 8002830:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002834:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002838:	667b      	str	r3, [r7, #100]	; 0x64
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002842:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002844:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002846:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002848:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800284a:	e841 2300 	strex	r3, r2, [r1]
 800284e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1e6      	bne.n	8002824 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	3308      	adds	r3, #8
 800285c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002860:	e853 3f00 	ldrex	r3, [r3]
 8002864:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	663b      	str	r3, [r7, #96]	; 0x60
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3308      	adds	r3, #8
 8002874:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002876:	64ba      	str	r2, [r7, #72]	; 0x48
 8002878:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800287c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800287e:	e841 2300 	strex	r3, r2, [r1]
 8002882:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1e5      	bne.n	8002856 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e067      	b.n	8002972 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d04f      	beq.n	8002950 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028be:	d147      	bne.n	8002950 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	e853 3f00 	ldrex	r3, [r3]
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f0:	e841 2300 	strex	r3, r2, [r1]
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1e6      	bne.n	80028ca <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	3308      	adds	r3, #8
 8002902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	e853 3f00 	ldrex	r3, [r3]
 800290a:	613b      	str	r3, [r7, #16]
   return(result);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f023 0301 	bic.w	r3, r3, #1
 8002912:	66bb      	str	r3, [r7, #104]	; 0x68
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3308      	adds	r3, #8
 800291a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800291c:	623a      	str	r2, [r7, #32]
 800291e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002920:	69f9      	ldr	r1, [r7, #28]
 8002922:	6a3a      	ldr	r2, [r7, #32]
 8002924:	e841 2300 	strex	r3, r2, [r1]
 8002928:	61bb      	str	r3, [r7, #24]
   return(result);
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1e5      	bne.n	80028fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2220      	movs	r2, #32
 800293a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e010      	b.n	8002972 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69da      	ldr	r2, [r3, #28]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4013      	ands	r3, r2
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	429a      	cmp	r2, r3
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	429a      	cmp	r2, r3
 800296c:	f43f af4a 	beq.w	8002804 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3770      	adds	r7, #112	; 0x70
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <__errno>:
 800297c:	4b01      	ldr	r3, [pc, #4]	; (8002984 <__errno+0x8>)
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	2000000c 	.word	0x2000000c

08002988 <__libc_init_array>:
 8002988:	b570      	push	{r4, r5, r6, lr}
 800298a:	4d0d      	ldr	r5, [pc, #52]	; (80029c0 <__libc_init_array+0x38>)
 800298c:	4c0d      	ldr	r4, [pc, #52]	; (80029c4 <__libc_init_array+0x3c>)
 800298e:	1b64      	subs	r4, r4, r5
 8002990:	10a4      	asrs	r4, r4, #2
 8002992:	2600      	movs	r6, #0
 8002994:	42a6      	cmp	r6, r4
 8002996:	d109      	bne.n	80029ac <__libc_init_array+0x24>
 8002998:	4d0b      	ldr	r5, [pc, #44]	; (80029c8 <__libc_init_array+0x40>)
 800299a:	4c0c      	ldr	r4, [pc, #48]	; (80029cc <__libc_init_array+0x44>)
 800299c:	f000 fd1e 	bl	80033dc <_init>
 80029a0:	1b64      	subs	r4, r4, r5
 80029a2:	10a4      	asrs	r4, r4, #2
 80029a4:	2600      	movs	r6, #0
 80029a6:	42a6      	cmp	r6, r4
 80029a8:	d105      	bne.n	80029b6 <__libc_init_array+0x2e>
 80029aa:	bd70      	pop	{r4, r5, r6, pc}
 80029ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b0:	4798      	blx	r3
 80029b2:	3601      	adds	r6, #1
 80029b4:	e7ee      	b.n	8002994 <__libc_init_array+0xc>
 80029b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ba:	4798      	blx	r3
 80029bc:	3601      	adds	r6, #1
 80029be:	e7f2      	b.n	80029a6 <__libc_init_array+0x1e>
 80029c0:	080034a0 	.word	0x080034a0
 80029c4:	080034a0 	.word	0x080034a0
 80029c8:	080034a0 	.word	0x080034a0
 80029cc:	080034a4 	.word	0x080034a4

080029d0 <memset>:
 80029d0:	4402      	add	r2, r0
 80029d2:	4603      	mov	r3, r0
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d100      	bne.n	80029da <memset+0xa>
 80029d8:	4770      	bx	lr
 80029da:	f803 1b01 	strb.w	r1, [r3], #1
 80029de:	e7f9      	b.n	80029d4 <memset+0x4>

080029e0 <_puts_r>:
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	460e      	mov	r6, r1
 80029e4:	4605      	mov	r5, r0
 80029e6:	b118      	cbz	r0, 80029f0 <_puts_r+0x10>
 80029e8:	6983      	ldr	r3, [r0, #24]
 80029ea:	b90b      	cbnz	r3, 80029f0 <_puts_r+0x10>
 80029ec:	f000 fa48 	bl	8002e80 <__sinit>
 80029f0:	69ab      	ldr	r3, [r5, #24]
 80029f2:	68ac      	ldr	r4, [r5, #8]
 80029f4:	b913      	cbnz	r3, 80029fc <_puts_r+0x1c>
 80029f6:	4628      	mov	r0, r5
 80029f8:	f000 fa42 	bl	8002e80 <__sinit>
 80029fc:	4b2c      	ldr	r3, [pc, #176]	; (8002ab0 <_puts_r+0xd0>)
 80029fe:	429c      	cmp	r4, r3
 8002a00:	d120      	bne.n	8002a44 <_puts_r+0x64>
 8002a02:	686c      	ldr	r4, [r5, #4]
 8002a04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a06:	07db      	lsls	r3, r3, #31
 8002a08:	d405      	bmi.n	8002a16 <_puts_r+0x36>
 8002a0a:	89a3      	ldrh	r3, [r4, #12]
 8002a0c:	0598      	lsls	r0, r3, #22
 8002a0e:	d402      	bmi.n	8002a16 <_puts_r+0x36>
 8002a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a12:	f000 fad3 	bl	8002fbc <__retarget_lock_acquire_recursive>
 8002a16:	89a3      	ldrh	r3, [r4, #12]
 8002a18:	0719      	lsls	r1, r3, #28
 8002a1a:	d51d      	bpl.n	8002a58 <_puts_r+0x78>
 8002a1c:	6923      	ldr	r3, [r4, #16]
 8002a1e:	b1db      	cbz	r3, 8002a58 <_puts_r+0x78>
 8002a20:	3e01      	subs	r6, #1
 8002a22:	68a3      	ldr	r3, [r4, #8]
 8002a24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	60a3      	str	r3, [r4, #8]
 8002a2c:	bb39      	cbnz	r1, 8002a7e <_puts_r+0x9e>
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	da38      	bge.n	8002aa4 <_puts_r+0xc4>
 8002a32:	4622      	mov	r2, r4
 8002a34:	210a      	movs	r1, #10
 8002a36:	4628      	mov	r0, r5
 8002a38:	f000 f848 	bl	8002acc <__swbuf_r>
 8002a3c:	3001      	adds	r0, #1
 8002a3e:	d011      	beq.n	8002a64 <_puts_r+0x84>
 8002a40:	250a      	movs	r5, #10
 8002a42:	e011      	b.n	8002a68 <_puts_r+0x88>
 8002a44:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <_puts_r+0xd4>)
 8002a46:	429c      	cmp	r4, r3
 8002a48:	d101      	bne.n	8002a4e <_puts_r+0x6e>
 8002a4a:	68ac      	ldr	r4, [r5, #8]
 8002a4c:	e7da      	b.n	8002a04 <_puts_r+0x24>
 8002a4e:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <_puts_r+0xd8>)
 8002a50:	429c      	cmp	r4, r3
 8002a52:	bf08      	it	eq
 8002a54:	68ec      	ldreq	r4, [r5, #12]
 8002a56:	e7d5      	b.n	8002a04 <_puts_r+0x24>
 8002a58:	4621      	mov	r1, r4
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	f000 f888 	bl	8002b70 <__swsetup_r>
 8002a60:	2800      	cmp	r0, #0
 8002a62:	d0dd      	beq.n	8002a20 <_puts_r+0x40>
 8002a64:	f04f 35ff 	mov.w	r5, #4294967295
 8002a68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a6a:	07da      	lsls	r2, r3, #31
 8002a6c:	d405      	bmi.n	8002a7a <_puts_r+0x9a>
 8002a6e:	89a3      	ldrh	r3, [r4, #12]
 8002a70:	059b      	lsls	r3, r3, #22
 8002a72:	d402      	bmi.n	8002a7a <_puts_r+0x9a>
 8002a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a76:	f000 faa2 	bl	8002fbe <__retarget_lock_release_recursive>
 8002a7a:	4628      	mov	r0, r5
 8002a7c:	bd70      	pop	{r4, r5, r6, pc}
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	da04      	bge.n	8002a8c <_puts_r+0xac>
 8002a82:	69a2      	ldr	r2, [r4, #24]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	dc06      	bgt.n	8002a96 <_puts_r+0xb6>
 8002a88:	290a      	cmp	r1, #10
 8002a8a:	d004      	beq.n	8002a96 <_puts_r+0xb6>
 8002a8c:	6823      	ldr	r3, [r4, #0]
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	6022      	str	r2, [r4, #0]
 8002a92:	7019      	strb	r1, [r3, #0]
 8002a94:	e7c5      	b.n	8002a22 <_puts_r+0x42>
 8002a96:	4622      	mov	r2, r4
 8002a98:	4628      	mov	r0, r5
 8002a9a:	f000 f817 	bl	8002acc <__swbuf_r>
 8002a9e:	3001      	adds	r0, #1
 8002aa0:	d1bf      	bne.n	8002a22 <_puts_r+0x42>
 8002aa2:	e7df      	b.n	8002a64 <_puts_r+0x84>
 8002aa4:	6823      	ldr	r3, [r4, #0]
 8002aa6:	250a      	movs	r5, #10
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	6022      	str	r2, [r4, #0]
 8002aac:	701d      	strb	r5, [r3, #0]
 8002aae:	e7db      	b.n	8002a68 <_puts_r+0x88>
 8002ab0:	08003460 	.word	0x08003460
 8002ab4:	08003480 	.word	0x08003480
 8002ab8:	08003440 	.word	0x08003440

08002abc <puts>:
 8002abc:	4b02      	ldr	r3, [pc, #8]	; (8002ac8 <puts+0xc>)
 8002abe:	4601      	mov	r1, r0
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	f7ff bf8d 	b.w	80029e0 <_puts_r>
 8002ac6:	bf00      	nop
 8002ac8:	2000000c 	.word	0x2000000c

08002acc <__swbuf_r>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	460e      	mov	r6, r1
 8002ad0:	4614      	mov	r4, r2
 8002ad2:	4605      	mov	r5, r0
 8002ad4:	b118      	cbz	r0, 8002ade <__swbuf_r+0x12>
 8002ad6:	6983      	ldr	r3, [r0, #24]
 8002ad8:	b90b      	cbnz	r3, 8002ade <__swbuf_r+0x12>
 8002ada:	f000 f9d1 	bl	8002e80 <__sinit>
 8002ade:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <__swbuf_r+0x98>)
 8002ae0:	429c      	cmp	r4, r3
 8002ae2:	d12b      	bne.n	8002b3c <__swbuf_r+0x70>
 8002ae4:	686c      	ldr	r4, [r5, #4]
 8002ae6:	69a3      	ldr	r3, [r4, #24]
 8002ae8:	60a3      	str	r3, [r4, #8]
 8002aea:	89a3      	ldrh	r3, [r4, #12]
 8002aec:	071a      	lsls	r2, r3, #28
 8002aee:	d52f      	bpl.n	8002b50 <__swbuf_r+0x84>
 8002af0:	6923      	ldr	r3, [r4, #16]
 8002af2:	b36b      	cbz	r3, 8002b50 <__swbuf_r+0x84>
 8002af4:	6923      	ldr	r3, [r4, #16]
 8002af6:	6820      	ldr	r0, [r4, #0]
 8002af8:	1ac0      	subs	r0, r0, r3
 8002afa:	6963      	ldr	r3, [r4, #20]
 8002afc:	b2f6      	uxtb	r6, r6
 8002afe:	4283      	cmp	r3, r0
 8002b00:	4637      	mov	r7, r6
 8002b02:	dc04      	bgt.n	8002b0e <__swbuf_r+0x42>
 8002b04:	4621      	mov	r1, r4
 8002b06:	4628      	mov	r0, r5
 8002b08:	f000 f926 	bl	8002d58 <_fflush_r>
 8002b0c:	bb30      	cbnz	r0, 8002b5c <__swbuf_r+0x90>
 8002b0e:	68a3      	ldr	r3, [r4, #8]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	60a3      	str	r3, [r4, #8]
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	6022      	str	r2, [r4, #0]
 8002b1a:	701e      	strb	r6, [r3, #0]
 8002b1c:	6963      	ldr	r3, [r4, #20]
 8002b1e:	3001      	adds	r0, #1
 8002b20:	4283      	cmp	r3, r0
 8002b22:	d004      	beq.n	8002b2e <__swbuf_r+0x62>
 8002b24:	89a3      	ldrh	r3, [r4, #12]
 8002b26:	07db      	lsls	r3, r3, #31
 8002b28:	d506      	bpl.n	8002b38 <__swbuf_r+0x6c>
 8002b2a:	2e0a      	cmp	r6, #10
 8002b2c:	d104      	bne.n	8002b38 <__swbuf_r+0x6c>
 8002b2e:	4621      	mov	r1, r4
 8002b30:	4628      	mov	r0, r5
 8002b32:	f000 f911 	bl	8002d58 <_fflush_r>
 8002b36:	b988      	cbnz	r0, 8002b5c <__swbuf_r+0x90>
 8002b38:	4638      	mov	r0, r7
 8002b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <__swbuf_r+0x9c>)
 8002b3e:	429c      	cmp	r4, r3
 8002b40:	d101      	bne.n	8002b46 <__swbuf_r+0x7a>
 8002b42:	68ac      	ldr	r4, [r5, #8]
 8002b44:	e7cf      	b.n	8002ae6 <__swbuf_r+0x1a>
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <__swbuf_r+0xa0>)
 8002b48:	429c      	cmp	r4, r3
 8002b4a:	bf08      	it	eq
 8002b4c:	68ec      	ldreq	r4, [r5, #12]
 8002b4e:	e7ca      	b.n	8002ae6 <__swbuf_r+0x1a>
 8002b50:	4621      	mov	r1, r4
 8002b52:	4628      	mov	r0, r5
 8002b54:	f000 f80c 	bl	8002b70 <__swsetup_r>
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	d0cb      	beq.n	8002af4 <__swbuf_r+0x28>
 8002b5c:	f04f 37ff 	mov.w	r7, #4294967295
 8002b60:	e7ea      	b.n	8002b38 <__swbuf_r+0x6c>
 8002b62:	bf00      	nop
 8002b64:	08003460 	.word	0x08003460
 8002b68:	08003480 	.word	0x08003480
 8002b6c:	08003440 	.word	0x08003440

08002b70 <__swsetup_r>:
 8002b70:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <__swsetup_r+0xcc>)
 8002b72:	b570      	push	{r4, r5, r6, lr}
 8002b74:	681d      	ldr	r5, [r3, #0]
 8002b76:	4606      	mov	r6, r0
 8002b78:	460c      	mov	r4, r1
 8002b7a:	b125      	cbz	r5, 8002b86 <__swsetup_r+0x16>
 8002b7c:	69ab      	ldr	r3, [r5, #24]
 8002b7e:	b913      	cbnz	r3, 8002b86 <__swsetup_r+0x16>
 8002b80:	4628      	mov	r0, r5
 8002b82:	f000 f97d 	bl	8002e80 <__sinit>
 8002b86:	4b2e      	ldr	r3, [pc, #184]	; (8002c40 <__swsetup_r+0xd0>)
 8002b88:	429c      	cmp	r4, r3
 8002b8a:	d10f      	bne.n	8002bac <__swsetup_r+0x3c>
 8002b8c:	686c      	ldr	r4, [r5, #4]
 8002b8e:	89a3      	ldrh	r3, [r4, #12]
 8002b90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b94:	0719      	lsls	r1, r3, #28
 8002b96:	d42c      	bmi.n	8002bf2 <__swsetup_r+0x82>
 8002b98:	06dd      	lsls	r5, r3, #27
 8002b9a:	d411      	bmi.n	8002bc0 <__swsetup_r+0x50>
 8002b9c:	2309      	movs	r3, #9
 8002b9e:	6033      	str	r3, [r6, #0]
 8002ba0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ba4:	81a3      	strh	r3, [r4, #12]
 8002ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8002baa:	e03e      	b.n	8002c2a <__swsetup_r+0xba>
 8002bac:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <__swsetup_r+0xd4>)
 8002bae:	429c      	cmp	r4, r3
 8002bb0:	d101      	bne.n	8002bb6 <__swsetup_r+0x46>
 8002bb2:	68ac      	ldr	r4, [r5, #8]
 8002bb4:	e7eb      	b.n	8002b8e <__swsetup_r+0x1e>
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <__swsetup_r+0xd8>)
 8002bb8:	429c      	cmp	r4, r3
 8002bba:	bf08      	it	eq
 8002bbc:	68ec      	ldreq	r4, [r5, #12]
 8002bbe:	e7e6      	b.n	8002b8e <__swsetup_r+0x1e>
 8002bc0:	0758      	lsls	r0, r3, #29
 8002bc2:	d512      	bpl.n	8002bea <__swsetup_r+0x7a>
 8002bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bc6:	b141      	cbz	r1, 8002bda <__swsetup_r+0x6a>
 8002bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bcc:	4299      	cmp	r1, r3
 8002bce:	d002      	beq.n	8002bd6 <__swsetup_r+0x66>
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	f000 fa5b 	bl	800308c <_free_r>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	6363      	str	r3, [r4, #52]	; 0x34
 8002bda:	89a3      	ldrh	r3, [r4, #12]
 8002bdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002be0:	81a3      	strh	r3, [r4, #12]
 8002be2:	2300      	movs	r3, #0
 8002be4:	6063      	str	r3, [r4, #4]
 8002be6:	6923      	ldr	r3, [r4, #16]
 8002be8:	6023      	str	r3, [r4, #0]
 8002bea:	89a3      	ldrh	r3, [r4, #12]
 8002bec:	f043 0308 	orr.w	r3, r3, #8
 8002bf0:	81a3      	strh	r3, [r4, #12]
 8002bf2:	6923      	ldr	r3, [r4, #16]
 8002bf4:	b94b      	cbnz	r3, 8002c0a <__swsetup_r+0x9a>
 8002bf6:	89a3      	ldrh	r3, [r4, #12]
 8002bf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c00:	d003      	beq.n	8002c0a <__swsetup_r+0x9a>
 8002c02:	4621      	mov	r1, r4
 8002c04:	4630      	mov	r0, r6
 8002c06:	f000 fa01 	bl	800300c <__smakebuf_r>
 8002c0a:	89a0      	ldrh	r0, [r4, #12]
 8002c0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c10:	f010 0301 	ands.w	r3, r0, #1
 8002c14:	d00a      	beq.n	8002c2c <__swsetup_r+0xbc>
 8002c16:	2300      	movs	r3, #0
 8002c18:	60a3      	str	r3, [r4, #8]
 8002c1a:	6963      	ldr	r3, [r4, #20]
 8002c1c:	425b      	negs	r3, r3
 8002c1e:	61a3      	str	r3, [r4, #24]
 8002c20:	6923      	ldr	r3, [r4, #16]
 8002c22:	b943      	cbnz	r3, 8002c36 <__swsetup_r+0xc6>
 8002c24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002c28:	d1ba      	bne.n	8002ba0 <__swsetup_r+0x30>
 8002c2a:	bd70      	pop	{r4, r5, r6, pc}
 8002c2c:	0781      	lsls	r1, r0, #30
 8002c2e:	bf58      	it	pl
 8002c30:	6963      	ldrpl	r3, [r4, #20]
 8002c32:	60a3      	str	r3, [r4, #8]
 8002c34:	e7f4      	b.n	8002c20 <__swsetup_r+0xb0>
 8002c36:	2000      	movs	r0, #0
 8002c38:	e7f7      	b.n	8002c2a <__swsetup_r+0xba>
 8002c3a:	bf00      	nop
 8002c3c:	2000000c 	.word	0x2000000c
 8002c40:	08003460 	.word	0x08003460
 8002c44:	08003480 	.word	0x08003480
 8002c48:	08003440 	.word	0x08003440

08002c4c <__sflush_r>:
 8002c4c:	898a      	ldrh	r2, [r1, #12]
 8002c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c52:	4605      	mov	r5, r0
 8002c54:	0710      	lsls	r0, r2, #28
 8002c56:	460c      	mov	r4, r1
 8002c58:	d458      	bmi.n	8002d0c <__sflush_r+0xc0>
 8002c5a:	684b      	ldr	r3, [r1, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	dc05      	bgt.n	8002c6c <__sflush_r+0x20>
 8002c60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	dc02      	bgt.n	8002c6c <__sflush_r+0x20>
 8002c66:	2000      	movs	r0, #0
 8002c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c6e:	2e00      	cmp	r6, #0
 8002c70:	d0f9      	beq.n	8002c66 <__sflush_r+0x1a>
 8002c72:	2300      	movs	r3, #0
 8002c74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002c78:	682f      	ldr	r7, [r5, #0]
 8002c7a:	602b      	str	r3, [r5, #0]
 8002c7c:	d032      	beq.n	8002ce4 <__sflush_r+0x98>
 8002c7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c80:	89a3      	ldrh	r3, [r4, #12]
 8002c82:	075a      	lsls	r2, r3, #29
 8002c84:	d505      	bpl.n	8002c92 <__sflush_r+0x46>
 8002c86:	6863      	ldr	r3, [r4, #4]
 8002c88:	1ac0      	subs	r0, r0, r3
 8002c8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c8c:	b10b      	cbz	r3, 8002c92 <__sflush_r+0x46>
 8002c8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c90:	1ac0      	subs	r0, r0, r3
 8002c92:	2300      	movs	r3, #0
 8002c94:	4602      	mov	r2, r0
 8002c96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c98:	6a21      	ldr	r1, [r4, #32]
 8002c9a:	4628      	mov	r0, r5
 8002c9c:	47b0      	blx	r6
 8002c9e:	1c43      	adds	r3, r0, #1
 8002ca0:	89a3      	ldrh	r3, [r4, #12]
 8002ca2:	d106      	bne.n	8002cb2 <__sflush_r+0x66>
 8002ca4:	6829      	ldr	r1, [r5, #0]
 8002ca6:	291d      	cmp	r1, #29
 8002ca8:	d82c      	bhi.n	8002d04 <__sflush_r+0xb8>
 8002caa:	4a2a      	ldr	r2, [pc, #168]	; (8002d54 <__sflush_r+0x108>)
 8002cac:	40ca      	lsrs	r2, r1
 8002cae:	07d6      	lsls	r6, r2, #31
 8002cb0:	d528      	bpl.n	8002d04 <__sflush_r+0xb8>
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	6062      	str	r2, [r4, #4]
 8002cb6:	04d9      	lsls	r1, r3, #19
 8002cb8:	6922      	ldr	r2, [r4, #16]
 8002cba:	6022      	str	r2, [r4, #0]
 8002cbc:	d504      	bpl.n	8002cc8 <__sflush_r+0x7c>
 8002cbe:	1c42      	adds	r2, r0, #1
 8002cc0:	d101      	bne.n	8002cc6 <__sflush_r+0x7a>
 8002cc2:	682b      	ldr	r3, [r5, #0]
 8002cc4:	b903      	cbnz	r3, 8002cc8 <__sflush_r+0x7c>
 8002cc6:	6560      	str	r0, [r4, #84]	; 0x54
 8002cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002cca:	602f      	str	r7, [r5, #0]
 8002ccc:	2900      	cmp	r1, #0
 8002cce:	d0ca      	beq.n	8002c66 <__sflush_r+0x1a>
 8002cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002cd4:	4299      	cmp	r1, r3
 8002cd6:	d002      	beq.n	8002cde <__sflush_r+0x92>
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f000 f9d7 	bl	800308c <_free_r>
 8002cde:	2000      	movs	r0, #0
 8002ce0:	6360      	str	r0, [r4, #52]	; 0x34
 8002ce2:	e7c1      	b.n	8002c68 <__sflush_r+0x1c>
 8002ce4:	6a21      	ldr	r1, [r4, #32]
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	4628      	mov	r0, r5
 8002cea:	47b0      	blx	r6
 8002cec:	1c41      	adds	r1, r0, #1
 8002cee:	d1c7      	bne.n	8002c80 <__sflush_r+0x34>
 8002cf0:	682b      	ldr	r3, [r5, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0c4      	beq.n	8002c80 <__sflush_r+0x34>
 8002cf6:	2b1d      	cmp	r3, #29
 8002cf8:	d001      	beq.n	8002cfe <__sflush_r+0xb2>
 8002cfa:	2b16      	cmp	r3, #22
 8002cfc:	d101      	bne.n	8002d02 <__sflush_r+0xb6>
 8002cfe:	602f      	str	r7, [r5, #0]
 8002d00:	e7b1      	b.n	8002c66 <__sflush_r+0x1a>
 8002d02:	89a3      	ldrh	r3, [r4, #12]
 8002d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d08:	81a3      	strh	r3, [r4, #12]
 8002d0a:	e7ad      	b.n	8002c68 <__sflush_r+0x1c>
 8002d0c:	690f      	ldr	r7, [r1, #16]
 8002d0e:	2f00      	cmp	r7, #0
 8002d10:	d0a9      	beq.n	8002c66 <__sflush_r+0x1a>
 8002d12:	0793      	lsls	r3, r2, #30
 8002d14:	680e      	ldr	r6, [r1, #0]
 8002d16:	bf08      	it	eq
 8002d18:	694b      	ldreq	r3, [r1, #20]
 8002d1a:	600f      	str	r7, [r1, #0]
 8002d1c:	bf18      	it	ne
 8002d1e:	2300      	movne	r3, #0
 8002d20:	eba6 0807 	sub.w	r8, r6, r7
 8002d24:	608b      	str	r3, [r1, #8]
 8002d26:	f1b8 0f00 	cmp.w	r8, #0
 8002d2a:	dd9c      	ble.n	8002c66 <__sflush_r+0x1a>
 8002d2c:	6a21      	ldr	r1, [r4, #32]
 8002d2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002d30:	4643      	mov	r3, r8
 8002d32:	463a      	mov	r2, r7
 8002d34:	4628      	mov	r0, r5
 8002d36:	47b0      	blx	r6
 8002d38:	2800      	cmp	r0, #0
 8002d3a:	dc06      	bgt.n	8002d4a <__sflush_r+0xfe>
 8002d3c:	89a3      	ldrh	r3, [r4, #12]
 8002d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d42:	81a3      	strh	r3, [r4, #12]
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	e78e      	b.n	8002c68 <__sflush_r+0x1c>
 8002d4a:	4407      	add	r7, r0
 8002d4c:	eba8 0800 	sub.w	r8, r8, r0
 8002d50:	e7e9      	b.n	8002d26 <__sflush_r+0xda>
 8002d52:	bf00      	nop
 8002d54:	20400001 	.word	0x20400001

08002d58 <_fflush_r>:
 8002d58:	b538      	push	{r3, r4, r5, lr}
 8002d5a:	690b      	ldr	r3, [r1, #16]
 8002d5c:	4605      	mov	r5, r0
 8002d5e:	460c      	mov	r4, r1
 8002d60:	b913      	cbnz	r3, 8002d68 <_fflush_r+0x10>
 8002d62:	2500      	movs	r5, #0
 8002d64:	4628      	mov	r0, r5
 8002d66:	bd38      	pop	{r3, r4, r5, pc}
 8002d68:	b118      	cbz	r0, 8002d72 <_fflush_r+0x1a>
 8002d6a:	6983      	ldr	r3, [r0, #24]
 8002d6c:	b90b      	cbnz	r3, 8002d72 <_fflush_r+0x1a>
 8002d6e:	f000 f887 	bl	8002e80 <__sinit>
 8002d72:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <_fflush_r+0x6c>)
 8002d74:	429c      	cmp	r4, r3
 8002d76:	d11b      	bne.n	8002db0 <_fflush_r+0x58>
 8002d78:	686c      	ldr	r4, [r5, #4]
 8002d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0ef      	beq.n	8002d62 <_fflush_r+0xa>
 8002d82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d84:	07d0      	lsls	r0, r2, #31
 8002d86:	d404      	bmi.n	8002d92 <_fflush_r+0x3a>
 8002d88:	0599      	lsls	r1, r3, #22
 8002d8a:	d402      	bmi.n	8002d92 <_fflush_r+0x3a>
 8002d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d8e:	f000 f915 	bl	8002fbc <__retarget_lock_acquire_recursive>
 8002d92:	4628      	mov	r0, r5
 8002d94:	4621      	mov	r1, r4
 8002d96:	f7ff ff59 	bl	8002c4c <__sflush_r>
 8002d9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d9c:	07da      	lsls	r2, r3, #31
 8002d9e:	4605      	mov	r5, r0
 8002da0:	d4e0      	bmi.n	8002d64 <_fflush_r+0xc>
 8002da2:	89a3      	ldrh	r3, [r4, #12]
 8002da4:	059b      	lsls	r3, r3, #22
 8002da6:	d4dd      	bmi.n	8002d64 <_fflush_r+0xc>
 8002da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002daa:	f000 f908 	bl	8002fbe <__retarget_lock_release_recursive>
 8002dae:	e7d9      	b.n	8002d64 <_fflush_r+0xc>
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <_fflush_r+0x70>)
 8002db2:	429c      	cmp	r4, r3
 8002db4:	d101      	bne.n	8002dba <_fflush_r+0x62>
 8002db6:	68ac      	ldr	r4, [r5, #8]
 8002db8:	e7df      	b.n	8002d7a <_fflush_r+0x22>
 8002dba:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <_fflush_r+0x74>)
 8002dbc:	429c      	cmp	r4, r3
 8002dbe:	bf08      	it	eq
 8002dc0:	68ec      	ldreq	r4, [r5, #12]
 8002dc2:	e7da      	b.n	8002d7a <_fflush_r+0x22>
 8002dc4:	08003460 	.word	0x08003460
 8002dc8:	08003480 	.word	0x08003480
 8002dcc:	08003440 	.word	0x08003440

08002dd0 <std>:
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	b510      	push	{r4, lr}
 8002dd4:	4604      	mov	r4, r0
 8002dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8002dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002dde:	6083      	str	r3, [r0, #8]
 8002de0:	8181      	strh	r1, [r0, #12]
 8002de2:	6643      	str	r3, [r0, #100]	; 0x64
 8002de4:	81c2      	strh	r2, [r0, #14]
 8002de6:	6183      	str	r3, [r0, #24]
 8002de8:	4619      	mov	r1, r3
 8002dea:	2208      	movs	r2, #8
 8002dec:	305c      	adds	r0, #92	; 0x5c
 8002dee:	f7ff fdef 	bl	80029d0 <memset>
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <std+0x38>)
 8002df4:	6263      	str	r3, [r4, #36]	; 0x24
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <std+0x3c>)
 8002df8:	62a3      	str	r3, [r4, #40]	; 0x28
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <std+0x40>)
 8002dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <std+0x44>)
 8002e00:	6224      	str	r4, [r4, #32]
 8002e02:	6323      	str	r3, [r4, #48]	; 0x30
 8002e04:	bd10      	pop	{r4, pc}
 8002e06:	bf00      	nop
 8002e08:	0800326d 	.word	0x0800326d
 8002e0c:	0800328f 	.word	0x0800328f
 8002e10:	080032c7 	.word	0x080032c7
 8002e14:	080032eb 	.word	0x080032eb

08002e18 <_cleanup_r>:
 8002e18:	4901      	ldr	r1, [pc, #4]	; (8002e20 <_cleanup_r+0x8>)
 8002e1a:	f000 b8af 	b.w	8002f7c <_fwalk_reent>
 8002e1e:	bf00      	nop
 8002e20:	08002d59 	.word	0x08002d59

08002e24 <__sfmoreglue>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	2268      	movs	r2, #104	; 0x68
 8002e28:	1e4d      	subs	r5, r1, #1
 8002e2a:	4355      	muls	r5, r2
 8002e2c:	460e      	mov	r6, r1
 8002e2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e32:	f000 f997 	bl	8003164 <_malloc_r>
 8002e36:	4604      	mov	r4, r0
 8002e38:	b140      	cbz	r0, 8002e4c <__sfmoreglue+0x28>
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	e9c0 1600 	strd	r1, r6, [r0]
 8002e40:	300c      	adds	r0, #12
 8002e42:	60a0      	str	r0, [r4, #8]
 8002e44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002e48:	f7ff fdc2 	bl	80029d0 <memset>
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	bd70      	pop	{r4, r5, r6, pc}

08002e50 <__sfp_lock_acquire>:
 8002e50:	4801      	ldr	r0, [pc, #4]	; (8002e58 <__sfp_lock_acquire+0x8>)
 8002e52:	f000 b8b3 	b.w	8002fbc <__retarget_lock_acquire_recursive>
 8002e56:	bf00      	nop
 8002e58:	20000119 	.word	0x20000119

08002e5c <__sfp_lock_release>:
 8002e5c:	4801      	ldr	r0, [pc, #4]	; (8002e64 <__sfp_lock_release+0x8>)
 8002e5e:	f000 b8ae 	b.w	8002fbe <__retarget_lock_release_recursive>
 8002e62:	bf00      	nop
 8002e64:	20000119 	.word	0x20000119

08002e68 <__sinit_lock_acquire>:
 8002e68:	4801      	ldr	r0, [pc, #4]	; (8002e70 <__sinit_lock_acquire+0x8>)
 8002e6a:	f000 b8a7 	b.w	8002fbc <__retarget_lock_acquire_recursive>
 8002e6e:	bf00      	nop
 8002e70:	2000011a 	.word	0x2000011a

08002e74 <__sinit_lock_release>:
 8002e74:	4801      	ldr	r0, [pc, #4]	; (8002e7c <__sinit_lock_release+0x8>)
 8002e76:	f000 b8a2 	b.w	8002fbe <__retarget_lock_release_recursive>
 8002e7a:	bf00      	nop
 8002e7c:	2000011a 	.word	0x2000011a

08002e80 <__sinit>:
 8002e80:	b510      	push	{r4, lr}
 8002e82:	4604      	mov	r4, r0
 8002e84:	f7ff fff0 	bl	8002e68 <__sinit_lock_acquire>
 8002e88:	69a3      	ldr	r3, [r4, #24]
 8002e8a:	b11b      	cbz	r3, 8002e94 <__sinit+0x14>
 8002e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e90:	f7ff bff0 	b.w	8002e74 <__sinit_lock_release>
 8002e94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002e98:	6523      	str	r3, [r4, #80]	; 0x50
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <__sinit+0x68>)
 8002e9c:	4a13      	ldr	r2, [pc, #76]	; (8002eec <__sinit+0x6c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	62a2      	str	r2, [r4, #40]	; 0x28
 8002ea2:	42a3      	cmp	r3, r4
 8002ea4:	bf04      	itt	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	61a3      	streq	r3, [r4, #24]
 8002eaa:	4620      	mov	r0, r4
 8002eac:	f000 f820 	bl	8002ef0 <__sfp>
 8002eb0:	6060      	str	r0, [r4, #4]
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	f000 f81c 	bl	8002ef0 <__sfp>
 8002eb8:	60a0      	str	r0, [r4, #8]
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f000 f818 	bl	8002ef0 <__sfp>
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	60e0      	str	r0, [r4, #12]
 8002ec4:	2104      	movs	r1, #4
 8002ec6:	6860      	ldr	r0, [r4, #4]
 8002ec8:	f7ff ff82 	bl	8002dd0 <std>
 8002ecc:	68a0      	ldr	r0, [r4, #8]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	2109      	movs	r1, #9
 8002ed2:	f7ff ff7d 	bl	8002dd0 <std>
 8002ed6:	68e0      	ldr	r0, [r4, #12]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	2112      	movs	r1, #18
 8002edc:	f7ff ff78 	bl	8002dd0 <std>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	61a3      	str	r3, [r4, #24]
 8002ee4:	e7d2      	b.n	8002e8c <__sinit+0xc>
 8002ee6:	bf00      	nop
 8002ee8:	0800343c 	.word	0x0800343c
 8002eec:	08002e19 	.word	0x08002e19

08002ef0 <__sfp>:
 8002ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef2:	4607      	mov	r7, r0
 8002ef4:	f7ff ffac 	bl	8002e50 <__sfp_lock_acquire>
 8002ef8:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <__sfp+0x84>)
 8002efa:	681e      	ldr	r6, [r3, #0]
 8002efc:	69b3      	ldr	r3, [r6, #24]
 8002efe:	b913      	cbnz	r3, 8002f06 <__sfp+0x16>
 8002f00:	4630      	mov	r0, r6
 8002f02:	f7ff ffbd 	bl	8002e80 <__sinit>
 8002f06:	3648      	adds	r6, #72	; 0x48
 8002f08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	d503      	bpl.n	8002f18 <__sfp+0x28>
 8002f10:	6833      	ldr	r3, [r6, #0]
 8002f12:	b30b      	cbz	r3, 8002f58 <__sfp+0x68>
 8002f14:	6836      	ldr	r6, [r6, #0]
 8002f16:	e7f7      	b.n	8002f08 <__sfp+0x18>
 8002f18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f1c:	b9d5      	cbnz	r5, 8002f54 <__sfp+0x64>
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <__sfp+0x88>)
 8002f20:	60e3      	str	r3, [r4, #12]
 8002f22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f26:	6665      	str	r5, [r4, #100]	; 0x64
 8002f28:	f000 f847 	bl	8002fba <__retarget_lock_init_recursive>
 8002f2c:	f7ff ff96 	bl	8002e5c <__sfp_lock_release>
 8002f30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002f34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002f38:	6025      	str	r5, [r4, #0]
 8002f3a:	61a5      	str	r5, [r4, #24]
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	4629      	mov	r1, r5
 8002f40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f44:	f7ff fd44 	bl	80029d0 <memset>
 8002f48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002f4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002f50:	4620      	mov	r0, r4
 8002f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f54:	3468      	adds	r4, #104	; 0x68
 8002f56:	e7d9      	b.n	8002f0c <__sfp+0x1c>
 8002f58:	2104      	movs	r1, #4
 8002f5a:	4638      	mov	r0, r7
 8002f5c:	f7ff ff62 	bl	8002e24 <__sfmoreglue>
 8002f60:	4604      	mov	r4, r0
 8002f62:	6030      	str	r0, [r6, #0]
 8002f64:	2800      	cmp	r0, #0
 8002f66:	d1d5      	bne.n	8002f14 <__sfp+0x24>
 8002f68:	f7ff ff78 	bl	8002e5c <__sfp_lock_release>
 8002f6c:	230c      	movs	r3, #12
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	e7ee      	b.n	8002f50 <__sfp+0x60>
 8002f72:	bf00      	nop
 8002f74:	0800343c 	.word	0x0800343c
 8002f78:	ffff0001 	.word	0xffff0001

08002f7c <_fwalk_reent>:
 8002f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f80:	4606      	mov	r6, r0
 8002f82:	4688      	mov	r8, r1
 8002f84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f88:	2700      	movs	r7, #0
 8002f8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f8e:	f1b9 0901 	subs.w	r9, r9, #1
 8002f92:	d505      	bpl.n	8002fa0 <_fwalk_reent+0x24>
 8002f94:	6824      	ldr	r4, [r4, #0]
 8002f96:	2c00      	cmp	r4, #0
 8002f98:	d1f7      	bne.n	8002f8a <_fwalk_reent+0xe>
 8002f9a:	4638      	mov	r0, r7
 8002f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fa0:	89ab      	ldrh	r3, [r5, #12]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d907      	bls.n	8002fb6 <_fwalk_reent+0x3a>
 8002fa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002faa:	3301      	adds	r3, #1
 8002fac:	d003      	beq.n	8002fb6 <_fwalk_reent+0x3a>
 8002fae:	4629      	mov	r1, r5
 8002fb0:	4630      	mov	r0, r6
 8002fb2:	47c0      	blx	r8
 8002fb4:	4307      	orrs	r7, r0
 8002fb6:	3568      	adds	r5, #104	; 0x68
 8002fb8:	e7e9      	b.n	8002f8e <_fwalk_reent+0x12>

08002fba <__retarget_lock_init_recursive>:
 8002fba:	4770      	bx	lr

08002fbc <__retarget_lock_acquire_recursive>:
 8002fbc:	4770      	bx	lr

08002fbe <__retarget_lock_release_recursive>:
 8002fbe:	4770      	bx	lr

08002fc0 <__swhatbuf_r>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	460e      	mov	r6, r1
 8002fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fc8:	2900      	cmp	r1, #0
 8002fca:	b096      	sub	sp, #88	; 0x58
 8002fcc:	4614      	mov	r4, r2
 8002fce:	461d      	mov	r5, r3
 8002fd0:	da08      	bge.n	8002fe4 <__swhatbuf_r+0x24>
 8002fd2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	602a      	str	r2, [r5, #0]
 8002fda:	061a      	lsls	r2, r3, #24
 8002fdc:	d410      	bmi.n	8003000 <__swhatbuf_r+0x40>
 8002fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fe2:	e00e      	b.n	8003002 <__swhatbuf_r+0x42>
 8002fe4:	466a      	mov	r2, sp
 8002fe6:	f000 f9a7 	bl	8003338 <_fstat_r>
 8002fea:	2800      	cmp	r0, #0
 8002fec:	dbf1      	blt.n	8002fd2 <__swhatbuf_r+0x12>
 8002fee:	9a01      	ldr	r2, [sp, #4]
 8002ff0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ff4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ff8:	425a      	negs	r2, r3
 8002ffa:	415a      	adcs	r2, r3
 8002ffc:	602a      	str	r2, [r5, #0]
 8002ffe:	e7ee      	b.n	8002fde <__swhatbuf_r+0x1e>
 8003000:	2340      	movs	r3, #64	; 0x40
 8003002:	2000      	movs	r0, #0
 8003004:	6023      	str	r3, [r4, #0]
 8003006:	b016      	add	sp, #88	; 0x58
 8003008:	bd70      	pop	{r4, r5, r6, pc}
	...

0800300c <__smakebuf_r>:
 800300c:	898b      	ldrh	r3, [r1, #12]
 800300e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003010:	079d      	lsls	r5, r3, #30
 8003012:	4606      	mov	r6, r0
 8003014:	460c      	mov	r4, r1
 8003016:	d507      	bpl.n	8003028 <__smakebuf_r+0x1c>
 8003018:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800301c:	6023      	str	r3, [r4, #0]
 800301e:	6123      	str	r3, [r4, #16]
 8003020:	2301      	movs	r3, #1
 8003022:	6163      	str	r3, [r4, #20]
 8003024:	b002      	add	sp, #8
 8003026:	bd70      	pop	{r4, r5, r6, pc}
 8003028:	ab01      	add	r3, sp, #4
 800302a:	466a      	mov	r2, sp
 800302c:	f7ff ffc8 	bl	8002fc0 <__swhatbuf_r>
 8003030:	9900      	ldr	r1, [sp, #0]
 8003032:	4605      	mov	r5, r0
 8003034:	4630      	mov	r0, r6
 8003036:	f000 f895 	bl	8003164 <_malloc_r>
 800303a:	b948      	cbnz	r0, 8003050 <__smakebuf_r+0x44>
 800303c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003040:	059a      	lsls	r2, r3, #22
 8003042:	d4ef      	bmi.n	8003024 <__smakebuf_r+0x18>
 8003044:	f023 0303 	bic.w	r3, r3, #3
 8003048:	f043 0302 	orr.w	r3, r3, #2
 800304c:	81a3      	strh	r3, [r4, #12]
 800304e:	e7e3      	b.n	8003018 <__smakebuf_r+0xc>
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <__smakebuf_r+0x7c>)
 8003052:	62b3      	str	r3, [r6, #40]	; 0x28
 8003054:	89a3      	ldrh	r3, [r4, #12]
 8003056:	6020      	str	r0, [r4, #0]
 8003058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305c:	81a3      	strh	r3, [r4, #12]
 800305e:	9b00      	ldr	r3, [sp, #0]
 8003060:	6163      	str	r3, [r4, #20]
 8003062:	9b01      	ldr	r3, [sp, #4]
 8003064:	6120      	str	r0, [r4, #16]
 8003066:	b15b      	cbz	r3, 8003080 <__smakebuf_r+0x74>
 8003068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800306c:	4630      	mov	r0, r6
 800306e:	f000 f975 	bl	800335c <_isatty_r>
 8003072:	b128      	cbz	r0, 8003080 <__smakebuf_r+0x74>
 8003074:	89a3      	ldrh	r3, [r4, #12]
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	81a3      	strh	r3, [r4, #12]
 8003080:	89a0      	ldrh	r0, [r4, #12]
 8003082:	4305      	orrs	r5, r0
 8003084:	81a5      	strh	r5, [r4, #12]
 8003086:	e7cd      	b.n	8003024 <__smakebuf_r+0x18>
 8003088:	08002e19 	.word	0x08002e19

0800308c <_free_r>:
 800308c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800308e:	2900      	cmp	r1, #0
 8003090:	d044      	beq.n	800311c <_free_r+0x90>
 8003092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003096:	9001      	str	r0, [sp, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	f1a1 0404 	sub.w	r4, r1, #4
 800309e:	bfb8      	it	lt
 80030a0:	18e4      	addlt	r4, r4, r3
 80030a2:	f000 f97d 	bl	80033a0 <__malloc_lock>
 80030a6:	4a1e      	ldr	r2, [pc, #120]	; (8003120 <_free_r+0x94>)
 80030a8:	9801      	ldr	r0, [sp, #4]
 80030aa:	6813      	ldr	r3, [r2, #0]
 80030ac:	b933      	cbnz	r3, 80030bc <_free_r+0x30>
 80030ae:	6063      	str	r3, [r4, #4]
 80030b0:	6014      	str	r4, [r2, #0]
 80030b2:	b003      	add	sp, #12
 80030b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80030b8:	f000 b978 	b.w	80033ac <__malloc_unlock>
 80030bc:	42a3      	cmp	r3, r4
 80030be:	d908      	bls.n	80030d2 <_free_r+0x46>
 80030c0:	6825      	ldr	r5, [r4, #0]
 80030c2:	1961      	adds	r1, r4, r5
 80030c4:	428b      	cmp	r3, r1
 80030c6:	bf01      	itttt	eq
 80030c8:	6819      	ldreq	r1, [r3, #0]
 80030ca:	685b      	ldreq	r3, [r3, #4]
 80030cc:	1949      	addeq	r1, r1, r5
 80030ce:	6021      	streq	r1, [r4, #0]
 80030d0:	e7ed      	b.n	80030ae <_free_r+0x22>
 80030d2:	461a      	mov	r2, r3
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	b10b      	cbz	r3, 80030dc <_free_r+0x50>
 80030d8:	42a3      	cmp	r3, r4
 80030da:	d9fa      	bls.n	80030d2 <_free_r+0x46>
 80030dc:	6811      	ldr	r1, [r2, #0]
 80030de:	1855      	adds	r5, r2, r1
 80030e0:	42a5      	cmp	r5, r4
 80030e2:	d10b      	bne.n	80030fc <_free_r+0x70>
 80030e4:	6824      	ldr	r4, [r4, #0]
 80030e6:	4421      	add	r1, r4
 80030e8:	1854      	adds	r4, r2, r1
 80030ea:	42a3      	cmp	r3, r4
 80030ec:	6011      	str	r1, [r2, #0]
 80030ee:	d1e0      	bne.n	80030b2 <_free_r+0x26>
 80030f0:	681c      	ldr	r4, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	6053      	str	r3, [r2, #4]
 80030f6:	4421      	add	r1, r4
 80030f8:	6011      	str	r1, [r2, #0]
 80030fa:	e7da      	b.n	80030b2 <_free_r+0x26>
 80030fc:	d902      	bls.n	8003104 <_free_r+0x78>
 80030fe:	230c      	movs	r3, #12
 8003100:	6003      	str	r3, [r0, #0]
 8003102:	e7d6      	b.n	80030b2 <_free_r+0x26>
 8003104:	6825      	ldr	r5, [r4, #0]
 8003106:	1961      	adds	r1, r4, r5
 8003108:	428b      	cmp	r3, r1
 800310a:	bf04      	itt	eq
 800310c:	6819      	ldreq	r1, [r3, #0]
 800310e:	685b      	ldreq	r3, [r3, #4]
 8003110:	6063      	str	r3, [r4, #4]
 8003112:	bf04      	itt	eq
 8003114:	1949      	addeq	r1, r1, r5
 8003116:	6021      	streq	r1, [r4, #0]
 8003118:	6054      	str	r4, [r2, #4]
 800311a:	e7ca      	b.n	80030b2 <_free_r+0x26>
 800311c:	b003      	add	sp, #12
 800311e:	bd30      	pop	{r4, r5, pc}
 8003120:	2000011c 	.word	0x2000011c

08003124 <sbrk_aligned>:
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	4e0e      	ldr	r6, [pc, #56]	; (8003160 <sbrk_aligned+0x3c>)
 8003128:	460c      	mov	r4, r1
 800312a:	6831      	ldr	r1, [r6, #0]
 800312c:	4605      	mov	r5, r0
 800312e:	b911      	cbnz	r1, 8003136 <sbrk_aligned+0x12>
 8003130:	f000 f88c 	bl	800324c <_sbrk_r>
 8003134:	6030      	str	r0, [r6, #0]
 8003136:	4621      	mov	r1, r4
 8003138:	4628      	mov	r0, r5
 800313a:	f000 f887 	bl	800324c <_sbrk_r>
 800313e:	1c43      	adds	r3, r0, #1
 8003140:	d00a      	beq.n	8003158 <sbrk_aligned+0x34>
 8003142:	1cc4      	adds	r4, r0, #3
 8003144:	f024 0403 	bic.w	r4, r4, #3
 8003148:	42a0      	cmp	r0, r4
 800314a:	d007      	beq.n	800315c <sbrk_aligned+0x38>
 800314c:	1a21      	subs	r1, r4, r0
 800314e:	4628      	mov	r0, r5
 8003150:	f000 f87c 	bl	800324c <_sbrk_r>
 8003154:	3001      	adds	r0, #1
 8003156:	d101      	bne.n	800315c <sbrk_aligned+0x38>
 8003158:	f04f 34ff 	mov.w	r4, #4294967295
 800315c:	4620      	mov	r0, r4
 800315e:	bd70      	pop	{r4, r5, r6, pc}
 8003160:	20000120 	.word	0x20000120

08003164 <_malloc_r>:
 8003164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003168:	1ccd      	adds	r5, r1, #3
 800316a:	f025 0503 	bic.w	r5, r5, #3
 800316e:	3508      	adds	r5, #8
 8003170:	2d0c      	cmp	r5, #12
 8003172:	bf38      	it	cc
 8003174:	250c      	movcc	r5, #12
 8003176:	2d00      	cmp	r5, #0
 8003178:	4607      	mov	r7, r0
 800317a:	db01      	blt.n	8003180 <_malloc_r+0x1c>
 800317c:	42a9      	cmp	r1, r5
 800317e:	d905      	bls.n	800318c <_malloc_r+0x28>
 8003180:	230c      	movs	r3, #12
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	2600      	movs	r6, #0
 8003186:	4630      	mov	r0, r6
 8003188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800318c:	4e2e      	ldr	r6, [pc, #184]	; (8003248 <_malloc_r+0xe4>)
 800318e:	f000 f907 	bl	80033a0 <__malloc_lock>
 8003192:	6833      	ldr	r3, [r6, #0]
 8003194:	461c      	mov	r4, r3
 8003196:	bb34      	cbnz	r4, 80031e6 <_malloc_r+0x82>
 8003198:	4629      	mov	r1, r5
 800319a:	4638      	mov	r0, r7
 800319c:	f7ff ffc2 	bl	8003124 <sbrk_aligned>
 80031a0:	1c43      	adds	r3, r0, #1
 80031a2:	4604      	mov	r4, r0
 80031a4:	d14d      	bne.n	8003242 <_malloc_r+0xde>
 80031a6:	6834      	ldr	r4, [r6, #0]
 80031a8:	4626      	mov	r6, r4
 80031aa:	2e00      	cmp	r6, #0
 80031ac:	d140      	bne.n	8003230 <_malloc_r+0xcc>
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	4631      	mov	r1, r6
 80031b2:	4638      	mov	r0, r7
 80031b4:	eb04 0803 	add.w	r8, r4, r3
 80031b8:	f000 f848 	bl	800324c <_sbrk_r>
 80031bc:	4580      	cmp	r8, r0
 80031be:	d13a      	bne.n	8003236 <_malloc_r+0xd2>
 80031c0:	6821      	ldr	r1, [r4, #0]
 80031c2:	3503      	adds	r5, #3
 80031c4:	1a6d      	subs	r5, r5, r1
 80031c6:	f025 0503 	bic.w	r5, r5, #3
 80031ca:	3508      	adds	r5, #8
 80031cc:	2d0c      	cmp	r5, #12
 80031ce:	bf38      	it	cc
 80031d0:	250c      	movcc	r5, #12
 80031d2:	4629      	mov	r1, r5
 80031d4:	4638      	mov	r0, r7
 80031d6:	f7ff ffa5 	bl	8003124 <sbrk_aligned>
 80031da:	3001      	adds	r0, #1
 80031dc:	d02b      	beq.n	8003236 <_malloc_r+0xd2>
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	442b      	add	r3, r5
 80031e2:	6023      	str	r3, [r4, #0]
 80031e4:	e00e      	b.n	8003204 <_malloc_r+0xa0>
 80031e6:	6822      	ldr	r2, [r4, #0]
 80031e8:	1b52      	subs	r2, r2, r5
 80031ea:	d41e      	bmi.n	800322a <_malloc_r+0xc6>
 80031ec:	2a0b      	cmp	r2, #11
 80031ee:	d916      	bls.n	800321e <_malloc_r+0xba>
 80031f0:	1961      	adds	r1, r4, r5
 80031f2:	42a3      	cmp	r3, r4
 80031f4:	6025      	str	r5, [r4, #0]
 80031f6:	bf18      	it	ne
 80031f8:	6059      	strne	r1, [r3, #4]
 80031fa:	6863      	ldr	r3, [r4, #4]
 80031fc:	bf08      	it	eq
 80031fe:	6031      	streq	r1, [r6, #0]
 8003200:	5162      	str	r2, [r4, r5]
 8003202:	604b      	str	r3, [r1, #4]
 8003204:	4638      	mov	r0, r7
 8003206:	f104 060b 	add.w	r6, r4, #11
 800320a:	f000 f8cf 	bl	80033ac <__malloc_unlock>
 800320e:	f026 0607 	bic.w	r6, r6, #7
 8003212:	1d23      	adds	r3, r4, #4
 8003214:	1af2      	subs	r2, r6, r3
 8003216:	d0b6      	beq.n	8003186 <_malloc_r+0x22>
 8003218:	1b9b      	subs	r3, r3, r6
 800321a:	50a3      	str	r3, [r4, r2]
 800321c:	e7b3      	b.n	8003186 <_malloc_r+0x22>
 800321e:	6862      	ldr	r2, [r4, #4]
 8003220:	42a3      	cmp	r3, r4
 8003222:	bf0c      	ite	eq
 8003224:	6032      	streq	r2, [r6, #0]
 8003226:	605a      	strne	r2, [r3, #4]
 8003228:	e7ec      	b.n	8003204 <_malloc_r+0xa0>
 800322a:	4623      	mov	r3, r4
 800322c:	6864      	ldr	r4, [r4, #4]
 800322e:	e7b2      	b.n	8003196 <_malloc_r+0x32>
 8003230:	4634      	mov	r4, r6
 8003232:	6876      	ldr	r6, [r6, #4]
 8003234:	e7b9      	b.n	80031aa <_malloc_r+0x46>
 8003236:	230c      	movs	r3, #12
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	4638      	mov	r0, r7
 800323c:	f000 f8b6 	bl	80033ac <__malloc_unlock>
 8003240:	e7a1      	b.n	8003186 <_malloc_r+0x22>
 8003242:	6025      	str	r5, [r4, #0]
 8003244:	e7de      	b.n	8003204 <_malloc_r+0xa0>
 8003246:	bf00      	nop
 8003248:	2000011c 	.word	0x2000011c

0800324c <_sbrk_r>:
 800324c:	b538      	push	{r3, r4, r5, lr}
 800324e:	4d06      	ldr	r5, [pc, #24]	; (8003268 <_sbrk_r+0x1c>)
 8003250:	2300      	movs	r3, #0
 8003252:	4604      	mov	r4, r0
 8003254:	4608      	mov	r0, r1
 8003256:	602b      	str	r3, [r5, #0]
 8003258:	f7fd f9ce 	bl	80005f8 <_sbrk>
 800325c:	1c43      	adds	r3, r0, #1
 800325e:	d102      	bne.n	8003266 <_sbrk_r+0x1a>
 8003260:	682b      	ldr	r3, [r5, #0]
 8003262:	b103      	cbz	r3, 8003266 <_sbrk_r+0x1a>
 8003264:	6023      	str	r3, [r4, #0]
 8003266:	bd38      	pop	{r3, r4, r5, pc}
 8003268:	20000124 	.word	0x20000124

0800326c <__sread>:
 800326c:	b510      	push	{r4, lr}
 800326e:	460c      	mov	r4, r1
 8003270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003274:	f000 f8a0 	bl	80033b8 <_read_r>
 8003278:	2800      	cmp	r0, #0
 800327a:	bfab      	itete	ge
 800327c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800327e:	89a3      	ldrhlt	r3, [r4, #12]
 8003280:	181b      	addge	r3, r3, r0
 8003282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003286:	bfac      	ite	ge
 8003288:	6563      	strge	r3, [r4, #84]	; 0x54
 800328a:	81a3      	strhlt	r3, [r4, #12]
 800328c:	bd10      	pop	{r4, pc}

0800328e <__swrite>:
 800328e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003292:	461f      	mov	r7, r3
 8003294:	898b      	ldrh	r3, [r1, #12]
 8003296:	05db      	lsls	r3, r3, #23
 8003298:	4605      	mov	r5, r0
 800329a:	460c      	mov	r4, r1
 800329c:	4616      	mov	r6, r2
 800329e:	d505      	bpl.n	80032ac <__swrite+0x1e>
 80032a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032a4:	2302      	movs	r3, #2
 80032a6:	2200      	movs	r2, #0
 80032a8:	f000 f868 	bl	800337c <_lseek_r>
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032b6:	81a3      	strh	r3, [r4, #12]
 80032b8:	4632      	mov	r2, r6
 80032ba:	463b      	mov	r3, r7
 80032bc:	4628      	mov	r0, r5
 80032be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032c2:	f000 b817 	b.w	80032f4 <_write_r>

080032c6 <__sseek>:
 80032c6:	b510      	push	{r4, lr}
 80032c8:	460c      	mov	r4, r1
 80032ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ce:	f000 f855 	bl	800337c <_lseek_r>
 80032d2:	1c43      	adds	r3, r0, #1
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	bf15      	itete	ne
 80032d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80032da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032e2:	81a3      	strheq	r3, [r4, #12]
 80032e4:	bf18      	it	ne
 80032e6:	81a3      	strhne	r3, [r4, #12]
 80032e8:	bd10      	pop	{r4, pc}

080032ea <__sclose>:
 80032ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ee:	f000 b813 	b.w	8003318 <_close_r>
	...

080032f4 <_write_r>:
 80032f4:	b538      	push	{r3, r4, r5, lr}
 80032f6:	4d07      	ldr	r5, [pc, #28]	; (8003314 <_write_r+0x20>)
 80032f8:	4604      	mov	r4, r0
 80032fa:	4608      	mov	r0, r1
 80032fc:	4611      	mov	r1, r2
 80032fe:	2200      	movs	r2, #0
 8003300:	602a      	str	r2, [r5, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	f7fd f927 	bl	8000556 <_write>
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d102      	bne.n	8003312 <_write_r+0x1e>
 800330c:	682b      	ldr	r3, [r5, #0]
 800330e:	b103      	cbz	r3, 8003312 <_write_r+0x1e>
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	bd38      	pop	{r3, r4, r5, pc}
 8003314:	20000124 	.word	0x20000124

08003318 <_close_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4d06      	ldr	r5, [pc, #24]	; (8003334 <_close_r+0x1c>)
 800331c:	2300      	movs	r3, #0
 800331e:	4604      	mov	r4, r0
 8003320:	4608      	mov	r0, r1
 8003322:	602b      	str	r3, [r5, #0]
 8003324:	f7fd f933 	bl	800058e <_close>
 8003328:	1c43      	adds	r3, r0, #1
 800332a:	d102      	bne.n	8003332 <_close_r+0x1a>
 800332c:	682b      	ldr	r3, [r5, #0]
 800332e:	b103      	cbz	r3, 8003332 <_close_r+0x1a>
 8003330:	6023      	str	r3, [r4, #0]
 8003332:	bd38      	pop	{r3, r4, r5, pc}
 8003334:	20000124 	.word	0x20000124

08003338 <_fstat_r>:
 8003338:	b538      	push	{r3, r4, r5, lr}
 800333a:	4d07      	ldr	r5, [pc, #28]	; (8003358 <_fstat_r+0x20>)
 800333c:	2300      	movs	r3, #0
 800333e:	4604      	mov	r4, r0
 8003340:	4608      	mov	r0, r1
 8003342:	4611      	mov	r1, r2
 8003344:	602b      	str	r3, [r5, #0]
 8003346:	f7fd f92e 	bl	80005a6 <_fstat>
 800334a:	1c43      	adds	r3, r0, #1
 800334c:	d102      	bne.n	8003354 <_fstat_r+0x1c>
 800334e:	682b      	ldr	r3, [r5, #0]
 8003350:	b103      	cbz	r3, 8003354 <_fstat_r+0x1c>
 8003352:	6023      	str	r3, [r4, #0]
 8003354:	bd38      	pop	{r3, r4, r5, pc}
 8003356:	bf00      	nop
 8003358:	20000124 	.word	0x20000124

0800335c <_isatty_r>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	4d06      	ldr	r5, [pc, #24]	; (8003378 <_isatty_r+0x1c>)
 8003360:	2300      	movs	r3, #0
 8003362:	4604      	mov	r4, r0
 8003364:	4608      	mov	r0, r1
 8003366:	602b      	str	r3, [r5, #0]
 8003368:	f7fd f92d 	bl	80005c6 <_isatty>
 800336c:	1c43      	adds	r3, r0, #1
 800336e:	d102      	bne.n	8003376 <_isatty_r+0x1a>
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	b103      	cbz	r3, 8003376 <_isatty_r+0x1a>
 8003374:	6023      	str	r3, [r4, #0]
 8003376:	bd38      	pop	{r3, r4, r5, pc}
 8003378:	20000124 	.word	0x20000124

0800337c <_lseek_r>:
 800337c:	b538      	push	{r3, r4, r5, lr}
 800337e:	4d07      	ldr	r5, [pc, #28]	; (800339c <_lseek_r+0x20>)
 8003380:	4604      	mov	r4, r0
 8003382:	4608      	mov	r0, r1
 8003384:	4611      	mov	r1, r2
 8003386:	2200      	movs	r2, #0
 8003388:	602a      	str	r2, [r5, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	f7fd f926 	bl	80005dc <_lseek>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d102      	bne.n	800339a <_lseek_r+0x1e>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	b103      	cbz	r3, 800339a <_lseek_r+0x1e>
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	20000124 	.word	0x20000124

080033a0 <__malloc_lock>:
 80033a0:	4801      	ldr	r0, [pc, #4]	; (80033a8 <__malloc_lock+0x8>)
 80033a2:	f7ff be0b 	b.w	8002fbc <__retarget_lock_acquire_recursive>
 80033a6:	bf00      	nop
 80033a8:	20000118 	.word	0x20000118

080033ac <__malloc_unlock>:
 80033ac:	4801      	ldr	r0, [pc, #4]	; (80033b4 <__malloc_unlock+0x8>)
 80033ae:	f7ff be06 	b.w	8002fbe <__retarget_lock_release_recursive>
 80033b2:	bf00      	nop
 80033b4:	20000118 	.word	0x20000118

080033b8 <_read_r>:
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	4d07      	ldr	r5, [pc, #28]	; (80033d8 <_read_r+0x20>)
 80033bc:	4604      	mov	r4, r0
 80033be:	4608      	mov	r0, r1
 80033c0:	4611      	mov	r1, r2
 80033c2:	2200      	movs	r2, #0
 80033c4:	602a      	str	r2, [r5, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f7fd f8a8 	bl	800051c <_read>
 80033cc:	1c43      	adds	r3, r0, #1
 80033ce:	d102      	bne.n	80033d6 <_read_r+0x1e>
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	b103      	cbz	r3, 80033d6 <_read_r+0x1e>
 80033d4:	6023      	str	r3, [r4, #0]
 80033d6:	bd38      	pop	{r3, r4, r5, pc}
 80033d8:	20000124 	.word	0x20000124

080033dc <_init>:
 80033dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033de:	bf00      	nop
 80033e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e2:	bc08      	pop	{r3}
 80033e4:	469e      	mov	lr, r3
 80033e6:	4770      	bx	lr

080033e8 <_fini>:
 80033e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ea:	bf00      	nop
 80033ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ee:	bc08      	pop	{r3}
 80033f0:	469e      	mov	lr, r3
 80033f2:	4770      	bx	lr
