
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08005a50  08005a50  00015a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b90  08005b90  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005b90  08005b90  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b90  08005b90  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b90  08005b90  00015b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b94  08005b94  00015b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001b0c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001b80  20001b80  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000191e1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eaa  00000000  00000000  00039285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  0003c130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001200  00000000  00000000  0003d438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b56  00000000  00000000  0003e638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017175  00000000  00000000  0004118e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc39b  00000000  00000000  00058303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012469e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005350  00000000  00000000  001246f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a38 	.word	0x08005a38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005a38 	.word	0x08005a38

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fa8c 	bl	80006f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f834 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f8a4 	bl	8000328 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e0:	f000 f872 	bl	80002c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001e4:	f002 fdb6 	bl	8002d54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001e8:	4a0d      	ldr	r2, [pc, #52]	; (8000220 <main+0x50>)
 80001ea:	2100      	movs	r1, #0
 80001ec:	480d      	ldr	r0, [pc, #52]	; (8000224 <main+0x54>)
 80001ee:	f002 fe19 	bl	8002e24 <osThreadNew>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a0c      	ldr	r2, [pc, #48]	; (8000228 <main+0x58>)
 80001f6:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80001f8:	4a0c      	ldr	r2, [pc, #48]	; (800022c <main+0x5c>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	480c      	ldr	r0, [pc, #48]	; (8000230 <main+0x60>)
 80001fe:	f002 fe11 	bl	8002e24 <osThreadNew>
 8000202:	4603      	mov	r3, r0
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <main+0x64>)
 8000206:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000208:	4a0b      	ldr	r2, [pc, #44]	; (8000238 <main+0x68>)
 800020a:	2100      	movs	r1, #0
 800020c:	480b      	ldr	r0, [pc, #44]	; (800023c <main+0x6c>)
 800020e:	f002 fe09 	bl	8002e24 <osThreadNew>
 8000212:	4603      	mov	r3, r0
 8000214:	4a0a      	ldr	r2, [pc, #40]	; (8000240 <main+0x70>)
 8000216:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000218:	f002 fdd0 	bl	8002dbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021c:	e7fe      	b.n	800021c <main+0x4c>
 800021e:	bf00      	nop
 8000220:	08005a8c 	.word	0x08005a8c
 8000224:	080003f9 	.word	0x080003f9
 8000228:	20000114 	.word	0x20000114
 800022c:	08005ab0 	.word	0x08005ab0
 8000230:	08000409 	.word	0x08000409
 8000234:	20000118 	.word	0x20000118
 8000238:	08005ad4 	.word	0x08005ad4
 800023c:	08000425 	.word	0x08000425
 8000240:	2000011c 	.word	0x2000011c

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b090      	sub	sp, #64	; 0x40
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f005 fb26 	bl	80058a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000266:	2302      	movs	r3, #2
 8000268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	2301      	movs	r3, #1
 800026c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026e:	2310      	movs	r3, #16
 8000270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000276:	2300      	movs	r3, #0
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800027a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800027e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	f107 0318 	add.w	r3, r7, #24
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fcef 	bl	8000c68 <HAL_RCC_OscConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000290:	f000 f8e8 	bl	8000464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	230f      	movs	r3, #15
 8000296:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000298:	2302      	movs	r3, #2
 800029a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2102      	movs	r1, #2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fd18 	bl	8001ce4 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ba:	f000 f8d3 	bl	8000464 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3740      	adds	r7, #64	; 0x40
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002cc:	4b14      	ldr	r3, [pc, #80]	; (8000320 <MX_USART2_UART_Init+0x58>)
 80002ce:	4a15      	ldr	r2, [pc, #84]	; (8000324 <MX_USART2_UART_Init+0x5c>)
 80002d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002d2:	4b13      	ldr	r3, [pc, #76]	; (8000320 <MX_USART2_UART_Init+0x58>)
 80002d4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80002d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_USART2_UART_Init+0x58>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_USART2_UART_Init+0x58>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <MX_USART2_UART_Init+0x58>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <MX_USART2_UART_Init+0x58>)
 80002ee:	220c      	movs	r2, #12
 80002f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <MX_USART2_UART_Init+0x58>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_USART2_UART_Init+0x58>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <MX_USART2_UART_Init+0x58>)
 8000300:	2200      	movs	r2, #0
 8000302:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <MX_USART2_UART_Init+0x58>)
 8000306:	2200      	movs	r2, #0
 8000308:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_USART2_UART_Init+0x58>)
 800030c:	f002 f9ee 	bl	80026ec <HAL_UART_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000316:	f000 f8a5 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000090 	.word	0x20000090
 8000324:	40004400 	.word	0x40004400

08000328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b08a      	sub	sp, #40	; 0x28
 800032c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033e:	4b2c      	ldr	r3, [pc, #176]	; (80003f0 <MX_GPIO_Init+0xc8>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	4a2b      	ldr	r2, [pc, #172]	; (80003f0 <MX_GPIO_Init+0xc8>)
 8000344:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000348:	6153      	str	r3, [r2, #20]
 800034a:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <MX_GPIO_Init+0xc8>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000352:	613b      	str	r3, [r7, #16]
 8000354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000356:	4b26      	ldr	r3, [pc, #152]	; (80003f0 <MX_GPIO_Init+0xc8>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a25      	ldr	r2, [pc, #148]	; (80003f0 <MX_GPIO_Init+0xc8>)
 800035c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000360:	6153      	str	r3, [r2, #20]
 8000362:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <MX_GPIO_Init+0xc8>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <MX_GPIO_Init+0xc8>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a1f      	ldr	r2, [pc, #124]	; (80003f0 <MX_GPIO_Init+0xc8>)
 8000374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000378:	6153      	str	r3, [r2, #20]
 800037a:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <MX_GPIO_Init+0xc8>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000386:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <MX_GPIO_Init+0xc8>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a19      	ldr	r2, [pc, #100]	; (80003f0 <MX_GPIO_Init+0xc8>)
 800038c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <MX_GPIO_Init+0xc8>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	f44f 7190 	mov.w	r1, #288	; 0x120
 80003a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a8:	f000 fc2c 	bl	8000c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b8:	2300      	movs	r3, #0
 80003ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003bc:	f107 0314 	add.w	r3, r7, #20
 80003c0:	4619      	mov	r1, r3
 80003c2:	480c      	ldr	r0, [pc, #48]	; (80003f4 <MX_GPIO_Init+0xcc>)
 80003c4:	f000 faac 	bl	8000920 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED1_Pin;
 80003c8:	f44f 7390 	mov.w	r3, #288	; 0x120
 80003cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ce:	2301      	movs	r3, #1
 80003d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d6:	2300      	movs	r3, #0
 80003d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	4619      	mov	r1, r3
 80003e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e4:	f000 fa9c 	bl	8000920 <HAL_GPIO_Init>

}
 80003e8:	bf00      	nop
 80003ea:	3728      	adds	r7, #40	; 0x28
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40021000 	.word	0x40021000
 80003f4:	48000800 	.word	0x48000800

080003f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000400:	2001      	movs	r0, #1
 8000402:	f002 fdb9 	bl	8002f78 <osDelay>
 8000406:	e7fb      	b.n	8000400 <StartDefaultTask+0x8>

08000408 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000410:	2120      	movs	r1, #32
 8000412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000416:	f000 fc0d 	bl	8000c34 <HAL_GPIO_TogglePin>
    osDelay(400);
 800041a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800041e:	f002 fdab 	bl	8002f78 <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000422:	e7f5      	b.n	8000410 <StartTask02+0x8>

08000424 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 800042c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000434:	f000 fbfe 	bl	8000c34 <HAL_GPIO_TogglePin>
    osDelay(200);
 8000438:	20c8      	movs	r0, #200	; 0xc8
 800043a:	f002 fd9d 	bl	8002f78 <osDelay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 800043e:	e7f5      	b.n	800042c <StartTask03+0x8>

08000440 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a04      	ldr	r2, [pc, #16]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d101      	bne.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000452:	f000 f963 	bl	800071c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40001000 	.word	0x40001000

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
}
 800046a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046c:	e7fe      	b.n	800046c <Error_Handler+0x8>
	...

08000470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <HAL_MspInit+0x4c>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	4a10      	ldr	r2, [pc, #64]	; (80004bc <HAL_MspInit+0x4c>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6193      	str	r3, [r2, #24]
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <HAL_MspInit+0x4c>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <HAL_MspInit+0x4c>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <HAL_MspInit+0x4c>)
 8000494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <HAL_MspInit+0x4c>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a2:	603b      	str	r3, [r7, #0]
 80004a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	210f      	movs	r1, #15
 80004aa:	f06f 0001 	mvn.w	r0, #1
 80004ae:	f000 fa0d 	bl	80008cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000

080004c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	f107 0314 	add.w	r3, r7, #20
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a17      	ldr	r2, [pc, #92]	; (800053c <HAL_UART_MspInit+0x7c>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d128      	bne.n	8000534 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004e2:	4b17      	ldr	r3, [pc, #92]	; (8000540 <HAL_UART_MspInit+0x80>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a16      	ldr	r2, [pc, #88]	; (8000540 <HAL_UART_MspInit+0x80>)
 80004e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b14      	ldr	r3, [pc, #80]	; (8000540 <HAL_UART_MspInit+0x80>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <HAL_UART_MspInit+0x80>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a10      	ldr	r2, [pc, #64]	; (8000540 <HAL_UART_MspInit+0x80>)
 8000500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_UART_MspInit+0x80>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000512:	230c      	movs	r3, #12
 8000514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000516:	2302      	movs	r3, #2
 8000518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051e:	2303      	movs	r3, #3
 8000520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000522:	2307      	movs	r3, #7
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	4619      	mov	r1, r3
 800052c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000530:	f000 f9f6 	bl	8000920 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000534:	bf00      	nop
 8000536:	3728      	adds	r7, #40	; 0x28
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40004400 	.word	0x40004400
 8000540:	40021000 	.word	0x40021000

08000544 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08e      	sub	sp, #56	; 0x38
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800054c:	2300      	movs	r3, #0
 800054e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000550:	2300      	movs	r3, #0
 8000552:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000554:	4b33      	ldr	r3, [pc, #204]	; (8000624 <HAL_InitTick+0xe0>)
 8000556:	69db      	ldr	r3, [r3, #28]
 8000558:	4a32      	ldr	r2, [pc, #200]	; (8000624 <HAL_InitTick+0xe0>)
 800055a:	f043 0310 	orr.w	r3, r3, #16
 800055e:	61d3      	str	r3, [r2, #28]
 8000560:	4b30      	ldr	r3, [pc, #192]	; (8000624 <HAL_InitTick+0xe0>)
 8000562:	69db      	ldr	r3, [r3, #28]
 8000564:	f003 0310 	and.w	r3, r3, #16
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800056c:	f107 0210 	add.w	r2, r7, #16
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4611      	mov	r1, r2
 8000576:	4618      	mov	r0, r3
 8000578:	f001 fdea 	bl	8002150 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800057c:	6a3b      	ldr	r3, [r7, #32]
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000582:	2b00      	cmp	r3, #0
 8000584:	d103      	bne.n	800058e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000586:	f001 fd9f 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 800058a:	6378      	str	r0, [r7, #52]	; 0x34
 800058c:	e004      	b.n	8000598 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800058e:	f001 fd9b 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 8000592:	4603      	mov	r3, r0
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800059a:	4a23      	ldr	r2, [pc, #140]	; (8000628 <HAL_InitTick+0xe4>)
 800059c:	fba2 2303 	umull	r2, r3, r2, r3
 80005a0:	0c9b      	lsrs	r3, r3, #18
 80005a2:	3b01      	subs	r3, #1
 80005a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <HAL_InitTick+0xe8>)
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <HAL_InitTick+0xec>)
 80005aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <HAL_InitTick+0xe8>)
 80005ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005b4:	4a1d      	ldr	r2, [pc, #116]	; (800062c <HAL_InitTick+0xe8>)
 80005b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <HAL_InitTick+0xe8>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <HAL_InitTick+0xe8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <HAL_InitTick+0xe8>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80005cc:	4817      	ldr	r0, [pc, #92]	; (800062c <HAL_InitTick+0xe8>)
 80005ce:	f001 fdf1 	bl	80021b4 <HAL_TIM_Base_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80005d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d11b      	bne.n	8000618 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80005e0:	4812      	ldr	r0, [pc, #72]	; (800062c <HAL_InitTick+0xe8>)
 80005e2:	f001 fe49 	bl	8002278 <HAL_TIM_Base_Start_IT>
 80005e6:	4603      	mov	r3, r0
 80005e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80005ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d111      	bne.n	8000618 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80005f4:	2036      	movs	r0, #54	; 0x36
 80005f6:	f000 f985 	bl	8000904 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b0f      	cmp	r3, #15
 80005fe:	d808      	bhi.n	8000612 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 8000600:	2200      	movs	r2, #0
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	2036      	movs	r0, #54	; 0x36
 8000606:	f000 f961 	bl	80008cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <HAL_InitTick+0xf0>)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	e002      	b.n	8000618 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000612:	2301      	movs	r3, #1
 8000614:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000618:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800061c:	4618      	mov	r0, r3
 800061e:	3738      	adds	r7, #56	; 0x38
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	431bde83 	.word	0x431bde83
 800062c:	20000120 	.word	0x20000120
 8000630:	40001000 	.word	0x40001000
 8000634:	20000004 	.word	0x20000004

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800063c:	e7fe      	b.n	800063c <NMI_Handler+0x4>

0800063e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000642:	e7fe      	b.n	8000642 <HardFault_Handler+0x4>

08000644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <MemManage_Handler+0x4>

0800064a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <BusFault_Handler+0x4>

08000650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <UsageFault_Handler+0x4>

08000656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <TIM6_DAC1_IRQHandler+0x10>)
 800066a:	f001 fe61 	bl	8002330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000120 	.word	0x20000120

08000678 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <SystemInit+0x20>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000682:	4a05      	ldr	r2, [pc, #20]	; (8000698 <SystemInit+0x20>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800069c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a2:	490e      	ldr	r1, [pc, #56]	; (80006dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a4:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <LoopForever+0xe>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a8:	e002      	b.n	80006b0 <LoopCopyDataInit>

080006aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ae:	3304      	adds	r3, #4

080006b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b4:	d3f9      	bcc.n	80006aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b8:	4c0b      	ldr	r4, [pc, #44]	; (80006e8 <LoopForever+0x16>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006bc:	e001      	b.n	80006c2 <LoopFillZerobss>

080006be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c0:	3204      	adds	r2, #4

080006c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c4:	d3fb      	bcc.n	80006be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006c6:	f7ff ffd7 	bl	8000678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ca:	f005 f8b7 	bl	800583c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ce:	f7ff fd7f 	bl	80001d0 <main>

080006d2 <LoopForever>:

LoopForever:
    b LoopForever
 80006d2:	e7fe      	b.n	80006d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80006e0:	08005b98 	.word	0x08005b98
  ldr r2, =_sbss
 80006e4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80006e8:	20001b80 	.word	0x20001b80

080006ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_2_IRQHandler>
	...

080006f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_Init+0x28>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_Init+0x28>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f8d8 	bl	80008b6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000706:	200f      	movs	r0, #15
 8000708:	f7ff ff1c 	bl	8000544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070c:	f7ff feb0 	bl	8000470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40022000 	.word	0x40022000

0800071c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_IncTick+0x20>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_IncTick+0x24>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <HAL_IncTick+0x24>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20000008 	.word	0x20000008
 8000740:	2000016c 	.word	0x2000016c

08000744 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return uwTick;  
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <HAL_GetTick+0x14>)
 800074a:	681b      	ldr	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	2000016c 	.word	0x2000016c

0800075c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <__NVIC_SetPriorityGrouping+0x44>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000778:	4013      	ands	r3, r2
 800077a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800078e:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	60d3      	str	r3, [r2, #12]
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <__NVIC_GetPriorityGrouping+0x18>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	0a1b      	lsrs	r3, r3, #8
 80007ae:	f003 0307 	and.w	r3, r3, #7
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	db0b      	blt.n	80007ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	f003 021f 	and.w	r2, r3, #31
 80007d8:	4907      	ldr	r1, [pc, #28]	; (80007f8 <__NVIC_EnableIRQ+0x38>)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	095b      	lsrs	r3, r3, #5
 80007e0:	2001      	movs	r0, #1
 80007e2:	fa00 f202 	lsl.w	r2, r0, r2
 80007e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000e100 	.word	0xe000e100

080007fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	6039      	str	r1, [r7, #0]
 8000806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080c:	2b00      	cmp	r3, #0
 800080e:	db0a      	blt.n	8000826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	b2da      	uxtb	r2, r3
 8000814:	490c      	ldr	r1, [pc, #48]	; (8000848 <__NVIC_SetPriority+0x4c>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	0112      	lsls	r2, r2, #4
 800081c:	b2d2      	uxtb	r2, r2
 800081e:	440b      	add	r3, r1
 8000820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000824:	e00a      	b.n	800083c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4908      	ldr	r1, [pc, #32]	; (800084c <__NVIC_SetPriority+0x50>)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	3b04      	subs	r3, #4
 8000834:	0112      	lsls	r2, r2, #4
 8000836:	b2d2      	uxtb	r2, r2
 8000838:	440b      	add	r3, r1
 800083a:	761a      	strb	r2, [r3, #24]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	e000e100 	.word	0xe000e100
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000850:	b480      	push	{r7}
 8000852:	b089      	sub	sp, #36	; 0x24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	f1c3 0307 	rsb	r3, r3, #7
 800086a:	2b04      	cmp	r3, #4
 800086c:	bf28      	it	cs
 800086e:	2304      	movcs	r3, #4
 8000870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3304      	adds	r3, #4
 8000876:	2b06      	cmp	r3, #6
 8000878:	d902      	bls.n	8000880 <NVIC_EncodePriority+0x30>
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3b03      	subs	r3, #3
 800087e:	e000      	b.n	8000882 <NVIC_EncodePriority+0x32>
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	f04f 32ff 	mov.w	r2, #4294967295
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43da      	mvns	r2, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	401a      	ands	r2, r3
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000898:	f04f 31ff 	mov.w	r1, #4294967295
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	fa01 f303 	lsl.w	r3, r1, r3
 80008a2:	43d9      	mvns	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	4313      	orrs	r3, r2
         );
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3724      	adds	r7, #36	; 0x24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ff4c 	bl	800075c <__NVIC_SetPriorityGrouping>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008de:	f7ff ff61 	bl	80007a4 <__NVIC_GetPriorityGrouping>
 80008e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	68b9      	ldr	r1, [r7, #8]
 80008e8:	6978      	ldr	r0, [r7, #20]
 80008ea:	f7ff ffb1 	bl	8000850 <NVIC_EncodePriority>
 80008ee:	4602      	mov	r2, r0
 80008f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff80 	bl	80007fc <__NVIC_SetPriority>
}
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ff54 	bl	80007c0 <__NVIC_EnableIRQ>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000920:	b480      	push	{r7}
 8000922:	b087      	sub	sp, #28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800092e:	e14e      	b.n	8000bce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	2101      	movs	r1, #1
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	fa01 f303 	lsl.w	r3, r1, r3
 800093c:	4013      	ands	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	f000 8140 	beq.w	8000bc8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 0303 	and.w	r3, r3, #3
 8000950:	2b01      	cmp	r3, #1
 8000952:	d005      	beq.n	8000960 <HAL_GPIO_Init+0x40>
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	2b02      	cmp	r3, #2
 800095e:	d130      	bne.n	80009c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	2203      	movs	r2, #3
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	68da      	ldr	r2, [r3, #12]
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4313      	orrs	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000996:	2201      	movs	r2, #1
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	091b      	lsrs	r3, r3, #4
 80009ac:	f003 0201 	and.w	r2, r3, #1
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d017      	beq.n	80009fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2203      	movs	r2, #3
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4013      	ands	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 0303 	and.w	r3, r3, #3
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d123      	bne.n	8000a52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	08da      	lsrs	r2, r3, #3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3208      	adds	r2, #8
 8000a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	220f      	movs	r2, #15
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	691a      	ldr	r2, [r3, #16]
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	f003 0307 	and.w	r3, r3, #7
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	08da      	lsrs	r2, r3, #3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3208      	adds	r2, #8
 8000a4c:	6939      	ldr	r1, [r7, #16]
 8000a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f003 0203 	and.w	r2, r3, #3
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f000 809a 	beq.w	8000bc8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a94:	4b55      	ldr	r3, [pc, #340]	; (8000bec <HAL_GPIO_Init+0x2cc>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a54      	ldr	r2, [pc, #336]	; (8000bec <HAL_GPIO_Init+0x2cc>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b52      	ldr	r3, [pc, #328]	; (8000bec <HAL_GPIO_Init+0x2cc>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000aac:	4a50      	ldr	r2, [pc, #320]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ad6:	d013      	beq.n	8000b00 <HAL_GPIO_Init+0x1e0>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a46      	ldr	r2, [pc, #280]	; (8000bf4 <HAL_GPIO_Init+0x2d4>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d00d      	beq.n	8000afc <HAL_GPIO_Init+0x1dc>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a45      	ldr	r2, [pc, #276]	; (8000bf8 <HAL_GPIO_Init+0x2d8>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d007      	beq.n	8000af8 <HAL_GPIO_Init+0x1d8>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a44      	ldr	r2, [pc, #272]	; (8000bfc <HAL_GPIO_Init+0x2dc>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d101      	bne.n	8000af4 <HAL_GPIO_Init+0x1d4>
 8000af0:	2303      	movs	r3, #3
 8000af2:	e006      	b.n	8000b02 <HAL_GPIO_Init+0x1e2>
 8000af4:	2305      	movs	r3, #5
 8000af6:	e004      	b.n	8000b02 <HAL_GPIO_Init+0x1e2>
 8000af8:	2302      	movs	r3, #2
 8000afa:	e002      	b.n	8000b02 <HAL_GPIO_Init+0x1e2>
 8000afc:	2301      	movs	r3, #1
 8000afe:	e000      	b.n	8000b02 <HAL_GPIO_Init+0x1e2>
 8000b00:	2300      	movs	r3, #0
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	f002 0203 	and.w	r2, r2, #3
 8000b08:	0092      	lsls	r2, r2, #2
 8000b0a:	4093      	lsls	r3, r2
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b12:	4937      	ldr	r1, [pc, #220]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	3302      	adds	r3, #2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b20:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <HAL_GPIO_Init+0x2e0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b44:	4a2e      	ldr	r2, [pc, #184]	; (8000c00 <HAL_GPIO_Init+0x2e0>)
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <HAL_GPIO_Init+0x2e0>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b6e:	4a24      	ldr	r2, [pc, #144]	; (8000c00 <HAL_GPIO_Init+0x2e0>)
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <HAL_GPIO_Init+0x2e0>)
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d003      	beq.n	8000b98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b98:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <HAL_GPIO_Init+0x2e0>)
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <HAL_GPIO_Init+0x2e0>)
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <HAL_GPIO_Init+0x2e0>)
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	f47f aea9 	bne.w	8000930 <HAL_GPIO_Init+0x10>
  }
}
 8000bde:	bf00      	nop
 8000be0:	bf00      	nop
 8000be2:	371c      	adds	r7, #28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010000 	.word	0x40010000
 8000bf4:	48000400 	.word	0x48000400
 8000bf8:	48000800 	.word	0x48000800
 8000bfc:	48000c00 	.word	0x48000c00
 8000c00:	40010400 	.word	0x40010400

08000c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	807b      	strh	r3, [r7, #2]
 8000c10:	4613      	mov	r3, r2
 8000c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c14:	787b      	ldrb	r3, [r7, #1]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c1a:	887a      	ldrh	r2, [r7, #2]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c20:	e002      	b.n	8000c28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c22:	887a      	ldrh	r2, [r7, #2]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c46:	887a      	ldrh	r2, [r7, #2]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	041a      	lsls	r2, r3, #16
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	43d9      	mvns	r1, r3
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	400b      	ands	r3, r1
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	619a      	str	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c78:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	f001 b823 	b.w	8001cd4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f000 817d 	beq.w	8000f9e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ca4:	4bbc      	ldr	r3, [pc, #752]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f003 030c 	and.w	r3, r3, #12
 8000cac:	2b04      	cmp	r3, #4
 8000cae:	d00c      	beq.n	8000cca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cb0:	4bb9      	ldr	r3, [pc, #740]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 030c 	and.w	r3, r3, #12
 8000cb8:	2b08      	cmp	r3, #8
 8000cba:	d15c      	bne.n	8000d76 <HAL_RCC_OscConfig+0x10e>
 8000cbc:	4bb6      	ldr	r3, [pc, #728]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc8:	d155      	bne.n	8000d76 <HAL_RCC_OscConfig+0x10e>
 8000cca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000cd6:	fa93 f3a3 	rbit	r3, r3
 8000cda:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cde:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce2:	fab3 f383 	clz	r3, r3
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	095b      	lsrs	r3, r3, #5
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d102      	bne.n	8000cfc <HAL_RCC_OscConfig+0x94>
 8000cf6:	4ba8      	ldr	r3, [pc, #672]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	e015      	b.n	8000d28 <HAL_RCC_OscConfig+0xc0>
 8000cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d00:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d04:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d08:	fa93 f3a3 	rbit	r3, r3
 8000d0c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d14:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d18:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d1c:	fa93 f3a3 	rbit	r3, r3
 8000d20:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d24:	4b9c      	ldr	r3, [pc, #624]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d2c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d30:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d34:	fa92 f2a2 	rbit	r2, r2
 8000d38:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d3c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	f042 0220 	orr.w	r2, r2, #32
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	f002 021f 	and.w	r2, r2, #31
 8000d50:	2101      	movs	r1, #1
 8000d52:	fa01 f202 	lsl.w	r2, r1, r2
 8000d56:	4013      	ands	r3, r2
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 811f 	beq.w	8000f9c <HAL_RCC_OscConfig+0x334>
 8000d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f040 8116 	bne.w	8000f9c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	f000 bfaf 	b.w	8001cd4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d86:	d106      	bne.n	8000d96 <HAL_RCC_OscConfig+0x12e>
 8000d88:	4b83      	ldr	r3, [pc, #524]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a82      	ldr	r2, [pc, #520]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	e036      	b.n	8000e04 <HAL_RCC_OscConfig+0x19c>
 8000d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10c      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x158>
 8000da6:	4b7c      	ldr	r3, [pc, #496]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a7b      	ldr	r2, [pc, #492]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	4b79      	ldr	r3, [pc, #484]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a78      	ldr	r2, [pc, #480]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	e021      	b.n	8000e04 <HAL_RCC_OscConfig+0x19c>
 8000dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dd0:	d10c      	bne.n	8000dec <HAL_RCC_OscConfig+0x184>
 8000dd2:	4b71      	ldr	r3, [pc, #452]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a70      	ldr	r2, [pc, #448]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	4b6e      	ldr	r3, [pc, #440]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a6d      	ldr	r2, [pc, #436]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e00b      	b.n	8000e04 <HAL_RCC_OscConfig+0x19c>
 8000dec:	4b6a      	ldr	r3, [pc, #424]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a69      	ldr	r2, [pc, #420]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	4b67      	ldr	r3, [pc, #412]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a66      	ldr	r2, [pc, #408]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e02:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e04:	4b64      	ldr	r3, [pc, #400]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e08:	f023 020f 	bic.w	r2, r3, #15
 8000e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	495f      	ldr	r1, [pc, #380]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d059      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2e:	f7ff fc89 	bl	8000744 <HAL_GetTick>
 8000e32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e36:	e00a      	b.n	8000e4e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e38:	f7ff fc84 	bl	8000744 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b64      	cmp	r3, #100	; 0x64
 8000e46:	d902      	bls.n	8000e4e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	f000 bf43 	b.w	8001cd4 <HAL_RCC_OscConfig+0x106c>
 8000e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e52:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e5a:	fa93 f3a3 	rbit	r3, r3
 8000e5e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e62:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e66:	fab3 f383 	clz	r3, r3
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	095b      	lsrs	r3, r3, #5
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d102      	bne.n	8000e80 <HAL_RCC_OscConfig+0x218>
 8000e7a:	4b47      	ldr	r3, [pc, #284]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	e015      	b.n	8000eac <HAL_RCC_OscConfig+0x244>
 8000e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e84:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e88:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e8c:	fa93 f3a3 	rbit	r3, r3
 8000e90:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e98:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e9c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eb0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000eb4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000eb8:	fa92 f2a2 	rbit	r2, r2
 8000ebc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ec0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	f042 0220 	orr.w	r2, r2, #32
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	f002 021f 	and.w	r2, r2, #31
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eda:	4013      	ands	r3, r2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0ab      	beq.n	8000e38 <HAL_RCC_OscConfig+0x1d0>
 8000ee0:	e05d      	b.n	8000f9e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee2:	f7ff fc2f 	bl	8000744 <HAL_GetTick>
 8000ee6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eea:	e00a      	b.n	8000f02 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eec:	f7ff fc2a 	bl	8000744 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b64      	cmp	r3, #100	; 0x64
 8000efa:	d902      	bls.n	8000f02 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	f000 bee9 	b.w	8001cd4 <HAL_RCC_OscConfig+0x106c>
 8000f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f06:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f0e:	fa93 f3a3 	rbit	r3, r3
 8000f12:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1a:	fab3 f383 	clz	r3, r3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	095b      	lsrs	r3, r3, #5
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d102      	bne.n	8000f34 <HAL_RCC_OscConfig+0x2cc>
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	e015      	b.n	8000f60 <HAL_RCC_OscConfig+0x2f8>
 8000f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f38:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f40:	fa93 f3a3 	rbit	r3, r3
 8000f44:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f4c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f50:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f54:	fa93 f3a3 	rbit	r3, r3
 8000f58:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_RCC_OscConfig+0x330>)
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f64:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f68:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f6c:	fa92 f2a2 	rbit	r2, r2
 8000f70:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f74:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f78:	fab2 f282 	clz	r2, r2
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	f042 0220 	orr.w	r2, r2, #32
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	f002 021f 	and.w	r2, r2, #31
 8000f88:	2101      	movs	r1, #1
 8000f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1ab      	bne.n	8000eec <HAL_RCC_OscConfig+0x284>
 8000f94:	e003      	b.n	8000f9e <HAL_RCC_OscConfig+0x336>
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 817d 	beq.w	80012ae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fb4:	4ba6      	ldr	r3, [pc, #664]	; (8001250 <HAL_RCC_OscConfig+0x5e8>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 030c 	and.w	r3, r3, #12
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00b      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fc0:	4ba3      	ldr	r3, [pc, #652]	; (8001250 <HAL_RCC_OscConfig+0x5e8>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d172      	bne.n	80010b2 <HAL_RCC_OscConfig+0x44a>
 8000fcc:	4ba0      	ldr	r3, [pc, #640]	; (8001250 <HAL_RCC_OscConfig+0x5e8>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d16c      	bne.n	80010b2 <HAL_RCC_OscConfig+0x44a>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fde:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000fe2:	fa93 f3a3 	rbit	r3, r3
 8000fe6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000fea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fee:	fab3 f383 	clz	r3, r3
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	095b      	lsrs	r3, r3, #5
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d102      	bne.n	8001008 <HAL_RCC_OscConfig+0x3a0>
 8001002:	4b93      	ldr	r3, [pc, #588]	; (8001250 <HAL_RCC_OscConfig+0x5e8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	e013      	b.n	8001030 <HAL_RCC_OscConfig+0x3c8>
 8001008:	2302      	movs	r3, #2
 800100a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001012:	fa93 f3a3 	rbit	r3, r3
 8001016:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001020:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001024:	fa93 f3a3 	rbit	r3, r3
 8001028:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800102c:	4b88      	ldr	r3, [pc, #544]	; (8001250 <HAL_RCC_OscConfig+0x5e8>)
 800102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001030:	2202      	movs	r2, #2
 8001032:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001036:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800103a:	fa92 f2a2 	rbit	r2, r2
 800103e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001042:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001046:	fab2 f282 	clz	r2, r2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	f042 0220 	orr.w	r2, r2, #32
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	f002 021f 	and.w	r2, r2, #31
 8001056:	2101      	movs	r1, #1
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	4013      	ands	r3, r2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00a      	beq.n	8001078 <HAL_RCC_OscConfig+0x410>
 8001062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d002      	beq.n	8001078 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	f000 be2e 	b.w	8001cd4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001078:	4b75      	ldr	r3, [pc, #468]	; (8001250 <HAL_RCC_OscConfig+0x5e8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001084:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	21f8      	movs	r1, #248	; 0xf8
 800108e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001092:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001096:	fa91 f1a1 	rbit	r1, r1
 800109a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800109e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010a2:	fab1 f181 	clz	r1, r1
 80010a6:	b2c9      	uxtb	r1, r1
 80010a8:	408b      	lsls	r3, r1
 80010aa:	4969      	ldr	r1, [pc, #420]	; (8001250 <HAL_RCC_OscConfig+0x5e8>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b0:	e0fd      	b.n	80012ae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 8088 	beq.w	80011d4 <HAL_RCC_OscConfig+0x56c>
 80010c4:	2301      	movs	r3, #1
 80010c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010ce:	fa93 f3a3 	rbit	r3, r3
 80010d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010da:	fab3 f383 	clz	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	461a      	mov	r2, r3
 80010ec:	2301      	movs	r3, #1
 80010ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fb28 	bl	8000744 <HAL_GetTick>
 80010f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010fa:	f7ff fb23 	bl	8000744 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d902      	bls.n	8001110 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	f000 bde2 	b.w	8001cd4 <HAL_RCC_OscConfig+0x106c>
 8001110:	2302      	movs	r3, #2
 8001112:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001116:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800111a:	fa93 f3a3 	rbit	r3, r3
 800111e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001122:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	fab3 f383 	clz	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	095b      	lsrs	r3, r3, #5
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d102      	bne.n	8001140 <HAL_RCC_OscConfig+0x4d8>
 800113a:	4b45      	ldr	r3, [pc, #276]	; (8001250 <HAL_RCC_OscConfig+0x5e8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	e013      	b.n	8001168 <HAL_RCC_OscConfig+0x500>
 8001140:	2302      	movs	r3, #2
 8001142:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001158:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001164:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <HAL_RCC_OscConfig+0x5e8>)
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	2202      	movs	r2, #2
 800116a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800116e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001172:	fa92 f2a2 	rbit	r2, r2
 8001176:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800117a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800117e:	fab2 f282 	clz	r2, r2
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	f042 0220 	orr.w	r2, r2, #32
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	f002 021f 	and.w	r2, r2, #31
 800118e:	2101      	movs	r1, #1
 8001190:	fa01 f202 	lsl.w	r2, r1, r2
 8001194:	4013      	ands	r3, r2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0af      	beq.n	80010fa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <HAL_RCC_OscConfig+0x5e8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	21f8      	movs	r1, #248	; 0xf8
 80011b0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011b8:	fa91 f1a1 	rbit	r1, r1
 80011bc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011c0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011c4:	fab1 f181 	clz	r1, r1
 80011c8:	b2c9      	uxtb	r1, r1
 80011ca:	408b      	lsls	r3, r1
 80011cc:	4920      	ldr	r1, [pc, #128]	; (8001250 <HAL_RCC_OscConfig+0x5e8>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
 80011d2:	e06c      	b.n	80012ae <HAL_RCC_OscConfig+0x646>
 80011d4:	2301      	movs	r3, #1
 80011d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	461a      	mov	r2, r3
 80011fc:	2300      	movs	r3, #0
 80011fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001200:	f7ff faa0 	bl	8000744 <HAL_GetTick>
 8001204:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001208:	e00a      	b.n	8001220 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800120a:	f7ff fa9b 	bl	8000744 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d902      	bls.n	8001220 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	f000 bd5a 	b.w	8001cd4 <HAL_RCC_OscConfig+0x106c>
 8001220:	2302      	movs	r3, #2
 8001222:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	095b      	lsrs	r3, r3, #5
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d104      	bne.n	8001254 <HAL_RCC_OscConfig+0x5ec>
 800124a:	4b01      	ldr	r3, [pc, #4]	; (8001250 <HAL_RCC_OscConfig+0x5e8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	e015      	b.n	800127c <HAL_RCC_OscConfig+0x614>
 8001250:	40021000 	.word	0x40021000
 8001254:	2302      	movs	r3, #2
 8001256:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800125e:	fa93 f3a3 	rbit	r3, r3
 8001262:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800126c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001270:	fa93 f3a3 	rbit	r3, r3
 8001274:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001278:	4bc8      	ldr	r3, [pc, #800]	; (800159c <HAL_RCC_OscConfig+0x934>)
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	2202      	movs	r2, #2
 800127e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001282:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001286:	fa92 f2a2 	rbit	r2, r2
 800128a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800128e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001292:	fab2 f282 	clz	r2, r2
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	f042 0220 	orr.w	r2, r2, #32
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	f002 021f 	and.w	r2, r2, #31
 80012a2:	2101      	movs	r1, #1
 80012a4:	fa01 f202 	lsl.w	r2, r1, r2
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1ad      	bne.n	800120a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 8110 	beq.w	80014e4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d079      	beq.n	80013c8 <HAL_RCC_OscConfig+0x760>
 80012d4:	2301      	movs	r3, #1
 80012d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012de:	fa93 f3a3 	rbit	r3, r3
 80012e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ea:	fab3 f383 	clz	r3, r3
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	461a      	mov	r2, r3
 80012f2:	4bab      	ldr	r3, [pc, #684]	; (80015a0 <HAL_RCC_OscConfig+0x938>)
 80012f4:	4413      	add	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	461a      	mov	r2, r3
 80012fa:	2301      	movs	r3, #1
 80012fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fa21 	bl	8000744 <HAL_GetTick>
 8001302:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	e00a      	b.n	800131e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001308:	f7ff fa1c 	bl	8000744 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d902      	bls.n	800131e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	f000 bcdb 	b.w	8001cd4 <HAL_RCC_OscConfig+0x106c>
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001324:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001328:	fa93 f3a3 	rbit	r3, r3
 800132c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001334:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001338:	2202      	movs	r2, #2
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001340:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	fa93 f2a3 	rbit	r2, r3
 800134a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800135c:	2202      	movs	r2, #2
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	fa93 f2a3 	rbit	r2, r3
 800136e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001372:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001376:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001378:	4b88      	ldr	r3, [pc, #544]	; (800159c <HAL_RCC_OscConfig+0x934>)
 800137a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800137c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001380:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001384:	2102      	movs	r1, #2
 8001386:	6019      	str	r1, [r3, #0]
 8001388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800138c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	fa93 f1a3 	rbit	r1, r3
 8001396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800139e:	6019      	str	r1, [r3, #0]
  return result;
 80013a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	fab3 f383 	clz	r3, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	f003 031f 	and.w	r3, r3, #31
 80013ba:	2101      	movs	r1, #1
 80013bc:	fa01 f303 	lsl.w	r3, r1, r3
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0a0      	beq.n	8001308 <HAL_RCC_OscConfig+0x6a0>
 80013c6:	e08d      	b.n	80014e4 <HAL_RCC_OscConfig+0x87c>
 80013c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	fa93 f2a3 	rbit	r2, r3
 80013e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013ea:	601a      	str	r2, [r3, #0]
  return result;
 80013ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f6:	fab3 f383 	clz	r3, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b68      	ldr	r3, [pc, #416]	; (80015a0 <HAL_RCC_OscConfig+0x938>)
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	461a      	mov	r2, r3
 8001406:	2300      	movs	r3, #0
 8001408:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140a:	f7ff f99b 	bl	8000744 <HAL_GetTick>
 800140e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001412:	e00a      	b.n	800142a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff f996 	bl	8000744 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d902      	bls.n	800142a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	f000 bc55 	b.w	8001cd4 <HAL_RCC_OscConfig+0x106c>
 800142a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001432:	2202      	movs	r2, #2
 8001434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	fa93 f2a3 	rbit	r2, r3
 8001444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001448:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001452:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001456:	2202      	movs	r2, #2
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	fa93 f2a3 	rbit	r2, r3
 8001468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800147a:	2202      	movs	r2, #2
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	fa93 f2a3 	rbit	r2, r3
 800148c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001490:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001494:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001496:	4b41      	ldr	r3, [pc, #260]	; (800159c <HAL_RCC_OscConfig+0x934>)
 8001498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800149a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014a2:	2102      	movs	r1, #2
 80014a4:	6019      	str	r1, [r3, #0]
 80014a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	fa93 f1a3 	rbit	r1, r3
 80014b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014bc:	6019      	str	r1, [r3, #0]
  return result;
 80014be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	fab3 f383 	clz	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	2101      	movs	r1, #1
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d197      	bne.n	8001414 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 81a1 	beq.w	800183c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <HAL_RCC_OscConfig+0x934>)
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d116      	bne.n	800153a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150c:	4b23      	ldr	r3, [pc, #140]	; (800159c <HAL_RCC_OscConfig+0x934>)
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	4a22      	ldr	r2, [pc, #136]	; (800159c <HAL_RCC_OscConfig+0x934>)
 8001512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001516:	61d3      	str	r3, [r2, #28]
 8001518:	4b20      	ldr	r3, [pc, #128]	; (800159c <HAL_RCC_OscConfig+0x934>)
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001524:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001532:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001534:	2301      	movs	r3, #1
 8001536:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HAL_RCC_OscConfig+0x93c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d11a      	bne.n	800157c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <HAL_RCC_OscConfig+0x93c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a16      	ldr	r2, [pc, #88]	; (80015a4 <HAL_RCC_OscConfig+0x93c>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001550:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001552:	f7ff f8f7 	bl	8000744 <HAL_GetTick>
 8001556:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155a:	e009      	b.n	8001570 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155c:	f7ff f8f2 	bl	8000744 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b64      	cmp	r3, #100	; 0x64
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e3b1      	b.n	8001cd4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_RCC_OscConfig+0x93c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0ef      	beq.n	800155c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001580:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d10d      	bne.n	80015a8 <HAL_RCC_OscConfig+0x940>
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <HAL_RCC_OscConfig+0x934>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4a02      	ldr	r2, [pc, #8]	; (800159c <HAL_RCC_OscConfig+0x934>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6213      	str	r3, [r2, #32]
 8001598:	e03c      	b.n	8001614 <HAL_RCC_OscConfig+0x9ac>
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	10908120 	.word	0x10908120
 80015a4:	40007000 	.word	0x40007000
 80015a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10c      	bne.n	80015d2 <HAL_RCC_OscConfig+0x96a>
 80015b8:	4bc1      	ldr	r3, [pc, #772]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	4ac0      	ldr	r2, [pc, #768]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	6213      	str	r3, [r2, #32]
 80015c4:	4bbe      	ldr	r3, [pc, #760]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	4abd      	ldr	r2, [pc, #756]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 80015ca:	f023 0304 	bic.w	r3, r3, #4
 80015ce:	6213      	str	r3, [r2, #32]
 80015d0:	e020      	b.n	8001614 <HAL_RCC_OscConfig+0x9ac>
 80015d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b05      	cmp	r3, #5
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x994>
 80015e2:	4bb7      	ldr	r3, [pc, #732]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4ab6      	ldr	r2, [pc, #728]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6213      	str	r3, [r2, #32]
 80015ee:	4bb4      	ldr	r3, [pc, #720]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4ab3      	ldr	r2, [pc, #716]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6213      	str	r3, [r2, #32]
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0x9ac>
 80015fc:	4bb0      	ldr	r3, [pc, #704]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4aaf      	ldr	r2, [pc, #700]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	6213      	str	r3, [r2, #32]
 8001608:	4bad      	ldr	r3, [pc, #692]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	4aac      	ldr	r2, [pc, #688]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 800160e:	f023 0304 	bic.w	r3, r3, #4
 8001612:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001618:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 8081 	beq.w	8001728 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001626:	f7ff f88d 	bl	8000744 <HAL_GetTick>
 800162a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162e:	e00b      	b.n	8001648 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001630:	f7ff f888 	bl	8000744 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001640:	4293      	cmp	r3, r2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e345      	b.n	8001cd4 <HAL_RCC_OscConfig+0x106c>
 8001648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001650:	2202      	movs	r2, #2
 8001652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001658:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	fa93 f2a3 	rbit	r2, r3
 8001662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001666:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001670:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001674:	2202      	movs	r2, #2
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	fa93 f2a3 	rbit	r2, r3
 8001686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800168e:	601a      	str	r2, [r3, #0]
  return result;
 8001690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001694:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001698:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169a:	fab3 f383 	clz	r3, r3
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	095b      	lsrs	r3, r3, #5
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d102      	bne.n	80016b4 <HAL_RCC_OscConfig+0xa4c>
 80016ae:	4b84      	ldr	r3, [pc, #528]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	e013      	b.n	80016dc <HAL_RCC_OscConfig+0xa74>
 80016b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016bc:	2202      	movs	r2, #2
 80016be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	fa93 f2a3 	rbit	r2, r3
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	4b79      	ldr	r3, [pc, #484]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016e4:	2102      	movs	r1, #2
 80016e6:	6011      	str	r1, [r2, #0]
 80016e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	fa92 f1a2 	rbit	r1, r2
 80016f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80016fe:	6011      	str	r1, [r2, #0]
  return result;
 8001700:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001704:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	fab2 f282 	clz	r2, r2
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	f002 021f 	and.w	r2, r2, #31
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f202 	lsl.w	r2, r1, r2
 8001720:	4013      	ands	r3, r2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d084      	beq.n	8001630 <HAL_RCC_OscConfig+0x9c8>
 8001726:	e07f      	b.n	8001828 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001728:	f7ff f80c 	bl	8000744 <HAL_GetTick>
 800172c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	e00b      	b.n	800174a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7ff f807 	bl	8000744 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e2c4      	b.n	8001cd4 <HAL_RCC_OscConfig+0x106c>
 800174a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001752:	2202      	movs	r2, #2
 8001754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	fa93 f2a3 	rbit	r2, r3
 8001764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001768:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001776:	2202      	movs	r2, #2
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	fa93 f2a3 	rbit	r2, r3
 8001788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001790:	601a      	str	r2, [r3, #0]
  return result;
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800179a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d102      	bne.n	80017b6 <HAL_RCC_OscConfig+0xb4e>
 80017b0:	4b43      	ldr	r3, [pc, #268]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	e013      	b.n	80017de <HAL_RCC_OscConfig+0xb76>
 80017b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017be:	2202      	movs	r2, #2
 80017c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	fa93 f2a3 	rbit	r2, r3
 80017d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	4b39      	ldr	r3, [pc, #228]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017e6:	2102      	movs	r1, #2
 80017e8:	6011      	str	r1, [r2, #0]
 80017ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	fa92 f1a2 	rbit	r1, r2
 80017f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001800:	6011      	str	r1, [r2, #0]
  return result;
 8001802:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001806:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	fab2 f282 	clz	r2, r2
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	f002 021f 	and.w	r2, r2, #31
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d184      	bne.n	8001732 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001828:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	4a22      	ldr	r2, [pc, #136]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 8001836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800183a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800183c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001840:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8242 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <HAL_RCC_OscConfig+0xc58>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b08      	cmp	r3, #8
 8001858:	f000 8213 	beq.w	8001c82 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001860:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b02      	cmp	r3, #2
 800186a:	f040 8162 	bne.w	8001b32 <HAL_RCC_OscConfig+0xeca>
 800186e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001872:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001876:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800187a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001880:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	fa93 f2a3 	rbit	r2, r3
 800188a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001892:	601a      	str	r2, [r3, #0]
  return result;
 8001894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001898:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800189c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	461a      	mov	r2, r3
 80018b0:	2300      	movs	r3, #0
 80018b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7fe ff46 	bl	8000744 <HAL_GetTick>
 80018b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018bc:	e00c      	b.n	80018d8 <HAL_RCC_OscConfig+0xc70>
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c4:	f7fe ff3e 	bl	8000744 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e1fd      	b.n	8001cd4 <HAL_RCC_OscConfig+0x106c>
 80018d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	fa93 f2a3 	rbit	r2, r3
 80018f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018fc:	601a      	str	r2, [r3, #0]
  return result;
 80018fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001902:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001906:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d102      	bne.n	8001922 <HAL_RCC_OscConfig+0xcba>
 800191c:	4bb0      	ldr	r3, [pc, #704]	; (8001be0 <HAL_RCC_OscConfig+0xf78>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	e027      	b.n	8001972 <HAL_RCC_OscConfig+0xd0a>
 8001922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001926:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800192a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800192e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001934:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	fa93 f2a3 	rbit	r2, r3
 800193e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001942:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001950:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	fa93 f2a3 	rbit	r2, r3
 8001964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001968:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	4b9c      	ldr	r3, [pc, #624]	; (8001be0 <HAL_RCC_OscConfig+0xf78>)
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001976:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800197a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800197e:	6011      	str	r1, [r2, #0]
 8001980:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001984:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	fa92 f1a2 	rbit	r1, r2
 800198e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001992:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001996:	6011      	str	r1, [r2, #0]
  return result;
 8001998:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800199c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	fab2 f282 	clz	r2, r2
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f042 0220 	orr.w	r2, r2, #32
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	f002 021f 	and.w	r2, r2, #31
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d182      	bne.n	80018c4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019be:	4b88      	ldr	r3, [pc, #544]	; (8001be0 <HAL_RCC_OscConfig+0xf78>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	430b      	orrs	r3, r1
 80019e0:	497f      	ldr	r1, [pc, #508]	; (8001be0 <HAL_RCC_OscConfig+0xf78>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	fa93 f2a3 	rbit	r2, r3
 8001a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a06:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a0a:	601a      	str	r2, [r3, #0]
  return result;
 8001a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a10:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a14:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	461a      	mov	r2, r3
 8001a28:	2301      	movs	r3, #1
 8001a2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7fe fe8a 	bl	8000744 <HAL_GetTick>
 8001a30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a34:	e009      	b.n	8001a4a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a36:	f7fe fe85 	bl	8000744 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e144      	b.n	8001cd4 <HAL_RCC_OscConfig+0x106c>
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	fa93 f2a3 	rbit	r2, r3
 8001a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a6e:	601a      	str	r2, [r3, #0]
  return result;
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	095b      	lsrs	r3, r3, #5
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d102      	bne.n	8001a94 <HAL_RCC_OscConfig+0xe2c>
 8001a8e:	4b54      	ldr	r3, [pc, #336]	; (8001be0 <HAL_RCC_OscConfig+0xf78>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	e027      	b.n	8001ae4 <HAL_RCC_OscConfig+0xe7c>
 8001a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a98:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001a9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ac2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001acc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	fa93 f2a3 	rbit	r2, r3
 8001ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ada:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	4b3f      	ldr	r3, [pc, #252]	; (8001be0 <HAL_RCC_OscConfig+0xf78>)
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ae8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001aec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001af0:	6011      	str	r1, [r2, #0]
 8001af2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001af6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	fa92 f1a2 	rbit	r1, r2
 8001b00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b04:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b08:	6011      	str	r1, [r2, #0]
  return result;
 8001b0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b0e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	fab2 f282 	clz	r2, r2
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	f042 0220 	orr.w	r2, r2, #32
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	f002 021f 	and.w	r2, r2, #31
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d082      	beq.n	8001a36 <HAL_RCC_OscConfig+0xdce>
 8001b30:	e0cf      	b.n	8001cd2 <HAL_RCC_OscConfig+0x106a>
 8001b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b36:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b44:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	fa93 f2a3 	rbit	r2, r3
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b56:	601a      	str	r2, [r3, #0]
  return result;
 8001b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b60:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	461a      	mov	r2, r3
 8001b74:	2300      	movs	r3, #0
 8001b76:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7fe fde4 	bl	8000744 <HAL_GetTick>
 8001b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	e009      	b.n	8001b96 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b82:	f7fe fddf 	bl	8000744 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e09e      	b.n	8001cd4 <HAL_RCC_OscConfig+0x106c>
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bba:	601a      	str	r2, [r3, #0]
  return result;
 8001bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	095b      	lsrs	r3, r3, #5
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d104      	bne.n	8001be4 <HAL_RCC_OscConfig+0xf7c>
 8001bda:	4b01      	ldr	r3, [pc, #4]	; (8001be0 <HAL_RCC_OscConfig+0xf78>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	e029      	b.n	8001c34 <HAL_RCC_OscConfig+0xfcc>
 8001be0:	40021000 	.word	0x40021000
 8001be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001bec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	fa93 f2a3 	rbit	r2, r3
 8001c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c04:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	fa93 f2a3 	rbit	r2, r3
 8001c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <HAL_RCC_OscConfig+0x1078>)
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c38:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c40:	6011      	str	r1, [r2, #0]
 8001c42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c46:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	fa92 f1a2 	rbit	r1, r2
 8001c50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c54:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c58:	6011      	str	r1, [r2, #0]
  return result;
 8001c5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c5e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	fab2 f282 	clz	r2, r2
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	f042 0220 	orr.w	r2, r2, #32
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	f002 021f 	and.w	r2, r2, #31
 8001c74:	2101      	movs	r1, #1
 8001c76:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d180      	bne.n	8001b82 <HAL_RCC_OscConfig+0xf1a>
 8001c80:	e027      	b.n	8001cd2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e01e      	b.n	8001cd4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_RCC_OscConfig+0x1078>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ca2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d10b      	bne.n	8001cce <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001cb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b09e      	sub	sp, #120	; 0x78
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e162      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b90      	ldr	r3, [pc, #576]	; (8001f40 <HAL_RCC_ClockConfig+0x25c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d910      	bls.n	8001d2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b8d      	ldr	r3, [pc, #564]	; (8001f40 <HAL_RCC_ClockConfig+0x25c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 0207 	bic.w	r2, r3, #7
 8001d12:	498b      	ldr	r1, [pc, #556]	; (8001f40 <HAL_RCC_ClockConfig+0x25c>)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	4b89      	ldr	r3, [pc, #548]	; (8001f40 <HAL_RCC_ClockConfig+0x25c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e14a      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d38:	4b82      	ldr	r3, [pc, #520]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	497f      	ldr	r1, [pc, #508]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80dc 	beq.w	8001f10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d13c      	bne.n	8001dda <HAL_RCC_ClockConfig+0xf6>
 8001d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d70:	fab3 f383 	clz	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d102      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xa6>
 8001d84:	4b6f      	ldr	r3, [pc, #444]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	e00f      	b.n	8001daa <HAL_RCC_ClockConfig+0xc6>
 8001d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	667b      	str	r3, [r7, #100]	; 0x64
 8001d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8001d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001da6:	4b67      	ldr	r3, [pc, #412]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dae:	65ba      	str	r2, [r7, #88]	; 0x58
 8001db0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001db2:	fa92 f2a2 	rbit	r2, r2
 8001db6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001db8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dba:	fab2 f282 	clz	r2, r2
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	f042 0220 	orr.w	r2, r2, #32
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	f002 021f 	and.w	r2, r2, #31
 8001dca:	2101      	movs	r1, #1
 8001dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d17b      	bne.n	8001ece <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0f3      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d13c      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x178>
 8001de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001de6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	095b      	lsrs	r3, r3, #5
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d102      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x128>
 8001e06:	4b4f      	ldr	r3, [pc, #316]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	e00f      	b.n	8001e2c <HAL_RCC_ClockConfig+0x148>
 8001e0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	647b      	str	r3, [r7, #68]	; 0x44
 8001e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e1e:	643b      	str	r3, [r7, #64]	; 0x40
 8001e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e28:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e30:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e34:	fa92 f2a2 	rbit	r2, r2
 8001e38:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e3c:	fab2 f282 	clz	r2, r2
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	f042 0220 	orr.w	r2, r2, #32
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f002 021f 	and.w	r2, r2, #31
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d13a      	bne.n	8001ece <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0b2      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x2de>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	095b      	lsrs	r3, r3, #5
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d102      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x1a0>
 8001e7e:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	e00d      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1bc>
 8001e84:	2302      	movs	r3, #2
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e90:	2302      	movs	r3, #2
 8001e92:	623b      	str	r3, [r7, #32]
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	61fb      	str	r3, [r7, #28]
 8001e9c:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	61ba      	str	r2, [r7, #24]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	fa92 f2a2 	rbit	r2, r2
 8001eaa:	617a      	str	r2, [r7, #20]
  return result;
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	fab2 f282 	clz	r2, r2
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f042 0220 	orr.w	r2, r2, #32
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	f002 021f 	and.w	r2, r2, #31
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e079      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ece:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f023 0203 	bic.w	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	491a      	ldr	r1, [pc, #104]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee0:	f7fe fc30 	bl	8000744 <HAL_GetTick>
 8001ee4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee8:	f7fe fc2c 	bl	8000744 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e061      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 020c 	and.w	r2, r3, #12
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1eb      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_ClockConfig+0x25c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d214      	bcs.n	8001f48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_RCC_ClockConfig+0x25c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 0207 	bic.w	r2, r3, #7
 8001f26:	4906      	ldr	r1, [pc, #24]	; (8001f40 <HAL_RCC_ClockConfig+0x25c>)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <HAL_RCC_ClockConfig+0x25c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e040      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x2de>
 8001f40:	40022000 	.word	0x40022000
 8001f44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_RCC_ClockConfig+0x2e8>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	491a      	ldr	r1, [pc, #104]	; (8001fcc <HAL_RCC_ClockConfig+0x2e8>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d009      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f72:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_RCC_ClockConfig+0x2e8>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4912      	ldr	r1, [pc, #72]	; (8001fcc <HAL_RCC_ClockConfig+0x2e8>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f86:	f000 f829 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001f8a:	4601      	mov	r1, r0
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_RCC_ClockConfig+0x2e8>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f94:	22f0      	movs	r2, #240	; 0xf0
 8001f96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	fa92 f2a2 	rbit	r2, r2
 8001f9e:	60fa      	str	r2, [r7, #12]
  return result;
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	fab2 f282 	clz	r2, r2
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	40d3      	lsrs	r3, r2
 8001faa:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <HAL_RCC_ClockConfig+0x2ec>)
 8001fac:	5cd3      	ldrb	r3, [r2, r3]
 8001fae:	fa21 f303 	lsr.w	r3, r1, r3
 8001fb2:	4a08      	ldr	r2, [pc, #32]	; (8001fd4 <HAL_RCC_ClockConfig+0x2f0>)
 8001fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_RCC_ClockConfig+0x2f4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fac2 	bl	8000544 <HAL_InitTick>
  
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3778      	adds	r7, #120	; 0x78
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08005af8 	.word	0x08005af8
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000004 	.word	0x20000004

08001fdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b08b      	sub	sp, #44	; 0x2c
 8001fe0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001ff6:	4b29      	ldr	r3, [pc, #164]	; (800209c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b04      	cmp	r3, #4
 8002004:	d002      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x30>
 8002006:	2b08      	cmp	r3, #8
 8002008:	d003      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0x36>
 800200a:	e03c      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800200c:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800200e:	623b      	str	r3, [r7, #32]
      break;
 8002010:	e03c      	b.n	800208c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002018:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800201c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	fa92 f2a2 	rbit	r2, r2
 8002024:	607a      	str	r2, [r7, #4]
  return result;
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	fab2 f282 	clz	r2, r2
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	40d3      	lsrs	r3, r2
 8002030:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	220f      	movs	r2, #15
 8002040:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	fa92 f2a2 	rbit	r2, r2
 8002048:	60fa      	str	r2, [r7, #12]
  return result;
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	fab2 f282 	clz	r2, r2
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	40d3      	lsrs	r3, r2
 8002054:	4a14      	ldr	r2, [pc, #80]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002056:	5cd3      	ldrb	r3, [r2, r3]
 8002058:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d008      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002064:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	fbb2 f2f3 	udiv	r2, r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
 8002074:	e004      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	623b      	str	r3, [r7, #32]
      break;
 8002084:	e002      	b.n	800208c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002088:	623b      	str	r3, [r7, #32]
      break;
 800208a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208c:	6a3b      	ldr	r3, [r7, #32]
}
 800208e:	4618      	mov	r0, r3
 8002090:	372c      	adds	r7, #44	; 0x2c
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	007a1200 	.word	0x007a1200
 80020a4:	08005b10 	.word	0x08005b10
 80020a8:	08005b20 	.word	0x08005b20
 80020ac:	003d0900 	.word	0x003d0900

080020b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000000 	.word	0x20000000

080020c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020ce:	f7ff ffef 	bl	80020b0 <HAL_RCC_GetHCLKFreq>
 80020d2:	4601      	mov	r1, r0
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	fa92 f2a2 	rbit	r2, r2
 80020e8:	603a      	str	r2, [r7, #0]
  return result;
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	fab2 f282 	clz	r2, r2
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	40d3      	lsrs	r3, r2
 80020f4:	4a04      	ldr	r2, [pc, #16]	; (8002108 <HAL_RCC_GetPCLK1Freq+0x40>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	08005b08 	.word	0x08005b08

0800210c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002112:	f7ff ffcd 	bl	80020b0 <HAL_RCC_GetHCLKFreq>
 8002116:	4601      	mov	r1, r0
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002120:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002124:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	fa92 f2a2 	rbit	r2, r2
 800212c:	603a      	str	r2, [r7, #0]
  return result;
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	fab2 f282 	clz	r2, r2
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	40d3      	lsrs	r3, r2
 8002138:	4a04      	ldr	r2, [pc, #16]	; (800214c <HAL_RCC_GetPCLK2Freq+0x40>)
 800213a:	5cd3      	ldrb	r3, [r2, r3]
 800213c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021000 	.word	0x40021000
 800214c:	08005b08 	.word	0x08005b08

08002150 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	220f      	movs	r2, #15
 800215e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0203 	and.w	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	08db      	lsrs	r3, r3, #3
 800218a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_RCC_GetClockConfig+0x60>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0207 	and.w	r2, r3, #7
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	601a      	str	r2, [r3, #0]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40022000 	.word	0x40022000

080021b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e049      	b.n	800225a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f841 	bl	8002262 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3304      	adds	r3, #4
 80021f0:	4619      	mov	r1, r3
 80021f2:	4610      	mov	r0, r2
 80021f4:	f000 f9e4 	bl	80025c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d001      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e040      	b.n	8002312 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <HAL_TIM_Base_Start_IT+0xa8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00e      	beq.n	80022d0 <HAL_TIM_Base_Start_IT+0x58>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ba:	d009      	beq.n	80022d0 <HAL_TIM_Base_Start_IT+0x58>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a18      	ldr	r2, [pc, #96]	; (8002324 <HAL_TIM_Base_Start_IT+0xac>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d004      	beq.n	80022d0 <HAL_TIM_Base_Start_IT+0x58>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a17      	ldr	r2, [pc, #92]	; (8002328 <HAL_TIM_Base_Start_IT+0xb0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d115      	bne.n	80022fc <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_TIM_Base_Start_IT+0xb4>)
 80022d8:	4013      	ands	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b06      	cmp	r3, #6
 80022e0:	d015      	beq.n	800230e <HAL_TIM_Base_Start_IT+0x96>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e8:	d011      	beq.n	800230e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fa:	e008      	b.n	800230e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e000      	b.n	8002310 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40012c00 	.word	0x40012c00
 8002324:	40000400 	.word	0x40000400
 8002328:	40014000 	.word	0x40014000
 800232c:	00010007 	.word	0x00010007

08002330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b02      	cmp	r3, #2
 8002344:	d122      	bne.n	800238c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b02      	cmp	r3, #2
 8002352:	d11b      	bne.n	800238c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0202 	mvn.w	r2, #2
 800235c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f905 	bl	8002582 <HAL_TIM_IC_CaptureCallback>
 8002378:	e005      	b.n	8002386 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f8f7 	bl	800256e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f908 	bl	8002596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b04      	cmp	r3, #4
 8002398:	d122      	bne.n	80023e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d11b      	bne.n	80023e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0204 	mvn.w	r2, #4
 80023b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f8db 	bl	8002582 <HAL_TIM_IC_CaptureCallback>
 80023cc:	e005      	b.n	80023da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f8cd 	bl	800256e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f8de 	bl	8002596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d122      	bne.n	8002434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d11b      	bne.n	8002434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0208 	mvn.w	r2, #8
 8002404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2204      	movs	r2, #4
 800240a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8b1 	bl	8002582 <HAL_TIM_IC_CaptureCallback>
 8002420:	e005      	b.n	800242e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f8a3 	bl	800256e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f8b4 	bl	8002596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b10      	cmp	r3, #16
 8002440:	d122      	bne.n	8002488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b10      	cmp	r3, #16
 800244e:	d11b      	bne.n	8002488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0210 	mvn.w	r2, #16
 8002458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2208      	movs	r2, #8
 800245e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f887 	bl	8002582 <HAL_TIM_IC_CaptureCallback>
 8002474:	e005      	b.n	8002482 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f879 	bl	800256e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f88a 	bl	8002596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10e      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d107      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0201 	mvn.w	r2, #1
 80024ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fd ffc6 	bl	8000440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024be:	2b80      	cmp	r3, #128	; 0x80
 80024c0:	d10e      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024cc:	2b80      	cmp	r3, #128	; 0x80
 80024ce:	d107      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f8f2 	bl	80026c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ee:	d10e      	bne.n	800250e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fa:	2b80      	cmp	r3, #128	; 0x80
 80024fc:	d107      	bne.n	800250e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f8e5 	bl	80026d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002518:	2b40      	cmp	r3, #64	; 0x40
 800251a:	d10e      	bne.n	800253a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002526:	2b40      	cmp	r3, #64	; 0x40
 8002528:	d107      	bne.n	800253a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f838 	bl	80025aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	2b20      	cmp	r3, #32
 8002546:	d10e      	bne.n	8002566 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b20      	cmp	r3, #32
 8002554:	d107      	bne.n	8002566 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f06f 0220 	mvn.w	r2, #32
 800255e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f8a5 	bl	80026b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a32      	ldr	r2, [pc, #200]	; (800269c <TIM_Base_SetConfig+0xdc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d007      	beq.n	80025e8 <TIM_Base_SetConfig+0x28>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025de:	d003      	beq.n	80025e8 <TIM_Base_SetConfig+0x28>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a2f      	ldr	r2, [pc, #188]	; (80026a0 <TIM_Base_SetConfig+0xe0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d108      	bne.n	80025fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a27      	ldr	r2, [pc, #156]	; (800269c <TIM_Base_SetConfig+0xdc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <TIM_Base_SetConfig+0x6a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002608:	d00f      	beq.n	800262a <TIM_Base_SetConfig+0x6a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a24      	ldr	r2, [pc, #144]	; (80026a0 <TIM_Base_SetConfig+0xe0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00b      	beq.n	800262a <TIM_Base_SetConfig+0x6a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <TIM_Base_SetConfig+0xe4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <TIM_Base_SetConfig+0x6a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a22      	ldr	r2, [pc, #136]	; (80026a8 <TIM_Base_SetConfig+0xe8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d003      	beq.n	800262a <TIM_Base_SetConfig+0x6a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a21      	ldr	r2, [pc, #132]	; (80026ac <TIM_Base_SetConfig+0xec>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d108      	bne.n	800263c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a0e      	ldr	r2, [pc, #56]	; (800269c <TIM_Base_SetConfig+0xdc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00b      	beq.n	8002680 <TIM_Base_SetConfig+0xc0>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <TIM_Base_SetConfig+0xe4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d007      	beq.n	8002680 <TIM_Base_SetConfig+0xc0>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a0d      	ldr	r2, [pc, #52]	; (80026a8 <TIM_Base_SetConfig+0xe8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d003      	beq.n	8002680 <TIM_Base_SetConfig+0xc0>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <TIM_Base_SetConfig+0xec>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d103      	bne.n	8002688 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	615a      	str	r2, [r3, #20]
}
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40012c00 	.word	0x40012c00
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40014000 	.word	0x40014000
 80026a8:	40014400 	.word	0x40014400
 80026ac:	40014800 	.word	0x40014800

080026b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e040      	b.n	8002780 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7fd fed6 	bl	80004c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2224      	movs	r2, #36	; 0x24
 8002718:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0201 	bic.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f82c 	bl	8002788 <UART_SetConfig>
 8002730:	4603      	mov	r3, r0
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e022      	b.n	8002780 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f956 	bl	80029f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f9dd 	bl	8002b38 <UART_CheckIdleState>
 800277e:	4603      	mov	r3, r0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4b8a      	ldr	r3, [pc, #552]	; (80029dc <UART_SetConfig+0x254>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	6979      	ldr	r1, [r7, #20]
 80027bc:	430b      	orrs	r3, r1
 80027be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a78      	ldr	r2, [pc, #480]	; (80029e0 <UART_SetConfig+0x258>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d120      	bne.n	8002846 <UART_SetConfig+0xbe>
 8002804:	4b77      	ldr	r3, [pc, #476]	; (80029e4 <UART_SetConfig+0x25c>)
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b03      	cmp	r3, #3
 800280e:	d817      	bhi.n	8002840 <UART_SetConfig+0xb8>
 8002810:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <UART_SetConfig+0x90>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	08002829 	.word	0x08002829
 800281c:	08002835 	.word	0x08002835
 8002820:	0800283b 	.word	0x0800283b
 8002824:	0800282f 	.word	0x0800282f
 8002828:	2300      	movs	r3, #0
 800282a:	77fb      	strb	r3, [r7, #31]
 800282c:	e01d      	b.n	800286a <UART_SetConfig+0xe2>
 800282e:	2302      	movs	r3, #2
 8002830:	77fb      	strb	r3, [r7, #31]
 8002832:	e01a      	b.n	800286a <UART_SetConfig+0xe2>
 8002834:	2304      	movs	r3, #4
 8002836:	77fb      	strb	r3, [r7, #31]
 8002838:	e017      	b.n	800286a <UART_SetConfig+0xe2>
 800283a:	2308      	movs	r3, #8
 800283c:	77fb      	strb	r3, [r7, #31]
 800283e:	e014      	b.n	800286a <UART_SetConfig+0xe2>
 8002840:	2310      	movs	r3, #16
 8002842:	77fb      	strb	r3, [r7, #31]
 8002844:	e011      	b.n	800286a <UART_SetConfig+0xe2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a67      	ldr	r2, [pc, #412]	; (80029e8 <UART_SetConfig+0x260>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d102      	bne.n	8002856 <UART_SetConfig+0xce>
 8002850:	2300      	movs	r3, #0
 8002852:	77fb      	strb	r3, [r7, #31]
 8002854:	e009      	b.n	800286a <UART_SetConfig+0xe2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a64      	ldr	r2, [pc, #400]	; (80029ec <UART_SetConfig+0x264>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d102      	bne.n	8002866 <UART_SetConfig+0xde>
 8002860:	2300      	movs	r3, #0
 8002862:	77fb      	strb	r3, [r7, #31]
 8002864:	e001      	b.n	800286a <UART_SetConfig+0xe2>
 8002866:	2310      	movs	r3, #16
 8002868:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002872:	d15b      	bne.n	800292c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002874:	7ffb      	ldrb	r3, [r7, #31]
 8002876:	2b08      	cmp	r3, #8
 8002878:	d827      	bhi.n	80028ca <UART_SetConfig+0x142>
 800287a:	a201      	add	r2, pc, #4	; (adr r2, 8002880 <UART_SetConfig+0xf8>)
 800287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002880:	080028a5 	.word	0x080028a5
 8002884:	080028ad 	.word	0x080028ad
 8002888:	080028b5 	.word	0x080028b5
 800288c:	080028cb 	.word	0x080028cb
 8002890:	080028bb 	.word	0x080028bb
 8002894:	080028cb 	.word	0x080028cb
 8002898:	080028cb 	.word	0x080028cb
 800289c:	080028cb 	.word	0x080028cb
 80028a0:	080028c3 	.word	0x080028c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028a4:	f7ff fc10 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 80028a8:	61b8      	str	r0, [r7, #24]
        break;
 80028aa:	e013      	b.n	80028d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028ac:	f7ff fc2e 	bl	800210c <HAL_RCC_GetPCLK2Freq>
 80028b0:	61b8      	str	r0, [r7, #24]
        break;
 80028b2:	e00f      	b.n	80028d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028b4:	4b4e      	ldr	r3, [pc, #312]	; (80029f0 <UART_SetConfig+0x268>)
 80028b6:	61bb      	str	r3, [r7, #24]
        break;
 80028b8:	e00c      	b.n	80028d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028ba:	f7ff fb8f 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 80028be:	61b8      	str	r0, [r7, #24]
        break;
 80028c0:	e008      	b.n	80028d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028c6:	61bb      	str	r3, [r7, #24]
        break;
 80028c8:	e004      	b.n	80028d4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	77bb      	strb	r3, [r7, #30]
        break;
 80028d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d074      	beq.n	80029c4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	005a      	lsls	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	085b      	lsrs	r3, r3, #1
 80028e4:	441a      	add	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	2b0f      	cmp	r3, #15
 80028f6:	d916      	bls.n	8002926 <UART_SetConfig+0x19e>
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fe:	d212      	bcs.n	8002926 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	b29b      	uxth	r3, r3
 8002904:	f023 030f 	bic.w	r3, r3, #15
 8002908:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	085b      	lsrs	r3, r3, #1
 800290e:	b29b      	uxth	r3, r3
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	b29a      	uxth	r2, r3
 8002916:	89fb      	ldrh	r3, [r7, #14]
 8002918:	4313      	orrs	r3, r2
 800291a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	89fa      	ldrh	r2, [r7, #14]
 8002922:	60da      	str	r2, [r3, #12]
 8002924:	e04e      	b.n	80029c4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	77bb      	strb	r3, [r7, #30]
 800292a:	e04b      	b.n	80029c4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800292c:	7ffb      	ldrb	r3, [r7, #31]
 800292e:	2b08      	cmp	r3, #8
 8002930:	d827      	bhi.n	8002982 <UART_SetConfig+0x1fa>
 8002932:	a201      	add	r2, pc, #4	; (adr r2, 8002938 <UART_SetConfig+0x1b0>)
 8002934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002938:	0800295d 	.word	0x0800295d
 800293c:	08002965 	.word	0x08002965
 8002940:	0800296d 	.word	0x0800296d
 8002944:	08002983 	.word	0x08002983
 8002948:	08002973 	.word	0x08002973
 800294c:	08002983 	.word	0x08002983
 8002950:	08002983 	.word	0x08002983
 8002954:	08002983 	.word	0x08002983
 8002958:	0800297b 	.word	0x0800297b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800295c:	f7ff fbb4 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 8002960:	61b8      	str	r0, [r7, #24]
        break;
 8002962:	e013      	b.n	800298c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002964:	f7ff fbd2 	bl	800210c <HAL_RCC_GetPCLK2Freq>
 8002968:	61b8      	str	r0, [r7, #24]
        break;
 800296a:	e00f      	b.n	800298c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800296c:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <UART_SetConfig+0x268>)
 800296e:	61bb      	str	r3, [r7, #24]
        break;
 8002970:	e00c      	b.n	800298c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002972:	f7ff fb33 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8002976:	61b8      	str	r0, [r7, #24]
        break;
 8002978:	e008      	b.n	800298c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800297a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800297e:	61bb      	str	r3, [r7, #24]
        break;
 8002980:	e004      	b.n	800298c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	77bb      	strb	r3, [r7, #30]
        break;
 800298a:	bf00      	nop
    }

    if (pclk != 0U)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d018      	beq.n	80029c4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	085a      	lsrs	r2, r3, #1
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	441a      	add	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b0f      	cmp	r3, #15
 80029ac:	d908      	bls.n	80029c0 <UART_SetConfig+0x238>
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b4:	d204      	bcs.n	80029c0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	e001      	b.n	80029c4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80029d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	efff69f3 	.word	0xefff69f3
 80029e0:	40013800 	.word	0x40013800
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40004400 	.word	0x40004400
 80029ec:	40004800 	.word	0x40004800
 80029f0:	007a1200 	.word	0x007a1200

080029f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01a      	beq.n	8002b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af2:	d10a      	bne.n	8002b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b48:	f7fd fdfc 	bl	8000744 <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d10e      	bne.n	8002b7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f82d 	bl	8002bca <UART_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e023      	b.n	8002bc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d10e      	bne.n	8002ba6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f817 	bl	8002bca <UART_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e00d      	b.n	8002bc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b09c      	sub	sp, #112	; 0x70
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bda:	e0a5      	b.n	8002d28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	f000 80a1 	beq.w	8002d28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be6:	f7fd fdad 	bl	8000744 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d302      	bcc.n	8002bfc <UART_WaitOnFlagUntilTimeout+0x32>
 8002bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d13e      	bne.n	8002c7a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c04:	e853 3f00 	ldrex	r3, [r3]
 8002c08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c10:	667b      	str	r3, [r7, #100]	; 0x64
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c22:	e841 2300 	strex	r3, r2, [r1]
 8002c26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e6      	bne.n	8002bfc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3308      	adds	r3, #8
 8002c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	663b      	str	r3, [r7, #96]	; 0x60
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3308      	adds	r3, #8
 8002c4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002c50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c56:	e841 2300 	strex	r3, r2, [r1]
 8002c5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1e5      	bne.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e067      	b.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d04f      	beq.n	8002d28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c96:	d147      	bne.n	8002d28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ca0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	e853 3f00 	ldrex	r3, [r3]
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cc8:	e841 2300 	strex	r3, r2, [r1]
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e6      	bne.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3308      	adds	r3, #8
 8002cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	e853 3f00 	ldrex	r3, [r3]
 8002ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002cf4:	623a      	str	r2, [r7, #32]
 8002cf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf8:	69f9      	ldr	r1, [r7, #28]
 8002cfa:	6a3a      	ldr	r2, [r7, #32]
 8002cfc:	e841 2300 	strex	r3, r2, [r1]
 8002d00:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e5      	bne.n	8002cd4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e010      	b.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	4013      	ands	r3, r2
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	bf0c      	ite	eq
 8002d38:	2301      	moveq	r3, #1
 8002d3a:	2300      	movne	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	f43f af4a 	beq.w	8002bdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3770      	adds	r7, #112	; 0x70
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d5a:	f3ef 8305 	mrs	r3, IPSR
 8002d5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10f      	bne.n	8002d86 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d66:	f3ef 8310 	mrs	r3, PRIMASK
 8002d6a:	607b      	str	r3, [r7, #4]
  return(result);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <osKernelInitialize+0x32>
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <osKernelInitialize+0x64>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d109      	bne.n	8002d8e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d7a:	f3ef 8311 	mrs	r3, BASEPRI
 8002d7e:	603b      	str	r3, [r7, #0]
  return(result);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002d86:	f06f 0305 	mvn.w	r3, #5
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	e00c      	b.n	8002da8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <osKernelInitialize+0x64>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002d96:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <osKernelInitialize+0x64>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e002      	b.n	8002da8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
 8002da6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002da8:	68fb      	ldr	r3, [r7, #12]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000170 	.word	0x20000170

08002dbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dc2:	f3ef 8305 	mrs	r3, IPSR
 8002dc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10f      	bne.n	8002dee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dce:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd2:	607b      	str	r3, [r7, #4]
  return(result);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <osKernelStart+0x32>
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <osKernelStart+0x64>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d109      	bne.n	8002df6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002de2:	f3ef 8311 	mrs	r3, BASEPRI
 8002de6:	603b      	str	r3, [r7, #0]
  return(result);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002dee:	f06f 0305 	mvn.w	r3, #5
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e00e      	b.n	8002e14 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <osKernelStart+0x64>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d107      	bne.n	8002e0e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <osKernelStart+0x64>)
 8002e00:	2202      	movs	r2, #2
 8002e02:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002e04:	f001 fcc2 	bl	800478c <vTaskStartScheduler>
      stat = osOK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	e002      	b.n	8002e14 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e12:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e14:	68fb      	ldr	r3, [r7, #12]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000170 	.word	0x20000170

08002e24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b092      	sub	sp, #72	; 0x48
 8002e28:	af04      	add	r7, sp, #16
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e34:	f3ef 8305 	mrs	r3, IPSR
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f040 8094 	bne.w	8002f6a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e42:	f3ef 8310 	mrs	r3, PRIMASK
 8002e46:	623b      	str	r3, [r7, #32]
  return(result);
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f040 808d 	bne.w	8002f6a <osThreadNew+0x146>
 8002e50:	4b48      	ldr	r3, [pc, #288]	; (8002f74 <osThreadNew+0x150>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d106      	bne.n	8002e66 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e58:	f3ef 8311 	mrs	r3, BASEPRI
 8002e5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f040 8082 	bne.w	8002f6a <osThreadNew+0x146>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d07e      	beq.n	8002f6a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002e70:	2318      	movs	r3, #24
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002e74:	2300      	movs	r3, #0
 8002e76:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002e78:	f107 031b 	add.w	r3, r7, #27
 8002e7c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d045      	beq.n	8002f16 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <osThreadNew+0x74>
        name = attr->name;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <osThreadNew+0x9a>
 8002eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eae:	2b38      	cmp	r3, #56	; 0x38
 8002eb0:	d805      	bhi.n	8002ebe <osThreadNew+0x9a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <osThreadNew+0x9e>
        return (NULL);
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e054      	b.n	8002f6c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	089b      	lsrs	r3, r3, #2
 8002ed0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00e      	beq.n	8002ef8 <osThreadNew+0xd4>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	2bbb      	cmp	r3, #187	; 0xbb
 8002ee0:	d90a      	bls.n	8002ef8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d006      	beq.n	8002ef8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <osThreadNew+0xd4>
        mem = 1;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ef6:	e010      	b.n	8002f1a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10c      	bne.n	8002f1a <osThreadNew+0xf6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d108      	bne.n	8002f1a <osThreadNew+0xf6>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d104      	bne.n	8002f1a <osThreadNew+0xf6>
          mem = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f14:	e001      	b.n	8002f1a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d110      	bne.n	8002f42 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f28:	9202      	str	r2, [sp, #8]
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f001 fa44 	bl	80043c4 <xTaskCreateStatic>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	e013      	b.n	8002f6a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d110      	bne.n	8002f6a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	f107 0314 	add.w	r3, r7, #20
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f001 fa8e 	bl	800447c <xTaskCreate>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d001      	beq.n	8002f6a <osThreadNew+0x146>
          hTask = NULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f6a:	697b      	ldr	r3, [r7, #20]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3738      	adds	r7, #56	; 0x38
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000170 	.word	0x20000170

08002f78 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f80:	f3ef 8305 	mrs	r3, IPSR
 8002f84:	613b      	str	r3, [r7, #16]
  return(result);
 8002f86:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10f      	bne.n	8002fac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f90:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d109      	bne.n	8002fac <osDelay+0x34>
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <osDelay+0x58>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d109      	bne.n	8002fb4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fa0:	f3ef 8311 	mrs	r3, BASEPRI
 8002fa4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <osDelay+0x3c>
    stat = osErrorISR;
 8002fac:	f06f 0305 	mvn.w	r3, #5
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e007      	b.n	8002fc4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f001 fbb0 	bl	8004724 <vTaskDelay>
    }
  }

  return (stat);
 8002fc4:	697b      	ldr	r3, [r7, #20]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000170 	.word	0x20000170

08002fd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4a07      	ldr	r2, [pc, #28]	; (8003000 <vApplicationGetIdleTaskMemory+0x2c>)
 8002fe4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4a06      	ldr	r2, [pc, #24]	; (8003004 <vApplicationGetIdleTaskMemory+0x30>)
 8002fea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2280      	movs	r2, #128	; 0x80
 8002ff0:	601a      	str	r2, [r3, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000174 	.word	0x20000174
 8003004:	20000230 	.word	0x20000230

08003008 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a07      	ldr	r2, [pc, #28]	; (8003034 <vApplicationGetTimerTaskMemory+0x2c>)
 8003018:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4a06      	ldr	r2, [pc, #24]	; (8003038 <vApplicationGetTimerTaskMemory+0x30>)
 800301e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003026:	601a      	str	r2, [r3, #0]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	20000430 	.word	0x20000430
 8003038:	200004ec 	.word	0x200004ec

0800303c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003048:	f001 fc10 	bl	800486c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800304c:	4b58      	ldr	r3, [pc, #352]	; (80031b0 <pvPortMalloc+0x174>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003054:	f000 f910 	bl	8003278 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003058:	4b56      	ldr	r3, [pc, #344]	; (80031b4 <pvPortMalloc+0x178>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	f040 808e 	bne.w	8003182 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01d      	beq.n	80030a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800306c:	2208      	movs	r2, #8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	2b00      	cmp	r3, #0
 800307c:	d014      	beq.n	80030a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f023 0307 	bic.w	r3, r3, #7
 8003084:	3308      	adds	r3, #8
 8003086:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80030a4:	bf00      	nop
 80030a6:	e7fe      	b.n	80030a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d069      	beq.n	8003182 <pvPortMalloc+0x146>
 80030ae:	4b42      	ldr	r3, [pc, #264]	; (80031b8 <pvPortMalloc+0x17c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d864      	bhi.n	8003182 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80030b8:	4b40      	ldr	r3, [pc, #256]	; (80031bc <pvPortMalloc+0x180>)
 80030ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80030bc:	4b3f      	ldr	r3, [pc, #252]	; (80031bc <pvPortMalloc+0x180>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030c2:	e004      	b.n	80030ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d903      	bls.n	80030e0 <pvPortMalloc+0xa4>
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f1      	bne.n	80030c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80030e0:	4b33      	ldr	r3, [pc, #204]	; (80031b0 <pvPortMalloc+0x174>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d04b      	beq.n	8003182 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2208      	movs	r2, #8
 80030f0:	4413      	add	r3, r2
 80030f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	1ad2      	subs	r2, r2, r3
 8003104:	2308      	movs	r3, #8
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	429a      	cmp	r2, r3
 800310a:	d91f      	bls.n	800314c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800310c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <pvPortMalloc+0xf8>
	__asm volatile
 800311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	613b      	str	r3, [r7, #16]
}
 8003130:	bf00      	nop
 8003132:	e7fe      	b.n	8003132 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	1ad2      	subs	r2, r2, r3
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003146:	69b8      	ldr	r0, [r7, #24]
 8003148:	f000 f8f8 	bl	800333c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800314c:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <pvPortMalloc+0x17c>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	4a18      	ldr	r2, [pc, #96]	; (80031b8 <pvPortMalloc+0x17c>)
 8003158:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800315a:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <pvPortMalloc+0x17c>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <pvPortMalloc+0x184>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d203      	bcs.n	800316e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003166:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <pvPortMalloc+0x17c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <pvPortMalloc+0x184>)
 800316c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <pvPortMalloc+0x178>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	431a      	orrs	r2, r3
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003182:	f001 fb81 	bl	8004888 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <pvPortMalloc+0x16a>
	__asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	60fb      	str	r3, [r7, #12]
}
 80031a2:	bf00      	nop
 80031a4:	e7fe      	b.n	80031a4 <pvPortMalloc+0x168>
	return pvReturn;
 80031a6:	69fb      	ldr	r3, [r7, #28]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3728      	adds	r7, #40	; 0x28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	200014f4 	.word	0x200014f4
 80031b4:	20001500 	.word	0x20001500
 80031b8:	200014f8 	.word	0x200014f8
 80031bc:	200014ec 	.word	0x200014ec
 80031c0:	200014fc 	.word	0x200014fc

080031c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d048      	beq.n	8003268 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80031d6:	2308      	movs	r3, #8
 80031d8:	425b      	negs	r3, r3
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4413      	add	r3, r2
 80031de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	4b21      	ldr	r3, [pc, #132]	; (8003270 <vPortFree+0xac>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <vPortFree+0x44>
	__asm volatile
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	60fb      	str	r3, [r7, #12]
}
 8003204:	bf00      	nop
 8003206:	e7fe      	b.n	8003206 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <vPortFree+0x62>
	__asm volatile
 8003210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003214:	f383 8811 	msr	BASEPRI, r3
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	60bb      	str	r3, [r7, #8]
}
 8003222:	bf00      	nop
 8003224:	e7fe      	b.n	8003224 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	4b11      	ldr	r3, [pc, #68]	; (8003270 <vPortFree+0xac>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d019      	beq.n	8003268 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d115      	bne.n	8003268 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <vPortFree+0xac>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	43db      	mvns	r3, r3
 8003246:	401a      	ands	r2, r3
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800324c:	f001 fb0e 	bl	800486c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	4b07      	ldr	r3, [pc, #28]	; (8003274 <vPortFree+0xb0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4413      	add	r3, r2
 800325a:	4a06      	ldr	r2, [pc, #24]	; (8003274 <vPortFree+0xb0>)
 800325c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800325e:	6938      	ldr	r0, [r7, #16]
 8003260:	f000 f86c 	bl	800333c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003264:	f001 fb10 	bl	8004888 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003268:	bf00      	nop
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20001500 	.word	0x20001500
 8003274:	200014f8 	.word	0x200014f8

08003278 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800327e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003282:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003284:	4b27      	ldr	r3, [pc, #156]	; (8003324 <prvHeapInit+0xac>)
 8003286:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00c      	beq.n	80032ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3307      	adds	r3, #7
 8003296:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0307 	bic.w	r3, r3, #7
 800329e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	4a1f      	ldr	r2, [pc, #124]	; (8003324 <prvHeapInit+0xac>)
 80032a8:	4413      	add	r3, r2
 80032aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80032b0:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <prvHeapInit+0xb0>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80032b6:	4b1c      	ldr	r3, [pc, #112]	; (8003328 <prvHeapInit+0xb0>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	4413      	add	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80032c4:	2208      	movs	r2, #8
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0307 	bic.w	r3, r3, #7
 80032d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4a15      	ldr	r2, [pc, #84]	; (800332c <prvHeapInit+0xb4>)
 80032d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80032da:	4b14      	ldr	r3, [pc, #80]	; (800332c <prvHeapInit+0xb4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2200      	movs	r2, #0
 80032e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80032e2:	4b12      	ldr	r3, [pc, #72]	; (800332c <prvHeapInit+0xb4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	1ad2      	subs	r2, r2, r3
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <prvHeapInit+0xb4>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <prvHeapInit+0xb8>)
 8003306:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4a09      	ldr	r2, [pc, #36]	; (8003334 <prvHeapInit+0xbc>)
 800330e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003310:	4b09      	ldr	r3, [pc, #36]	; (8003338 <prvHeapInit+0xc0>)
 8003312:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003316:	601a      	str	r2, [r3, #0]
}
 8003318:	bf00      	nop
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	200008ec 	.word	0x200008ec
 8003328:	200014ec 	.word	0x200014ec
 800332c:	200014f4 	.word	0x200014f4
 8003330:	200014fc 	.word	0x200014fc
 8003334:	200014f8 	.word	0x200014f8
 8003338:	20001500 	.word	0x20001500

0800333c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003344:	4b28      	ldr	r3, [pc, #160]	; (80033e8 <prvInsertBlockIntoFreeList+0xac>)
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	e002      	b.n	8003350 <prvInsertBlockIntoFreeList+0x14>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	429a      	cmp	r2, r3
 8003358:	d8f7      	bhi.n	800334a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	4413      	add	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	429a      	cmp	r2, r3
 800336a:	d108      	bne.n	800337e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	441a      	add	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	441a      	add	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d118      	bne.n	80033c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4b15      	ldr	r3, [pc, #84]	; (80033ec <prvInsertBlockIntoFreeList+0xb0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d00d      	beq.n	80033ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	441a      	add	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	e008      	b.n	80033cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80033ba:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <prvInsertBlockIntoFreeList+0xb0>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e003      	b.n	80033cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d002      	beq.n	80033da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	200014ec 	.word	0x200014ec
 80033ec:	200014f4 	.word	0x200014f4

080033f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f103 0208 	add.w	r2, r3, #8
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f04f 32ff 	mov.w	r2, #4294967295
 8003408:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f103 0208 	add.w	r2, r3, #8
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f103 0208 	add.w	r2, r3, #8
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800344a:	b480      	push	{r7}
 800344c:	b085      	sub	sp, #20
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	601a      	str	r2, [r3, #0]
}
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003492:	b480      	push	{r7}
 8003494:	b085      	sub	sp, #20
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d103      	bne.n	80034b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	e00c      	b.n	80034cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3308      	adds	r3, #8
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	e002      	b.n	80034c0 <vListInsert+0x2e>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d2f6      	bcs.n	80034ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	601a      	str	r2, [r3, #0]
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6892      	ldr	r2, [r2, #8]
 800351a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6852      	ldr	r2, [r2, #4]
 8003524:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	429a      	cmp	r2, r3
 800352e:	d103      	bne.n	8003538 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	1e5a      	subs	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3b04      	subs	r3, #4
 8003568:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	3b04      	subs	r3, #4
 8003576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f023 0201 	bic.w	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3b04      	subs	r3, #4
 8003586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003588:	4a0c      	ldr	r2, [pc, #48]	; (80035bc <pxPortInitialiseStack+0x64>)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	3b14      	subs	r3, #20
 8003592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3b04      	subs	r3, #4
 800359e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f06f 0202 	mvn.w	r2, #2
 80035a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	3b20      	subs	r3, #32
 80035ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80035ae:	68fb      	ldr	r3, [r7, #12]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	080035c1 	.word	0x080035c1

080035c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80035ca:	4b12      	ldr	r3, [pc, #72]	; (8003614 <prvTaskExitError+0x54>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d00a      	beq.n	80035ea <prvTaskExitError+0x2a>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	60fb      	str	r3, [r7, #12]
}
 80035e6:	bf00      	nop
 80035e8:	e7fe      	b.n	80035e8 <prvTaskExitError+0x28>
	__asm volatile
 80035ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	60bb      	str	r3, [r7, #8]
}
 80035fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80035fe:	bf00      	nop
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0fc      	beq.n	8003600 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003606:	bf00      	nop
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	2000000c 	.word	0x2000000c
	...

08003620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003620:	4b07      	ldr	r3, [pc, #28]	; (8003640 <pxCurrentTCBConst2>)
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	6808      	ldr	r0, [r1, #0]
 8003626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362a:	f380 8809 	msr	PSP, r0
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f380 8811 	msr	BASEPRI, r0
 800363a:	4770      	bx	lr
 800363c:	f3af 8000 	nop.w

08003640 <pxCurrentTCBConst2>:
 8003640:	2000154c 	.word	0x2000154c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop

08003648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003648:	4808      	ldr	r0, [pc, #32]	; (800366c <prvPortStartFirstTask+0x24>)
 800364a:	6800      	ldr	r0, [r0, #0]
 800364c:	6800      	ldr	r0, [r0, #0]
 800364e:	f380 8808 	msr	MSP, r0
 8003652:	f04f 0000 	mov.w	r0, #0
 8003656:	f380 8814 	msr	CONTROL, r0
 800365a:	b662      	cpsie	i
 800365c:	b661      	cpsie	f
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	df00      	svc	0
 8003668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800366a:	bf00      	nop
 800366c:	e000ed08 	.word	0xe000ed08

08003670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003676:	4b46      	ldr	r3, [pc, #280]	; (8003790 <xPortStartScheduler+0x120>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a46      	ldr	r2, [pc, #280]	; (8003794 <xPortStartScheduler+0x124>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d10a      	bne.n	8003696 <xPortStartScheduler+0x26>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	613b      	str	r3, [r7, #16]
}
 8003692:	bf00      	nop
 8003694:	e7fe      	b.n	8003694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003696:	4b3e      	ldr	r3, [pc, #248]	; (8003790 <xPortStartScheduler+0x120>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a3f      	ldr	r2, [pc, #252]	; (8003798 <xPortStartScheduler+0x128>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10a      	bne.n	80036b6 <xPortStartScheduler+0x46>
	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	60fb      	str	r3, [r7, #12]
}
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036b6:	4b39      	ldr	r3, [pc, #228]	; (800379c <xPortStartScheduler+0x12c>)
 80036b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	22ff      	movs	r2, #255	; 0xff
 80036c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <xPortStartScheduler+0x130>)
 80036dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036de:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <xPortStartScheduler+0x134>)
 80036e0:	2207      	movs	r2, #7
 80036e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036e4:	e009      	b.n	80036fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80036e6:	4b2f      	ldr	r3, [pc, #188]	; (80037a4 <xPortStartScheduler+0x134>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	4a2d      	ldr	r2, [pc, #180]	; (80037a4 <xPortStartScheduler+0x134>)
 80036ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003702:	2b80      	cmp	r3, #128	; 0x80
 8003704:	d0ef      	beq.n	80036e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003706:	4b27      	ldr	r3, [pc, #156]	; (80037a4 <xPortStartScheduler+0x134>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f1c3 0307 	rsb	r3, r3, #7
 800370e:	2b04      	cmp	r3, #4
 8003710:	d00a      	beq.n	8003728 <xPortStartScheduler+0xb8>
	__asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	60bb      	str	r3, [r7, #8]
}
 8003724:	bf00      	nop
 8003726:	e7fe      	b.n	8003726 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003728:	4b1e      	ldr	r3, [pc, #120]	; (80037a4 <xPortStartScheduler+0x134>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	4a1d      	ldr	r2, [pc, #116]	; (80037a4 <xPortStartScheduler+0x134>)
 8003730:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003732:	4b1c      	ldr	r3, [pc, #112]	; (80037a4 <xPortStartScheduler+0x134>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800373a:	4a1a      	ldr	r2, [pc, #104]	; (80037a4 <xPortStartScheduler+0x134>)
 800373c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003746:	4b18      	ldr	r3, [pc, #96]	; (80037a8 <xPortStartScheduler+0x138>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a17      	ldr	r2, [pc, #92]	; (80037a8 <xPortStartScheduler+0x138>)
 800374c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <xPortStartScheduler+0x138>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <xPortStartScheduler+0x138>)
 8003758:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800375c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800375e:	f000 f8dd 	bl	800391c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003762:	4b12      	ldr	r3, [pc, #72]	; (80037ac <xPortStartScheduler+0x13c>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003768:	f000 f8fc 	bl	8003964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800376c:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <xPortStartScheduler+0x140>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0f      	ldr	r2, [pc, #60]	; (80037b0 <xPortStartScheduler+0x140>)
 8003772:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003776:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003778:	f7ff ff66 	bl	8003648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800377c:	f001 f9f0 	bl	8004b60 <vTaskSwitchContext>
	prvTaskExitError();
 8003780:	f7ff ff1e 	bl	80035c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	e000ed00 	.word	0xe000ed00
 8003794:	410fc271 	.word	0x410fc271
 8003798:	410fc270 	.word	0x410fc270
 800379c:	e000e400 	.word	0xe000e400
 80037a0:	20001504 	.word	0x20001504
 80037a4:	20001508 	.word	0x20001508
 80037a8:	e000ed20 	.word	0xe000ed20
 80037ac:	2000000c 	.word	0x2000000c
 80037b0:	e000ef34 	.word	0xe000ef34

080037b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
	__asm volatile
 80037ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	607b      	str	r3, [r7, #4]
}
 80037cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80037ce:	4b0f      	ldr	r3, [pc, #60]	; (800380c <vPortEnterCritical+0x58>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3301      	adds	r3, #1
 80037d4:	4a0d      	ldr	r2, [pc, #52]	; (800380c <vPortEnterCritical+0x58>)
 80037d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <vPortEnterCritical+0x58>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d10f      	bne.n	8003800 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <vPortEnterCritical+0x5c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <vPortEnterCritical+0x4c>
	__asm volatile
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	603b      	str	r3, [r7, #0]
}
 80037fc:	bf00      	nop
 80037fe:	e7fe      	b.n	80037fe <vPortEnterCritical+0x4a>
	}
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	2000000c 	.word	0x2000000c
 8003810:	e000ed04 	.word	0xe000ed04

08003814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800381a:	4b12      	ldr	r3, [pc, #72]	; (8003864 <vPortExitCritical+0x50>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <vPortExitCritical+0x24>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	607b      	str	r3, [r7, #4]
}
 8003834:	bf00      	nop
 8003836:	e7fe      	b.n	8003836 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <vPortExitCritical+0x50>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3b01      	subs	r3, #1
 800383e:	4a09      	ldr	r2, [pc, #36]	; (8003864 <vPortExitCritical+0x50>)
 8003840:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003842:	4b08      	ldr	r3, [pc, #32]	; (8003864 <vPortExitCritical+0x50>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d105      	bne.n	8003856 <vPortExitCritical+0x42>
 800384a:	2300      	movs	r3, #0
 800384c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003854:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	2000000c 	.word	0x2000000c
	...

08003870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003870:	f3ef 8009 	mrs	r0, PSP
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <pxCurrentTCBConst>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	f01e 0f10 	tst.w	lr, #16
 8003880:	bf08      	it	eq
 8003882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388a:	6010      	str	r0, [r2, #0]
 800388c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003894:	f380 8811 	msr	BASEPRI, r0
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f001 f95e 	bl	8004b60 <vTaskSwitchContext>
 80038a4:	f04f 0000 	mov.w	r0, #0
 80038a8:	f380 8811 	msr	BASEPRI, r0
 80038ac:	bc09      	pop	{r0, r3}
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	6808      	ldr	r0, [r1, #0]
 80038b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b6:	f01e 0f10 	tst.w	lr, #16
 80038ba:	bf08      	it	eq
 80038bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038c0:	f380 8809 	msr	PSP, r0
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	f3af 8000 	nop.w

080038d0 <pxCurrentTCBConst>:
 80038d0:	2000154c 	.word	0x2000154c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop

080038d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
	__asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	607b      	str	r3, [r7, #4]
}
 80038f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80038f2:	f001 f877 	bl	80049e4 <xTaskIncrementTick>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <SysTick_Handler+0x40>)
 80038fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	2300      	movs	r3, #0
 8003906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	f383 8811 	msr	BASEPRI, r3
}
 800390e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	e000ed04 	.word	0xe000ed04

0800391c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <vPortSetupTimerInterrupt+0x34>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <vPortSetupTimerInterrupt+0x38>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <vPortSetupTimerInterrupt+0x3c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0a      	ldr	r2, [pc, #40]	; (800395c <vPortSetupTimerInterrupt+0x40>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	099b      	lsrs	r3, r3, #6
 8003938:	4a09      	ldr	r2, [pc, #36]	; (8003960 <vPortSetupTimerInterrupt+0x44>)
 800393a:	3b01      	subs	r3, #1
 800393c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <vPortSetupTimerInterrupt+0x34>)
 8003940:	2207      	movs	r2, #7
 8003942:	601a      	str	r2, [r3, #0]
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000e010 	.word	0xe000e010
 8003954:	e000e018 	.word	0xe000e018
 8003958:	20000000 	.word	0x20000000
 800395c:	10624dd3 	.word	0x10624dd3
 8003960:	e000e014 	.word	0xe000e014

08003964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003964:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003974 <vPortEnableVFP+0x10>
 8003968:	6801      	ldr	r1, [r0, #0]
 800396a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800396e:	6001      	str	r1, [r0, #0]
 8003970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003972:	bf00      	nop
 8003974:	e000ed88 	.word	0xe000ed88

08003978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800397e:	f3ef 8305 	mrs	r3, IPSR
 8003982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b0f      	cmp	r3, #15
 8003988:	d914      	bls.n	80039b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800398a:	4a17      	ldr	r2, [pc, #92]	; (80039e8 <vPortValidateInterruptPriority+0x70>)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003994:	4b15      	ldr	r3, [pc, #84]	; (80039ec <vPortValidateInterruptPriority+0x74>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	7afa      	ldrb	r2, [r7, #11]
 800399a:	429a      	cmp	r2, r3
 800399c:	d20a      	bcs.n	80039b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	607b      	str	r3, [r7, #4]
}
 80039b0:	bf00      	nop
 80039b2:	e7fe      	b.n	80039b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <vPortValidateInterruptPriority+0x78>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039bc:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <vPortValidateInterruptPriority+0x7c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d90a      	bls.n	80039da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	603b      	str	r3, [r7, #0]
}
 80039d6:	bf00      	nop
 80039d8:	e7fe      	b.n	80039d8 <vPortValidateInterruptPriority+0x60>
	}
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	e000e3f0 	.word	0xe000e3f0
 80039ec:	20001504 	.word	0x20001504
 80039f0:	e000ed0c 	.word	0xe000ed0c
 80039f4:	20001508 	.word	0x20001508

080039f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <xQueueGenericReset+0x2a>
	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	60bb      	str	r3, [r7, #8]
}
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003a22:	f7ff fec7 	bl	80037b4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2e:	68f9      	ldr	r1, [r7, #12]
 8003a30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a32:	fb01 f303 	mul.w	r3, r1, r3
 8003a36:	441a      	add	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	3b01      	subs	r3, #1
 8003a54:	68f9      	ldr	r1, [r7, #12]
 8003a56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
 8003a5c:	441a      	add	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	22ff      	movs	r2, #255	; 0xff
 8003a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	22ff      	movs	r2, #255	; 0xff
 8003a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d114      	bne.n	8003aa2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01a      	beq.n	8003ab6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3310      	adds	r3, #16
 8003a84:	4618      	mov	r0, r3
 8003a86:	f001 f91f 	bl	8004cc8 <xTaskRemoveFromEventList>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d012      	beq.n	8003ab6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <xQueueGenericReset+0xcc>)
 8003a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	e009      	b.n	8003ab6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3310      	adds	r3, #16
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff fca2 	bl	80033f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3324      	adds	r3, #36	; 0x24
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff fc9d 	bl	80033f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ab6:	f7ff fead 	bl	8003814 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003aba:	2301      	movs	r3, #1
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	e000ed04 	.word	0xe000ed04

08003ac8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08e      	sub	sp, #56	; 0x38
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10a      	bne.n	8003b0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b0a:	bf00      	nop
 8003b0c:	e7fe      	b.n	8003b0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <xQueueGenericCreateStatic+0x52>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <xQueueGenericCreateStatic+0x56>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <xQueueGenericCreateStatic+0x58>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	623b      	str	r3, [r7, #32]
}
 8003b36:	bf00      	nop
 8003b38:	e7fe      	b.n	8003b38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <xQueueGenericCreateStatic+0x7e>
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <xQueueGenericCreateStatic+0x82>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <xQueueGenericCreateStatic+0x84>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	61fb      	str	r3, [r7, #28]
}
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b66:	2350      	movs	r3, #80	; 0x50
 8003b68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b50      	cmp	r3, #80	; 0x50
 8003b6e:	d00a      	beq.n	8003b86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	61bb      	str	r3, [r7, #24]
}
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00d      	beq.n	8003bac <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b98:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f805 	bl	8003bb6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3730      	adds	r7, #48	; 0x30
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d103      	bne.n	8003bd2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e002      	b.n	8003bd8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003be4:	2101      	movs	r1, #1
 8003be6:	69b8      	ldr	r0, [r7, #24]
 8003be8:	f7ff ff06 	bl	80039f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08e      	sub	sp, #56	; 0x38
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <xQueueGenericSend+0x32>
	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c2a:	bf00      	nop
 8003c2c:	e7fe      	b.n	8003c2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d103      	bne.n	8003c3c <xQueueGenericSend+0x40>
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <xQueueGenericSend+0x44>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <xQueueGenericSend+0x46>
 8003c40:	2300      	movs	r3, #0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <xQueueGenericSend+0x60>
	__asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c58:	bf00      	nop
 8003c5a:	e7fe      	b.n	8003c5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d103      	bne.n	8003c6a <xQueueGenericSend+0x6e>
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <xQueueGenericSend+0x72>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <xQueueGenericSend+0x74>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <xQueueGenericSend+0x8e>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	623b      	str	r3, [r7, #32]
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c8a:	f001 f9e5 	bl	8005058 <xTaskGetSchedulerState>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <xQueueGenericSend+0x9e>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <xQueueGenericSend+0xa2>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <xQueueGenericSend+0xa4>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10a      	bne.n	8003cba <xQueueGenericSend+0xbe>
	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	61fb      	str	r3, [r7, #28]
}
 8003cb6:	bf00      	nop
 8003cb8:	e7fe      	b.n	8003cb8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cba:	f7ff fd7b 	bl	80037b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d302      	bcc.n	8003cd0 <xQueueGenericSend+0xd4>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d129      	bne.n	8003d24 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cd6:	f000 fa07 	bl	80040e8 <prvCopyDataToQueue>
 8003cda:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d010      	beq.n	8003d06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	3324      	adds	r3, #36	; 0x24
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 ffed 	bl	8004cc8 <xTaskRemoveFromEventList>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d013      	beq.n	8003d1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003cf4:	4b3f      	ldr	r3, [pc, #252]	; (8003df4 <xQueueGenericSend+0x1f8>)
 8003cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	e00a      	b.n	8003d1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d007      	beq.n	8003d1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d0c:	4b39      	ldr	r3, [pc, #228]	; (8003df4 <xQueueGenericSend+0x1f8>)
 8003d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d1c:	f7ff fd7a 	bl	8003814 <vPortExitCritical>
				return pdPASS;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e063      	b.n	8003dec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d103      	bne.n	8003d32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d2a:	f7ff fd73 	bl	8003814 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	e05c      	b.n	8003dec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d106      	bne.n	8003d46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d38:	f107 0314 	add.w	r3, r7, #20
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f001 f827 	bl	8004d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d42:	2301      	movs	r3, #1
 8003d44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d46:	f7ff fd65 	bl	8003814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d4a:	f000 fd8f 	bl	800486c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d4e:	f7ff fd31 	bl	80037b4 <vPortEnterCritical>
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d58:	b25b      	sxtb	r3, r3
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5e:	d103      	bne.n	8003d68 <xQueueGenericSend+0x16c>
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d6e:	b25b      	sxtb	r3, r3
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d103      	bne.n	8003d7e <xQueueGenericSend+0x182>
 8003d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d7e:	f7ff fd49 	bl	8003814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d82:	1d3a      	adds	r2, r7, #4
 8003d84:	f107 0314 	add.w	r3, r7, #20
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f001 f816 	bl	8004dbc <xTaskCheckForTimeOut>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d124      	bne.n	8003de0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d98:	f000 fa9e 	bl	80042d8 <prvIsQueueFull>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d018      	beq.n	8003dd4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	3310      	adds	r3, #16
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4611      	mov	r1, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 ff3c 	bl	8004c28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003db2:	f000 fa29 	bl	8004208 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003db6:	f000 fd67 	bl	8004888 <xTaskResumeAll>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f47f af7c 	bne.w	8003cba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <xQueueGenericSend+0x1f8>)
 8003dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	e772      	b.n	8003cba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dd6:	f000 fa17 	bl	8004208 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dda:	f000 fd55 	bl	8004888 <xTaskResumeAll>
 8003dde:	e76c      	b.n	8003cba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003de2:	f000 fa11 	bl	8004208 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003de6:	f000 fd4f 	bl	8004888 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003dea:	2300      	movs	r3, #0
		}
	}
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3738      	adds	r7, #56	; 0x38
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	e000ed04 	.word	0xe000ed04

08003df8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08e      	sub	sp, #56	; 0x38
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d103      	bne.n	8003e34 <xQueueGenericSendFromISR+0x3c>
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <xQueueGenericSendFromISR+0x40>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <xQueueGenericSendFromISR+0x42>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10a      	bne.n	8003e54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	623b      	str	r3, [r7, #32]
}
 8003e50:	bf00      	nop
 8003e52:	e7fe      	b.n	8003e52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d103      	bne.n	8003e62 <xQueueGenericSendFromISR+0x6a>
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <xQueueGenericSendFromISR+0x6e>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <xQueueGenericSendFromISR+0x70>
 8003e66:	2300      	movs	r3, #0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	61fb      	str	r3, [r7, #28]
}
 8003e7e:	bf00      	nop
 8003e80:	e7fe      	b.n	8003e80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e82:	f7ff fd79 	bl	8003978 <vPortValidateInterruptPriority>
	__asm volatile
 8003e86:	f3ef 8211 	mrs	r2, BASEPRI
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	61ba      	str	r2, [r7, #24]
 8003e9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d302      	bcc.n	8003eb4 <xQueueGenericSendFromISR+0xbc>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d12c      	bne.n	8003f0e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ec4:	f000 f910 	bl	80040e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ec8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d112      	bne.n	8003ef8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d016      	beq.n	8003f08 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	3324      	adds	r3, #36	; 0x24
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fef2 	bl	8004cc8 <xTaskRemoveFromEventList>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00e      	beq.n	8003f08 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00b      	beq.n	8003f08 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e007      	b.n	8003f08 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ef8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003efc:	3301      	adds	r3, #1
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	b25a      	sxtb	r2, r3
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003f0c:	e001      	b.n	8003f12 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	637b      	str	r3, [r7, #52]	; 0x34
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f383 8811 	msr	BASEPRI, r3
}
 8003f1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3738      	adds	r7, #56	; 0x38
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08c      	sub	sp, #48	; 0x30
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f34:	2300      	movs	r3, #0
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10a      	bne.n	8003f58 <xQueueReceive+0x30>
	__asm volatile
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	623b      	str	r3, [r7, #32]
}
 8003f54:	bf00      	nop
 8003f56:	e7fe      	b.n	8003f56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <xQueueReceive+0x3e>
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <xQueueReceive+0x42>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <xQueueReceive+0x44>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10a      	bne.n	8003f86 <xQueueReceive+0x5e>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	61fb      	str	r3, [r7, #28]
}
 8003f82:	bf00      	nop
 8003f84:	e7fe      	b.n	8003f84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f86:	f001 f867 	bl	8005058 <xTaskGetSchedulerState>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d102      	bne.n	8003f96 <xQueueReceive+0x6e>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <xQueueReceive+0x72>
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <xQueueReceive+0x74>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <xQueueReceive+0x8e>
	__asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	61bb      	str	r3, [r7, #24]
}
 8003fb2:	bf00      	nop
 8003fb4:	e7fe      	b.n	8003fb4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fb6:	f7ff fbfd 	bl	80037b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01f      	beq.n	8004006 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fca:	f000 f8f7 	bl	80041bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	1e5a      	subs	r2, r3, #1
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00f      	beq.n	8003ffe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	3310      	adds	r3, #16
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fe70 	bl	8004cc8 <xTaskRemoveFromEventList>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003fee:	4b3d      	ldr	r3, [pc, #244]	; (80040e4 <xQueueReceive+0x1bc>)
 8003ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ffe:	f7ff fc09 	bl	8003814 <vPortExitCritical>
				return pdPASS;
 8004002:	2301      	movs	r3, #1
 8004004:	e069      	b.n	80040da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800400c:	f7ff fc02 	bl	8003814 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004010:	2300      	movs	r3, #0
 8004012:	e062      	b.n	80040da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800401a:	f107 0310 	add.w	r3, r7, #16
 800401e:	4618      	mov	r0, r3
 8004020:	f000 feb6 	bl	8004d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004024:	2301      	movs	r3, #1
 8004026:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004028:	f7ff fbf4 	bl	8003814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800402c:	f000 fc1e 	bl	800486c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004030:	f7ff fbc0 	bl	80037b4 <vPortEnterCritical>
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800403a:	b25b      	sxtb	r3, r3
 800403c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004040:	d103      	bne.n	800404a <xQueueReceive+0x122>
 8004042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004050:	b25b      	sxtb	r3, r3
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d103      	bne.n	8004060 <xQueueReceive+0x138>
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004060:	f7ff fbd8 	bl	8003814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004064:	1d3a      	adds	r2, r7, #4
 8004066:	f107 0310 	add.w	r3, r7, #16
 800406a:	4611      	mov	r1, r2
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fea5 	bl	8004dbc <xTaskCheckForTimeOut>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d123      	bne.n	80040c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800407a:	f000 f917 	bl	80042ac <prvIsQueueEmpty>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d017      	beq.n	80040b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	3324      	adds	r3, #36	; 0x24
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f000 fdcb 	bl	8004c28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004094:	f000 f8b8 	bl	8004208 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004098:	f000 fbf6 	bl	8004888 <xTaskResumeAll>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d189      	bne.n	8003fb6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80040a2:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <xQueueReceive+0x1bc>)
 80040a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	e780      	b.n	8003fb6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80040b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040b6:	f000 f8a7 	bl	8004208 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040ba:	f000 fbe5 	bl	8004888 <xTaskResumeAll>
 80040be:	e77a      	b.n	8003fb6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80040c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040c2:	f000 f8a1 	bl	8004208 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040c6:	f000 fbdf 	bl	8004888 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040cc:	f000 f8ee 	bl	80042ac <prvIsQueueEmpty>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f43f af6f 	beq.w	8003fb6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3730      	adds	r7, #48	; 0x30
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	e000ed04 	.word	0xe000ed04

080040e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10d      	bne.n	8004122 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d14d      	bne.n	80041aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4618      	mov	r0, r3
 8004114:	f000 ffbe 	bl	8005094 <xTaskPriorityDisinherit>
 8004118:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	605a      	str	r2, [r3, #4]
 8004120:	e043      	b.n	80041aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d119      	bne.n	800415c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6898      	ldr	r0, [r3, #8]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	461a      	mov	r2, r3
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	f001 fba8 	bl	8005888 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	441a      	add	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	429a      	cmp	r2, r3
 8004150:	d32b      	bcc.n	80041aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	609a      	str	r2, [r3, #8]
 800415a:	e026      	b.n	80041aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	68d8      	ldr	r0, [r3, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	461a      	mov	r2, r3
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	f001 fb8e 	bl	8005888 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	425b      	negs	r3, r3
 8004176:	441a      	add	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d207      	bcs.n	8004198 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	425b      	negs	r3, r3
 8004192:	441a      	add	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d105      	bne.n	80041aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80041b2:	697b      	ldr	r3, [r7, #20]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d018      	beq.n	8004200 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	441a      	add	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d303      	bcc.n	80041f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68d9      	ldr	r1, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	461a      	mov	r2, r3
 80041fa:	6838      	ldr	r0, [r7, #0]
 80041fc:	f001 fb44 	bl	8005888 <memcpy>
	}
}
 8004200:	bf00      	nop
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004210:	f7ff fad0 	bl	80037b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800421a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800421c:	e011      	b.n	8004242 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	2b00      	cmp	r3, #0
 8004224:	d012      	beq.n	800424c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3324      	adds	r3, #36	; 0x24
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fd4c 	bl	8004cc8 <xTaskRemoveFromEventList>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004236:	f000 fe23 	bl	8004e80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	3b01      	subs	r3, #1
 800423e:	b2db      	uxtb	r3, r3
 8004240:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004246:	2b00      	cmp	r3, #0
 8004248:	dce9      	bgt.n	800421e <prvUnlockQueue+0x16>
 800424a:	e000      	b.n	800424e <prvUnlockQueue+0x46>
					break;
 800424c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	22ff      	movs	r2, #255	; 0xff
 8004252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004256:	f7ff fadd 	bl	8003814 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800425a:	f7ff faab 	bl	80037b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004264:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004266:	e011      	b.n	800428c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d012      	beq.n	8004296 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3310      	adds	r3, #16
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fd27 	bl	8004cc8 <xTaskRemoveFromEventList>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004280:	f000 fdfe 	bl	8004e80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004284:	7bbb      	ldrb	r3, [r7, #14]
 8004286:	3b01      	subs	r3, #1
 8004288:	b2db      	uxtb	r3, r3
 800428a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800428c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004290:	2b00      	cmp	r3, #0
 8004292:	dce9      	bgt.n	8004268 <prvUnlockQueue+0x60>
 8004294:	e000      	b.n	8004298 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004296:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	22ff      	movs	r2, #255	; 0xff
 800429c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80042a0:	f7ff fab8 	bl	8003814 <vPortExitCritical>
}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042b4:	f7ff fa7e 	bl	80037b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80042c0:	2301      	movs	r3, #1
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	e001      	b.n	80042ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042ca:	f7ff faa3 	bl	8003814 <vPortExitCritical>

	return xReturn;
 80042ce:	68fb      	ldr	r3, [r7, #12]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042e0:	f7ff fa68 	bl	80037b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d102      	bne.n	80042f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80042f0:	2301      	movs	r3, #1
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	e001      	b.n	80042fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042fa:	f7ff fa8b 	bl	8003814 <vPortExitCritical>

	return xReturn;
 80042fe:	68fb      	ldr	r3, [r7, #12]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	e014      	b.n	8004342 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004318:	4a0f      	ldr	r2, [pc, #60]	; (8004358 <vQueueAddToRegistry+0x50>)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004324:	490c      	ldr	r1, [pc, #48]	; (8004358 <vQueueAddToRegistry+0x50>)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800432e:	4a0a      	ldr	r2, [pc, #40]	; (8004358 <vQueueAddToRegistry+0x50>)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	4413      	add	r3, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800433a:	e006      	b.n	800434a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3301      	adds	r3, #1
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b07      	cmp	r3, #7
 8004346:	d9e7      	bls.n	8004318 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	2000150c 	.word	0x2000150c

0800435c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800436c:	f7ff fa22 	bl	80037b4 <vPortEnterCritical>
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004376:	b25b      	sxtb	r3, r3
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d103      	bne.n	8004386 <vQueueWaitForMessageRestricted+0x2a>
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800438c:	b25b      	sxtb	r3, r3
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004392:	d103      	bne.n	800439c <vQueueWaitForMessageRestricted+0x40>
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800439c:	f7ff fa3a 	bl	8003814 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	3324      	adds	r3, #36	; 0x24
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	68b9      	ldr	r1, [r7, #8]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fc5d 	bl	8004c70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80043b6:	6978      	ldr	r0, [r7, #20]
 80043b8:	f7ff ff26 	bl	8004208 <prvUnlockQueue>
	}
 80043bc:	bf00      	nop
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08e      	sub	sp, #56	; 0x38
 80043c8:	af04      	add	r7, sp, #16
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10a      	bne.n	80043ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	623b      	str	r3, [r7, #32]
}
 80043ea:	bf00      	nop
 80043ec:	e7fe      	b.n	80043ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <xTaskCreateStatic+0x46>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	61fb      	str	r3, [r7, #28]
}
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800440a:	23bc      	movs	r3, #188	; 0xbc
 800440c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2bbc      	cmp	r3, #188	; 0xbc
 8004412:	d00a      	beq.n	800442a <xTaskCreateStatic+0x66>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	61bb      	str	r3, [r7, #24]
}
 8004426:	bf00      	nop
 8004428:	e7fe      	b.n	8004428 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800442a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01e      	beq.n	800446e <xTaskCreateStatic+0xaa>
 8004430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01b      	beq.n	800446e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800443e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	2202      	movs	r2, #2
 8004444:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004448:	2300      	movs	r3, #0
 800444a:	9303      	str	r3, [sp, #12]
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	9302      	str	r3, [sp, #8]
 8004450:	f107 0314 	add.w	r3, r7, #20
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f851 	bl	8004508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004466:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004468:	f000 f8ec 	bl	8004644 <prvAddNewTaskToReadyList>
 800446c:	e001      	b.n	8004472 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004472:	697b      	ldr	r3, [r7, #20]
	}
 8004474:	4618      	mov	r0, r3
 8004476:	3728      	adds	r7, #40	; 0x28
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08c      	sub	sp, #48	; 0x30
 8004480:	af04      	add	r7, sp, #16
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4618      	mov	r0, r3
 8004492:	f7fe fdd3 	bl	800303c <pvPortMalloc>
 8004496:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00e      	beq.n	80044bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800449e:	20bc      	movs	r0, #188	; 0xbc
 80044a0:	f7fe fdcc 	bl	800303c <pvPortMalloc>
 80044a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30
 80044b2:	e005      	b.n	80044c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044b4:	6978      	ldr	r0, [r7, #20]
 80044b6:	f7fe fe85 	bl	80031c4 <vPortFree>
 80044ba:	e001      	b.n	80044c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d017      	beq.n	80044f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044ce:	88fa      	ldrh	r2, [r7, #6]
 80044d0:	2300      	movs	r3, #0
 80044d2:	9303      	str	r3, [sp, #12]
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	9302      	str	r3, [sp, #8]
 80044d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044da:	9301      	str	r3, [sp, #4]
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f80f 	bl	8004508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044ea:	69f8      	ldr	r0, [r7, #28]
 80044ec:	f000 f8aa 	bl	8004644 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044f0:	2301      	movs	r3, #1
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	e002      	b.n	80044fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044f6:	f04f 33ff 	mov.w	r3, #4294967295
 80044fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044fc:	69bb      	ldr	r3, [r7, #24]
	}
 80044fe:	4618      	mov	r0, r3
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	461a      	mov	r2, r3
 8004520:	21a5      	movs	r1, #165	; 0xa5
 8004522:	f001 f9bf 	bl	80058a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004530:	3b01      	subs	r3, #1
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	f023 0307 	bic.w	r3, r3, #7
 800453e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <prvInitialiseNewTask+0x58>
	__asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	617b      	str	r3, [r7, #20]
}
 800455c:	bf00      	nop
 800455e:	e7fe      	b.n	800455e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]
 8004564:	e012      	b.n	800458c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	4413      	add	r3, r2
 800456c:	7819      	ldrb	r1, [r3, #0]
 800456e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	4413      	add	r3, r2
 8004574:	3334      	adds	r3, #52	; 0x34
 8004576:	460a      	mov	r2, r1
 8004578:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	4413      	add	r3, r2
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d006      	beq.n	8004594 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	3301      	adds	r3, #1
 800458a:	61fb      	str	r3, [r7, #28]
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2b0f      	cmp	r3, #15
 8004590:	d9e9      	bls.n	8004566 <prvInitialiseNewTask+0x5e>
 8004592:	e000      	b.n	8004596 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004594:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	2b37      	cmp	r3, #55	; 0x37
 80045a2:	d901      	bls.n	80045a8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045a4:	2337      	movs	r3, #55	; 0x37
 80045a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	2200      	movs	r2, #0
 80045b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	3304      	adds	r3, #4
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe ff36 	bl	8003430 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c6:	3318      	adds	r3, #24
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fe ff31 	bl	8003430 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	3354      	adds	r3, #84	; 0x54
 80045f8:	2260      	movs	r2, #96	; 0x60
 80045fa:	2100      	movs	r1, #0
 80045fc:	4618      	mov	r0, r3
 80045fe:	f001 f951 	bl	80058a4 <memset>
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	4a0c      	ldr	r2, [pc, #48]	; (8004638 <prvInitialiseNewTask+0x130>)
 8004606:	659a      	str	r2, [r3, #88]	; 0x58
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	4a0c      	ldr	r2, [pc, #48]	; (800463c <prvInitialiseNewTask+0x134>)
 800460c:	65da      	str	r2, [r3, #92]	; 0x5c
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	4a0b      	ldr	r2, [pc, #44]	; (8004640 <prvInitialiseNewTask+0x138>)
 8004612:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	68f9      	ldr	r1, [r7, #12]
 8004618:	69b8      	ldr	r0, [r7, #24]
 800461a:	f7fe ff9d 	bl	8003558 <pxPortInitialiseStack>
 800461e:	4602      	mov	r2, r0
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800462e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004630:	bf00      	nop
 8004632:	3720      	adds	r7, #32
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	08005b50 	.word	0x08005b50
 800463c:	08005b70 	.word	0x08005b70
 8004640:	08005b30 	.word	0x08005b30

08004644 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800464c:	f7ff f8b2 	bl	80037b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004650:	4b2d      	ldr	r3, [pc, #180]	; (8004708 <prvAddNewTaskToReadyList+0xc4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	4a2c      	ldr	r2, [pc, #176]	; (8004708 <prvAddNewTaskToReadyList+0xc4>)
 8004658:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800465a:	4b2c      	ldr	r3, [pc, #176]	; (800470c <prvAddNewTaskToReadyList+0xc8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004662:	4a2a      	ldr	r2, [pc, #168]	; (800470c <prvAddNewTaskToReadyList+0xc8>)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004668:	4b27      	ldr	r3, [pc, #156]	; (8004708 <prvAddNewTaskToReadyList+0xc4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d110      	bne.n	8004692 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004670:	f000 fc2a 	bl	8004ec8 <prvInitialiseTaskLists>
 8004674:	e00d      	b.n	8004692 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004676:	4b26      	ldr	r3, [pc, #152]	; (8004710 <prvAddNewTaskToReadyList+0xcc>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800467e:	4b23      	ldr	r3, [pc, #140]	; (800470c <prvAddNewTaskToReadyList+0xc8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	429a      	cmp	r2, r3
 800468a:	d802      	bhi.n	8004692 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800468c:	4a1f      	ldr	r2, [pc, #124]	; (800470c <prvAddNewTaskToReadyList+0xc8>)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004692:	4b20      	ldr	r3, [pc, #128]	; (8004714 <prvAddNewTaskToReadyList+0xd0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3301      	adds	r3, #1
 8004698:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <prvAddNewTaskToReadyList+0xd0>)
 800469a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800469c:	4b1d      	ldr	r3, [pc, #116]	; (8004714 <prvAddNewTaskToReadyList+0xd0>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a8:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <prvAddNewTaskToReadyList+0xd4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d903      	bls.n	80046b8 <prvAddNewTaskToReadyList+0x74>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	4a18      	ldr	r2, [pc, #96]	; (8004718 <prvAddNewTaskToReadyList+0xd4>)
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4a15      	ldr	r2, [pc, #84]	; (800471c <prvAddNewTaskToReadyList+0xd8>)
 80046c6:	441a      	add	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	f7fe febb 	bl	800344a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046d4:	f7ff f89e 	bl	8003814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046d8:	4b0d      	ldr	r3, [pc, #52]	; (8004710 <prvAddNewTaskToReadyList+0xcc>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00e      	beq.n	80046fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046e0:	4b0a      	ldr	r3, [pc, #40]	; (800470c <prvAddNewTaskToReadyList+0xc8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d207      	bcs.n	80046fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046ee:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <prvAddNewTaskToReadyList+0xdc>)
 80046f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20001a20 	.word	0x20001a20
 800470c:	2000154c 	.word	0x2000154c
 8004710:	20001a2c 	.word	0x20001a2c
 8004714:	20001a3c 	.word	0x20001a3c
 8004718:	20001a28 	.word	0x20001a28
 800471c:	20001550 	.word	0x20001550
 8004720:	e000ed04 	.word	0xe000ed04

08004724 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d017      	beq.n	8004766 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004736:	4b13      	ldr	r3, [pc, #76]	; (8004784 <vTaskDelay+0x60>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <vTaskDelay+0x30>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	60bb      	str	r3, [r7, #8]
}
 8004750:	bf00      	nop
 8004752:	e7fe      	b.n	8004752 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004754:	f000 f88a 	bl	800486c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004758:	2100      	movs	r1, #0
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fd08 	bl	8005170 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004760:	f000 f892 	bl	8004888 <xTaskResumeAll>
 8004764:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d107      	bne.n	800477c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800476c:	4b06      	ldr	r3, [pc, #24]	; (8004788 <vTaskDelay+0x64>)
 800476e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800477c:	bf00      	nop
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20001a48 	.word	0x20001a48
 8004788:	e000ed04 	.word	0xe000ed04

0800478c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	; 0x28
 8004790:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004792:	2300      	movs	r3, #0
 8004794:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004796:	2300      	movs	r3, #0
 8004798:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800479a:	463a      	mov	r2, r7
 800479c:	1d39      	adds	r1, r7, #4
 800479e:	f107 0308 	add.w	r3, r7, #8
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fc16 	bl	8002fd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047a8:	6839      	ldr	r1, [r7, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	9202      	str	r2, [sp, #8]
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	2300      	movs	r3, #0
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	2300      	movs	r3, #0
 80047b8:	460a      	mov	r2, r1
 80047ba:	4924      	ldr	r1, [pc, #144]	; (800484c <vTaskStartScheduler+0xc0>)
 80047bc:	4824      	ldr	r0, [pc, #144]	; (8004850 <vTaskStartScheduler+0xc4>)
 80047be:	f7ff fe01 	bl	80043c4 <xTaskCreateStatic>
 80047c2:	4603      	mov	r3, r0
 80047c4:	4a23      	ldr	r2, [pc, #140]	; (8004854 <vTaskStartScheduler+0xc8>)
 80047c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047c8:	4b22      	ldr	r3, [pc, #136]	; (8004854 <vTaskStartScheduler+0xc8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047d0:	2301      	movs	r3, #1
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	e001      	b.n	80047da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d102      	bne.n	80047e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80047e0:	f000 fd1a 	bl	8005218 <xTimerCreateTimerTask>
 80047e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d11b      	bne.n	8004824 <vTaskStartScheduler+0x98>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	613b      	str	r3, [r7, #16]
}
 80047fe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004800:	4b15      	ldr	r3, [pc, #84]	; (8004858 <vTaskStartScheduler+0xcc>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3354      	adds	r3, #84	; 0x54
 8004806:	4a15      	ldr	r2, [pc, #84]	; (800485c <vTaskStartScheduler+0xd0>)
 8004808:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800480a:	4b15      	ldr	r3, [pc, #84]	; (8004860 <vTaskStartScheduler+0xd4>)
 800480c:	f04f 32ff 	mov.w	r2, #4294967295
 8004810:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004812:	4b14      	ldr	r3, [pc, #80]	; (8004864 <vTaskStartScheduler+0xd8>)
 8004814:	2201      	movs	r2, #1
 8004816:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004818:	4b13      	ldr	r3, [pc, #76]	; (8004868 <vTaskStartScheduler+0xdc>)
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800481e:	f7fe ff27 	bl	8003670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004822:	e00e      	b.n	8004842 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482a:	d10a      	bne.n	8004842 <vTaskStartScheduler+0xb6>
	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	60fb      	str	r3, [r7, #12]
}
 800483e:	bf00      	nop
 8004840:	e7fe      	b.n	8004840 <vTaskStartScheduler+0xb4>
}
 8004842:	bf00      	nop
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	08005a74 	.word	0x08005a74
 8004850:	08004e99 	.word	0x08004e99
 8004854:	20001a44 	.word	0x20001a44
 8004858:	2000154c 	.word	0x2000154c
 800485c:	20000010 	.word	0x20000010
 8004860:	20001a40 	.word	0x20001a40
 8004864:	20001a2c 	.word	0x20001a2c
 8004868:	20001a24 	.word	0x20001a24

0800486c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <vTaskSuspendAll+0x18>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3301      	adds	r3, #1
 8004876:	4a03      	ldr	r2, [pc, #12]	; (8004884 <vTaskSuspendAll+0x18>)
 8004878:	6013      	str	r3, [r2, #0]
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	20001a48 	.word	0x20001a48

08004888 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004896:	4b42      	ldr	r3, [pc, #264]	; (80049a0 <xTaskResumeAll+0x118>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	603b      	str	r3, [r7, #0]
}
 80048b0:	bf00      	nop
 80048b2:	e7fe      	b.n	80048b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048b4:	f7fe ff7e 	bl	80037b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048b8:	4b39      	ldr	r3, [pc, #228]	; (80049a0 <xTaskResumeAll+0x118>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3b01      	subs	r3, #1
 80048be:	4a38      	ldr	r2, [pc, #224]	; (80049a0 <xTaskResumeAll+0x118>)
 80048c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c2:	4b37      	ldr	r3, [pc, #220]	; (80049a0 <xTaskResumeAll+0x118>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d162      	bne.n	8004990 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048ca:	4b36      	ldr	r3, [pc, #216]	; (80049a4 <xTaskResumeAll+0x11c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d05e      	beq.n	8004990 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048d2:	e02f      	b.n	8004934 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80048d4:	4b34      	ldr	r3, [pc, #208]	; (80049a8 <xTaskResumeAll+0x120>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3318      	adds	r3, #24
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fe fe0f 	bl	8003504 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3304      	adds	r3, #4
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe fe0a 	bl	8003504 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f4:	4b2d      	ldr	r3, [pc, #180]	; (80049ac <xTaskResumeAll+0x124>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d903      	bls.n	8004904 <xTaskResumeAll+0x7c>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	4a2a      	ldr	r2, [pc, #168]	; (80049ac <xTaskResumeAll+0x124>)
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4a27      	ldr	r2, [pc, #156]	; (80049b0 <xTaskResumeAll+0x128>)
 8004912:	441a      	add	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3304      	adds	r3, #4
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f7fe fd95 	bl	800344a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004924:	4b23      	ldr	r3, [pc, #140]	; (80049b4 <xTaskResumeAll+0x12c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	429a      	cmp	r2, r3
 800492c:	d302      	bcc.n	8004934 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800492e:	4b22      	ldr	r3, [pc, #136]	; (80049b8 <xTaskResumeAll+0x130>)
 8004930:	2201      	movs	r2, #1
 8004932:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004934:	4b1c      	ldr	r3, [pc, #112]	; (80049a8 <xTaskResumeAll+0x120>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1cb      	bne.n	80048d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004942:	f000 fb63 	bl	800500c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004946:	4b1d      	ldr	r3, [pc, #116]	; (80049bc <xTaskResumeAll+0x134>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d010      	beq.n	8004974 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004952:	f000 f847 	bl	80049e4 <xTaskIncrementTick>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800495c:	4b16      	ldr	r3, [pc, #88]	; (80049b8 <xTaskResumeAll+0x130>)
 800495e:	2201      	movs	r2, #1
 8004960:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	3b01      	subs	r3, #1
 8004966:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f1      	bne.n	8004952 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800496e:	4b13      	ldr	r3, [pc, #76]	; (80049bc <xTaskResumeAll+0x134>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004974:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <xTaskResumeAll+0x130>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d009      	beq.n	8004990 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800497c:	2301      	movs	r3, #1
 800497e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <xTaskResumeAll+0x138>)
 8004982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004990:	f7fe ff40 	bl	8003814 <vPortExitCritical>

	return xAlreadyYielded;
 8004994:	68bb      	ldr	r3, [r7, #8]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20001a48 	.word	0x20001a48
 80049a4:	20001a20 	.word	0x20001a20
 80049a8:	200019e0 	.word	0x200019e0
 80049ac:	20001a28 	.word	0x20001a28
 80049b0:	20001550 	.word	0x20001550
 80049b4:	2000154c 	.word	0x2000154c
 80049b8:	20001a34 	.word	0x20001a34
 80049bc:	20001a30 	.word	0x20001a30
 80049c0:	e000ed04 	.word	0xe000ed04

080049c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80049ca:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <xTaskGetTickCount+0x1c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80049d0:	687b      	ldr	r3, [r7, #4]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	20001a24 	.word	0x20001a24

080049e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ee:	4b51      	ldr	r3, [pc, #324]	; (8004b34 <xTaskIncrementTick+0x150>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f040 808e 	bne.w	8004b14 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049f8:	4b4f      	ldr	r3, [pc, #316]	; (8004b38 <xTaskIncrementTick+0x154>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3301      	adds	r3, #1
 80049fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a00:	4a4d      	ldr	r2, [pc, #308]	; (8004b38 <xTaskIncrementTick+0x154>)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d120      	bne.n	8004a4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a0c:	4b4b      	ldr	r3, [pc, #300]	; (8004b3c <xTaskIncrementTick+0x158>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <xTaskIncrementTick+0x48>
	__asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	603b      	str	r3, [r7, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	e7fe      	b.n	8004a2a <xTaskIncrementTick+0x46>
 8004a2c:	4b43      	ldr	r3, [pc, #268]	; (8004b3c <xTaskIncrementTick+0x158>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	4b43      	ldr	r3, [pc, #268]	; (8004b40 <xTaskIncrementTick+0x15c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a41      	ldr	r2, [pc, #260]	; (8004b3c <xTaskIncrementTick+0x158>)
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	4a41      	ldr	r2, [pc, #260]	; (8004b40 <xTaskIncrementTick+0x15c>)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	4b40      	ldr	r3, [pc, #256]	; (8004b44 <xTaskIncrementTick+0x160>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	4a3f      	ldr	r2, [pc, #252]	; (8004b44 <xTaskIncrementTick+0x160>)
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	f000 fadf 	bl	800500c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a4e:	4b3e      	ldr	r3, [pc, #248]	; (8004b48 <xTaskIncrementTick+0x164>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d34e      	bcc.n	8004af6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a58:	4b38      	ldr	r3, [pc, #224]	; (8004b3c <xTaskIncrementTick+0x158>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <xTaskIncrementTick+0x82>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <xTaskIncrementTick+0x84>
 8004a66:	2300      	movs	r3, #0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a6c:	4b36      	ldr	r3, [pc, #216]	; (8004b48 <xTaskIncrementTick+0x164>)
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a72:	601a      	str	r2, [r3, #0]
					break;
 8004a74:	e03f      	b.n	8004af6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a76:	4b31      	ldr	r3, [pc, #196]	; (8004b3c <xTaskIncrementTick+0x158>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d203      	bcs.n	8004a96 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a8e:	4a2e      	ldr	r2, [pc, #184]	; (8004b48 <xTaskIncrementTick+0x164>)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6013      	str	r3, [r2, #0]
						break;
 8004a94:	e02f      	b.n	8004af6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fe fd32 	bl	8003504 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d004      	beq.n	8004ab2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	3318      	adds	r3, #24
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fe fd29 	bl	8003504 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab6:	4b25      	ldr	r3, [pc, #148]	; (8004b4c <xTaskIncrementTick+0x168>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d903      	bls.n	8004ac6 <xTaskIncrementTick+0xe2>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	4a22      	ldr	r2, [pc, #136]	; (8004b4c <xTaskIncrementTick+0x168>)
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4a1f      	ldr	r2, [pc, #124]	; (8004b50 <xTaskIncrementTick+0x16c>)
 8004ad4:	441a      	add	r2, r3
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f7fe fcb4 	bl	800344a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae6:	4b1b      	ldr	r3, [pc, #108]	; (8004b54 <xTaskIncrementTick+0x170>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d3b3      	bcc.n	8004a58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004af0:	2301      	movs	r3, #1
 8004af2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004af4:	e7b0      	b.n	8004a58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004af6:	4b17      	ldr	r3, [pc, #92]	; (8004b54 <xTaskIncrementTick+0x170>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afc:	4914      	ldr	r1, [pc, #80]	; (8004b50 <xTaskIncrementTick+0x16c>)
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	440b      	add	r3, r1
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d907      	bls.n	8004b1e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	e004      	b.n	8004b1e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004b14:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <xTaskIncrementTick+0x174>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	4a0f      	ldr	r2, [pc, #60]	; (8004b58 <xTaskIncrementTick+0x174>)
 8004b1c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004b1e:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <xTaskIncrementTick+0x178>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004b26:	2301      	movs	r3, #1
 8004b28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004b2a:	697b      	ldr	r3, [r7, #20]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	20001a48 	.word	0x20001a48
 8004b38:	20001a24 	.word	0x20001a24
 8004b3c:	200019d8 	.word	0x200019d8
 8004b40:	200019dc 	.word	0x200019dc
 8004b44:	20001a38 	.word	0x20001a38
 8004b48:	20001a40 	.word	0x20001a40
 8004b4c:	20001a28 	.word	0x20001a28
 8004b50:	20001550 	.word	0x20001550
 8004b54:	2000154c 	.word	0x2000154c
 8004b58:	20001a30 	.word	0x20001a30
 8004b5c:	20001a34 	.word	0x20001a34

08004b60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b66:	4b2a      	ldr	r3, [pc, #168]	; (8004c10 <vTaskSwitchContext+0xb0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b6e:	4b29      	ldr	r3, [pc, #164]	; (8004c14 <vTaskSwitchContext+0xb4>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b74:	e046      	b.n	8004c04 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004b76:	4b27      	ldr	r3, [pc, #156]	; (8004c14 <vTaskSwitchContext+0xb4>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b7c:	4b26      	ldr	r3, [pc, #152]	; (8004c18 <vTaskSwitchContext+0xb8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	e010      	b.n	8004ba6 <vTaskSwitchContext+0x46>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10a      	bne.n	8004ba0 <vTaskSwitchContext+0x40>
	__asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	607b      	str	r3, [r7, #4]
}
 8004b9c:	bf00      	nop
 8004b9e:	e7fe      	b.n	8004b9e <vTaskSwitchContext+0x3e>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	491d      	ldr	r1, [pc, #116]	; (8004c1c <vTaskSwitchContext+0xbc>)
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4613      	mov	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0e4      	beq.n	8004b84 <vTaskSwitchContext+0x24>
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <vTaskSwitchContext+0xbc>)
 8004bc6:	4413      	add	r3, r2
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	605a      	str	r2, [r3, #4]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	3308      	adds	r3, #8
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d104      	bne.n	8004bea <vTaskSwitchContext+0x8a>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	605a      	str	r2, [r3, #4]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	4a0b      	ldr	r2, [pc, #44]	; (8004c20 <vTaskSwitchContext+0xc0>)
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	4a08      	ldr	r2, [pc, #32]	; (8004c18 <vTaskSwitchContext+0xb8>)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004bfa:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <vTaskSwitchContext+0xc0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3354      	adds	r3, #84	; 0x54
 8004c00:	4a08      	ldr	r2, [pc, #32]	; (8004c24 <vTaskSwitchContext+0xc4>)
 8004c02:	6013      	str	r3, [r2, #0]
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	20001a48 	.word	0x20001a48
 8004c14:	20001a34 	.word	0x20001a34
 8004c18:	20001a28 	.word	0x20001a28
 8004c1c:	20001550 	.word	0x20001550
 8004c20:	2000154c 	.word	0x2000154c
 8004c24:	20000010 	.word	0x20000010

08004c28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	60fb      	str	r3, [r7, #12]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c4e:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <vTaskPlaceOnEventList+0x44>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3318      	adds	r3, #24
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fe fc1b 	bl	8003492 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	6838      	ldr	r0, [r7, #0]
 8004c60:	f000 fa86 	bl	8005170 <prvAddCurrentTaskToDelayedList>
}
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	2000154c 	.word	0x2000154c

08004c70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	617b      	str	r3, [r7, #20]
}
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3318      	adds	r3, #24
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7fe fbd2 	bl	800344a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004cac:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	68b8      	ldr	r0, [r7, #8]
 8004cb6:	f000 fa5b 	bl	8005170 <prvAddCurrentTaskToDelayedList>
	}
 8004cba:	bf00      	nop
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	2000154c 	.word	0x2000154c

08004cc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10a      	bne.n	8004cf4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	60fb      	str	r3, [r7, #12]
}
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	3318      	adds	r3, #24
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fe fc03 	bl	8003504 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cfe:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <xTaskRemoveFromEventList+0xb0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d11d      	bne.n	8004d42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fe fbfa 	bl	8003504 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d14:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <xTaskRemoveFromEventList+0xb4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d903      	bls.n	8004d24 <xTaskRemoveFromEventList+0x5c>
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	4a16      	ldr	r2, [pc, #88]	; (8004d7c <xTaskRemoveFromEventList+0xb4>)
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4a13      	ldr	r2, [pc, #76]	; (8004d80 <xTaskRemoveFromEventList+0xb8>)
 8004d32:	441a      	add	r2, r3
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f7fe fb85 	bl	800344a <vListInsertEnd>
 8004d40:	e005      	b.n	8004d4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	3318      	adds	r3, #24
 8004d46:	4619      	mov	r1, r3
 8004d48:	480e      	ldr	r0, [pc, #56]	; (8004d84 <xTaskRemoveFromEventList+0xbc>)
 8004d4a:	f7fe fb7e 	bl	800344a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d52:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <xTaskRemoveFromEventList+0xc0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d905      	bls.n	8004d68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d60:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <xTaskRemoveFromEventList+0xc4>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e001      	b.n	8004d6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004d6c:	697b      	ldr	r3, [r7, #20]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20001a48 	.word	0x20001a48
 8004d7c:	20001a28 	.word	0x20001a28
 8004d80:	20001550 	.word	0x20001550
 8004d84:	200019e0 	.word	0x200019e0
 8004d88:	2000154c 	.word	0x2000154c
 8004d8c:	20001a34 	.word	0x20001a34

08004d90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d98:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <vTaskInternalSetTimeOutState+0x24>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004da0:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <vTaskInternalSetTimeOutState+0x28>)
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	605a      	str	r2, [r3, #4]
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	20001a38 	.word	0x20001a38
 8004db8:	20001a24 	.word	0x20001a24

08004dbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	613b      	str	r3, [r7, #16]
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	60fb      	str	r3, [r7, #12]
}
 8004dfa:	bf00      	nop
 8004dfc:	e7fe      	b.n	8004dfc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004dfe:	f7fe fcd9 	bl	80037b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e02:	4b1d      	ldr	r3, [pc, #116]	; (8004e78 <xTaskCheckForTimeOut+0xbc>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1a:	d102      	bne.n	8004e22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	e023      	b.n	8004e6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <xTaskCheckForTimeOut+0xc0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d007      	beq.n	8004e3e <xTaskCheckForTimeOut+0x82>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d302      	bcc.n	8004e3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	61fb      	str	r3, [r7, #28]
 8004e3c:	e015      	b.n	8004e6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d20b      	bcs.n	8004e60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	1ad2      	subs	r2, r2, r3
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff ff9b 	bl	8004d90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	e004      	b.n	8004e6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e66:	2301      	movs	r3, #1
 8004e68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e6a:	f7fe fcd3 	bl	8003814 <vPortExitCritical>

	return xReturn;
 8004e6e:	69fb      	ldr	r3, [r7, #28]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3720      	adds	r7, #32
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	20001a24 	.word	0x20001a24
 8004e7c:	20001a38 	.word	0x20001a38

08004e80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e84:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <vTaskMissedYield+0x14>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	20001a34 	.word	0x20001a34

08004e98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ea0:	f000 f852 	bl	8004f48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ea4:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <prvIdleTask+0x28>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d9f9      	bls.n	8004ea0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <prvIdleTask+0x2c>)
 8004eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ebc:	e7f0      	b.n	8004ea0 <prvIdleTask+0x8>
 8004ebe:	bf00      	nop
 8004ec0:	20001550 	.word	0x20001550
 8004ec4:	e000ed04 	.word	0xe000ed04

08004ec8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ece:	2300      	movs	r3, #0
 8004ed0:	607b      	str	r3, [r7, #4]
 8004ed2:	e00c      	b.n	8004eee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4a12      	ldr	r2, [pc, #72]	; (8004f28 <prvInitialiseTaskLists+0x60>)
 8004ee0:	4413      	add	r3, r2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe fa84 	bl	80033f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3301      	adds	r3, #1
 8004eec:	607b      	str	r3, [r7, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b37      	cmp	r3, #55	; 0x37
 8004ef2:	d9ef      	bls.n	8004ed4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ef4:	480d      	ldr	r0, [pc, #52]	; (8004f2c <prvInitialiseTaskLists+0x64>)
 8004ef6:	f7fe fa7b 	bl	80033f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004efa:	480d      	ldr	r0, [pc, #52]	; (8004f30 <prvInitialiseTaskLists+0x68>)
 8004efc:	f7fe fa78 	bl	80033f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f00:	480c      	ldr	r0, [pc, #48]	; (8004f34 <prvInitialiseTaskLists+0x6c>)
 8004f02:	f7fe fa75 	bl	80033f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f06:	480c      	ldr	r0, [pc, #48]	; (8004f38 <prvInitialiseTaskLists+0x70>)
 8004f08:	f7fe fa72 	bl	80033f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f0c:	480b      	ldr	r0, [pc, #44]	; (8004f3c <prvInitialiseTaskLists+0x74>)
 8004f0e:	f7fe fa6f 	bl	80033f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f12:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <prvInitialiseTaskLists+0x78>)
 8004f14:	4a05      	ldr	r2, [pc, #20]	; (8004f2c <prvInitialiseTaskLists+0x64>)
 8004f16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f18:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <prvInitialiseTaskLists+0x7c>)
 8004f1a:	4a05      	ldr	r2, [pc, #20]	; (8004f30 <prvInitialiseTaskLists+0x68>)
 8004f1c:	601a      	str	r2, [r3, #0]
}
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20001550 	.word	0x20001550
 8004f2c:	200019b0 	.word	0x200019b0
 8004f30:	200019c4 	.word	0x200019c4
 8004f34:	200019e0 	.word	0x200019e0
 8004f38:	200019f4 	.word	0x200019f4
 8004f3c:	20001a0c 	.word	0x20001a0c
 8004f40:	200019d8 	.word	0x200019d8
 8004f44:	200019dc 	.word	0x200019dc

08004f48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f4e:	e019      	b.n	8004f84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f50:	f7fe fc30 	bl	80037b4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004f54:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <prvCheckTasksWaitingTermination+0x50>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fe facf 	bl	8003504 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f66:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <prvCheckTasksWaitingTermination+0x54>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	4a0b      	ldr	r2, [pc, #44]	; (8004f9c <prvCheckTasksWaitingTermination+0x54>)
 8004f6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <prvCheckTasksWaitingTermination+0x58>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	4a0a      	ldr	r2, [pc, #40]	; (8004fa0 <prvCheckTasksWaitingTermination+0x58>)
 8004f78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f7a:	f7fe fc4b 	bl	8003814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f810 	bl	8004fa4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f84:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <prvCheckTasksWaitingTermination+0x58>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e1      	bne.n	8004f50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f8c:	bf00      	nop
 8004f8e:	bf00      	nop
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	200019f4 	.word	0x200019f4
 8004f9c:	20001a20 	.word	0x20001a20
 8004fa0:	20001a08 	.word	0x20001a08

08004fa4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3354      	adds	r3, #84	; 0x54
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fc8d 	bl	80058d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d108      	bne.n	8004fd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fe f8fd 	bl	80031c4 <vPortFree>
				vPortFree( pxTCB );
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fe f8fa 	bl	80031c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004fd0:	e018      	b.n	8005004 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d103      	bne.n	8004fe4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7fe f8f1 	bl	80031c4 <vPortFree>
	}
 8004fe2:	e00f      	b.n	8005004 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d00a      	beq.n	8005004 <prvDeleteTCB+0x60>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	60fb      	str	r3, [r7, #12]
}
 8005000:	bf00      	nop
 8005002:	e7fe      	b.n	8005002 <prvDeleteTCB+0x5e>
	}
 8005004:	bf00      	nop
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005012:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <prvResetNextTaskUnblockTime+0x44>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <prvResetNextTaskUnblockTime+0x14>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <prvResetNextTaskUnblockTime+0x16>
 8005020:	2300      	movs	r3, #0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d004      	beq.n	8005030 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005026:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <prvResetNextTaskUnblockTime+0x48>)
 8005028:	f04f 32ff 	mov.w	r2, #4294967295
 800502c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800502e:	e008      	b.n	8005042 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005030:	4b07      	ldr	r3, [pc, #28]	; (8005050 <prvResetNextTaskUnblockTime+0x44>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	4a05      	ldr	r2, [pc, #20]	; (8005054 <prvResetNextTaskUnblockTime+0x48>)
 8005040:	6013      	str	r3, [r2, #0]
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	200019d8 	.word	0x200019d8
 8005054:	20001a40 	.word	0x20001a40

08005058 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800505e:	4b0b      	ldr	r3, [pc, #44]	; (800508c <xTaskGetSchedulerState+0x34>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d102      	bne.n	800506c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005066:	2301      	movs	r3, #1
 8005068:	607b      	str	r3, [r7, #4]
 800506a:	e008      	b.n	800507e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800506c:	4b08      	ldr	r3, [pc, #32]	; (8005090 <xTaskGetSchedulerState+0x38>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005074:	2302      	movs	r3, #2
 8005076:	607b      	str	r3, [r7, #4]
 8005078:	e001      	b.n	800507e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800507a:	2300      	movs	r3, #0
 800507c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800507e:	687b      	ldr	r3, [r7, #4]
	}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	20001a2c 	.word	0x20001a2c
 8005090:	20001a48 	.word	0x20001a48

08005094 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d056      	beq.n	8005158 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050aa:	4b2e      	ldr	r3, [pc, #184]	; (8005164 <xTaskPriorityDisinherit+0xd0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d00a      	beq.n	80050ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	60fb      	str	r3, [r7, #12]
}
 80050c6:	bf00      	nop
 80050c8:	e7fe      	b.n	80050c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10a      	bne.n	80050e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	60bb      	str	r3, [r7, #8]
}
 80050e4:	bf00      	nop
 80050e6:	e7fe      	b.n	80050e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ec:	1e5a      	subs	r2, r3, #1
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d02c      	beq.n	8005158 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005102:	2b00      	cmp	r3, #0
 8005104:	d128      	bne.n	8005158 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	3304      	adds	r3, #4
 800510a:	4618      	mov	r0, r3
 800510c:	f7fe f9fa 	bl	8003504 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005128:	4b0f      	ldr	r3, [pc, #60]	; (8005168 <xTaskPriorityDisinherit+0xd4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d903      	bls.n	8005138 <xTaskPriorityDisinherit+0xa4>
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	4a0c      	ldr	r2, [pc, #48]	; (8005168 <xTaskPriorityDisinherit+0xd4>)
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4a09      	ldr	r2, [pc, #36]	; (800516c <xTaskPriorityDisinherit+0xd8>)
 8005146:	441a      	add	r2, r3
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	3304      	adds	r3, #4
 800514c:	4619      	mov	r1, r3
 800514e:	4610      	mov	r0, r2
 8005150:	f7fe f97b 	bl	800344a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005154:	2301      	movs	r3, #1
 8005156:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005158:	697b      	ldr	r3, [r7, #20]
	}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	2000154c 	.word	0x2000154c
 8005168:	20001a28 	.word	0x20001a28
 800516c:	20001550 	.word	0x20001550

08005170 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800517a:	4b21      	ldr	r3, [pc, #132]	; (8005200 <prvAddCurrentTaskToDelayedList+0x90>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005180:	4b20      	ldr	r3, [pc, #128]	; (8005204 <prvAddCurrentTaskToDelayedList+0x94>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3304      	adds	r3, #4
 8005186:	4618      	mov	r0, r3
 8005188:	f7fe f9bc 	bl	8003504 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	d10a      	bne.n	80051aa <prvAddCurrentTaskToDelayedList+0x3a>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800519a:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <prvAddCurrentTaskToDelayedList+0x94>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3304      	adds	r3, #4
 80051a0:	4619      	mov	r1, r3
 80051a2:	4819      	ldr	r0, [pc, #100]	; (8005208 <prvAddCurrentTaskToDelayedList+0x98>)
 80051a4:	f7fe f951 	bl	800344a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051a8:	e026      	b.n	80051f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4413      	add	r3, r2
 80051b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051b2:	4b14      	ldr	r3, [pc, #80]	; (8005204 <prvAddCurrentTaskToDelayedList+0x94>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d209      	bcs.n	80051d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051c2:	4b12      	ldr	r3, [pc, #72]	; (800520c <prvAddCurrentTaskToDelayedList+0x9c>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <prvAddCurrentTaskToDelayedList+0x94>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f7fe f95f 	bl	8003492 <vListInsert>
}
 80051d4:	e010      	b.n	80051f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051d6:	4b0e      	ldr	r3, [pc, #56]	; (8005210 <prvAddCurrentTaskToDelayedList+0xa0>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <prvAddCurrentTaskToDelayedList+0x94>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3304      	adds	r3, #4
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f7fe f955 	bl	8003492 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051e8:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d202      	bcs.n	80051f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80051f2:	4a08      	ldr	r2, [pc, #32]	; (8005214 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	6013      	str	r3, [r2, #0]
}
 80051f8:	bf00      	nop
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20001a24 	.word	0x20001a24
 8005204:	2000154c 	.word	0x2000154c
 8005208:	20001a0c 	.word	0x20001a0c
 800520c:	200019dc 	.word	0x200019dc
 8005210:	200019d8 	.word	0x200019d8
 8005214:	20001a40 	.word	0x20001a40

08005218 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005222:	f000 facb 	bl	80057bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005226:	4b1c      	ldr	r3, [pc, #112]	; (8005298 <xTimerCreateTimerTask+0x80>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d021      	beq.n	8005272 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005232:	2300      	movs	r3, #0
 8005234:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005236:	1d3a      	adds	r2, r7, #4
 8005238:	f107 0108 	add.w	r1, r7, #8
 800523c:	f107 030c 	add.w	r3, r7, #12
 8005240:	4618      	mov	r0, r3
 8005242:	f7fd fee1 	bl	8003008 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	9202      	str	r2, [sp, #8]
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	2302      	movs	r3, #2
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	2300      	movs	r3, #0
 8005256:	460a      	mov	r2, r1
 8005258:	4910      	ldr	r1, [pc, #64]	; (800529c <xTimerCreateTimerTask+0x84>)
 800525a:	4811      	ldr	r0, [pc, #68]	; (80052a0 <xTimerCreateTimerTask+0x88>)
 800525c:	f7ff f8b2 	bl	80043c4 <xTaskCreateStatic>
 8005260:	4603      	mov	r3, r0
 8005262:	4a10      	ldr	r2, [pc, #64]	; (80052a4 <xTimerCreateTimerTask+0x8c>)
 8005264:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005266:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <xTimerCreateTimerTask+0x8c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800526e:	2301      	movs	r3, #1
 8005270:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	613b      	str	r3, [r7, #16]
}
 800528a:	bf00      	nop
 800528c:	e7fe      	b.n	800528c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800528e:	697b      	ldr	r3, [r7, #20]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20001a7c 	.word	0x20001a7c
 800529c:	08005a7c 	.word	0x08005a7c
 80052a0:	080053c5 	.word	0x080053c5
 80052a4:	20001a80 	.word	0x20001a80

080052a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08a      	sub	sp, #40	; 0x28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	623b      	str	r3, [r7, #32]
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80052d6:	4b1a      	ldr	r3, [pc, #104]	; (8005340 <xTimerGenericCommand+0x98>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d02a      	beq.n	8005334 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b05      	cmp	r3, #5
 80052ee:	dc18      	bgt.n	8005322 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052f0:	f7ff feb2 	bl	8005058 <xTaskGetSchedulerState>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d109      	bne.n	800530e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052fa:	4b11      	ldr	r3, [pc, #68]	; (8005340 <xTimerGenericCommand+0x98>)
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	f107 0110 	add.w	r1, r7, #16
 8005302:	2300      	movs	r3, #0
 8005304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005306:	f7fe fc79 	bl	8003bfc <xQueueGenericSend>
 800530a:	6278      	str	r0, [r7, #36]	; 0x24
 800530c:	e012      	b.n	8005334 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800530e:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <xTimerGenericCommand+0x98>)
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	f107 0110 	add.w	r1, r7, #16
 8005316:	2300      	movs	r3, #0
 8005318:	2200      	movs	r2, #0
 800531a:	f7fe fc6f 	bl	8003bfc <xQueueGenericSend>
 800531e:	6278      	str	r0, [r7, #36]	; 0x24
 8005320:	e008      	b.n	8005334 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005322:	4b07      	ldr	r3, [pc, #28]	; (8005340 <xTimerGenericCommand+0x98>)
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	f107 0110 	add.w	r1, r7, #16
 800532a:	2300      	movs	r3, #0
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	f7fe fd63 	bl	8003df8 <xQueueGenericSendFromISR>
 8005332:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005336:	4618      	mov	r0, r3
 8005338:	3728      	adds	r7, #40	; 0x28
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20001a7c 	.word	0x20001a7c

08005344 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af02      	add	r7, sp, #8
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800534e:	4b1c      	ldr	r3, [pc, #112]	; (80053c0 <prvProcessExpiredTimer+0x7c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	3304      	adds	r3, #4
 800535c:	4618      	mov	r0, r3
 800535e:	f7fe f8d1 	bl	8003504 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d122      	bne.n	80053b0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	18d1      	adds	r1, r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	6978      	ldr	r0, [r7, #20]
 8005378:	f000 f8c8 	bl	800550c <prvInsertTimerInActiveList>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d016      	beq.n	80053b0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005382:	2300      	movs	r3, #0
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	2300      	movs	r3, #0
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	2100      	movs	r1, #0
 800538c:	6978      	ldr	r0, [r7, #20]
 800538e:	f7ff ff8b 	bl	80052a8 <xTimerGenericCommand>
 8005392:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10a      	bne.n	80053b0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	60fb      	str	r3, [r7, #12]
}
 80053ac:	bf00      	nop
 80053ae:	e7fe      	b.n	80053ae <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	6978      	ldr	r0, [r7, #20]
 80053b6:	4798      	blx	r3
}
 80053b8:	bf00      	nop
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20001a74 	.word	0x20001a74

080053c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053cc:	f107 0308 	add.w	r3, r7, #8
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 f857 	bl	8005484 <prvGetNextExpireTime>
 80053d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4619      	mov	r1, r3
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f803 	bl	80053e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80053e2:	f000 f8d5 	bl	8005590 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053e6:	e7f1      	b.n	80053cc <prvTimerTask+0x8>

080053e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80053f2:	f7ff fa3b 	bl	800486c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053f6:	f107 0308 	add.w	r3, r7, #8
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 f866 	bl	80054cc <prvSampleTimeNow>
 8005400:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d130      	bne.n	800546a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <prvProcessTimerOrBlockTask+0x3c>
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	429a      	cmp	r2, r3
 8005414:	d806      	bhi.n	8005424 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005416:	f7ff fa37 	bl	8004888 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff ff91 	bl	8005344 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005422:	e024      	b.n	800546e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d008      	beq.n	800543c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800542a:	4b13      	ldr	r3, [pc, #76]	; (8005478 <prvProcessTimerOrBlockTask+0x90>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	bf0c      	ite	eq
 8005434:	2301      	moveq	r3, #1
 8005436:	2300      	movne	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800543c:	4b0f      	ldr	r3, [pc, #60]	; (800547c <prvProcessTimerOrBlockTask+0x94>)
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	4619      	mov	r1, r3
 800544a:	f7fe ff87 	bl	800435c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800544e:	f7ff fa1b 	bl	8004888 <xTaskResumeAll>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005458:	4b09      	ldr	r3, [pc, #36]	; (8005480 <prvProcessTimerOrBlockTask+0x98>)
 800545a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	f3bf 8f6f 	isb	sy
}
 8005468:	e001      	b.n	800546e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800546a:	f7ff fa0d 	bl	8004888 <xTaskResumeAll>
}
 800546e:	bf00      	nop
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20001a78 	.word	0x20001a78
 800547c:	20001a7c 	.word	0x20001a7c
 8005480:	e000ed04 	.word	0xe000ed04

08005484 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800548c:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <prvGetNextExpireTime+0x44>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf0c      	ite	eq
 8005496:	2301      	moveq	r3, #1
 8005498:	2300      	movne	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d105      	bne.n	80054b6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054aa:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <prvGetNextExpireTime+0x44>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	e001      	b.n	80054ba <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80054ba:	68fb      	ldr	r3, [r7, #12]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	20001a74 	.word	0x20001a74

080054cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80054d4:	f7ff fa76 	bl	80049c4 <xTaskGetTickCount>
 80054d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80054da:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <prvSampleTimeNow+0x3c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d205      	bcs.n	80054f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80054e4:	f000 f908 	bl	80056f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e002      	b.n	80054f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80054f6:	4a04      	ldr	r2, [pc, #16]	; (8005508 <prvSampleTimeNow+0x3c>)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80054fc:	68fb      	ldr	r3, [r7, #12]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20001a84 	.word	0x20001a84

0800550c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	429a      	cmp	r2, r3
 8005530:	d812      	bhi.n	8005558 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	1ad2      	subs	r2, r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	429a      	cmp	r2, r3
 800553e:	d302      	bcc.n	8005546 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005540:	2301      	movs	r3, #1
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e01b      	b.n	800557e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005546:	4b10      	ldr	r3, [pc, #64]	; (8005588 <prvInsertTimerInActiveList+0x7c>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3304      	adds	r3, #4
 800554e:	4619      	mov	r1, r3
 8005550:	4610      	mov	r0, r2
 8005552:	f7fd ff9e 	bl	8003492 <vListInsert>
 8005556:	e012      	b.n	800557e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d206      	bcs.n	800556e <prvInsertTimerInActiveList+0x62>
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d302      	bcc.n	800556e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005568:	2301      	movs	r3, #1
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	e007      	b.n	800557e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800556e:	4b07      	ldr	r3, [pc, #28]	; (800558c <prvInsertTimerInActiveList+0x80>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3304      	adds	r3, #4
 8005576:	4619      	mov	r1, r3
 8005578:	4610      	mov	r0, r2
 800557a:	f7fd ff8a 	bl	8003492 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800557e:	697b      	ldr	r3, [r7, #20]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20001a78 	.word	0x20001a78
 800558c:	20001a74 	.word	0x20001a74

08005590 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08e      	sub	sp, #56	; 0x38
 8005594:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005596:	e09d      	b.n	80056d4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	da18      	bge.n	80055d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800559e:	1d3b      	adds	r3, r7, #4
 80055a0:	3304      	adds	r3, #4
 80055a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80055a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10a      	bne.n	80055c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	61fb      	str	r3, [r7, #28]
}
 80055bc:	bf00      	nop
 80055be:	e7fe      	b.n	80055be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055c6:	6850      	ldr	r0, [r2, #4]
 80055c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ca:	6892      	ldr	r2, [r2, #8]
 80055cc:	4611      	mov	r1, r2
 80055ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	db7d      	blt.n	80056d2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d004      	beq.n	80055ec <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	3304      	adds	r3, #4
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fd ff8c 	bl	8003504 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055ec:	463b      	mov	r3, r7
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff ff6c 	bl	80054cc <prvSampleTimeNow>
 80055f4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b09      	cmp	r3, #9
 80055fa:	d86b      	bhi.n	80056d4 <prvProcessReceivedCommands+0x144>
 80055fc:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <prvProcessReceivedCommands+0x74>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	0800562d 	.word	0x0800562d
 8005608:	0800562d 	.word	0x0800562d
 800560c:	0800562d 	.word	0x0800562d
 8005610:	080056d5 	.word	0x080056d5
 8005614:	08005689 	.word	0x08005689
 8005618:	080056c1 	.word	0x080056c1
 800561c:	0800562d 	.word	0x0800562d
 8005620:	0800562d 	.word	0x0800562d
 8005624:	080056d5 	.word	0x080056d5
 8005628:	08005689 	.word	0x08005689
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	18d1      	adds	r1, r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800563a:	f7ff ff67 	bl	800550c <prvInsertTimerInActiveList>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d047      	beq.n	80056d4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800564a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d13f      	bne.n	80056d4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	441a      	add	r2, r3
 800565c:	2300      	movs	r3, #0
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	2300      	movs	r3, #0
 8005662:	2100      	movs	r1, #0
 8005664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005666:	f7ff fe1f 	bl	80052a8 <xTimerGenericCommand>
 800566a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d130      	bne.n	80056d4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	61bb      	str	r3, [r7, #24]
}
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10a      	bne.n	80056ac <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	617b      	str	r3, [r7, #20]
}
 80056a8:	bf00      	nop
 80056aa:	e7fe      	b.n	80056aa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	699a      	ldr	r2, [r3, #24]
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	18d1      	adds	r1, r2, r3
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ba:	f7ff ff27 	bl	800550c <prvInsertTimerInActiveList>
					break;
 80056be:	e009      	b.n	80056d4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d104      	bne.n	80056d4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80056ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056cc:	f7fd fd7a 	bl	80031c4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80056d0:	e000      	b.n	80056d4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80056d2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056d4:	4b07      	ldr	r3, [pc, #28]	; (80056f4 <prvProcessReceivedCommands+0x164>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	1d39      	adds	r1, r7, #4
 80056da:	2200      	movs	r2, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fe fc23 	bl	8003f28 <xQueueReceive>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f47f af57 	bne.w	8005598 <prvProcessReceivedCommands+0x8>
	}
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	3730      	adds	r7, #48	; 0x30
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20001a7c 	.word	0x20001a7c

080056f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056fe:	e045      	b.n	800578c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005700:	4b2c      	ldr	r3, [pc, #176]	; (80057b4 <prvSwitchTimerLists+0xbc>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800570a:	4b2a      	ldr	r3, [pc, #168]	; (80057b4 <prvSwitchTimerLists+0xbc>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3304      	adds	r3, #4
 8005718:	4618      	mov	r0, r3
 800571a:	f7fd fef3 	bl	8003504 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d12e      	bne.n	800578c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4413      	add	r3, r2
 8005736:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	429a      	cmp	r2, r3
 800573e:	d90e      	bls.n	800575e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800574c:	4b19      	ldr	r3, [pc, #100]	; (80057b4 <prvSwitchTimerLists+0xbc>)
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	3304      	adds	r3, #4
 8005754:	4619      	mov	r1, r3
 8005756:	4610      	mov	r0, r2
 8005758:	f7fd fe9b 	bl	8003492 <vListInsert>
 800575c:	e016      	b.n	800578c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800575e:	2300      	movs	r3, #0
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	2300      	movs	r3, #0
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	2100      	movs	r1, #0
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f7ff fd9d 	bl	80052a8 <xTimerGenericCommand>
 800576e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10a      	bne.n	800578c <prvSwitchTimerLists+0x94>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	603b      	str	r3, [r7, #0]
}
 8005788:	bf00      	nop
 800578a:	e7fe      	b.n	800578a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <prvSwitchTimerLists+0xbc>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1b4      	bne.n	8005700 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005796:	4b07      	ldr	r3, [pc, #28]	; (80057b4 <prvSwitchTimerLists+0xbc>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <prvSwitchTimerLists+0xc0>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <prvSwitchTimerLists+0xbc>)
 80057a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80057a4:	4a04      	ldr	r2, [pc, #16]	; (80057b8 <prvSwitchTimerLists+0xc0>)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	6013      	str	r3, [r2, #0]
}
 80057aa:	bf00      	nop
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20001a74 	.word	0x20001a74
 80057b8:	20001a78 	.word	0x20001a78

080057bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80057c2:	f7fd fff7 	bl	80037b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80057c6:	4b15      	ldr	r3, [pc, #84]	; (800581c <prvCheckForValidListAndQueue+0x60>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d120      	bne.n	8005810 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80057ce:	4814      	ldr	r0, [pc, #80]	; (8005820 <prvCheckForValidListAndQueue+0x64>)
 80057d0:	f7fd fe0e 	bl	80033f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80057d4:	4813      	ldr	r0, [pc, #76]	; (8005824 <prvCheckForValidListAndQueue+0x68>)
 80057d6:	f7fd fe0b 	bl	80033f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80057da:	4b13      	ldr	r3, [pc, #76]	; (8005828 <prvCheckForValidListAndQueue+0x6c>)
 80057dc:	4a10      	ldr	r2, [pc, #64]	; (8005820 <prvCheckForValidListAndQueue+0x64>)
 80057de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80057e0:	4b12      	ldr	r3, [pc, #72]	; (800582c <prvCheckForValidListAndQueue+0x70>)
 80057e2:	4a10      	ldr	r2, [pc, #64]	; (8005824 <prvCheckForValidListAndQueue+0x68>)
 80057e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80057e6:	2300      	movs	r3, #0
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	4b11      	ldr	r3, [pc, #68]	; (8005830 <prvCheckForValidListAndQueue+0x74>)
 80057ec:	4a11      	ldr	r2, [pc, #68]	; (8005834 <prvCheckForValidListAndQueue+0x78>)
 80057ee:	2110      	movs	r1, #16
 80057f0:	200a      	movs	r0, #10
 80057f2:	f7fe f969 	bl	8003ac8 <xQueueGenericCreateStatic>
 80057f6:	4603      	mov	r3, r0
 80057f8:	4a08      	ldr	r2, [pc, #32]	; (800581c <prvCheckForValidListAndQueue+0x60>)
 80057fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80057fc:	4b07      	ldr	r3, [pc, #28]	; (800581c <prvCheckForValidListAndQueue+0x60>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <prvCheckForValidListAndQueue+0x60>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	490b      	ldr	r1, [pc, #44]	; (8005838 <prvCheckForValidListAndQueue+0x7c>)
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe fd7c 	bl	8004308 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005810:	f7fe f800 	bl	8003814 <vPortExitCritical>
}
 8005814:	bf00      	nop
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20001a7c 	.word	0x20001a7c
 8005820:	20001a4c 	.word	0x20001a4c
 8005824:	20001a60 	.word	0x20001a60
 8005828:	20001a74 	.word	0x20001a74
 800582c:	20001a78 	.word	0x20001a78
 8005830:	20001b28 	.word	0x20001b28
 8005834:	20001a88 	.word	0x20001a88
 8005838:	08005a84 	.word	0x08005a84

0800583c <__libc_init_array>:
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	4d0d      	ldr	r5, [pc, #52]	; (8005874 <__libc_init_array+0x38>)
 8005840:	4c0d      	ldr	r4, [pc, #52]	; (8005878 <__libc_init_array+0x3c>)
 8005842:	1b64      	subs	r4, r4, r5
 8005844:	10a4      	asrs	r4, r4, #2
 8005846:	2600      	movs	r6, #0
 8005848:	42a6      	cmp	r6, r4
 800584a:	d109      	bne.n	8005860 <__libc_init_array+0x24>
 800584c:	4d0b      	ldr	r5, [pc, #44]	; (800587c <__libc_init_array+0x40>)
 800584e:	4c0c      	ldr	r4, [pc, #48]	; (8005880 <__libc_init_array+0x44>)
 8005850:	f000 f8f2 	bl	8005a38 <_init>
 8005854:	1b64      	subs	r4, r4, r5
 8005856:	10a4      	asrs	r4, r4, #2
 8005858:	2600      	movs	r6, #0
 800585a:	42a6      	cmp	r6, r4
 800585c:	d105      	bne.n	800586a <__libc_init_array+0x2e>
 800585e:	bd70      	pop	{r4, r5, r6, pc}
 8005860:	f855 3b04 	ldr.w	r3, [r5], #4
 8005864:	4798      	blx	r3
 8005866:	3601      	adds	r6, #1
 8005868:	e7ee      	b.n	8005848 <__libc_init_array+0xc>
 800586a:	f855 3b04 	ldr.w	r3, [r5], #4
 800586e:	4798      	blx	r3
 8005870:	3601      	adds	r6, #1
 8005872:	e7f2      	b.n	800585a <__libc_init_array+0x1e>
 8005874:	08005b90 	.word	0x08005b90
 8005878:	08005b90 	.word	0x08005b90
 800587c:	08005b90 	.word	0x08005b90
 8005880:	08005b94 	.word	0x08005b94

08005884 <__retarget_lock_acquire_recursive>:
 8005884:	4770      	bx	lr

08005886 <__retarget_lock_release_recursive>:
 8005886:	4770      	bx	lr

08005888 <memcpy>:
 8005888:	440a      	add	r2, r1
 800588a:	4291      	cmp	r1, r2
 800588c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005890:	d100      	bne.n	8005894 <memcpy+0xc>
 8005892:	4770      	bx	lr
 8005894:	b510      	push	{r4, lr}
 8005896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800589a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800589e:	4291      	cmp	r1, r2
 80058a0:	d1f9      	bne.n	8005896 <memcpy+0xe>
 80058a2:	bd10      	pop	{r4, pc}

080058a4 <memset>:
 80058a4:	4402      	add	r2, r0
 80058a6:	4603      	mov	r3, r0
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d100      	bne.n	80058ae <memset+0xa>
 80058ac:	4770      	bx	lr
 80058ae:	f803 1b01 	strb.w	r1, [r3], #1
 80058b2:	e7f9      	b.n	80058a8 <memset+0x4>

080058b4 <cleanup_glue>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	460c      	mov	r4, r1
 80058b8:	6809      	ldr	r1, [r1, #0]
 80058ba:	4605      	mov	r5, r0
 80058bc:	b109      	cbz	r1, 80058c2 <cleanup_glue+0xe>
 80058be:	f7ff fff9 	bl	80058b4 <cleanup_glue>
 80058c2:	4621      	mov	r1, r4
 80058c4:	4628      	mov	r0, r5
 80058c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058ca:	f000 b869 	b.w	80059a0 <_free_r>
	...

080058d0 <_reclaim_reent>:
 80058d0:	4b2c      	ldr	r3, [pc, #176]	; (8005984 <_reclaim_reent+0xb4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4283      	cmp	r3, r0
 80058d6:	b570      	push	{r4, r5, r6, lr}
 80058d8:	4604      	mov	r4, r0
 80058da:	d051      	beq.n	8005980 <_reclaim_reent+0xb0>
 80058dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80058de:	b143      	cbz	r3, 80058f2 <_reclaim_reent+0x22>
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d14a      	bne.n	800597c <_reclaim_reent+0xac>
 80058e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058e8:	6819      	ldr	r1, [r3, #0]
 80058ea:	b111      	cbz	r1, 80058f2 <_reclaim_reent+0x22>
 80058ec:	4620      	mov	r0, r4
 80058ee:	f000 f857 	bl	80059a0 <_free_r>
 80058f2:	6961      	ldr	r1, [r4, #20]
 80058f4:	b111      	cbz	r1, 80058fc <_reclaim_reent+0x2c>
 80058f6:	4620      	mov	r0, r4
 80058f8:	f000 f852 	bl	80059a0 <_free_r>
 80058fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80058fe:	b111      	cbz	r1, 8005906 <_reclaim_reent+0x36>
 8005900:	4620      	mov	r0, r4
 8005902:	f000 f84d 	bl	80059a0 <_free_r>
 8005906:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005908:	b111      	cbz	r1, 8005910 <_reclaim_reent+0x40>
 800590a:	4620      	mov	r0, r4
 800590c:	f000 f848 	bl	80059a0 <_free_r>
 8005910:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005912:	b111      	cbz	r1, 800591a <_reclaim_reent+0x4a>
 8005914:	4620      	mov	r0, r4
 8005916:	f000 f843 	bl	80059a0 <_free_r>
 800591a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800591c:	b111      	cbz	r1, 8005924 <_reclaim_reent+0x54>
 800591e:	4620      	mov	r0, r4
 8005920:	f000 f83e 	bl	80059a0 <_free_r>
 8005924:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005926:	b111      	cbz	r1, 800592e <_reclaim_reent+0x5e>
 8005928:	4620      	mov	r0, r4
 800592a:	f000 f839 	bl	80059a0 <_free_r>
 800592e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005930:	b111      	cbz	r1, 8005938 <_reclaim_reent+0x68>
 8005932:	4620      	mov	r0, r4
 8005934:	f000 f834 	bl	80059a0 <_free_r>
 8005938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800593a:	b111      	cbz	r1, 8005942 <_reclaim_reent+0x72>
 800593c:	4620      	mov	r0, r4
 800593e:	f000 f82f 	bl	80059a0 <_free_r>
 8005942:	69a3      	ldr	r3, [r4, #24]
 8005944:	b1e3      	cbz	r3, 8005980 <_reclaim_reent+0xb0>
 8005946:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005948:	4620      	mov	r0, r4
 800594a:	4798      	blx	r3
 800594c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800594e:	b1b9      	cbz	r1, 8005980 <_reclaim_reent+0xb0>
 8005950:	4620      	mov	r0, r4
 8005952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005956:	f7ff bfad 	b.w	80058b4 <cleanup_glue>
 800595a:	5949      	ldr	r1, [r1, r5]
 800595c:	b941      	cbnz	r1, 8005970 <_reclaim_reent+0xa0>
 800595e:	3504      	adds	r5, #4
 8005960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005962:	2d80      	cmp	r5, #128	; 0x80
 8005964:	68d9      	ldr	r1, [r3, #12]
 8005966:	d1f8      	bne.n	800595a <_reclaim_reent+0x8a>
 8005968:	4620      	mov	r0, r4
 800596a:	f000 f819 	bl	80059a0 <_free_r>
 800596e:	e7ba      	b.n	80058e6 <_reclaim_reent+0x16>
 8005970:	680e      	ldr	r6, [r1, #0]
 8005972:	4620      	mov	r0, r4
 8005974:	f000 f814 	bl	80059a0 <_free_r>
 8005978:	4631      	mov	r1, r6
 800597a:	e7ef      	b.n	800595c <_reclaim_reent+0x8c>
 800597c:	2500      	movs	r5, #0
 800597e:	e7ef      	b.n	8005960 <_reclaim_reent+0x90>
 8005980:	bd70      	pop	{r4, r5, r6, pc}
 8005982:	bf00      	nop
 8005984:	20000010 	.word	0x20000010

08005988 <__malloc_lock>:
 8005988:	4801      	ldr	r0, [pc, #4]	; (8005990 <__malloc_lock+0x8>)
 800598a:	f7ff bf7b 	b.w	8005884 <__retarget_lock_acquire_recursive>
 800598e:	bf00      	nop
 8005990:	20001b78 	.word	0x20001b78

08005994 <__malloc_unlock>:
 8005994:	4801      	ldr	r0, [pc, #4]	; (800599c <__malloc_unlock+0x8>)
 8005996:	f7ff bf76 	b.w	8005886 <__retarget_lock_release_recursive>
 800599a:	bf00      	nop
 800599c:	20001b78 	.word	0x20001b78

080059a0 <_free_r>:
 80059a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059a2:	2900      	cmp	r1, #0
 80059a4:	d044      	beq.n	8005a30 <_free_r+0x90>
 80059a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059aa:	9001      	str	r0, [sp, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f1a1 0404 	sub.w	r4, r1, #4
 80059b2:	bfb8      	it	lt
 80059b4:	18e4      	addlt	r4, r4, r3
 80059b6:	f7ff ffe7 	bl	8005988 <__malloc_lock>
 80059ba:	4a1e      	ldr	r2, [pc, #120]	; (8005a34 <_free_r+0x94>)
 80059bc:	9801      	ldr	r0, [sp, #4]
 80059be:	6813      	ldr	r3, [r2, #0]
 80059c0:	b933      	cbnz	r3, 80059d0 <_free_r+0x30>
 80059c2:	6063      	str	r3, [r4, #4]
 80059c4:	6014      	str	r4, [r2, #0]
 80059c6:	b003      	add	sp, #12
 80059c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059cc:	f7ff bfe2 	b.w	8005994 <__malloc_unlock>
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	d908      	bls.n	80059e6 <_free_r+0x46>
 80059d4:	6825      	ldr	r5, [r4, #0]
 80059d6:	1961      	adds	r1, r4, r5
 80059d8:	428b      	cmp	r3, r1
 80059da:	bf01      	itttt	eq
 80059dc:	6819      	ldreq	r1, [r3, #0]
 80059de:	685b      	ldreq	r3, [r3, #4]
 80059e0:	1949      	addeq	r1, r1, r5
 80059e2:	6021      	streq	r1, [r4, #0]
 80059e4:	e7ed      	b.n	80059c2 <_free_r+0x22>
 80059e6:	461a      	mov	r2, r3
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	b10b      	cbz	r3, 80059f0 <_free_r+0x50>
 80059ec:	42a3      	cmp	r3, r4
 80059ee:	d9fa      	bls.n	80059e6 <_free_r+0x46>
 80059f0:	6811      	ldr	r1, [r2, #0]
 80059f2:	1855      	adds	r5, r2, r1
 80059f4:	42a5      	cmp	r5, r4
 80059f6:	d10b      	bne.n	8005a10 <_free_r+0x70>
 80059f8:	6824      	ldr	r4, [r4, #0]
 80059fa:	4421      	add	r1, r4
 80059fc:	1854      	adds	r4, r2, r1
 80059fe:	42a3      	cmp	r3, r4
 8005a00:	6011      	str	r1, [r2, #0]
 8005a02:	d1e0      	bne.n	80059c6 <_free_r+0x26>
 8005a04:	681c      	ldr	r4, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	6053      	str	r3, [r2, #4]
 8005a0a:	4421      	add	r1, r4
 8005a0c:	6011      	str	r1, [r2, #0]
 8005a0e:	e7da      	b.n	80059c6 <_free_r+0x26>
 8005a10:	d902      	bls.n	8005a18 <_free_r+0x78>
 8005a12:	230c      	movs	r3, #12
 8005a14:	6003      	str	r3, [r0, #0]
 8005a16:	e7d6      	b.n	80059c6 <_free_r+0x26>
 8005a18:	6825      	ldr	r5, [r4, #0]
 8005a1a:	1961      	adds	r1, r4, r5
 8005a1c:	428b      	cmp	r3, r1
 8005a1e:	bf04      	itt	eq
 8005a20:	6819      	ldreq	r1, [r3, #0]
 8005a22:	685b      	ldreq	r3, [r3, #4]
 8005a24:	6063      	str	r3, [r4, #4]
 8005a26:	bf04      	itt	eq
 8005a28:	1949      	addeq	r1, r1, r5
 8005a2a:	6021      	streq	r1, [r4, #0]
 8005a2c:	6054      	str	r4, [r2, #4]
 8005a2e:	e7ca      	b.n	80059c6 <_free_r+0x26>
 8005a30:	b003      	add	sp, #12
 8005a32:	bd30      	pop	{r4, r5, pc}
 8005a34:	20001b7c 	.word	0x20001b7c

08005a38 <_init>:
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3a:	bf00      	nop
 8005a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3e:	bc08      	pop	{r3}
 8005a40:	469e      	mov	lr, r3
 8005a42:	4770      	bx	lr

08005a44 <_fini>:
 8005a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a46:	bf00      	nop
 8005a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a4a:	bc08      	pop	{r3}
 8005a4c:	469e      	mov	lr, r3
 8005a4e:	4770      	bx	lr
