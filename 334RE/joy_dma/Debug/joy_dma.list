
joy_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005378  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005508  08005508  00015508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055ec  080055ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080055ec  080055ec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055ec  080055ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055ec  080055ec  000155ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080055f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001b0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011239  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002161  00000000  00000000  000312d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  00033440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e58  00000000  00000000  00034370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bc0  00000000  00000000  000351c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f25  00000000  00000000  00056d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbc0f  00000000  00000000  00069cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001358bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004814  00000000  00000000  0013590c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054f0 	.word	0x080054f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080054f0 	.word	0x080054f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__io_putchar>:
* @brief Retargets the C library printf function to the USART.
* @param None
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART1 and Loop until the end of transmission */
if (ch == '\n')
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b0a      	cmp	r3, #10
 800027c:	d106      	bne.n	800028c <__io_putchar+0x1c>
HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800027e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000282:	2201      	movs	r2, #1
 8000284:	4907      	ldr	r1, [pc, #28]	; (80002a4 <__io_putchar+0x34>)
 8000286:	4808      	ldr	r0, [pc, #32]	; (80002a8 <__io_putchar+0x38>)
 8000288:	f003 fdf8 	bl	8003e7c <HAL_UART_Transmit>
HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800028c:	1d39      	adds	r1, r7, #4
 800028e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000292:	2201      	movs	r2, #1
 8000294:	4804      	ldr	r0, [pc, #16]	; (80002a8 <__io_putchar+0x38>)
 8000296:	f003 fdf1 	bl	8003e7c <HAL_UART_Transmit>
return ch;
 800029a:	687b      	ldr	r3, [r7, #4]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	08005508 	.word	0x08005508
 80002a8:	20000184 	.word	0x20000184

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 fc5e 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f81a 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f000 f986 	bl	80005c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80002bc:	f000 f966 	bl	800058c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80002c0:	f000 f934 	bl	800052c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80002c4:	f000 f854 	bl	8000370 <MX_ADC1_Init>
  MX_TIM3_Init();
 80002c8:	f000 f8e0 	bl	800048c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80002cc:	4804      	ldr	r0, [pc, #16]	; (80002e0 <main+0x34>)
 80002ce:	f003 fae9 	bl	80038a4 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AC, 3);
 80002d2:	2203      	movs	r2, #3
 80002d4:	4903      	ldr	r1, [pc, #12]	; (80002e4 <main+0x38>)
 80002d6:	4804      	ldr	r0, [pc, #16]	; (80002e8 <main+0x3c>)
 80002d8:	f000 fe56 	bl	8000f88 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002dc:	e7fe      	b.n	80002dc <main+0x30>
 80002de:	bf00      	nop
 80002e0:	20000138 	.word	0x20000138
 80002e4:	2000008c 	.word	0x2000008c
 80002e8:	200000a4 	.word	0x200000a4

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b090      	sub	sp, #64	; 0x40
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	2228      	movs	r2, #40	; 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f004 f962 	bl	80045c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030e:	2302      	movs	r3, #2
 8000310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000312:	2301      	movs	r3, #1
 8000314:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000316:	2310      	movs	r3, #16
 8000318:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031a:	2302      	movs	r3, #2
 800031c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800031e:	2300      	movs	r3, #0
 8000320:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000322:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000326:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000328:	f107 0318 	add.w	r3, r7, #24
 800032c:	4618      	mov	r0, r3
 800032e:	f001 ffed 	bl	800230c <HAL_RCC_OscConfig>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000338:	f000 f9f8 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033c:	230f      	movs	r3, #15
 800033e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000340:	2302      	movs	r3, #2
 8000342:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800034c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2102      	movs	r1, #2
 8000356:	4618      	mov	r0, r3
 8000358:	f003 f816 	bl	8003388 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000362:	f000 f9e3 	bl	800072c <Error_Handler>
  }
}
 8000366:	bf00      	nop
 8000368:	3740      	adds	r7, #64	; 0x40
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b08a      	sub	sp, #40	; 0x28
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000376:	f107 031c 	add.w	r3, r7, #28
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
 800038e:	611a      	str	r2, [r3, #16]
 8000390:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000392:	4b3d      	ldr	r3, [pc, #244]	; (8000488 <MX_ADC1_Init+0x118>)
 8000394:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000398:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800039a:	4b3b      	ldr	r3, [pc, #236]	; (8000488 <MX_ADC1_Init+0x118>)
 800039c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80003a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003a2:	4b39      	ldr	r3, [pc, #228]	; (8000488 <MX_ADC1_Init+0x118>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003a8:	4b37      	ldr	r3, [pc, #220]	; (8000488 <MX_ADC1_Init+0x118>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003ae:	4b36      	ldr	r3, [pc, #216]	; (8000488 <MX_ADC1_Init+0x118>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003b4:	4b34      	ldr	r3, [pc, #208]	; (8000488 <MX_ADC1_Init+0x118>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80003bc:	4b32      	ldr	r3, [pc, #200]	; (8000488 <MX_ADC1_Init+0x118>)
 80003be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80003c4:	4b30      	ldr	r3, [pc, #192]	; (8000488 <MX_ADC1_Init+0x118>)
 80003c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003cc:	4b2e      	ldr	r3, [pc, #184]	; (8000488 <MX_ADC1_Init+0x118>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80003d2:	4b2d      	ldr	r3, [pc, #180]	; (8000488 <MX_ADC1_Init+0x118>)
 80003d4:	2203      	movs	r2, #3
 80003d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80003d8:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <MX_ADC1_Init+0x118>)
 80003da:	2201      	movs	r2, #1
 80003dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003e0:	4b29      	ldr	r3, [pc, #164]	; (8000488 <MX_ADC1_Init+0x118>)
 80003e2:	2204      	movs	r2, #4
 80003e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003e6:	4b28      	ldr	r3, [pc, #160]	; (8000488 <MX_ADC1_Init+0x118>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003ec:	4b26      	ldr	r3, [pc, #152]	; (8000488 <MX_ADC1_Init+0x118>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003f2:	4825      	ldr	r0, [pc, #148]	; (8000488 <MX_ADC1_Init+0x118>)
 80003f4:	f000 fc36 	bl	8000c64 <HAL_ADC_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80003fe:	f000 f995 	bl	800072c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000402:	2300      	movs	r3, #0
 8000404:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000406:	f107 031c 	add.w	r3, r7, #28
 800040a:	4619      	mov	r1, r3
 800040c:	481e      	ldr	r0, [pc, #120]	; (8000488 <MX_ADC1_Init+0x118>)
 800040e:	f001 f955 	bl	80016bc <HAL_ADCEx_MultiModeConfigChannel>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000418:	f000 f988 	bl	800072c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800041c:	2301      	movs	r3, #1
 800041e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000420:	2301      	movs	r3, #1
 8000422:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000424:	2300      	movs	r3, #0
 8000426:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000428:	2305      	movs	r3, #5
 800042a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4619      	mov	r1, r3
 8000438:	4813      	ldr	r0, [pc, #76]	; (8000488 <MX_ADC1_Init+0x118>)
 800043a:	f000 fe7f 	bl	800113c <HAL_ADC_ConfigChannel>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000444:	f000 f972 	bl	800072c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000448:	2306      	movs	r3, #6
 800044a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800044c:	2302      	movs	r3, #2
 800044e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	4619      	mov	r1, r3
 8000454:	480c      	ldr	r0, [pc, #48]	; (8000488 <MX_ADC1_Init+0x118>)
 8000456:	f000 fe71 	bl	800113c <HAL_ADC_ConfigChannel>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000460:	f000 f964 	bl	800072c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000464:	2307      	movs	r3, #7
 8000466:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000468:	2303      	movs	r3, #3
 800046a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	4619      	mov	r1, r3
 8000470:	4805      	ldr	r0, [pc, #20]	; (8000488 <MX_ADC1_Init+0x118>)
 8000472:	f000 fe63 	bl	800113c <HAL_ADC_ConfigChannel>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 800047c:	f000 f956 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000480:	bf00      	nop
 8000482:	3728      	adds	r7, #40	; 0x28
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200000a4 	.word	0x200000a4

0800048c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004aa:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <MX_TIM3_Init+0x98>)
 80004ac:	4a1e      	ldr	r2, [pc, #120]	; (8000528 <MX_TIM3_Init+0x9c>)
 80004ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6799;
 80004b0:	4b1c      	ldr	r3, [pc, #112]	; (8000524 <MX_TIM3_Init+0x98>)
 80004b2:	f641 228f 	movw	r2, #6799	; 0x1a8f
 80004b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b8:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <MX_TIM3_Init+0x98>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80004be:	4b19      	ldr	r3, [pc, #100]	; (8000524 <MX_TIM3_Init+0x98>)
 80004c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c6:	4b17      	ldr	r3, [pc, #92]	; (8000524 <MX_TIM3_Init+0x98>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <MX_TIM3_Init+0x98>)
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004d2:	4814      	ldr	r0, [pc, #80]	; (8000524 <MX_TIM3_Init+0x98>)
 80004d4:	f003 f98e 	bl	80037f4 <HAL_TIM_Base_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80004de:	f000 f925 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	480d      	ldr	r0, [pc, #52]	; (8000524 <MX_TIM3_Init+0x98>)
 80004f0:	f003 fa2c 	bl	800394c <HAL_TIM_ConfigClockSource>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80004fa:	f000 f917 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80004fe:	2320      	movs	r3, #32
 8000500:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	4619      	mov	r1, r3
 800050a:	4806      	ldr	r0, [pc, #24]	; (8000524 <MX_TIM3_Init+0x98>)
 800050c:	f003 fbfa 	bl	8003d04 <HAL_TIMEx_MasterConfigSynchronization>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000516:	f000 f909 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	3720      	adds	r7, #32
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000138 	.word	0x20000138
 8000528:	40000400 	.word	0x40000400

0800052c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000532:	4a15      	ldr	r2, [pc, #84]	; (8000588 <MX_USART2_UART_Init+0x5c>)
 8000534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000538:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800053c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_USART2_UART_Init+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000552:	220c      	movs	r2, #12
 8000554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_USART2_UART_Init+0x58>)
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_USART2_UART_Init+0x58>)
 800056a:	2200      	movs	r2, #0
 800056c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000570:	f003 fc36 	bl	8003de0 <HAL_UART_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800057a:	f000 f8d7 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000184 	.word	0x20000184
 8000588:	40004400 	.word	0x40004400

0800058c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MX_DMA_Init+0x38>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <MX_DMA_Init+0x38>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MX_DMA_Init+0x38>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2100      	movs	r1, #0
 80005ae:	200b      	movs	r0, #11
 80005b0:	f001 fb55 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005b4:	200b      	movs	r0, #11
 80005b6:	f001 fb6e 	bl	8001c96 <HAL_NVIC_EnableIRQ>

}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <MX_GPIO_Init+0xc4>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a2a      	ldr	r2, [pc, #168]	; (800068c <MX_GPIO_Init+0xc4>)
 80005e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b28      	ldr	r3, [pc, #160]	; (800068c <MX_GPIO_Init+0xc4>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005f6:	4b25      	ldr	r3, [pc, #148]	; (800068c <MX_GPIO_Init+0xc4>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a24      	ldr	r2, [pc, #144]	; (800068c <MX_GPIO_Init+0xc4>)
 80005fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	4b22      	ldr	r3, [pc, #136]	; (800068c <MX_GPIO_Init+0xc4>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b1f      	ldr	r3, [pc, #124]	; (800068c <MX_GPIO_Init+0xc4>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a1e      	ldr	r2, [pc, #120]	; (800068c <MX_GPIO_Init+0xc4>)
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b1c      	ldr	r3, [pc, #112]	; (800068c <MX_GPIO_Init+0xc4>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <MX_GPIO_Init+0xc4>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a18      	ldr	r2, [pc, #96]	; (800068c <MX_GPIO_Init+0xc4>)
 800062c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_GPIO_Init+0xc4>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2120      	movs	r1, #32
 8000642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000646:	f001 fe49 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800064a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000650:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <MX_GPIO_Init+0xc8>)
 8000662:	f001 fcc9 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000666:	2320      	movs	r3, #32
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000680:	f001 fcba 	bl	8001ff8 <HAL_GPIO_Init>

}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	; 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000
 8000690:	48000800 	.word	0x48000800

08000694 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

	newTick = HAL_GetTick();
 800069c:	f000 fac2 	bl	8000c24 <HAL_GetTick>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a1a      	ldr	r2, [pc, #104]	; (800070c <HAL_ADC_ConvCpltCallback+0x78>)
 80006a4:	6013      	str	r3, [r2, #0]
	gapTick = newTick - oldTick;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <HAL_ADC_ConvCpltCallback+0x78>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <HAL_ADC_ConvCpltCallback+0x7c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	4a18      	ldr	r2, [pc, #96]	; (8000714 <HAL_ADC_ConvCpltCallback+0x80>)
 80006b2:	6013      	str	r3, [r2, #0]
	oldTick = newTick;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <HAL_ADC_ConvCpltCallback+0x78>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a15      	ldr	r2, [pc, #84]	; (8000710 <HAL_ADC_ConvCpltCallback+0x7c>)
 80006ba:	6013      	str	r3, [r2, #0]

	x = AC[0];
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <HAL_ADC_ConvCpltCallback+0x84>)
 80006be:	881a      	ldrh	r2, [r3, #0]
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_ADC_ConvCpltCallback+0x88>)
 80006c2:	801a      	strh	r2, [r3, #0]
	y = AC[1];
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <HAL_ADC_ConvCpltCallback+0x84>)
 80006c6:	885a      	ldrh	r2, [r3, #2]
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_ADC_ConvCpltCallback+0x8c>)
 80006ca:	801a      	strh	r2, [r3, #0]
	sw = AC[2];
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_ADC_ConvCpltCallback+0x84>)
 80006ce:	889a      	ldrh	r2, [r3, #4]
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <HAL_ADC_ConvCpltCallback+0x90>)
 80006d2:	801a      	strh	r2, [r3, #0]

	if(sw <50) sw = 0;
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <HAL_ADC_ConvCpltCallback+0x90>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	2b31      	cmp	r3, #49	; 0x31
 80006da:	d803      	bhi.n	80006e4 <HAL_ADC_ConvCpltCallback+0x50>
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <HAL_ADC_ConvCpltCallback+0x90>)
 80006de:	2200      	movs	r2, #0
 80006e0:	801a      	strh	r2, [r3, #0]
 80006e2:	e003      	b.n	80006ec <HAL_ADC_ConvCpltCallback+0x58>
	else sw = 5000;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <HAL_ADC_ConvCpltCallback+0x90>)
 80006e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80006ea:	801a      	strh	r2, [r3, #0]
	 printf ("%4d, %4d, %4d \n", x, y, sw);
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <HAL_ADC_ConvCpltCallback+0x88>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	4619      	mov	r1, r3
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <HAL_ADC_ConvCpltCallback+0x8c>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_ADC_ConvCpltCallback+0x90>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	480a      	ldr	r0, [pc, #40]	; (8000728 <HAL_ADC_ConvCpltCallback+0x94>)
 80006fe:	f003 ff69 	bl	80045d4 <iprintf>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000009c 	.word	0x2000009c
 8000710:	20000098 	.word	0x20000098
 8000714:	200000a0 	.word	0x200000a0
 8000718:	2000008c 	.word	0x2000008c
 800071c:	20000092 	.word	0x20000092
 8000720:	20000094 	.word	0x20000094
 8000724:	20000096 	.word	0x20000096
 8000728:	0800550c 	.word	0x0800550c

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_MspInit+0x44>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <HAL_MspInit+0x44>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_MspInit+0x44>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_MspInit+0x44>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_MspInit+0x44>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_MspInit+0x44>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800076e:	2007      	movs	r0, #7
 8000770:	f001 fa6a 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000

08000780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007a0:	d164      	bne.n	800086c <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <HAL_ADC_MspInit+0xf4>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	4a33      	ldr	r2, [pc, #204]	; (8000874 <HAL_ADC_MspInit+0xf4>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	6153      	str	r3, [r2, #20]
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <HAL_ADC_MspInit+0xf4>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HAL_ADC_MspInit+0xf4>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a2d      	ldr	r2, [pc, #180]	; (8000874 <HAL_ADC_MspInit+0xf4>)
 80007c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007c4:	6153      	str	r3, [r2, #20]
 80007c6:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <HAL_ADC_MspInit+0xf4>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b28      	ldr	r3, [pc, #160]	; (8000874 <HAL_ADC_MspInit+0xf4>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a27      	ldr	r2, [pc, #156]	; (8000874 <HAL_ADC_MspInit+0xf4>)
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	4b25      	ldr	r3, [pc, #148]	; (8000874 <HAL_ADC_MspInit+0xf4>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007ea:	2303      	movs	r3, #3
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ee:	2303      	movs	r3, #3
 80007f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	481e      	ldr	r0, [pc, #120]	; (8000878 <HAL_ADC_MspInit+0xf8>)
 80007fe:	f001 fbfb 	bl	8001ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000802:	2301      	movs	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000806:	2303      	movs	r3, #3
 8000808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000818:	f001 fbee 	bl	8001ff8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <HAL_ADC_MspInit+0xfc>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <HAL_ADC_MspInit+0x100>)
 8000820:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <HAL_ADC_MspInit+0xfc>)
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <HAL_ADC_MspInit+0xfc>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <HAL_ADC_MspInit+0xfc>)
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <HAL_ADC_MspInit+0xfc>)
 8000836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800083a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_ADC_MspInit+0xfc>)
 800083e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000842:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_ADC_MspInit+0xfc>)
 8000846:	2220      	movs	r2, #32
 8000848:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_ADC_MspInit+0xfc>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000850:	480a      	ldr	r0, [pc, #40]	; (800087c <HAL_ADC_MspInit+0xfc>)
 8000852:	f001 fa3a 	bl	8001cca <HAL_DMA_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 800085c:	f7ff ff66 	bl	800072c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a06      	ldr	r2, [pc, #24]	; (800087c <HAL_ADC_MspInit+0xfc>)
 8000864:	639a      	str	r2, [r3, #56]	; 0x38
 8000866:	4a05      	ldr	r2, [pc, #20]	; (800087c <HAL_ADC_MspInit+0xfc>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000
 8000878:	48000800 	.word	0x48000800
 800087c:	200000f4 	.word	0x200000f4
 8000880:	40020008 	.word	0x40020008

08000884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <HAL_TIM_Base_MspInit+0x38>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d10b      	bne.n	80008ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <HAL_TIM_Base_MspInit+0x3c>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <HAL_TIM_Base_MspInit+0x3c>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	61d3      	str	r3, [r2, #28]
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <HAL_TIM_Base_MspInit+0x3c>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40000400 	.word	0x40000400
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a17      	ldr	r2, [pc, #92]	; (8000940 <HAL_UART_MspInit+0x7c>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d128      	bne.n	8000938 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <HAL_UART_MspInit+0x80>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	4a16      	ldr	r2, [pc, #88]	; (8000944 <HAL_UART_MspInit+0x80>)
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	61d3      	str	r3, [r2, #28]
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <HAL_UART_MspInit+0x80>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_UART_MspInit+0x80>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <HAL_UART_MspInit+0x80>)
 8000904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000908:	6153      	str	r3, [r2, #20]
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_UART_MspInit+0x80>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000916:	230c      	movs	r3, #12
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000926:	2307      	movs	r3, #7
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f001 fb60 	bl	8001ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	; 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40004400 	.word	0x40004400
 8000944:	40021000 	.word	0x40021000

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000994:	f000 f932 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <DMA1_Channel1_IRQHandler+0x10>)
 80009a2:	f001 fa38 	bl	8001e16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000f4 	.word	0x200000f4

080009b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	e00a      	b.n	80009d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009c2:	f3af 8000 	nop.w
 80009c6:	4601      	mov	r1, r0
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	60ba      	str	r2, [r7, #8]
 80009ce:	b2ca      	uxtb	r2, r1
 80009d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3301      	adds	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbf0      	blt.n	80009c2 <_read+0x12>
	}

return len;
 80009e0:	687b      	ldr	r3, [r7, #4]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	60f8      	str	r0, [r7, #12]
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	e009      	b.n	8000a10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	60ba      	str	r2, [r7, #8]
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fc33 	bl	8000270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dbf1      	blt.n	80009fc <_write+0x12>
	}
	return len;
 8000a18:	687b      	ldr	r3, [r7, #4]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <_close>:

int _close(int file)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
	return -1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a4a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <_isatty>:

int _isatty(int file)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
	return 1;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a94:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <_sbrk+0x5c>)
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <_sbrk+0x60>)
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d102      	bne.n	8000aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <_sbrk+0x64>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <_sbrk+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d207      	bcs.n	8000acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000abc:	f003 fd58 	bl	8004570 <__errno>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	e009      	b.n	8000ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <_sbrk+0x64>)
 8000adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20003000 	.word	0x20003000
 8000aec:	00000400 	.word	0x00000400
 8000af0:	20000208 	.word	0x20000208
 8000af4:	20000220 	.word	0x20000220

08000af8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <SystemInit+0x20>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <SystemInit+0x20>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b54 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b22:	490e      	ldr	r1, [pc, #56]	; (8000b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b24:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <LoopForever+0xe>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b38:	4c0b      	ldr	r4, [pc, #44]	; (8000b68 <LoopForever+0x16>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b46:	f7ff ffd7 	bl	8000af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f003 fd17 	bl	800457c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b4e:	f7ff fbad 	bl	80002ac <main>

08000b52 <LoopForever>:

LoopForever:
    b LoopForever
 8000b52:	e7fe      	b.n	8000b52 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b54:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b60:	080055f4 	.word	0x080055f4
  ldr r2, =_sbss
 8000b64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b68:	20000220 	.word	0x20000220

08000b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC1_2_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_Init+0x28>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_Init+0x28>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f001 f861 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f000 f808 	bl	8000b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff fdd4 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40022000 	.word	0x40022000

08000b9c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x54>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0x58>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 f879 	bl	8001cb2 <HAL_SYSTICK_Config>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00e      	b.n	8000be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d80a      	bhi.n	8000be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f001 f841 	bl	8001c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bdc:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <HAL_InitTick+0x5c>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x20>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x24>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_IncTick+0x24>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	2000020c 	.word	0x2000020c

08000c24 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <HAL_GetTick+0x14>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	2000020c 	.word	0x2000020c

08000c3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b09a      	sub	sp, #104	; 0x68
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e172      	b.n	8000f6a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 0310 	and.w	r3, r3, #16
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d176      	bne.n	8000d84 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d152      	bne.n	8000d44 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fd61 	bl	8000780 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d13b      	bne.n	8000d44 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 fe85 	bl	80019dc <ADC_Disable>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d12f      	bne.n	8000d44 <HAL_ADC_Init+0xe0>
 8000ce4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d12b      	bne.n	8000d44 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cf4:	f023 0302 	bic.w	r3, r3, #2
 8000cf8:	f043 0202 	orr.w	r2, r3, #2
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d0e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d1e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d20:	4b94      	ldr	r3, [pc, #592]	; (8000f74 <HAL_ADC_Init+0x310>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a94      	ldr	r2, [pc, #592]	; (8000f78 <HAL_ADC_Init+0x314>)
 8000d26:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2a:	0c9a      	lsrs	r2, r3, #18
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d36:	e002      	b.n	8000d3e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1f9      	bne.n	8000d38 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d007      	beq.n	8000d62 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d60:	d110      	bne.n	8000d84 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f023 0312 	bic.w	r3, r3, #18
 8000d6a:	f043 0210 	orr.w	r2, r3, #16
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f043 0201 	orr.w	r2, r3, #1
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f003 0310 	and.w	r3, r3, #16
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f040 80df 	bne.w	8000f50 <HAL_ADC_Init+0x2ec>
 8000d92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f040 80da 	bne.w	8000f50 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 80d2 	bne.w	8000f50 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000db4:	f043 0202 	orr.w	r2, r3, #2
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dbc:	4b6f      	ldr	r3, [pc, #444]	; (8000f7c <HAL_ADC_Init+0x318>)
 8000dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dc8:	d102      	bne.n	8000dd0 <HAL_ADC_Init+0x16c>
 8000dca:	4b6d      	ldr	r3, [pc, #436]	; (8000f80 <HAL_ADC_Init+0x31c>)
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	e002      	b.n	8000dd6 <HAL_ADC_Init+0x172>
 8000dd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dd4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d108      	bne.n	8000df6 <HAL_ADC_Init+0x192>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d101      	bne.n	8000df6 <HAL_ADC_Init+0x192>
 8000df2:	2301      	movs	r3, #1
 8000df4:	e000      	b.n	8000df8 <HAL_ADC_Init+0x194>
 8000df6:	2300      	movs	r3, #0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d11c      	bne.n	8000e36 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d010      	beq.n	8000e24 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d107      	bne.n	8000e1e <HAL_ADC_Init+0x1ba>
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d101      	bne.n	8000e1e <HAL_ADC_Init+0x1ba>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <HAL_ADC_Init+0x1bc>
 8000e1e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d108      	bne.n	8000e36 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	431a      	orrs	r2, r3
 8000e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e34:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7e5b      	ldrb	r3, [r3, #25]
 8000e3a:	035b      	lsls	r3, r3, #13
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e40:	2a01      	cmp	r2, #1
 8000e42:	d002      	beq.n	8000e4a <HAL_ADC_Init+0x1e6>
 8000e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e48:	e000      	b.n	8000e4c <HAL_ADC_Init+0x1e8>
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	431a      	orrs	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d11b      	bne.n	8000ea2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7e5b      	ldrb	r3, [r3, #25]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d109      	bne.n	8000e86 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e76:	3b01      	subs	r3, #1
 8000e78:	045a      	lsls	r2, r3, #17
 8000e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e82:	663b      	str	r3, [r7, #96]	; 0x60
 8000e84:	e00d      	b.n	8000ea2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000e8e:	f043 0220 	orr.w	r2, r3, #32
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f043 0201 	orr.w	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d007      	beq.n	8000eba <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 030c 	and.w	r3, r3, #12
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d114      	bne.n	8000ef2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	6812      	ldr	r2, [r2, #0]
 8000ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ed6:	f023 0302 	bic.w	r3, r3, #2
 8000eda:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7e1b      	ldrb	r3, [r3, #24]
 8000ee0:	039a      	lsls	r2, r3, #14
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4313      	orrs	r3, r2
 8000eec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <HAL_ADC_Init+0x320>)
 8000efa:	4013      	ands	r3, r2
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	6812      	ldr	r2, [r2, #0]
 8000f00:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000f02:	430b      	orrs	r3, r1
 8000f04:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d10c      	bne.n	8000f28 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	f023 010f 	bic.w	r1, r3, #15
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	1e5a      	subs	r2, r3, #1
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	430a      	orrs	r2, r1
 8000f24:	631a      	str	r2, [r3, #48]	; 0x30
 8000f26:	e007      	b.n	8000f38 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 020f 	bic.w	r2, r2, #15
 8000f36:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f023 0303 	bic.w	r3, r3, #3
 8000f46:	f043 0201 	orr.w	r2, r3, #1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f4e:	e00a      	b.n	8000f66 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f023 0312 	bic.w	r3, r3, #18
 8000f58:	f043 0210 	orr.w	r2, r3, #16
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000f60:	2301      	movs	r3, #1
 8000f62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000f66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3768      	adds	r7, #104	; 0x68
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000000 	.word	0x20000000
 8000f78:	431bde83 	.word	0x431bde83
 8000f7c:	50000300 	.word	0x50000300
 8000f80:	50000100 	.word	0x50000100
 8000f84:	fff0c007 	.word	0xfff0c007

08000f88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f040 80b9 	bne.w	800111a <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d101      	bne.n	8000fb6 <HAL_ADC_Start_DMA+0x2e>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e0b4      	b.n	8001120 <HAL_ADC_Start_DMA+0x198>
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000fbe:	4b5a      	ldr	r3, [pc, #360]	; (8001128 <HAL_ADC_Start_DMA+0x1a0>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 031f 	and.w	r3, r3, #31
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f040 80a0 	bne.w	800110c <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f000 fca1 	bl	8001914 <ADC_Enable>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000fd6:	7dfb      	ldrb	r3, [r7, #23]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f040 8092 	bne.w	8001102 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fe6:	f023 0301 	bic.w	r3, r3, #1
 8000fea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ff2:	4b4d      	ldr	r3, [pc, #308]	; (8001128 <HAL_ADC_Start_DMA+0x1a0>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 031f 	and.w	r3, r3, #31
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d004      	beq.n	8001008 <HAL_ADC_Start_DMA+0x80>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001006:	d115      	bne.n	8001034 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d027      	beq.n	8001072 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800102a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001032:	e01e      	b.n	8001072 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001048:	d004      	beq.n	8001054 <HAL_ADC_Start_DMA+0xcc>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a37      	ldr	r2, [pc, #220]	; (800112c <HAL_ADC_Start_DMA+0x1a4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d10e      	bne.n	8001072 <HAL_ADC_Start_DMA+0xea>
 8001054:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800106a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800107a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800107e:	d106      	bne.n	800108e <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001084:	f023 0206 	bic.w	r2, r3, #6
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	645a      	str	r2, [r3, #68]	; 0x44
 800108c:	e002      	b.n	8001094 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2200      	movs	r2, #0
 8001092:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a0:	4a23      	ldr	r2, [pc, #140]	; (8001130 <HAL_ADC_Start_DMA+0x1a8>)
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a8:	4a22      	ldr	r2, [pc, #136]	; (8001134 <HAL_ADC_Start_DMA+0x1ac>)
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <HAL_ADC_Start_DMA+0x1b0>)
 80010b2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	221c      	movs	r2, #28
 80010ba:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0210 	orr.w	r2, r2, #16
 80010ca:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 0201 	orr.w	r2, r2, #1
 80010da:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3340      	adds	r3, #64	; 0x40
 80010e6:	4619      	mov	r1, r3
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f000 fe34 	bl	8001d58 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0204 	orr.w	r2, r2, #4
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	e00d      	b.n	800111e <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800110a:	e008      	b.n	800111e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001118:	e001      	b.n	800111e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800111a:	2302      	movs	r3, #2
 800111c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800111e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	50000300 	.word	0x50000300
 800112c:	50000100 	.word	0x50000100
 8001130:	08001849 	.word	0x08001849
 8001134:	080018c3 	.word	0x080018c3
 8001138:	080018df 	.word	0x080018df

0800113c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800113c:	b480      	push	{r7}
 800113e:	b09b      	sub	sp, #108	; 0x6c
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001156:	2b01      	cmp	r3, #1
 8001158:	d101      	bne.n	800115e <HAL_ADC_ConfigChannel+0x22>
 800115a:	2302      	movs	r3, #2
 800115c:	e2a4      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x56c>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	f040 8288 	bne.w	8001686 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b04      	cmp	r3, #4
 800117c:	d81c      	bhi.n	80011b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	461a      	mov	r2, r3
 8001192:	231f      	movs	r3, #31
 8001194:	4093      	lsls	r3, r2
 8001196:	43db      	mvns	r3, r3
 8001198:	4019      	ands	r1, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa00 f203 	lsl.w	r2, r0, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	631a      	str	r2, [r3, #48]	; 0x30
 80011b6:	e063      	b.n	8001280 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b09      	cmp	r3, #9
 80011be:	d81e      	bhi.n	80011fe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	3b1e      	subs	r3, #30
 80011d4:	221f      	movs	r2, #31
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	4019      	ands	r1, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	3b1e      	subs	r3, #30
 80011f0:	fa00 f203 	lsl.w	r2, r0, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	635a      	str	r2, [r3, #52]	; 0x34
 80011fc:	e040      	b.n	8001280 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b0e      	cmp	r3, #14
 8001204:	d81e      	bhi.n	8001244 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	3b3c      	subs	r3, #60	; 0x3c
 800121a:	221f      	movs	r2, #31
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	4019      	ands	r1, r3
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	3b3c      	subs	r3, #60	; 0x3c
 8001236:	fa00 f203 	lsl.w	r2, r0, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	639a      	str	r2, [r3, #56]	; 0x38
 8001242:	e01d      	b.n	8001280 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	3b5a      	subs	r3, #90	; 0x5a
 8001258:	221f      	movs	r2, #31
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	4019      	ands	r1, r3
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	3b5a      	subs	r3, #90	; 0x5a
 8001274:	fa00 f203 	lsl.w	r2, r0, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	430a      	orrs	r2, r1
 800127e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 80e5 	bne.w	800145a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b09      	cmp	r3, #9
 8001296:	d91c      	bls.n	80012d2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6999      	ldr	r1, [r3, #24]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	3b1e      	subs	r3, #30
 80012aa:	2207      	movs	r2, #7
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	4019      	ands	r1, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	6898      	ldr	r0, [r3, #8]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	3b1e      	subs	r3, #30
 80012c4:	fa00 f203 	lsl.w	r2, r0, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	619a      	str	r2, [r3, #24]
 80012d0:	e019      	b.n	8001306 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6959      	ldr	r1, [r3, #20]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	2207      	movs	r2, #7
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	4019      	ands	r1, r3
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	6898      	ldr	r0, [r3, #8]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4613      	mov	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	fa00 f203 	lsl.w	r2, r0, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	695a      	ldr	r2, [r3, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	3b01      	subs	r3, #1
 8001324:	2b03      	cmp	r3, #3
 8001326:	d84f      	bhi.n	80013c8 <HAL_ADC_ConfigChannel+0x28c>
 8001328:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <HAL_ADC_ConfigChannel+0x1f4>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	08001341 	.word	0x08001341
 8001334:	08001363 	.word	0x08001363
 8001338:	08001385 	.word	0x08001385
 800133c:	080013a7 	.word	0x080013a7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001346:	4b94      	ldr	r3, [pc, #592]	; (8001598 <HAL_ADC_ConfigChannel+0x45c>)
 8001348:	4013      	ands	r3, r2
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	0691      	lsls	r1, r2, #26
 8001350:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001352:	430a      	orrs	r2, r1
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800135e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001360:	e07e      	b.n	8001460 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001368:	4b8b      	ldr	r3, [pc, #556]	; (8001598 <HAL_ADC_ConfigChannel+0x45c>)
 800136a:	4013      	ands	r3, r2
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	0691      	lsls	r1, r2, #26
 8001372:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001374:	430a      	orrs	r2, r1
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001380:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001382:	e06d      	b.n	8001460 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800138a:	4b83      	ldr	r3, [pc, #524]	; (8001598 <HAL_ADC_ConfigChannel+0x45c>)
 800138c:	4013      	ands	r3, r2
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	0691      	lsls	r1, r2, #26
 8001394:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001396:	430a      	orrs	r2, r1
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013a2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013a4:	e05c      	b.n	8001460 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80013ac:	4b7a      	ldr	r3, [pc, #488]	; (8001598 <HAL_ADC_ConfigChannel+0x45c>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	0691      	lsls	r1, r2, #26
 80013b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013b8:	430a      	orrs	r2, r1
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013c4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013c6:	e04b      	b.n	8001460 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	069b      	lsls	r3, r3, #26
 80013d8:	429a      	cmp	r2, r3
 80013da:	d107      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013ea:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	069b      	lsls	r3, r3, #26
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d107      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800140e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001416:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	069b      	lsls	r3, r3, #26
 8001420:	429a      	cmp	r2, r3
 8001422:	d107      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001432:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800143a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	069b      	lsls	r3, r3, #26
 8001444:	429a      	cmp	r2, r3
 8001446:	d10a      	bne.n	800145e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001456:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001458:	e001      	b.n	800145e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800145a:	bf00      	nop
 800145c:	e000      	b.n	8001460 <HAL_ADC_ConfigChannel+0x324>
      break;
 800145e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	2b01      	cmp	r3, #1
 800146c:	d108      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x344>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x344>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <HAL_ADC_ConfigChannel+0x346>
 8001480:	2300      	movs	r3, #0
 8001482:	2b00      	cmp	r3, #0
 8001484:	f040 810a 	bne.w	800169c <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d00f      	beq.n	80014b0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2201      	movs	r2, #1
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	400a      	ands	r2, r1
 80014aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80014ae:	e049      	b.n	8001544 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	409a      	lsls	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b09      	cmp	r3, #9
 80014d0:	d91c      	bls.n	800150c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6999      	ldr	r1, [r3, #24]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	3b1b      	subs	r3, #27
 80014e4:	2207      	movs	r2, #7
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	4019      	ands	r1, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	6898      	ldr	r0, [r3, #8]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	3b1b      	subs	r3, #27
 80014fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	619a      	str	r2, [r3, #24]
 800150a:	e01b      	b.n	8001544 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6959      	ldr	r1, [r3, #20]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	2207      	movs	r2, #7
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	4019      	ands	r1, r3
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	6898      	ldr	r0, [r3, #8]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	fa00 f203 	lsl.w	r2, r0, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_ADC_ConfigChannel+0x460>)
 8001546:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b10      	cmp	r3, #16
 800154e:	d105      	bne.n	800155c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001558:	2b00      	cmp	r3, #0
 800155a:	d015      	beq.n	8001588 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001560:	2b11      	cmp	r3, #17
 8001562:	d105      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00b      	beq.n	8001588 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001574:	2b12      	cmp	r3, #18
 8001576:	f040 8091 	bne.w	800169c <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800157a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001582:	2b00      	cmp	r3, #0
 8001584:	f040 808a 	bne.w	800169c <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001590:	d108      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x468>
 8001592:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <HAL_ADC_ConfigChannel+0x464>)
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	e008      	b.n	80015aa <HAL_ADC_ConfigChannel+0x46e>
 8001598:	83fff000 	.word	0x83fff000
 800159c:	50000300 	.word	0x50000300
 80015a0:	50000100 	.word	0x50000100
 80015a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015a8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d108      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x48e>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x48e>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <HAL_ADC_ConfigChannel+0x490>
 80015ca:	2300      	movs	r3, #0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d150      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015d0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d010      	beq.n	80015f8 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d107      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x4b6>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x4b6>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x4b8>
 80015f2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d13c      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b10      	cmp	r3, #16
 80015fe:	d11d      	bne.n	800163c <HAL_ADC_ConfigChannel+0x500>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001608:	d118      	bne.n	800163c <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800160a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001614:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001616:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <HAL_ADC_ConfigChannel+0x578>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a27      	ldr	r2, [pc, #156]	; (80016b8 <HAL_ADC_ConfigChannel+0x57c>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	0c9a      	lsrs	r2, r3, #18
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800162c:	e002      	b.n	8001634 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	3b01      	subs	r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f9      	bne.n	800162e <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800163a:	e02e      	b.n	800169a <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b11      	cmp	r3, #17
 8001642:	d10b      	bne.n	800165c <HAL_ADC_ConfigChannel+0x520>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800164c:	d106      	bne.n	800165c <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800164e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001658:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800165a:	e01e      	b.n	800169a <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b12      	cmp	r3, #18
 8001662:	d11a      	bne.n	800169a <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800166c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800166e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001670:	e013      	b.n	800169a <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f043 0220 	orr.w	r2, r3, #32
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001684:	e00a      	b.n	800169c <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f043 0220 	orr.w	r2, r3, #32
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001698:	e000      	b.n	800169c <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800169a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	376c      	adds	r7, #108	; 0x6c
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	20000000 	.word	0x20000000
 80016b8:	431bde83 	.word	0x431bde83

080016bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80016bc:	b480      	push	{r7}
 80016be:	b099      	sub	sp, #100	; 0x64
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d4:	d102      	bne.n	80016dc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80016d6:	4b5a      	ldr	r3, [pc, #360]	; (8001840 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	e002      	b.n	80016e2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80016dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016e0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0a2      	b.n	8001832 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d101      	bne.n	80016fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e09b      	b.n	8001832 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d17f      	bne.n	8001810 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d179      	bne.n	8001810 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800171c:	4b49      	ldr	r3, [pc, #292]	; (8001844 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800171e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d040      	beq.n	80017aa <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	6859      	ldr	r1, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800173a:	035b      	lsls	r3, r3, #13
 800173c:	430b      	orrs	r3, r1
 800173e:	431a      	orrs	r2, r3
 8001740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001742:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d108      	bne.n	8001764 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001764:	2300      	movs	r3, #0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d15c      	bne.n	8001824 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b01      	cmp	r3, #1
 8001774:	d107      	bne.n	8001786 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001786:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001788:	2b00      	cmp	r3, #0
 800178a:	d14b      	bne.n	8001824 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800178c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001794:	f023 030f 	bic.w	r3, r3, #15
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	6811      	ldr	r1, [r2, #0]
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	6892      	ldr	r2, [r2, #8]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	431a      	orrs	r2, r3
 80017a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017a6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80017a8:	e03c      	b.n	8001824 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80017aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017b4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d108      	bne.n	80017d6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80017d6:	2300      	movs	r3, #0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d123      	bne.n	8001824 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d107      	bne.n	80017f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80017f8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d112      	bne.n	8001824 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80017fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001806:	f023 030f 	bic.w	r3, r3, #15
 800180a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800180c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800180e:	e009      	b.n	8001824 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f043 0220 	orr.w	r2, r3, #32
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001822:	e000      	b.n	8001826 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001824:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800182e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001832:	4618      	mov	r0, r3
 8001834:	3764      	adds	r7, #100	; 0x64
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	50000100 	.word	0x50000100
 8001844:	50000300 	.word	0x50000300

08001848 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800185e:	2b00      	cmp	r3, #0
 8001860:	d126      	bne.n	80018b0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001878:	2b00      	cmp	r3, #0
 800187a:	d115      	bne.n	80018a8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001880:	2b00      	cmp	r3, #0
 8001882:	d111      	bne.n	80018a8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d105      	bne.n	80018a8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f043 0201 	orr.w	r2, r3, #1
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f7fe fef3 	bl	8000694 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80018ae:	e004      	b.n	80018ba <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	4798      	blx	r3
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff f9b3 	bl	8000c3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fc:	f043 0204 	orr.w	r2, r3, #4
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f7ff f9a3 	bl	8000c50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d108      	bne.n	8001940 <ADC_Enable+0x2c>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <ADC_Enable+0x2c>
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <ADC_Enable+0x2e>
 8001940:	2300      	movs	r3, #0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d143      	bne.n	80019ce <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <ADC_Enable+0xc4>)
 800194e:	4013      	ands	r3, r2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00d      	beq.n	8001970 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f043 0210 	orr.w	r2, r3, #16
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	f043 0201 	orr.w	r2, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e02f      	b.n	80019d0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001980:	f7ff f950 	bl	8000c24 <HAL_GetTick>
 8001984:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001986:	e01b      	b.n	80019c0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001988:	f7ff f94c 	bl	8000c24 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d914      	bls.n	80019c0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d00d      	beq.n	80019c0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f043 0210 	orr.w	r2, r3, #16
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b4:	f043 0201 	orr.w	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e007      	b.n	80019d0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d1dc      	bne.n	8001988 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	8000003f 	.word	0x8000003f

080019dc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d108      	bne.n	8001a08 <ADC_Disable+0x2c>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <ADC_Disable+0x2c>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <ADC_Disable+0x2e>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d047      	beq.n	8001a9e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 030d 	and.w	r3, r3, #13
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d10f      	bne.n	8001a3c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0202 	orr.w	r2, r2, #2
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2203      	movs	r2, #3
 8001a32:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001a34:	f7ff f8f6 	bl	8000c24 <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a3a:	e029      	b.n	8001a90 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f043 0210 	orr.w	r2, r3, #16
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4c:	f043 0201 	orr.w	r2, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e023      	b.n	8001aa0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a58:	f7ff f8e4 	bl	8000c24 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d914      	bls.n	8001a90 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d10d      	bne.n	8001a90 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f043 0210 	orr.w	r2, r3, #16
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e007      	b.n	8001aa0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d0dc      	beq.n	8001a58 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <__NVIC_GetPriorityGrouping+0x18>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	f003 0307 	and.w	r3, r3, #7
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	db0b      	blt.n	8001b36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f003 021f 	and.w	r2, r3, #31
 8001b24:	4907      	ldr	r1, [pc, #28]	; (8001b44 <__NVIC_EnableIRQ+0x38>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	; (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	; (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f1c3 0307 	rsb	r3, r3, #7
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	bf28      	it	cs
 8001bba:	2304      	movcs	r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d902      	bls.n	8001bcc <NVIC_EncodePriority+0x30>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	e000      	b.n	8001bce <NVIC_EncodePriority+0x32>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	4313      	orrs	r3, r2
         );
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	; 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c14:	d301      	bcc.n	8001c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00f      	b.n	8001c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <SysTick_Config+0x40>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c22:	210f      	movs	r1, #15
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f7ff ff8e 	bl	8001b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <SysTick_Config+0x40>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <SysTick_Config+0x40>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff29 	bl	8001aa8 <__NVIC_SetPriorityGrouping>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c70:	f7ff ff3e 	bl	8001af0 <__NVIC_GetPriorityGrouping>
 8001c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff ff8e 	bl	8001b9c <NVIC_EncodePriority>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff5d 	bl	8001b48 <__NVIC_SetPriority>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff31 	bl	8001b0c <__NVIC_EnableIRQ>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffa2 	bl	8001c04 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e037      	b.n	8001d50 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001cf6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001cfa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f940 	bl	8001fb8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}  
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_DMA_Start_IT+0x20>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e04a      	b.n	8001e0e <HAL_DMA_Start_IT+0xb6>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d13a      	bne.n	8001e00 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f8d4 	bl	8001f5c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 020e 	orr.w	r2, r2, #14
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	e00f      	b.n	8001dee <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 020a 	orr.w	r2, r2, #10
 8001ddc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0204 	bic.w	r2, r2, #4
 8001dec:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0201 	orr.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e005      	b.n	8001e0c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	2204      	movs	r2, #4
 8001e34:	409a      	lsls	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d024      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x72>
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01f      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0320 	and.w	r3, r3, #32
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0204 	bic.w	r2, r2, #4
 8001e64:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	2104      	movs	r1, #4
 8001e70:	fa01 f202 	lsl.w	r2, r1, r2
 8001e74:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d06a      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001e86:	e065      	b.n	8001f54 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d02c      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0xdc>
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d027      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10b      	bne.n	8001ec8 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 020a 	bic.w	r2, r2, #10
 8001ebe:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d035      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001ef0:	e030      	b.n	8001f54 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d028      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x13e>
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d023      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 020e 	bic.w	r2, r2, #14
 8001f1a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f24:	2101      	movs	r1, #1
 8001f26:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d004      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	4798      	blx	r3
    }
  }
}  
 8001f52:	e7ff      	b.n	8001f54 <HAL_DMA_IRQHandler+0x13e>
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f72:	2101      	movs	r1, #1
 8001f74:	fa01 f202 	lsl.w	r2, r1, r2
 8001f78:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b10      	cmp	r3, #16
 8001f88:	d108      	bne.n	8001f9c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f9a:	e007      	b.n	8001fac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	60da      	str	r2, [r3, #12]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <DMA_CalcBaseAndBitshift+0x34>)
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <DMA_CalcBaseAndBitshift+0x38>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	009a      	lsls	r2, r3, #2
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a06      	ldr	r2, [pc, #24]	; (8001ff4 <DMA_CalcBaseAndBitshift+0x3c>)
 8001fdc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	bffdfff8 	.word	0xbffdfff8
 8001ff0:	cccccccd 	.word	0xcccccccd
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002006:	e14e      	b.n	80022a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8140 	beq.w	80022a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d005      	beq.n	8002038 <HAL_GPIO_Init+0x40>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d130      	bne.n	800209a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2203      	movs	r2, #3
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800206e:	2201      	movs	r2, #1
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f003 0201 	and.w	r2, r3, #1
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d017      	beq.n	80020d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d123      	bne.n	800212a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	08da      	lsrs	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3208      	adds	r2, #8
 80020ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	6939      	ldr	r1, [r7, #16]
 8002126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2203      	movs	r2, #3
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0203 	and.w	r2, r3, #3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 809a 	beq.w	80022a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216c:	4b55      	ldr	r3, [pc, #340]	; (80022c4 <HAL_GPIO_Init+0x2cc>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	4a54      	ldr	r2, [pc, #336]	; (80022c4 <HAL_GPIO_Init+0x2cc>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6193      	str	r3, [r2, #24]
 8002178:	4b52      	ldr	r3, [pc, #328]	; (80022c4 <HAL_GPIO_Init+0x2cc>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002184:	4a50      	ldr	r2, [pc, #320]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	3302      	adds	r3, #2
 800218c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021ae:	d013      	beq.n	80021d8 <HAL_GPIO_Init+0x1e0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a46      	ldr	r2, [pc, #280]	; (80022cc <HAL_GPIO_Init+0x2d4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00d      	beq.n	80021d4 <HAL_GPIO_Init+0x1dc>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a45      	ldr	r2, [pc, #276]	; (80022d0 <HAL_GPIO_Init+0x2d8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d007      	beq.n	80021d0 <HAL_GPIO_Init+0x1d8>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a44      	ldr	r2, [pc, #272]	; (80022d4 <HAL_GPIO_Init+0x2dc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d101      	bne.n	80021cc <HAL_GPIO_Init+0x1d4>
 80021c8:	2303      	movs	r3, #3
 80021ca:	e006      	b.n	80021da <HAL_GPIO_Init+0x1e2>
 80021cc:	2305      	movs	r3, #5
 80021ce:	e004      	b.n	80021da <HAL_GPIO_Init+0x1e2>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e002      	b.n	80021da <HAL_GPIO_Init+0x1e2>
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <HAL_GPIO_Init+0x1e2>
 80021d8:	2300      	movs	r3, #0
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	f002 0203 	and.w	r2, r2, #3
 80021e0:	0092      	lsls	r2, r2, #2
 80021e2:	4093      	lsls	r3, r2
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021ea:	4937      	ldr	r1, [pc, #220]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	3302      	adds	r3, #2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f8:	4b37      	ldr	r3, [pc, #220]	; (80022d8 <HAL_GPIO_Init+0x2e0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	43db      	mvns	r3, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800221c:	4a2e      	ldr	r2, [pc, #184]	; (80022d8 <HAL_GPIO_Init+0x2e0>)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_GPIO_Init+0x2e0>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002246:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <HAL_GPIO_Init+0x2e0>)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800224c:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <HAL_GPIO_Init+0x2e0>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	43db      	mvns	r3, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002270:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <HAL_GPIO_Init+0x2e0>)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_GPIO_Init+0x2e0>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800229a:	4a0f      	ldr	r2, [pc, #60]	; (80022d8 <HAL_GPIO_Init+0x2e0>)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3301      	adds	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f47f aea9 	bne.w	8002008 <HAL_GPIO_Init+0x10>
  }
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40010000 	.word	0x40010000
 80022cc:	48000400 	.word	0x48000400
 80022d0:	48000800 	.word	0x48000800
 80022d4:	48000c00 	.word	0x48000c00
 80022d8:	40010400 	.word	0x40010400

080022dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
 80022e8:	4613      	mov	r3, r2
 80022ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022ec:	787b      	ldrb	r3, [r7, #1]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022f8:	e002      	b.n	8002300 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002312:	af00      	add	r7, sp, #0
 8002314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002318:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800231c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800231e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002322:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	f001 b823 	b.w	8003378 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002336:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 817d 	beq.w	8002642 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002348:	4bbc      	ldr	r3, [pc, #752]	; (800263c <HAL_RCC_OscConfig+0x330>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b04      	cmp	r3, #4
 8002352:	d00c      	beq.n	800236e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002354:	4bb9      	ldr	r3, [pc, #740]	; (800263c <HAL_RCC_OscConfig+0x330>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d15c      	bne.n	800241a <HAL_RCC_OscConfig+0x10e>
 8002360:	4bb6      	ldr	r3, [pc, #728]	; (800263c <HAL_RCC_OscConfig+0x330>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236c:	d155      	bne.n	800241a <HAL_RCC_OscConfig+0x10e>
 800236e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002372:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002382:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	095b      	lsrs	r3, r3, #5
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d102      	bne.n	80023a0 <HAL_RCC_OscConfig+0x94>
 800239a:	4ba8      	ldr	r3, [pc, #672]	; (800263c <HAL_RCC_OscConfig+0x330>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	e015      	b.n	80023cc <HAL_RCC_OscConfig+0xc0>
 80023a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023bc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80023c0:	fa93 f3a3 	rbit	r3, r3
 80023c4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80023c8:	4b9c      	ldr	r3, [pc, #624]	; (800263c <HAL_RCC_OscConfig+0x330>)
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023d0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80023d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80023d8:	fa92 f2a2 	rbit	r2, r2
 80023dc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80023e0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80023e4:	fab2 f282 	clz	r2, r2
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	f042 0220 	orr.w	r2, r2, #32
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	f002 021f 	and.w	r2, r2, #31
 80023f4:	2101      	movs	r1, #1
 80023f6:	fa01 f202 	lsl.w	r2, r1, r2
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 811f 	beq.w	8002640 <HAL_RCC_OscConfig+0x334>
 8002402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002406:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f040 8116 	bne.w	8002640 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	f000 bfaf 	b.w	8003378 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x12e>
 800242c:	4b83      	ldr	r3, [pc, #524]	; (800263c <HAL_RCC_OscConfig+0x330>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a82      	ldr	r2, [pc, #520]	; (800263c <HAL_RCC_OscConfig+0x330>)
 8002432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	e036      	b.n	80024a8 <HAL_RCC_OscConfig+0x19c>
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x158>
 800244a:	4b7c      	ldr	r3, [pc, #496]	; (800263c <HAL_RCC_OscConfig+0x330>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a7b      	ldr	r2, [pc, #492]	; (800263c <HAL_RCC_OscConfig+0x330>)
 8002450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b79      	ldr	r3, [pc, #484]	; (800263c <HAL_RCC_OscConfig+0x330>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a78      	ldr	r2, [pc, #480]	; (800263c <HAL_RCC_OscConfig+0x330>)
 800245c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e021      	b.n	80024a8 <HAL_RCC_OscConfig+0x19c>
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x184>
 8002476:	4b71      	ldr	r3, [pc, #452]	; (800263c <HAL_RCC_OscConfig+0x330>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a70      	ldr	r2, [pc, #448]	; (800263c <HAL_RCC_OscConfig+0x330>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b6e      	ldr	r3, [pc, #440]	; (800263c <HAL_RCC_OscConfig+0x330>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6d      	ldr	r2, [pc, #436]	; (800263c <HAL_RCC_OscConfig+0x330>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0x19c>
 8002490:	4b6a      	ldr	r3, [pc, #424]	; (800263c <HAL_RCC_OscConfig+0x330>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a69      	ldr	r2, [pc, #420]	; (800263c <HAL_RCC_OscConfig+0x330>)
 8002496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b67      	ldr	r3, [pc, #412]	; (800263c <HAL_RCC_OscConfig+0x330>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a66      	ldr	r2, [pc, #408]	; (800263c <HAL_RCC_OscConfig+0x330>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024a8:	4b64      	ldr	r3, [pc, #400]	; (800263c <HAL_RCC_OscConfig+0x330>)
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	f023 020f 	bic.w	r2, r3, #15
 80024b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	495f      	ldr	r1, [pc, #380]	; (800263c <HAL_RCC_OscConfig+0x330>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d059      	beq.n	8002586 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7fe fba7 	bl	8000c24 <HAL_GetTick>
 80024d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024dc:	f7fe fba2 	bl	8000c24 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b64      	cmp	r3, #100	; 0x64
 80024ea:	d902      	bls.n	80024f2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	f000 bf43 	b.w	8003378 <HAL_RCC_OscConfig+0x106c>
 80024f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024f6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002506:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d102      	bne.n	8002524 <HAL_RCC_OscConfig+0x218>
 800251e:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_RCC_OscConfig+0x330>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	e015      	b.n	8002550 <HAL_RCC_OscConfig+0x244>
 8002524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002528:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800253c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002540:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800254c:	4b3b      	ldr	r3, [pc, #236]	; (800263c <HAL_RCC_OscConfig+0x330>)
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002554:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002558:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800255c:	fa92 f2a2 	rbit	r2, r2
 8002560:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002564:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002568:	fab2 f282 	clz	r2, r2
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	f042 0220 	orr.w	r2, r2, #32
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	f002 021f 	and.w	r2, r2, #31
 8002578:	2101      	movs	r1, #1
 800257a:	fa01 f202 	lsl.w	r2, r1, r2
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0ab      	beq.n	80024dc <HAL_RCC_OscConfig+0x1d0>
 8002584:	e05d      	b.n	8002642 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7fe fb4d 	bl	8000c24 <HAL_GetTick>
 800258a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fb48 	bl	8000c24 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b64      	cmp	r3, #100	; 0x64
 800259e:	d902      	bls.n	80025a6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	f000 bee9 	b.w	8003378 <HAL_RCC_OscConfig+0x106c>
 80025a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025aa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80025ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d102      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2cc>
 80025d2:	4b1a      	ldr	r3, [pc, #104]	; (800263c <HAL_RCC_OscConfig+0x330>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	e015      	b.n	8002604 <HAL_RCC_OscConfig+0x2f8>
 80025d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025dc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80025ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80025f4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002600:	4b0e      	ldr	r3, [pc, #56]	; (800263c <HAL_RCC_OscConfig+0x330>)
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002608:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800260c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002610:	fa92 f2a2 	rbit	r2, r2
 8002614:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002618:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800261c:	fab2 f282 	clz	r2, r2
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	f042 0220 	orr.w	r2, r2, #32
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	f002 021f 	and.w	r2, r2, #31
 800262c:	2101      	movs	r1, #1
 800262e:	fa01 f202 	lsl.w	r2, r1, r2
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ab      	bne.n	8002590 <HAL_RCC_OscConfig+0x284>
 8002638:	e003      	b.n	8002642 <HAL_RCC_OscConfig+0x336>
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002646:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 817d 	beq.w	8002952 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002658:	4ba6      	ldr	r3, [pc, #664]	; (80028f4 <HAL_RCC_OscConfig+0x5e8>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00b      	beq.n	800267c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002664:	4ba3      	ldr	r3, [pc, #652]	; (80028f4 <HAL_RCC_OscConfig+0x5e8>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b08      	cmp	r3, #8
 800266e:	d172      	bne.n	8002756 <HAL_RCC_OscConfig+0x44a>
 8002670:	4ba0      	ldr	r3, [pc, #640]	; (80028f4 <HAL_RCC_OscConfig+0x5e8>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d16c      	bne.n	8002756 <HAL_RCC_OscConfig+0x44a>
 800267c:	2302      	movs	r3, #2
 800267e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800268e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d102      	bne.n	80026ac <HAL_RCC_OscConfig+0x3a0>
 80026a6:	4b93      	ldr	r3, [pc, #588]	; (80028f4 <HAL_RCC_OscConfig+0x5e8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	e013      	b.n	80026d4 <HAL_RCC_OscConfig+0x3c8>
 80026ac:	2302      	movs	r3, #2
 80026ae:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80026be:	2302      	movs	r3, #2
 80026c0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80026c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80026d0:	4b88      	ldr	r3, [pc, #544]	; (80028f4 <HAL_RCC_OscConfig+0x5e8>)
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	2202      	movs	r2, #2
 80026d6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80026da:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026de:	fa92 f2a2 	rbit	r2, r2
 80026e2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80026e6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80026ea:	fab2 f282 	clz	r2, r2
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	f042 0220 	orr.w	r2, r2, #32
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f002 021f 	and.w	r2, r2, #31
 80026fa:	2101      	movs	r1, #1
 80026fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_RCC_OscConfig+0x410>
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d002      	beq.n	800271c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f000 be2e 	b.w	8003378 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271c:	4b75      	ldr	r3, [pc, #468]	; (80028f4 <HAL_RCC_OscConfig+0x5e8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002728:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	21f8      	movs	r1, #248	; 0xf8
 8002732:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800273a:	fa91 f1a1 	rbit	r1, r1
 800273e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002742:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002746:	fab1 f181 	clz	r1, r1
 800274a:	b2c9      	uxtb	r1, r1
 800274c:	408b      	lsls	r3, r1
 800274e:	4969      	ldr	r1, [pc, #420]	; (80028f4 <HAL_RCC_OscConfig+0x5e8>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002754:	e0fd      	b.n	8002952 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8088 	beq.w	8002878 <HAL_RCC_OscConfig+0x56c>
 8002768:	2301      	movs	r3, #1
 800276a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800277a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002788:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	461a      	mov	r2, r3
 8002790:	2301      	movs	r3, #1
 8002792:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe fa46 	bl	8000c24 <HAL_GetTick>
 8002798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279e:	f7fe fa41 	bl	8000c24 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d902      	bls.n	80027b4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	f000 bde2 	b.w	8003378 <HAL_RCC_OscConfig+0x106c>
 80027b4:	2302      	movs	r3, #2
 80027b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80027c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d102      	bne.n	80027e4 <HAL_RCC_OscConfig+0x4d8>
 80027de:	4b45      	ldr	r3, [pc, #276]	; (80028f4 <HAL_RCC_OscConfig+0x5e8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	e013      	b.n	800280c <HAL_RCC_OscConfig+0x500>
 80027e4:	2302      	movs	r3, #2
 80027e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80027f6:	2302      	movs	r3, #2
 80027f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002808:	4b3a      	ldr	r3, [pc, #232]	; (80028f4 <HAL_RCC_OscConfig+0x5e8>)
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	2202      	movs	r2, #2
 800280e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002812:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002816:	fa92 f2a2 	rbit	r2, r2
 800281a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800281e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002822:	fab2 f282 	clz	r2, r2
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	f042 0220 	orr.w	r2, r2, #32
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f002 021f 	and.w	r2, r2, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0af      	beq.n	800279e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283e:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <HAL_RCC_OscConfig+0x5e8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	21f8      	movs	r1, #248	; 0xf8
 8002854:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800285c:	fa91 f1a1 	rbit	r1, r1
 8002860:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002864:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002868:	fab1 f181 	clz	r1, r1
 800286c:	b2c9      	uxtb	r1, r1
 800286e:	408b      	lsls	r3, r1
 8002870:	4920      	ldr	r1, [pc, #128]	; (80028f4 <HAL_RCC_OscConfig+0x5e8>)
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]
 8002876:	e06c      	b.n	8002952 <HAL_RCC_OscConfig+0x646>
 8002878:	2301      	movs	r3, #1
 800287a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800288a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002898:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	461a      	mov	r2, r3
 80028a0:	2300      	movs	r3, #0
 80028a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe f9be 	bl	8000c24 <HAL_GetTick>
 80028a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ac:	e00a      	b.n	80028c4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ae:	f7fe f9b9 	bl	8000c24 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d902      	bls.n	80028c4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	f000 bd5a 	b.w	8003378 <HAL_RCC_OscConfig+0x106c>
 80028c4:	2302      	movs	r3, #2
 80028c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80028d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d104      	bne.n	80028f8 <HAL_RCC_OscConfig+0x5ec>
 80028ee:	4b01      	ldr	r3, [pc, #4]	; (80028f4 <HAL_RCC_OscConfig+0x5e8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	e015      	b.n	8002920 <HAL_RCC_OscConfig+0x614>
 80028f4:	40021000 	.word	0x40021000
 80028f8:	2302      	movs	r3, #2
 80028fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800290a:	2302      	movs	r3, #2
 800290c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002910:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002914:	fa93 f3a3 	rbit	r3, r3
 8002918:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800291c:	4bc8      	ldr	r3, [pc, #800]	; (8002c40 <HAL_RCC_OscConfig+0x934>)
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	2202      	movs	r2, #2
 8002922:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002926:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800292a:	fa92 f2a2 	rbit	r2, r2
 800292e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002932:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002936:	fab2 f282 	clz	r2, r2
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	f042 0220 	orr.w	r2, r2, #32
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	f002 021f 	and.w	r2, r2, #31
 8002946:	2101      	movs	r1, #1
 8002948:	fa01 f202 	lsl.w	r2, r1, r2
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1ad      	bne.n	80028ae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002956:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 8110 	beq.w	8002b88 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d079      	beq.n	8002a6c <HAL_RCC_OscConfig+0x760>
 8002978:	2301      	movs	r3, #1
 800297a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800298a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	4bab      	ldr	r3, [pc, #684]	; (8002c44 <HAL_RCC_OscConfig+0x938>)
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	461a      	mov	r2, r3
 800299e:	2301      	movs	r3, #1
 80029a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a2:	f7fe f93f 	bl	8000c24 <HAL_GetTick>
 80029a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ac:	f7fe f93a 	bl	8000c24 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d902      	bls.n	80029c2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	f000 bcdb 	b.w	8003378 <HAL_RCC_OscConfig+0x106c>
 80029c2:	2302      	movs	r3, #2
 80029c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80029d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029dc:	2202      	movs	r2, #2
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	fa93 f2a3 	rbit	r2, r3
 80029ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a00:	2202      	movs	r2, #2
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	fa93 f2a3 	rbit	r2, r3
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a1a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1c:	4b88      	ldr	r3, [pc, #544]	; (8002c40 <HAL_RCC_OscConfig+0x934>)
 8002a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a28:	2102      	movs	r1, #2
 8002a2a:	6019      	str	r1, [r3, #0]
 8002a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	fa93 f1a3 	rbit	r1, r3
 8002a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a42:	6019      	str	r1, [r3, #0]
  return result;
 8002a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a48:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	2101      	movs	r1, #1
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0a0      	beq.n	80029ac <HAL_RCC_OscConfig+0x6a0>
 8002a6a:	e08d      	b.n	8002b88 <HAL_RCC_OscConfig+0x87c>
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	fa93 f2a3 	rbit	r2, r3
 8002a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a8e:	601a      	str	r2, [r3, #0]
  return result;
 8002a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a94:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a98:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <HAL_RCC_OscConfig+0x938>)
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2300      	movs	r3, #0
 8002aac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aae:	f7fe f8b9 	bl	8000c24 <HAL_GetTick>
 8002ab2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab8:	f7fe f8b4 	bl	8000c24 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d902      	bls.n	8002ace <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	f000 bc55 	b.w	8003378 <HAL_RCC_OscConfig+0x106c>
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ade:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	fa93 f2a3 	rbit	r2, r3
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002afa:	2202      	movs	r2, #2
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b02:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	fa93 f2a3 	rbit	r2, r3
 8002b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b1e:	2202      	movs	r2, #2
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	fa93 f2a3 	rbit	r2, r3
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3a:	4b41      	ldr	r3, [pc, #260]	; (8002c40 <HAL_RCC_OscConfig+0x934>)
 8002b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b42:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b46:	2102      	movs	r1, #2
 8002b48:	6019      	str	r1, [r3, #0]
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	fa93 f1a3 	rbit	r1, r3
 8002b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b60:	6019      	str	r1, [r3, #0]
  return result;
 8002b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b66:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	fab3 f383 	clz	r3, r3
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d197      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 81a1 	beq.w	8002ee0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba4:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <HAL_RCC_OscConfig+0x934>)
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d116      	bne.n	8002bde <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	4b23      	ldr	r3, [pc, #140]	; (8002c40 <HAL_RCC_OscConfig+0x934>)
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <HAL_RCC_OscConfig+0x934>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bba:	61d3      	str	r3, [r2, #28]
 8002bbc:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_RCC_OscConfig+0x934>)
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002bd6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <HAL_RCC_OscConfig+0x93c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d11a      	bne.n	8002c20 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bea:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <HAL_RCC_OscConfig+0x93c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a16      	ldr	r2, [pc, #88]	; (8002c48 <HAL_RCC_OscConfig+0x93c>)
 8002bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf6:	f7fe f815 	bl	8000c24 <HAL_GetTick>
 8002bfa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfe:	e009      	b.n	8002c14 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c00:	f7fe f810 	bl	8000c24 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b64      	cmp	r3, #100	; 0x64
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e3b1      	b.n	8003378 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_RCC_OscConfig+0x93c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ef      	beq.n	8002c00 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d10d      	bne.n	8002c4c <HAL_RCC_OscConfig+0x940>
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_RCC_OscConfig+0x934>)
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	4a02      	ldr	r2, [pc, #8]	; (8002c40 <HAL_RCC_OscConfig+0x934>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6213      	str	r3, [r2, #32]
 8002c3c:	e03c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x9ac>
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000
 8002c44:	10908120 	.word	0x10908120
 8002c48:	40007000 	.word	0x40007000
 8002c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10c      	bne.n	8002c76 <HAL_RCC_OscConfig+0x96a>
 8002c5c:	4bc1      	ldr	r3, [pc, #772]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	4ac0      	ldr	r2, [pc, #768]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002c62:	f023 0301 	bic.w	r3, r3, #1
 8002c66:	6213      	str	r3, [r2, #32]
 8002c68:	4bbe      	ldr	r3, [pc, #760]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	4abd      	ldr	r2, [pc, #756]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002c6e:	f023 0304 	bic.w	r3, r3, #4
 8002c72:	6213      	str	r3, [r2, #32]
 8002c74:	e020      	b.n	8002cb8 <HAL_RCC_OscConfig+0x9ac>
 8002c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b05      	cmp	r3, #5
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x994>
 8002c86:	4bb7      	ldr	r3, [pc, #732]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4ab6      	ldr	r2, [pc, #728]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	6213      	str	r3, [r2, #32]
 8002c92:	4bb4      	ldr	r3, [pc, #720]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	4ab3      	ldr	r2, [pc, #716]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6213      	str	r3, [r2, #32]
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCC_OscConfig+0x9ac>
 8002ca0:	4bb0      	ldr	r3, [pc, #704]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4aaf      	ldr	r2, [pc, #700]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	6213      	str	r3, [r2, #32]
 8002cac:	4bad      	ldr	r3, [pc, #692]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	4aac      	ldr	r2, [pc, #688]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002cb2:	f023 0304 	bic.w	r3, r3, #4
 8002cb6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 8081 	beq.w	8002dcc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cca:	f7fd ffab 	bl	8000c24 <HAL_GetTick>
 8002cce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd4:	f7fd ffa6 	bl	8000c24 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e345      	b.n	8003378 <HAL_RCC_OscConfig+0x106c>
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	fa93 f2a3 	rbit	r2, r3
 8002d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d18:	2202      	movs	r2, #2
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	fa93 f2a3 	rbit	r2, r3
 8002d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d32:	601a      	str	r2, [r3, #0]
  return result;
 8002d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d38:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d3c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	095b      	lsrs	r3, r3, #5
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d102      	bne.n	8002d58 <HAL_RCC_OscConfig+0xa4c>
 8002d52:	4b84      	ldr	r3, [pc, #528]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	e013      	b.n	8002d80 <HAL_RCC_OscConfig+0xa74>
 8002d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d60:	2202      	movs	r2, #2
 8002d62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d68:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	fa93 f2a3 	rbit	r2, r3
 8002d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d76:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	4b79      	ldr	r3, [pc, #484]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002d88:	2102      	movs	r1, #2
 8002d8a:	6011      	str	r1, [r2, #0]
 8002d8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d90:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	fa92 f1a2 	rbit	r1, r2
 8002d9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d9e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002da2:	6011      	str	r1, [r2, #0]
  return result;
 8002da4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002da8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	fab2 f282 	clz	r2, r2
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	f002 021f 	and.w	r2, r2, #31
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d084      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x9c8>
 8002dca:	e07f      	b.n	8002ecc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dcc:	f7fd ff2a 	bl	8000c24 <HAL_GetTick>
 8002dd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd4:	e00b      	b.n	8002dee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fd ff25 	bl	8000c24 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e2c4      	b.n	8003378 <HAL_RCC_OscConfig+0x106c>
 8002dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002df6:	2202      	movs	r2, #2
 8002df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	fa93 f2a3 	rbit	r2, r3
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	fa93 f2a3 	rbit	r2, r3
 8002e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e30:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e34:	601a      	str	r2, [r3, #0]
  return result;
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f043 0302 	orr.w	r3, r3, #2
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d102      	bne.n	8002e5a <HAL_RCC_OscConfig+0xb4e>
 8002e54:	4b43      	ldr	r3, [pc, #268]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	e013      	b.n	8002e82 <HAL_RCC_OscConfig+0xb76>
 8002e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e62:	2202      	movs	r2, #2
 8002e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	fa93 f2a3 	rbit	r2, r3
 8002e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	4b39      	ldr	r3, [pc, #228]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	6011      	str	r1, [r2, #0]
 8002e8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e92:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	fa92 f1a2 	rbit	r1, r2
 8002e9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ea0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ea4:	6011      	str	r1, [r2, #0]
  return result;
 8002ea6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eaa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	fab2 f282 	clz	r2, r2
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	f002 021f 	and.w	r2, r2, #31
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d184      	bne.n	8002dd6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ecc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed4:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ede:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8242 	beq.w	8003376 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef2:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <HAL_RCC_OscConfig+0xc58>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	f000 8213 	beq.w	8003326 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	f040 8162 	bne.w	80031d6 <HAL_RCC_OscConfig+0xeca>
 8002f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f16:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f24:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	fa93 f2a3 	rbit	r2, r3
 8002f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f32:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f36:	601a      	str	r2, [r3, #0]
  return result;
 8002f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f40:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	461a      	mov	r2, r3
 8002f54:	2300      	movs	r3, #0
 8002f56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7fd fe64 	bl	8000c24 <HAL_GetTick>
 8002f5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f60:	e00c      	b.n	8002f7c <HAL_RCC_OscConfig+0xc70>
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fd fe5c 	bl	8000c24 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e1fd      	b.n	8003378 <HAL_RCC_OscConfig+0x106c>
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	fa93 f2a3 	rbit	r2, r3
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002fa0:	601a      	str	r2, [r3, #0]
  return result;
 8002fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002faa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fac:	fab3 f383 	clz	r3, r3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d102      	bne.n	8002fc6 <HAL_RCC_OscConfig+0xcba>
 8002fc0:	4bb0      	ldr	r3, [pc, #704]	; (8003284 <HAL_RCC_OscConfig+0xf78>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	e027      	b.n	8003016 <HAL_RCC_OscConfig+0xd0a>
 8002fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002fce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	fa93 f2a3 	rbit	r2, r3
 8002fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ff4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	fa93 f2a3 	rbit	r2, r3
 8003008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	4b9c      	ldr	r3, [pc, #624]	; (8003284 <HAL_RCC_OscConfig+0xf78>)
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800301a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800301e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003022:	6011      	str	r1, [r2, #0]
 8003024:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003028:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	fa92 f1a2 	rbit	r1, r2
 8003032:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003036:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800303a:	6011      	str	r1, [r2, #0]
  return result;
 800303c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003040:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	fab2 f282 	clz	r2, r2
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	f042 0220 	orr.w	r2, r2, #32
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	f002 021f 	and.w	r2, r2, #31
 8003056:	2101      	movs	r1, #1
 8003058:	fa01 f202 	lsl.w	r2, r1, r2
 800305c:	4013      	ands	r3, r2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d182      	bne.n	8002f68 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003062:	4b88      	ldr	r3, [pc, #544]	; (8003284 <HAL_RCC_OscConfig+0xf78>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800306a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	430b      	orrs	r3, r1
 8003084:	497f      	ldr	r1, [pc, #508]	; (8003284 <HAL_RCC_OscConfig+0xf78>)
 8003086:	4313      	orrs	r3, r2
 8003088:	604b      	str	r3, [r1, #4]
 800308a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003092:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003096:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	fa93 f2a3 	rbit	r2, r3
 80030a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030aa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030ae:	601a      	str	r2, [r3, #0]
  return result;
 80030b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030b8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	461a      	mov	r2, r3
 80030cc:	2301      	movs	r3, #1
 80030ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fd fda8 	bl	8000c24 <HAL_GetTick>
 80030d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030d8:	e009      	b.n	80030ee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030da:	f7fd fda3 	bl	8000c24 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e144      	b.n	8003378 <HAL_RCC_OscConfig+0x106c>
 80030ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003100:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	fa93 f2a3 	rbit	r2, r3
 800310a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003112:	601a      	str	r2, [r3, #0]
  return result;
 8003114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003118:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800311c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d102      	bne.n	8003138 <HAL_RCC_OscConfig+0xe2c>
 8003132:	4b54      	ldr	r3, [pc, #336]	; (8003284 <HAL_RCC_OscConfig+0xf78>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	e027      	b.n	8003188 <HAL_RCC_OscConfig+0xe7c>
 8003138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003140:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003144:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	fa93 f2a3 	rbit	r2, r3
 8003154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003158:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003162:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003166:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003170:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	fa93 f2a3 	rbit	r2, r3
 800317a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	4b3f      	ldr	r3, [pc, #252]	; (8003284 <HAL_RCC_OscConfig+0xf78>)
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800318c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003190:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003194:	6011      	str	r1, [r2, #0]
 8003196:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800319a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	fa92 f1a2 	rbit	r1, r2
 80031a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031a8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031ac:	6011      	str	r1, [r2, #0]
  return result;
 80031ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031b2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	fab2 f282 	clz	r2, r2
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	f042 0220 	orr.w	r2, r2, #32
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	f002 021f 	and.w	r2, r2, #31
 80031c8:	2101      	movs	r1, #1
 80031ca:	fa01 f202 	lsl.w	r2, r1, r2
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d082      	beq.n	80030da <HAL_RCC_OscConfig+0xdce>
 80031d4:	e0cf      	b.n	8003376 <HAL_RCC_OscConfig+0x106a>
 80031d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031da:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80031de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	fa93 f2a3 	rbit	r2, r3
 80031f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80031fa:	601a      	str	r2, [r3, #0]
  return result;
 80031fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003200:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003204:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003210:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	461a      	mov	r2, r3
 8003218:	2300      	movs	r3, #0
 800321a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fd fd02 	bl	8000c24 <HAL_GetTick>
 8003220:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003224:	e009      	b.n	800323a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003226:	f7fd fcfd 	bl	8000c24 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e09e      	b.n	8003378 <HAL_RCC_OscConfig+0x106c>
 800323a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003242:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	fa93 f2a3 	rbit	r2, r3
 8003256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800325e:	601a      	str	r2, [r3, #0]
  return result;
 8003260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003264:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003268:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	095b      	lsrs	r3, r3, #5
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d104      	bne.n	8003288 <HAL_RCC_OscConfig+0xf7c>
 800327e:	4b01      	ldr	r3, [pc, #4]	; (8003284 <HAL_RCC_OscConfig+0xf78>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	e029      	b.n	80032d8 <HAL_RCC_OscConfig+0xfcc>
 8003284:	40021000 	.word	0x40021000
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003290:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003294:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	fa93 f2a3 	rbit	r2, r3
 80032a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80032b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	fa93 f2a3 	rbit	r2, r3
 80032ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	4b2b      	ldr	r3, [pc, #172]	; (8003384 <HAL_RCC_OscConfig+0x1078>)
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032dc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80032e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032e4:	6011      	str	r1, [r2, #0]
 80032e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ea:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	fa92 f1a2 	rbit	r1, r2
 80032f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032f8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80032fc:	6011      	str	r1, [r2, #0]
  return result;
 80032fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003302:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	fab2 f282 	clz	r2, r2
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	f042 0220 	orr.w	r2, r2, #32
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	f002 021f 	and.w	r2, r2, #31
 8003318:	2101      	movs	r1, #1
 800331a:	fa01 f202 	lsl.w	r2, r1, r2
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d180      	bne.n	8003226 <HAL_RCC_OscConfig+0xf1a>
 8003324:	e027      	b.n	8003376 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e01e      	b.n	8003378 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800333a:	4b12      	ldr	r3, [pc, #72]	; (8003384 <HAL_RCC_OscConfig+0x1078>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003342:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003346:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800334a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	429a      	cmp	r2, r3
 8003358:	d10b      	bne.n	8003372 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800335a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800335e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003366:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800336e:	429a      	cmp	r2, r3
 8003370:	d001      	beq.n	8003376 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000

08003388 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b09e      	sub	sp, #120	; 0x78
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e162      	b.n	8003666 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a0:	4b90      	ldr	r3, [pc, #576]	; (80035e4 <HAL_RCC_ClockConfig+0x25c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d910      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b8d      	ldr	r3, [pc, #564]	; (80035e4 <HAL_RCC_ClockConfig+0x25c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 0207 	bic.w	r2, r3, #7
 80033b6:	498b      	ldr	r1, [pc, #556]	; (80035e4 <HAL_RCC_ClockConfig+0x25c>)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b89      	ldr	r3, [pc, #548]	; (80035e4 <HAL_RCC_ClockConfig+0x25c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e14a      	b.n	8003666 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033dc:	4b82      	ldr	r3, [pc, #520]	; (80035e8 <HAL_RCC_ClockConfig+0x260>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	497f      	ldr	r1, [pc, #508]	; (80035e8 <HAL_RCC_ClockConfig+0x260>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80dc 	beq.w	80035b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d13c      	bne.n	800347e <HAL_RCC_ClockConfig+0xf6>
 8003404:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003408:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800340c:	fa93 f3a3 	rbit	r3, r3
 8003410:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003414:	fab3 f383 	clz	r3, r3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d102      	bne.n	800342e <HAL_RCC_ClockConfig+0xa6>
 8003428:	4b6f      	ldr	r3, [pc, #444]	; (80035e8 <HAL_RCC_ClockConfig+0x260>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	e00f      	b.n	800344e <HAL_RCC_ClockConfig+0xc6>
 800342e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003432:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	667b      	str	r3, [r7, #100]	; 0x64
 800343c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003440:	663b      	str	r3, [r7, #96]	; 0x60
 8003442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	65fb      	str	r3, [r7, #92]	; 0x5c
 800344a:	4b67      	ldr	r3, [pc, #412]	; (80035e8 <HAL_RCC_ClockConfig+0x260>)
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003452:	65ba      	str	r2, [r7, #88]	; 0x58
 8003454:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003456:	fa92 f2a2 	rbit	r2, r2
 800345a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800345c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800345e:	fab2 f282 	clz	r2, r2
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	f042 0220 	orr.w	r2, r2, #32
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	f002 021f 	and.w	r2, r2, #31
 800346e:	2101      	movs	r1, #1
 8003470:	fa01 f202 	lsl.w	r2, r1, r2
 8003474:	4013      	ands	r3, r2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d17b      	bne.n	8003572 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e0f3      	b.n	8003666 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d13c      	bne.n	8003500 <HAL_RCC_ClockConfig+0x178>
 8003486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800348a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d102      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x128>
 80034aa:	4b4f      	ldr	r3, [pc, #316]	; (80035e8 <HAL_RCC_ClockConfig+0x260>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	e00f      	b.n	80034d0 <HAL_RCC_ClockConfig+0x148>
 80034b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b8:	fa93 f3a3 	rbit	r3, r3
 80034bc:	647b      	str	r3, [r7, #68]	; 0x44
 80034be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034c2:	643b      	str	r3, [r7, #64]	; 0x40
 80034c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034cc:	4b46      	ldr	r3, [pc, #280]	; (80035e8 <HAL_RCC_ClockConfig+0x260>)
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80034d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034d8:	fa92 f2a2 	rbit	r2, r2
 80034dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80034de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034e0:	fab2 f282 	clz	r2, r2
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	f042 0220 	orr.w	r2, r2, #32
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	f002 021f 	and.w	r2, r2, #31
 80034f0:	2101      	movs	r1, #1
 80034f2:	fa01 f202 	lsl.w	r2, r1, r2
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d13a      	bne.n	8003572 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0b2      	b.n	8003666 <HAL_RCC_ClockConfig+0x2de>
 8003500:	2302      	movs	r3, #2
 8003502:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350e:	fab3 f383 	clz	r3, r3
 8003512:	b2db      	uxtb	r3, r3
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d102      	bne.n	8003528 <HAL_RCC_ClockConfig+0x1a0>
 8003522:	4b31      	ldr	r3, [pc, #196]	; (80035e8 <HAL_RCC_ClockConfig+0x260>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	e00d      	b.n	8003544 <HAL_RCC_ClockConfig+0x1bc>
 8003528:	2302      	movs	r3, #2
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
 8003534:	2302      	movs	r3, #2
 8003536:	623b      	str	r3, [r7, #32]
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	61fb      	str	r3, [r7, #28]
 8003540:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <HAL_RCC_ClockConfig+0x260>)
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	2202      	movs	r2, #2
 8003546:	61ba      	str	r2, [r7, #24]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	fa92 f2a2 	rbit	r2, r2
 800354e:	617a      	str	r2, [r7, #20]
  return result;
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	fab2 f282 	clz	r2, r2
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	f042 0220 	orr.w	r2, r2, #32
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	f002 021f 	and.w	r2, r2, #31
 8003562:	2101      	movs	r1, #1
 8003564:	fa01 f202 	lsl.w	r2, r1, r2
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e079      	b.n	8003666 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003572:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_RCC_ClockConfig+0x260>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f023 0203 	bic.w	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	491a      	ldr	r1, [pc, #104]	; (80035e8 <HAL_RCC_ClockConfig+0x260>)
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003584:	f7fd fb4e 	bl	8000c24 <HAL_GetTick>
 8003588:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800358c:	f7fd fb4a 	bl	8000c24 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e061      	b.n	8003666 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <HAL_RCC_ClockConfig+0x260>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 020c 	and.w	r2, r3, #12
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d1eb      	bne.n	800358c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCC_ClockConfig+0x25c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d214      	bcs.n	80035ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <HAL_RCC_ClockConfig+0x25c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 0207 	bic.w	r2, r3, #7
 80035ca:	4906      	ldr	r1, [pc, #24]	; (80035e4 <HAL_RCC_ClockConfig+0x25c>)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <HAL_RCC_ClockConfig+0x25c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d005      	beq.n	80035ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e040      	b.n	8003666 <HAL_RCC_ClockConfig+0x2de>
 80035e4:	40022000 	.word	0x40022000
 80035e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_RCC_ClockConfig+0x2e8>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	491a      	ldr	r1, [pc, #104]	; (8003670 <HAL_RCC_ClockConfig+0x2e8>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003616:	4b16      	ldr	r3, [pc, #88]	; (8003670 <HAL_RCC_ClockConfig+0x2e8>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4912      	ldr	r1, [pc, #72]	; (8003670 <HAL_RCC_ClockConfig+0x2e8>)
 8003626:	4313      	orrs	r3, r2
 8003628:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800362a:	f000 f829 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 800362e:	4601      	mov	r1, r0
 8003630:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <HAL_RCC_ClockConfig+0x2e8>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003638:	22f0      	movs	r2, #240	; 0xf0
 800363a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	fa92 f2a2 	rbit	r2, r2
 8003642:	60fa      	str	r2, [r7, #12]
  return result;
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	fab2 f282 	clz	r2, r2
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	40d3      	lsrs	r3, r2
 800364e:	4a09      	ldr	r2, [pc, #36]	; (8003674 <HAL_RCC_ClockConfig+0x2ec>)
 8003650:	5cd3      	ldrb	r3, [r2, r3]
 8003652:	fa21 f303 	lsr.w	r3, r1, r3
 8003656:	4a08      	ldr	r2, [pc, #32]	; (8003678 <HAL_RCC_ClockConfig+0x2f0>)
 8003658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800365a:	4b08      	ldr	r3, [pc, #32]	; (800367c <HAL_RCC_ClockConfig+0x2f4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fd fa9c 	bl	8000b9c <HAL_InitTick>
  
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3778      	adds	r7, #120	; 0x78
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000
 8003674:	0800551c 	.word	0x0800551c
 8003678:	20000000 	.word	0x20000000
 800367c:	20000004 	.word	0x20000004

08003680 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003680:	b480      	push	{r7}
 8003682:	b08b      	sub	sp, #44	; 0x2c
 8003684:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	2300      	movs	r3, #0
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	2300      	movs	r3, #0
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800369a:	4b29      	ldr	r3, [pc, #164]	; (8003740 <HAL_RCC_GetSysClockFreq+0xc0>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d002      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x30>
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d003      	beq.n	80036b6 <HAL_RCC_GetSysClockFreq+0x36>
 80036ae:	e03c      	b.n	800372a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036b0:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036b2:	623b      	str	r3, [r7, #32]
      break;
 80036b4:	e03c      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80036c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	fa92 f2a2 	rbit	r2, r2
 80036c8:	607a      	str	r2, [r7, #4]
  return result;
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	fab2 f282 	clz	r2, r2
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	40d3      	lsrs	r3, r2
 80036d4:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036d6:	5cd3      	ldrb	r3, [r2, r3]
 80036d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80036da:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	220f      	movs	r2, #15
 80036e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	fa92 f2a2 	rbit	r2, r2
 80036ec:	60fa      	str	r2, [r7, #12]
  return result;
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	fab2 f282 	clz	r2, r2
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	40d3      	lsrs	r3, r2
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <HAL_RCC_GetSysClockFreq+0xcc>)
 80036fa:	5cd3      	ldrb	r3, [r2, r3]
 80036fc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003708:	4a0e      	ldr	r2, [pc, #56]	; (8003744 <HAL_RCC_GetSysClockFreq+0xc4>)
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fb02 f303 	mul.w	r3, r2, r3
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
 8003718:	e004      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	4a0c      	ldr	r2, [pc, #48]	; (8003750 <HAL_RCC_GetSysClockFreq+0xd0>)
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	623b      	str	r3, [r7, #32]
      break;
 8003728:	e002      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_RCC_GetSysClockFreq+0xc4>)
 800372c:	623b      	str	r3, [r7, #32]
      break;
 800372e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003730:	6a3b      	ldr	r3, [r7, #32]
}
 8003732:	4618      	mov	r0, r3
 8003734:	372c      	adds	r7, #44	; 0x2c
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	007a1200 	.word	0x007a1200
 8003748:	08005534 	.word	0x08005534
 800374c:	08005544 	.word	0x08005544
 8003750:	003d0900 	.word	0x003d0900

08003754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003758:	4b03      	ldr	r3, [pc, #12]	; (8003768 <HAL_RCC_GetHCLKFreq+0x14>)
 800375a:	681b      	ldr	r3, [r3, #0]
}
 800375c:	4618      	mov	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	20000000 	.word	0x20000000

0800376c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003772:	f7ff ffef 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 8003776:	4601      	mov	r1, r0
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003780:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003784:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	fa92 f2a2 	rbit	r2, r2
 800378c:	603a      	str	r2, [r7, #0]
  return result;
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	fab2 f282 	clz	r2, r2
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	40d3      	lsrs	r3, r2
 8003798:	4a04      	ldr	r2, [pc, #16]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800379a:	5cd3      	ldrb	r3, [r2, r3]
 800379c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000
 80037ac:	0800552c 	.word	0x0800552c

080037b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037b6:	f7ff ffcd 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 80037ba:	4601      	mov	r1, r0
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80037c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80037c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	fa92 f2a2 	rbit	r2, r2
 80037d0:	603a      	str	r2, [r7, #0]
  return result;
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	fab2 f282 	clz	r2, r2
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	40d3      	lsrs	r3, r2
 80037dc:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80037de:	5cd3      	ldrb	r3, [r2, r3]
 80037e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000
 80037f0:	0800552c 	.word	0x0800552c

080037f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e049      	b.n	800389a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd f832 	bl	8000884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	4619      	mov	r1, r3
 8003832:	4610      	mov	r0, r2
 8003834:	f000 f954 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d001      	beq.n	80038bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e038      	b.n	800392e <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1c      	ldr	r2, [pc, #112]	; (800393c <HAL_TIM_Base_Start+0x98>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00e      	beq.n	80038ec <HAL_TIM_Base_Start+0x48>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d6:	d009      	beq.n	80038ec <HAL_TIM_Base_Start+0x48>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a18      	ldr	r2, [pc, #96]	; (8003940 <HAL_TIM_Base_Start+0x9c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d004      	beq.n	80038ec <HAL_TIM_Base_Start+0x48>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a17      	ldr	r2, [pc, #92]	; (8003944 <HAL_TIM_Base_Start+0xa0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d115      	bne.n	8003918 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	4b15      	ldr	r3, [pc, #84]	; (8003948 <HAL_TIM_Base_Start+0xa4>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b06      	cmp	r3, #6
 80038fc:	d015      	beq.n	800392a <HAL_TIM_Base_Start+0x86>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003904:	d011      	beq.n	800392a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0201 	orr.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003916:	e008      	b.n	800392a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e000      	b.n	800392c <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40012c00 	.word	0x40012c00
 8003940:	40000400 	.word	0x40000400
 8003944:	40014000 	.word	0x40014000
 8003948:	00010007 	.word	0x00010007

0800394c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_TIM_ConfigClockSource+0x1c>
 8003964:	2302      	movs	r3, #2
 8003966:	e0b6      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x18a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003986:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800398a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a4:	d03e      	beq.n	8003a24 <HAL_TIM_ConfigClockSource+0xd8>
 80039a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039aa:	f200 8087 	bhi.w	8003abc <HAL_TIM_ConfigClockSource+0x170>
 80039ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b2:	f000 8086 	beq.w	8003ac2 <HAL_TIM_ConfigClockSource+0x176>
 80039b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ba:	d87f      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x170>
 80039bc:	2b70      	cmp	r3, #112	; 0x70
 80039be:	d01a      	beq.n	80039f6 <HAL_TIM_ConfigClockSource+0xaa>
 80039c0:	2b70      	cmp	r3, #112	; 0x70
 80039c2:	d87b      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x170>
 80039c4:	2b60      	cmp	r3, #96	; 0x60
 80039c6:	d050      	beq.n	8003a6a <HAL_TIM_ConfigClockSource+0x11e>
 80039c8:	2b60      	cmp	r3, #96	; 0x60
 80039ca:	d877      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x170>
 80039cc:	2b50      	cmp	r3, #80	; 0x50
 80039ce:	d03c      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0xfe>
 80039d0:	2b50      	cmp	r3, #80	; 0x50
 80039d2:	d873      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x170>
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d058      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0x13e>
 80039d8:	2b40      	cmp	r3, #64	; 0x40
 80039da:	d86f      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x170>
 80039dc:	2b30      	cmp	r3, #48	; 0x30
 80039de:	d064      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0x15e>
 80039e0:	2b30      	cmp	r3, #48	; 0x30
 80039e2:	d86b      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x170>
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d060      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0x15e>
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d867      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x170>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d05c      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0x15e>
 80039f0:	2b10      	cmp	r3, #16
 80039f2:	d05a      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0x15e>
 80039f4:	e062      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6899      	ldr	r1, [r3, #8]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f000 f95d 	bl	8003cc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	609a      	str	r2, [r3, #8]
      break;
 8003a22:	e04f      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	6899      	ldr	r1, [r3, #8]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f000 f946 	bl	8003cc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a46:	609a      	str	r2, [r3, #8]
      break;
 8003a48:	e03c      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6859      	ldr	r1, [r3, #4]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	461a      	mov	r2, r3
 8003a58:	f000 f8ba 	bl	8003bd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2150      	movs	r1, #80	; 0x50
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 f913 	bl	8003c8e <TIM_ITRx_SetConfig>
      break;
 8003a68:	e02c      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6859      	ldr	r1, [r3, #4]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f000 f8d9 	bl	8003c2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2160      	movs	r1, #96	; 0x60
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f903 	bl	8003c8e <TIM_ITRx_SetConfig>
      break;
 8003a88:	e01c      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	6859      	ldr	r1, [r3, #4]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	461a      	mov	r2, r3
 8003a98:	f000 f89a 	bl	8003bd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2140      	movs	r1, #64	; 0x40
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f8f3 	bl	8003c8e <TIM_ITRx_SetConfig>
      break;
 8003aa8:	e00c      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f000 f8ea 	bl	8003c8e <TIM_ITRx_SetConfig>
      break;
 8003aba:	e003      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac0:	e000      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a32      	ldr	r2, [pc, #200]	; (8003bbc <TIM_Base_SetConfig+0xdc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d007      	beq.n	8003b08 <TIM_Base_SetConfig+0x28>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afe:	d003      	beq.n	8003b08 <TIM_Base_SetConfig+0x28>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a2f      	ldr	r2, [pc, #188]	; (8003bc0 <TIM_Base_SetConfig+0xe0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d108      	bne.n	8003b1a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a27      	ldr	r2, [pc, #156]	; (8003bbc <TIM_Base_SetConfig+0xdc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <TIM_Base_SetConfig+0x6a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b28:	d00f      	beq.n	8003b4a <TIM_Base_SetConfig+0x6a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a24      	ldr	r2, [pc, #144]	; (8003bc0 <TIM_Base_SetConfig+0xe0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00b      	beq.n	8003b4a <TIM_Base_SetConfig+0x6a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a23      	ldr	r2, [pc, #140]	; (8003bc4 <TIM_Base_SetConfig+0xe4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d007      	beq.n	8003b4a <TIM_Base_SetConfig+0x6a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a22      	ldr	r2, [pc, #136]	; (8003bc8 <TIM_Base_SetConfig+0xe8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d003      	beq.n	8003b4a <TIM_Base_SetConfig+0x6a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a21      	ldr	r2, [pc, #132]	; (8003bcc <TIM_Base_SetConfig+0xec>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d108      	bne.n	8003b5c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a0e      	ldr	r2, [pc, #56]	; (8003bbc <TIM_Base_SetConfig+0xdc>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00b      	beq.n	8003ba0 <TIM_Base_SetConfig+0xc0>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a0e      	ldr	r2, [pc, #56]	; (8003bc4 <TIM_Base_SetConfig+0xe4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <TIM_Base_SetConfig+0xc0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <TIM_Base_SetConfig+0xe8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_Base_SetConfig+0xc0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a0c      	ldr	r2, [pc, #48]	; (8003bcc <TIM_Base_SetConfig+0xec>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d103      	bne.n	8003ba8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	615a      	str	r2, [r3, #20]
}
 8003bae:	bf00      	nop
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	40000400 	.word	0x40000400
 8003bc4:	40014000 	.word	0x40014000
 8003bc8:	40014400 	.word	0x40014400
 8003bcc:	40014800 	.word	0x40014800

08003bd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f023 0201 	bic.w	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f023 030a 	bic.w	r3, r3, #10
 8003c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	621a      	str	r2, [r3, #32]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b087      	sub	sp, #28
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	f023 0210 	bic.w	r2, r3, #16
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	031b      	lsls	r3, r3, #12
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	621a      	str	r2, [r3, #32]
}
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f043 0307 	orr.w	r3, r3, #7
 8003cb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	609a      	str	r2, [r3, #8]
}
 8003cb8:	bf00      	nop
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	021a      	lsls	r2, r3, #8
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	609a      	str	r2, [r3, #8]
}
 8003cf8:	bf00      	nop
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e054      	b.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a24      	ldr	r2, [pc, #144]	; (8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d108      	bne.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a17      	ldr	r2, [pc, #92]	; (8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00e      	beq.n	8003d9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d84:	d009      	beq.n	8003d9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a13      	ldr	r2, [pc, #76]	; (8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d004      	beq.n	8003d9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a11      	ldr	r2, [pc, #68]	; (8003ddc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d10c      	bne.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003da0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40012c00 	.word	0x40012c00
 8003dd8:	40000400 	.word	0x40000400
 8003ddc:	40014000 	.word	0x40014000

08003de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e040      	b.n	8003e74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fc fd5e 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2224      	movs	r2, #36	; 0x24
 8003e0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0201 	bic.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f8c0 	bl	8003fa4 <UART_SetConfig>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e022      	b.n	8003e74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f9ea 	bl	8004210 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa71 	bl	8004354 <UART_CheckIdleState>
 8003e72:	4603      	mov	r3, r0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	; 0x28
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	f040 8082 	bne.w	8003f9a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_UART_Transmit+0x26>
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e07a      	b.n	8003f9c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_UART_Transmit+0x38>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e073      	b.n	8003f9c <HAL_UART_Transmit+0x120>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2221      	movs	r2, #33	; 0x21
 8003ec8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eca:	f7fc feab 	bl	8000c24 <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee8:	d108      	bne.n	8003efc <HAL_UART_Transmit+0x80>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e003      	b.n	8003f04 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f0c:	e02d      	b.n	8003f6a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2200      	movs	r2, #0
 8003f16:	2180      	movs	r1, #128	; 0x80
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fa64 	bl	80043e6 <UART_WaitOnFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e039      	b.n	8003f9c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10b      	bne.n	8003f46 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	881a      	ldrh	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f3a:	b292      	uxth	r2, r2
 8003f3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	3302      	adds	r3, #2
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	e008      	b.n	8003f58 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	781a      	ldrb	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	b292      	uxth	r2, r2
 8003f50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3301      	adds	r3, #1
 8003f56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1cb      	bne.n	8003f0e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2140      	movs	r1, #64	; 0x40
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fa30 	bl	80043e6 <UART_WaitOnFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e005      	b.n	8003f9c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	e000      	b.n	8003f9c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
  }
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3720      	adds	r7, #32
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b8a      	ldr	r3, [pc, #552]	; (80041f8 <UART_SetConfig+0x254>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	6979      	ldr	r1, [r7, #20]
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	430a      	orrs	r2, r1
 8004014:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a78      	ldr	r2, [pc, #480]	; (80041fc <UART_SetConfig+0x258>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d120      	bne.n	8004062 <UART_SetConfig+0xbe>
 8004020:	4b77      	ldr	r3, [pc, #476]	; (8004200 <UART_SetConfig+0x25c>)
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	2b03      	cmp	r3, #3
 800402a:	d817      	bhi.n	800405c <UART_SetConfig+0xb8>
 800402c:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <UART_SetConfig+0x90>)
 800402e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004032:	bf00      	nop
 8004034:	08004045 	.word	0x08004045
 8004038:	08004051 	.word	0x08004051
 800403c:	08004057 	.word	0x08004057
 8004040:	0800404b 	.word	0x0800404b
 8004044:	2300      	movs	r3, #0
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e01d      	b.n	8004086 <UART_SetConfig+0xe2>
 800404a:	2302      	movs	r3, #2
 800404c:	77fb      	strb	r3, [r7, #31]
 800404e:	e01a      	b.n	8004086 <UART_SetConfig+0xe2>
 8004050:	2304      	movs	r3, #4
 8004052:	77fb      	strb	r3, [r7, #31]
 8004054:	e017      	b.n	8004086 <UART_SetConfig+0xe2>
 8004056:	2308      	movs	r3, #8
 8004058:	77fb      	strb	r3, [r7, #31]
 800405a:	e014      	b.n	8004086 <UART_SetConfig+0xe2>
 800405c:	2310      	movs	r3, #16
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e011      	b.n	8004086 <UART_SetConfig+0xe2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a67      	ldr	r2, [pc, #412]	; (8004204 <UART_SetConfig+0x260>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d102      	bne.n	8004072 <UART_SetConfig+0xce>
 800406c:	2300      	movs	r3, #0
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	e009      	b.n	8004086 <UART_SetConfig+0xe2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a64      	ldr	r2, [pc, #400]	; (8004208 <UART_SetConfig+0x264>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d102      	bne.n	8004082 <UART_SetConfig+0xde>
 800407c:	2300      	movs	r3, #0
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e001      	b.n	8004086 <UART_SetConfig+0xe2>
 8004082:	2310      	movs	r3, #16
 8004084:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408e:	d15b      	bne.n	8004148 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004090:	7ffb      	ldrb	r3, [r7, #31]
 8004092:	2b08      	cmp	r3, #8
 8004094:	d827      	bhi.n	80040e6 <UART_SetConfig+0x142>
 8004096:	a201      	add	r2, pc, #4	; (adr r2, 800409c <UART_SetConfig+0xf8>)
 8004098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409c:	080040c1 	.word	0x080040c1
 80040a0:	080040c9 	.word	0x080040c9
 80040a4:	080040d1 	.word	0x080040d1
 80040a8:	080040e7 	.word	0x080040e7
 80040ac:	080040d7 	.word	0x080040d7
 80040b0:	080040e7 	.word	0x080040e7
 80040b4:	080040e7 	.word	0x080040e7
 80040b8:	080040e7 	.word	0x080040e7
 80040bc:	080040df 	.word	0x080040df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c0:	f7ff fb54 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 80040c4:	61b8      	str	r0, [r7, #24]
        break;
 80040c6:	e013      	b.n	80040f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040c8:	f7ff fb72 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 80040cc:	61b8      	str	r0, [r7, #24]
        break;
 80040ce:	e00f      	b.n	80040f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d0:	4b4e      	ldr	r3, [pc, #312]	; (800420c <UART_SetConfig+0x268>)
 80040d2:	61bb      	str	r3, [r7, #24]
        break;
 80040d4:	e00c      	b.n	80040f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040d6:	f7ff fad3 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 80040da:	61b8      	str	r0, [r7, #24]
        break;
 80040dc:	e008      	b.n	80040f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e2:	61bb      	str	r3, [r7, #24]
        break;
 80040e4:	e004      	b.n	80040f0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	77bb      	strb	r3, [r7, #30]
        break;
 80040ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d074      	beq.n	80041e0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	005a      	lsls	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	441a      	add	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	fbb2 f3f3 	udiv	r3, r2, r3
 800410a:	b29b      	uxth	r3, r3
 800410c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b0f      	cmp	r3, #15
 8004112:	d916      	bls.n	8004142 <UART_SetConfig+0x19e>
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411a:	d212      	bcs.n	8004142 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	b29b      	uxth	r3, r3
 8004120:	f023 030f 	bic.w	r3, r3, #15
 8004124:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	085b      	lsrs	r3, r3, #1
 800412a:	b29b      	uxth	r3, r3
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	b29a      	uxth	r2, r3
 8004132:	89fb      	ldrh	r3, [r7, #14]
 8004134:	4313      	orrs	r3, r2
 8004136:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	89fa      	ldrh	r2, [r7, #14]
 800413e:	60da      	str	r2, [r3, #12]
 8004140:	e04e      	b.n	80041e0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	77bb      	strb	r3, [r7, #30]
 8004146:	e04b      	b.n	80041e0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004148:	7ffb      	ldrb	r3, [r7, #31]
 800414a:	2b08      	cmp	r3, #8
 800414c:	d827      	bhi.n	800419e <UART_SetConfig+0x1fa>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <UART_SetConfig+0x1b0>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	08004179 	.word	0x08004179
 8004158:	08004181 	.word	0x08004181
 800415c:	08004189 	.word	0x08004189
 8004160:	0800419f 	.word	0x0800419f
 8004164:	0800418f 	.word	0x0800418f
 8004168:	0800419f 	.word	0x0800419f
 800416c:	0800419f 	.word	0x0800419f
 8004170:	0800419f 	.word	0x0800419f
 8004174:	08004197 	.word	0x08004197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004178:	f7ff faf8 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 800417c:	61b8      	str	r0, [r7, #24]
        break;
 800417e:	e013      	b.n	80041a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004180:	f7ff fb16 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 8004184:	61b8      	str	r0, [r7, #24]
        break;
 8004186:	e00f      	b.n	80041a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004188:	4b20      	ldr	r3, [pc, #128]	; (800420c <UART_SetConfig+0x268>)
 800418a:	61bb      	str	r3, [r7, #24]
        break;
 800418c:	e00c      	b.n	80041a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418e:	f7ff fa77 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 8004192:	61b8      	str	r0, [r7, #24]
        break;
 8004194:	e008      	b.n	80041a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419a:	61bb      	str	r3, [r7, #24]
        break;
 800419c:	e004      	b.n	80041a8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	77bb      	strb	r3, [r7, #30]
        break;
 80041a6:	bf00      	nop
    }

    if (pclk != 0U)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d018      	beq.n	80041e0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	085a      	lsrs	r2, r3, #1
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	441a      	add	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b0f      	cmp	r3, #15
 80041c8:	d908      	bls.n	80041dc <UART_SetConfig+0x238>
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d0:	d204      	bcs.n	80041dc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	60da      	str	r2, [r3, #12]
 80041da:	e001      	b.n	80041e0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80041ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3720      	adds	r7, #32
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	efff69f3 	.word	0xefff69f3
 80041fc:	40013800 	.word	0x40013800
 8004200:	40021000 	.word	0x40021000
 8004204:	40004400 	.word	0x40004400
 8004208:	40004800 	.word	0x40004800
 800420c:	007a1200 	.word	0x007a1200

08004210 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01a      	beq.n	8004326 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800430e:	d10a      	bne.n	8004326 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
  }
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af02      	add	r7, sp, #8
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004364:	f7fc fc5e 	bl	8000c24 <HAL_GetTick>
 8004368:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b08      	cmp	r3, #8
 8004376:	d10e      	bne.n	8004396 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f82d 	bl	80043e6 <UART_WaitOnFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e023      	b.n	80043de <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d10e      	bne.n	80043c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f817 	bl	80043e6 <UART_WaitOnFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e00d      	b.n	80043de <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b09c      	sub	sp, #112	; 0x70
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	4613      	mov	r3, r2
 80043f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f6:	e0a5      	b.n	8004544 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	f000 80a1 	beq.w	8004544 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004402:	f7fc fc0f 	bl	8000c24 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800440e:	429a      	cmp	r2, r3
 8004410:	d302      	bcc.n	8004418 <UART_WaitOnFlagUntilTimeout+0x32>
 8004412:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004414:	2b00      	cmp	r3, #0
 8004416:	d13e      	bne.n	8004496 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004428:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800442c:	667b      	str	r3, [r7, #100]	; 0x64
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004436:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004438:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800443c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e6      	bne.n	8004418 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3308      	adds	r3, #8
 8004450:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	663b      	str	r3, [r7, #96]	; 0x60
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3308      	adds	r3, #8
 8004468:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800446a:	64ba      	str	r2, [r7, #72]	; 0x48
 800446c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004470:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e5      	bne.n	800444a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e067      	b.n	8004566 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d04f      	beq.n	8004544 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b2:	d147      	bne.n	8004544 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044dc:	637b      	str	r3, [r7, #52]	; 0x34
 80044de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e6      	bne.n	80044be <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3308      	adds	r3, #8
 80044f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	66bb      	str	r3, [r7, #104]	; 0x68
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3308      	adds	r3, #8
 800450e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004510:	623a      	str	r2, [r7, #32]
 8004512:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	69f9      	ldr	r1, [r7, #28]
 8004516:	6a3a      	ldr	r2, [r7, #32]
 8004518:	e841 2300 	strex	r3, r2, [r1]
 800451c:	61bb      	str	r3, [r7, #24]
   return(result);
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e5      	bne.n	80044f0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e010      	b.n	8004566 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	4013      	ands	r3, r2
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	429a      	cmp	r2, r3
 8004552:	bf0c      	ite	eq
 8004554:	2301      	moveq	r3, #1
 8004556:	2300      	movne	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	429a      	cmp	r2, r3
 8004560:	f43f af4a 	beq.w	80043f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3770      	adds	r7, #112	; 0x70
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <__errno>:
 8004570:	4b01      	ldr	r3, [pc, #4]	; (8004578 <__errno+0x8>)
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	2000000c 	.word	0x2000000c

0800457c <__libc_init_array>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	4d0d      	ldr	r5, [pc, #52]	; (80045b4 <__libc_init_array+0x38>)
 8004580:	4c0d      	ldr	r4, [pc, #52]	; (80045b8 <__libc_init_array+0x3c>)
 8004582:	1b64      	subs	r4, r4, r5
 8004584:	10a4      	asrs	r4, r4, #2
 8004586:	2600      	movs	r6, #0
 8004588:	42a6      	cmp	r6, r4
 800458a:	d109      	bne.n	80045a0 <__libc_init_array+0x24>
 800458c:	4d0b      	ldr	r5, [pc, #44]	; (80045bc <__libc_init_array+0x40>)
 800458e:	4c0c      	ldr	r4, [pc, #48]	; (80045c0 <__libc_init_array+0x44>)
 8004590:	f000 ffae 	bl	80054f0 <_init>
 8004594:	1b64      	subs	r4, r4, r5
 8004596:	10a4      	asrs	r4, r4, #2
 8004598:	2600      	movs	r6, #0
 800459a:	42a6      	cmp	r6, r4
 800459c:	d105      	bne.n	80045aa <__libc_init_array+0x2e>
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a4:	4798      	blx	r3
 80045a6:	3601      	adds	r6, #1
 80045a8:	e7ee      	b.n	8004588 <__libc_init_array+0xc>
 80045aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ae:	4798      	blx	r3
 80045b0:	3601      	adds	r6, #1
 80045b2:	e7f2      	b.n	800459a <__libc_init_array+0x1e>
 80045b4:	080055ec 	.word	0x080055ec
 80045b8:	080055ec 	.word	0x080055ec
 80045bc:	080055ec 	.word	0x080055ec
 80045c0:	080055f0 	.word	0x080055f0

080045c4 <memset>:
 80045c4:	4402      	add	r2, r0
 80045c6:	4603      	mov	r3, r0
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d100      	bne.n	80045ce <memset+0xa>
 80045cc:	4770      	bx	lr
 80045ce:	f803 1b01 	strb.w	r1, [r3], #1
 80045d2:	e7f9      	b.n	80045c8 <memset+0x4>

080045d4 <iprintf>:
 80045d4:	b40f      	push	{r0, r1, r2, r3}
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <iprintf+0x2c>)
 80045d8:	b513      	push	{r0, r1, r4, lr}
 80045da:	681c      	ldr	r4, [r3, #0]
 80045dc:	b124      	cbz	r4, 80045e8 <iprintf+0x14>
 80045de:	69a3      	ldr	r3, [r4, #24]
 80045e0:	b913      	cbnz	r3, 80045e8 <iprintf+0x14>
 80045e2:	4620      	mov	r0, r4
 80045e4:	f000 f866 	bl	80046b4 <__sinit>
 80045e8:	ab05      	add	r3, sp, #20
 80045ea:	9a04      	ldr	r2, [sp, #16]
 80045ec:	68a1      	ldr	r1, [r4, #8]
 80045ee:	9301      	str	r3, [sp, #4]
 80045f0:	4620      	mov	r0, r4
 80045f2:	f000 f9bd 	bl	8004970 <_vfiprintf_r>
 80045f6:	b002      	add	sp, #8
 80045f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045fc:	b004      	add	sp, #16
 80045fe:	4770      	bx	lr
 8004600:	2000000c 	.word	0x2000000c

08004604 <std>:
 8004604:	2300      	movs	r3, #0
 8004606:	b510      	push	{r4, lr}
 8004608:	4604      	mov	r4, r0
 800460a:	e9c0 3300 	strd	r3, r3, [r0]
 800460e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004612:	6083      	str	r3, [r0, #8]
 8004614:	8181      	strh	r1, [r0, #12]
 8004616:	6643      	str	r3, [r0, #100]	; 0x64
 8004618:	81c2      	strh	r2, [r0, #14]
 800461a:	6183      	str	r3, [r0, #24]
 800461c:	4619      	mov	r1, r3
 800461e:	2208      	movs	r2, #8
 8004620:	305c      	adds	r0, #92	; 0x5c
 8004622:	f7ff ffcf 	bl	80045c4 <memset>
 8004626:	4b05      	ldr	r3, [pc, #20]	; (800463c <std+0x38>)
 8004628:	6263      	str	r3, [r4, #36]	; 0x24
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <std+0x3c>)
 800462c:	62a3      	str	r3, [r4, #40]	; 0x28
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <std+0x40>)
 8004630:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004632:	4b05      	ldr	r3, [pc, #20]	; (8004648 <std+0x44>)
 8004634:	6224      	str	r4, [r4, #32]
 8004636:	6323      	str	r3, [r4, #48]	; 0x30
 8004638:	bd10      	pop	{r4, pc}
 800463a:	bf00      	nop
 800463c:	08004f19 	.word	0x08004f19
 8004640:	08004f3b 	.word	0x08004f3b
 8004644:	08004f73 	.word	0x08004f73
 8004648:	08004f97 	.word	0x08004f97

0800464c <_cleanup_r>:
 800464c:	4901      	ldr	r1, [pc, #4]	; (8004654 <_cleanup_r+0x8>)
 800464e:	f000 b8af 	b.w	80047b0 <_fwalk_reent>
 8004652:	bf00      	nop
 8004654:	08005271 	.word	0x08005271

08004658 <__sfmoreglue>:
 8004658:	b570      	push	{r4, r5, r6, lr}
 800465a:	2268      	movs	r2, #104	; 0x68
 800465c:	1e4d      	subs	r5, r1, #1
 800465e:	4355      	muls	r5, r2
 8004660:	460e      	mov	r6, r1
 8004662:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004666:	f000 f8e5 	bl	8004834 <_malloc_r>
 800466a:	4604      	mov	r4, r0
 800466c:	b140      	cbz	r0, 8004680 <__sfmoreglue+0x28>
 800466e:	2100      	movs	r1, #0
 8004670:	e9c0 1600 	strd	r1, r6, [r0]
 8004674:	300c      	adds	r0, #12
 8004676:	60a0      	str	r0, [r4, #8]
 8004678:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800467c:	f7ff ffa2 	bl	80045c4 <memset>
 8004680:	4620      	mov	r0, r4
 8004682:	bd70      	pop	{r4, r5, r6, pc}

08004684 <__sfp_lock_acquire>:
 8004684:	4801      	ldr	r0, [pc, #4]	; (800468c <__sfp_lock_acquire+0x8>)
 8004686:	f000 b8b3 	b.w	80047f0 <__retarget_lock_acquire_recursive>
 800468a:	bf00      	nop
 800468c:	20000211 	.word	0x20000211

08004690 <__sfp_lock_release>:
 8004690:	4801      	ldr	r0, [pc, #4]	; (8004698 <__sfp_lock_release+0x8>)
 8004692:	f000 b8ae 	b.w	80047f2 <__retarget_lock_release_recursive>
 8004696:	bf00      	nop
 8004698:	20000211 	.word	0x20000211

0800469c <__sinit_lock_acquire>:
 800469c:	4801      	ldr	r0, [pc, #4]	; (80046a4 <__sinit_lock_acquire+0x8>)
 800469e:	f000 b8a7 	b.w	80047f0 <__retarget_lock_acquire_recursive>
 80046a2:	bf00      	nop
 80046a4:	20000212 	.word	0x20000212

080046a8 <__sinit_lock_release>:
 80046a8:	4801      	ldr	r0, [pc, #4]	; (80046b0 <__sinit_lock_release+0x8>)
 80046aa:	f000 b8a2 	b.w	80047f2 <__retarget_lock_release_recursive>
 80046ae:	bf00      	nop
 80046b0:	20000212 	.word	0x20000212

080046b4 <__sinit>:
 80046b4:	b510      	push	{r4, lr}
 80046b6:	4604      	mov	r4, r0
 80046b8:	f7ff fff0 	bl	800469c <__sinit_lock_acquire>
 80046bc:	69a3      	ldr	r3, [r4, #24]
 80046be:	b11b      	cbz	r3, 80046c8 <__sinit+0x14>
 80046c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046c4:	f7ff bff0 	b.w	80046a8 <__sinit_lock_release>
 80046c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80046cc:	6523      	str	r3, [r4, #80]	; 0x50
 80046ce:	4b13      	ldr	r3, [pc, #76]	; (800471c <__sinit+0x68>)
 80046d0:	4a13      	ldr	r2, [pc, #76]	; (8004720 <__sinit+0x6c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80046d6:	42a3      	cmp	r3, r4
 80046d8:	bf04      	itt	eq
 80046da:	2301      	moveq	r3, #1
 80046dc:	61a3      	streq	r3, [r4, #24]
 80046de:	4620      	mov	r0, r4
 80046e0:	f000 f820 	bl	8004724 <__sfp>
 80046e4:	6060      	str	r0, [r4, #4]
 80046e6:	4620      	mov	r0, r4
 80046e8:	f000 f81c 	bl	8004724 <__sfp>
 80046ec:	60a0      	str	r0, [r4, #8]
 80046ee:	4620      	mov	r0, r4
 80046f0:	f000 f818 	bl	8004724 <__sfp>
 80046f4:	2200      	movs	r2, #0
 80046f6:	60e0      	str	r0, [r4, #12]
 80046f8:	2104      	movs	r1, #4
 80046fa:	6860      	ldr	r0, [r4, #4]
 80046fc:	f7ff ff82 	bl	8004604 <std>
 8004700:	68a0      	ldr	r0, [r4, #8]
 8004702:	2201      	movs	r2, #1
 8004704:	2109      	movs	r1, #9
 8004706:	f7ff ff7d 	bl	8004604 <std>
 800470a:	68e0      	ldr	r0, [r4, #12]
 800470c:	2202      	movs	r2, #2
 800470e:	2112      	movs	r1, #18
 8004710:	f7ff ff78 	bl	8004604 <std>
 8004714:	2301      	movs	r3, #1
 8004716:	61a3      	str	r3, [r4, #24]
 8004718:	e7d2      	b.n	80046c0 <__sinit+0xc>
 800471a:	bf00      	nop
 800471c:	08005554 	.word	0x08005554
 8004720:	0800464d 	.word	0x0800464d

08004724 <__sfp>:
 8004724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004726:	4607      	mov	r7, r0
 8004728:	f7ff ffac 	bl	8004684 <__sfp_lock_acquire>
 800472c:	4b1e      	ldr	r3, [pc, #120]	; (80047a8 <__sfp+0x84>)
 800472e:	681e      	ldr	r6, [r3, #0]
 8004730:	69b3      	ldr	r3, [r6, #24]
 8004732:	b913      	cbnz	r3, 800473a <__sfp+0x16>
 8004734:	4630      	mov	r0, r6
 8004736:	f7ff ffbd 	bl	80046b4 <__sinit>
 800473a:	3648      	adds	r6, #72	; 0x48
 800473c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004740:	3b01      	subs	r3, #1
 8004742:	d503      	bpl.n	800474c <__sfp+0x28>
 8004744:	6833      	ldr	r3, [r6, #0]
 8004746:	b30b      	cbz	r3, 800478c <__sfp+0x68>
 8004748:	6836      	ldr	r6, [r6, #0]
 800474a:	e7f7      	b.n	800473c <__sfp+0x18>
 800474c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004750:	b9d5      	cbnz	r5, 8004788 <__sfp+0x64>
 8004752:	4b16      	ldr	r3, [pc, #88]	; (80047ac <__sfp+0x88>)
 8004754:	60e3      	str	r3, [r4, #12]
 8004756:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800475a:	6665      	str	r5, [r4, #100]	; 0x64
 800475c:	f000 f847 	bl	80047ee <__retarget_lock_init_recursive>
 8004760:	f7ff ff96 	bl	8004690 <__sfp_lock_release>
 8004764:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004768:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800476c:	6025      	str	r5, [r4, #0]
 800476e:	61a5      	str	r5, [r4, #24]
 8004770:	2208      	movs	r2, #8
 8004772:	4629      	mov	r1, r5
 8004774:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004778:	f7ff ff24 	bl	80045c4 <memset>
 800477c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004780:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004784:	4620      	mov	r0, r4
 8004786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004788:	3468      	adds	r4, #104	; 0x68
 800478a:	e7d9      	b.n	8004740 <__sfp+0x1c>
 800478c:	2104      	movs	r1, #4
 800478e:	4638      	mov	r0, r7
 8004790:	f7ff ff62 	bl	8004658 <__sfmoreglue>
 8004794:	4604      	mov	r4, r0
 8004796:	6030      	str	r0, [r6, #0]
 8004798:	2800      	cmp	r0, #0
 800479a:	d1d5      	bne.n	8004748 <__sfp+0x24>
 800479c:	f7ff ff78 	bl	8004690 <__sfp_lock_release>
 80047a0:	230c      	movs	r3, #12
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	e7ee      	b.n	8004784 <__sfp+0x60>
 80047a6:	bf00      	nop
 80047a8:	08005554 	.word	0x08005554
 80047ac:	ffff0001 	.word	0xffff0001

080047b0 <_fwalk_reent>:
 80047b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047b4:	4606      	mov	r6, r0
 80047b6:	4688      	mov	r8, r1
 80047b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047bc:	2700      	movs	r7, #0
 80047be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047c2:	f1b9 0901 	subs.w	r9, r9, #1
 80047c6:	d505      	bpl.n	80047d4 <_fwalk_reent+0x24>
 80047c8:	6824      	ldr	r4, [r4, #0]
 80047ca:	2c00      	cmp	r4, #0
 80047cc:	d1f7      	bne.n	80047be <_fwalk_reent+0xe>
 80047ce:	4638      	mov	r0, r7
 80047d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047d4:	89ab      	ldrh	r3, [r5, #12]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d907      	bls.n	80047ea <_fwalk_reent+0x3a>
 80047da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047de:	3301      	adds	r3, #1
 80047e0:	d003      	beq.n	80047ea <_fwalk_reent+0x3a>
 80047e2:	4629      	mov	r1, r5
 80047e4:	4630      	mov	r0, r6
 80047e6:	47c0      	blx	r8
 80047e8:	4307      	orrs	r7, r0
 80047ea:	3568      	adds	r5, #104	; 0x68
 80047ec:	e7e9      	b.n	80047c2 <_fwalk_reent+0x12>

080047ee <__retarget_lock_init_recursive>:
 80047ee:	4770      	bx	lr

080047f0 <__retarget_lock_acquire_recursive>:
 80047f0:	4770      	bx	lr

080047f2 <__retarget_lock_release_recursive>:
 80047f2:	4770      	bx	lr

080047f4 <sbrk_aligned>:
 80047f4:	b570      	push	{r4, r5, r6, lr}
 80047f6:	4e0e      	ldr	r6, [pc, #56]	; (8004830 <sbrk_aligned+0x3c>)
 80047f8:	460c      	mov	r4, r1
 80047fa:	6831      	ldr	r1, [r6, #0]
 80047fc:	4605      	mov	r5, r0
 80047fe:	b911      	cbnz	r1, 8004806 <sbrk_aligned+0x12>
 8004800:	f000 fb7a 	bl	8004ef8 <_sbrk_r>
 8004804:	6030      	str	r0, [r6, #0]
 8004806:	4621      	mov	r1, r4
 8004808:	4628      	mov	r0, r5
 800480a:	f000 fb75 	bl	8004ef8 <_sbrk_r>
 800480e:	1c43      	adds	r3, r0, #1
 8004810:	d00a      	beq.n	8004828 <sbrk_aligned+0x34>
 8004812:	1cc4      	adds	r4, r0, #3
 8004814:	f024 0403 	bic.w	r4, r4, #3
 8004818:	42a0      	cmp	r0, r4
 800481a:	d007      	beq.n	800482c <sbrk_aligned+0x38>
 800481c:	1a21      	subs	r1, r4, r0
 800481e:	4628      	mov	r0, r5
 8004820:	f000 fb6a 	bl	8004ef8 <_sbrk_r>
 8004824:	3001      	adds	r0, #1
 8004826:	d101      	bne.n	800482c <sbrk_aligned+0x38>
 8004828:	f04f 34ff 	mov.w	r4, #4294967295
 800482c:	4620      	mov	r0, r4
 800482e:	bd70      	pop	{r4, r5, r6, pc}
 8004830:	20000218 	.word	0x20000218

08004834 <_malloc_r>:
 8004834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004838:	1ccd      	adds	r5, r1, #3
 800483a:	f025 0503 	bic.w	r5, r5, #3
 800483e:	3508      	adds	r5, #8
 8004840:	2d0c      	cmp	r5, #12
 8004842:	bf38      	it	cc
 8004844:	250c      	movcc	r5, #12
 8004846:	2d00      	cmp	r5, #0
 8004848:	4607      	mov	r7, r0
 800484a:	db01      	blt.n	8004850 <_malloc_r+0x1c>
 800484c:	42a9      	cmp	r1, r5
 800484e:	d905      	bls.n	800485c <_malloc_r+0x28>
 8004850:	230c      	movs	r3, #12
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	2600      	movs	r6, #0
 8004856:	4630      	mov	r0, r6
 8004858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800485c:	4e2e      	ldr	r6, [pc, #184]	; (8004918 <_malloc_r+0xe4>)
 800485e:	f000 fdbb 	bl	80053d8 <__malloc_lock>
 8004862:	6833      	ldr	r3, [r6, #0]
 8004864:	461c      	mov	r4, r3
 8004866:	bb34      	cbnz	r4, 80048b6 <_malloc_r+0x82>
 8004868:	4629      	mov	r1, r5
 800486a:	4638      	mov	r0, r7
 800486c:	f7ff ffc2 	bl	80047f4 <sbrk_aligned>
 8004870:	1c43      	adds	r3, r0, #1
 8004872:	4604      	mov	r4, r0
 8004874:	d14d      	bne.n	8004912 <_malloc_r+0xde>
 8004876:	6834      	ldr	r4, [r6, #0]
 8004878:	4626      	mov	r6, r4
 800487a:	2e00      	cmp	r6, #0
 800487c:	d140      	bne.n	8004900 <_malloc_r+0xcc>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	4631      	mov	r1, r6
 8004882:	4638      	mov	r0, r7
 8004884:	eb04 0803 	add.w	r8, r4, r3
 8004888:	f000 fb36 	bl	8004ef8 <_sbrk_r>
 800488c:	4580      	cmp	r8, r0
 800488e:	d13a      	bne.n	8004906 <_malloc_r+0xd2>
 8004890:	6821      	ldr	r1, [r4, #0]
 8004892:	3503      	adds	r5, #3
 8004894:	1a6d      	subs	r5, r5, r1
 8004896:	f025 0503 	bic.w	r5, r5, #3
 800489a:	3508      	adds	r5, #8
 800489c:	2d0c      	cmp	r5, #12
 800489e:	bf38      	it	cc
 80048a0:	250c      	movcc	r5, #12
 80048a2:	4629      	mov	r1, r5
 80048a4:	4638      	mov	r0, r7
 80048a6:	f7ff ffa5 	bl	80047f4 <sbrk_aligned>
 80048aa:	3001      	adds	r0, #1
 80048ac:	d02b      	beq.n	8004906 <_malloc_r+0xd2>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	442b      	add	r3, r5
 80048b2:	6023      	str	r3, [r4, #0]
 80048b4:	e00e      	b.n	80048d4 <_malloc_r+0xa0>
 80048b6:	6822      	ldr	r2, [r4, #0]
 80048b8:	1b52      	subs	r2, r2, r5
 80048ba:	d41e      	bmi.n	80048fa <_malloc_r+0xc6>
 80048bc:	2a0b      	cmp	r2, #11
 80048be:	d916      	bls.n	80048ee <_malloc_r+0xba>
 80048c0:	1961      	adds	r1, r4, r5
 80048c2:	42a3      	cmp	r3, r4
 80048c4:	6025      	str	r5, [r4, #0]
 80048c6:	bf18      	it	ne
 80048c8:	6059      	strne	r1, [r3, #4]
 80048ca:	6863      	ldr	r3, [r4, #4]
 80048cc:	bf08      	it	eq
 80048ce:	6031      	streq	r1, [r6, #0]
 80048d0:	5162      	str	r2, [r4, r5]
 80048d2:	604b      	str	r3, [r1, #4]
 80048d4:	4638      	mov	r0, r7
 80048d6:	f104 060b 	add.w	r6, r4, #11
 80048da:	f000 fd83 	bl	80053e4 <__malloc_unlock>
 80048de:	f026 0607 	bic.w	r6, r6, #7
 80048e2:	1d23      	adds	r3, r4, #4
 80048e4:	1af2      	subs	r2, r6, r3
 80048e6:	d0b6      	beq.n	8004856 <_malloc_r+0x22>
 80048e8:	1b9b      	subs	r3, r3, r6
 80048ea:	50a3      	str	r3, [r4, r2]
 80048ec:	e7b3      	b.n	8004856 <_malloc_r+0x22>
 80048ee:	6862      	ldr	r2, [r4, #4]
 80048f0:	42a3      	cmp	r3, r4
 80048f2:	bf0c      	ite	eq
 80048f4:	6032      	streq	r2, [r6, #0]
 80048f6:	605a      	strne	r2, [r3, #4]
 80048f8:	e7ec      	b.n	80048d4 <_malloc_r+0xa0>
 80048fa:	4623      	mov	r3, r4
 80048fc:	6864      	ldr	r4, [r4, #4]
 80048fe:	e7b2      	b.n	8004866 <_malloc_r+0x32>
 8004900:	4634      	mov	r4, r6
 8004902:	6876      	ldr	r6, [r6, #4]
 8004904:	e7b9      	b.n	800487a <_malloc_r+0x46>
 8004906:	230c      	movs	r3, #12
 8004908:	603b      	str	r3, [r7, #0]
 800490a:	4638      	mov	r0, r7
 800490c:	f000 fd6a 	bl	80053e4 <__malloc_unlock>
 8004910:	e7a1      	b.n	8004856 <_malloc_r+0x22>
 8004912:	6025      	str	r5, [r4, #0]
 8004914:	e7de      	b.n	80048d4 <_malloc_r+0xa0>
 8004916:	bf00      	nop
 8004918:	20000214 	.word	0x20000214

0800491c <__sfputc_r>:
 800491c:	6893      	ldr	r3, [r2, #8]
 800491e:	3b01      	subs	r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	b410      	push	{r4}
 8004924:	6093      	str	r3, [r2, #8]
 8004926:	da08      	bge.n	800493a <__sfputc_r+0x1e>
 8004928:	6994      	ldr	r4, [r2, #24]
 800492a:	42a3      	cmp	r3, r4
 800492c:	db01      	blt.n	8004932 <__sfputc_r+0x16>
 800492e:	290a      	cmp	r1, #10
 8004930:	d103      	bne.n	800493a <__sfputc_r+0x1e>
 8004932:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004936:	f000 bb33 	b.w	8004fa0 <__swbuf_r>
 800493a:	6813      	ldr	r3, [r2, #0]
 800493c:	1c58      	adds	r0, r3, #1
 800493e:	6010      	str	r0, [r2, #0]
 8004940:	7019      	strb	r1, [r3, #0]
 8004942:	4608      	mov	r0, r1
 8004944:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004948:	4770      	bx	lr

0800494a <__sfputs_r>:
 800494a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494c:	4606      	mov	r6, r0
 800494e:	460f      	mov	r7, r1
 8004950:	4614      	mov	r4, r2
 8004952:	18d5      	adds	r5, r2, r3
 8004954:	42ac      	cmp	r4, r5
 8004956:	d101      	bne.n	800495c <__sfputs_r+0x12>
 8004958:	2000      	movs	r0, #0
 800495a:	e007      	b.n	800496c <__sfputs_r+0x22>
 800495c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004960:	463a      	mov	r2, r7
 8004962:	4630      	mov	r0, r6
 8004964:	f7ff ffda 	bl	800491c <__sfputc_r>
 8004968:	1c43      	adds	r3, r0, #1
 800496a:	d1f3      	bne.n	8004954 <__sfputs_r+0xa>
 800496c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004970 <_vfiprintf_r>:
 8004970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004974:	460d      	mov	r5, r1
 8004976:	b09d      	sub	sp, #116	; 0x74
 8004978:	4614      	mov	r4, r2
 800497a:	4698      	mov	r8, r3
 800497c:	4606      	mov	r6, r0
 800497e:	b118      	cbz	r0, 8004988 <_vfiprintf_r+0x18>
 8004980:	6983      	ldr	r3, [r0, #24]
 8004982:	b90b      	cbnz	r3, 8004988 <_vfiprintf_r+0x18>
 8004984:	f7ff fe96 	bl	80046b4 <__sinit>
 8004988:	4b89      	ldr	r3, [pc, #548]	; (8004bb0 <_vfiprintf_r+0x240>)
 800498a:	429d      	cmp	r5, r3
 800498c:	d11b      	bne.n	80049c6 <_vfiprintf_r+0x56>
 800498e:	6875      	ldr	r5, [r6, #4]
 8004990:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004992:	07d9      	lsls	r1, r3, #31
 8004994:	d405      	bmi.n	80049a2 <_vfiprintf_r+0x32>
 8004996:	89ab      	ldrh	r3, [r5, #12]
 8004998:	059a      	lsls	r2, r3, #22
 800499a:	d402      	bmi.n	80049a2 <_vfiprintf_r+0x32>
 800499c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800499e:	f7ff ff27 	bl	80047f0 <__retarget_lock_acquire_recursive>
 80049a2:	89ab      	ldrh	r3, [r5, #12]
 80049a4:	071b      	lsls	r3, r3, #28
 80049a6:	d501      	bpl.n	80049ac <_vfiprintf_r+0x3c>
 80049a8:	692b      	ldr	r3, [r5, #16]
 80049aa:	b9eb      	cbnz	r3, 80049e8 <_vfiprintf_r+0x78>
 80049ac:	4629      	mov	r1, r5
 80049ae:	4630      	mov	r0, r6
 80049b0:	f000 fb5a 	bl	8005068 <__swsetup_r>
 80049b4:	b1c0      	cbz	r0, 80049e8 <_vfiprintf_r+0x78>
 80049b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049b8:	07dc      	lsls	r4, r3, #31
 80049ba:	d50e      	bpl.n	80049da <_vfiprintf_r+0x6a>
 80049bc:	f04f 30ff 	mov.w	r0, #4294967295
 80049c0:	b01d      	add	sp, #116	; 0x74
 80049c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c6:	4b7b      	ldr	r3, [pc, #492]	; (8004bb4 <_vfiprintf_r+0x244>)
 80049c8:	429d      	cmp	r5, r3
 80049ca:	d101      	bne.n	80049d0 <_vfiprintf_r+0x60>
 80049cc:	68b5      	ldr	r5, [r6, #8]
 80049ce:	e7df      	b.n	8004990 <_vfiprintf_r+0x20>
 80049d0:	4b79      	ldr	r3, [pc, #484]	; (8004bb8 <_vfiprintf_r+0x248>)
 80049d2:	429d      	cmp	r5, r3
 80049d4:	bf08      	it	eq
 80049d6:	68f5      	ldreq	r5, [r6, #12]
 80049d8:	e7da      	b.n	8004990 <_vfiprintf_r+0x20>
 80049da:	89ab      	ldrh	r3, [r5, #12]
 80049dc:	0598      	lsls	r0, r3, #22
 80049de:	d4ed      	bmi.n	80049bc <_vfiprintf_r+0x4c>
 80049e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049e2:	f7ff ff06 	bl	80047f2 <__retarget_lock_release_recursive>
 80049e6:	e7e9      	b.n	80049bc <_vfiprintf_r+0x4c>
 80049e8:	2300      	movs	r3, #0
 80049ea:	9309      	str	r3, [sp, #36]	; 0x24
 80049ec:	2320      	movs	r3, #32
 80049ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80049f6:	2330      	movs	r3, #48	; 0x30
 80049f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004bbc <_vfiprintf_r+0x24c>
 80049fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a00:	f04f 0901 	mov.w	r9, #1
 8004a04:	4623      	mov	r3, r4
 8004a06:	469a      	mov	sl, r3
 8004a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a0c:	b10a      	cbz	r2, 8004a12 <_vfiprintf_r+0xa2>
 8004a0e:	2a25      	cmp	r2, #37	; 0x25
 8004a10:	d1f9      	bne.n	8004a06 <_vfiprintf_r+0x96>
 8004a12:	ebba 0b04 	subs.w	fp, sl, r4
 8004a16:	d00b      	beq.n	8004a30 <_vfiprintf_r+0xc0>
 8004a18:	465b      	mov	r3, fp
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	4630      	mov	r0, r6
 8004a20:	f7ff ff93 	bl	800494a <__sfputs_r>
 8004a24:	3001      	adds	r0, #1
 8004a26:	f000 80aa 	beq.w	8004b7e <_vfiprintf_r+0x20e>
 8004a2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a2c:	445a      	add	r2, fp
 8004a2e:	9209      	str	r2, [sp, #36]	; 0x24
 8004a30:	f89a 3000 	ldrb.w	r3, [sl]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80a2 	beq.w	8004b7e <_vfiprintf_r+0x20e>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a44:	f10a 0a01 	add.w	sl, sl, #1
 8004a48:	9304      	str	r3, [sp, #16]
 8004a4a:	9307      	str	r3, [sp, #28]
 8004a4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a50:	931a      	str	r3, [sp, #104]	; 0x68
 8004a52:	4654      	mov	r4, sl
 8004a54:	2205      	movs	r2, #5
 8004a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a5a:	4858      	ldr	r0, [pc, #352]	; (8004bbc <_vfiprintf_r+0x24c>)
 8004a5c:	f7fb fbb8 	bl	80001d0 <memchr>
 8004a60:	9a04      	ldr	r2, [sp, #16]
 8004a62:	b9d8      	cbnz	r0, 8004a9c <_vfiprintf_r+0x12c>
 8004a64:	06d1      	lsls	r1, r2, #27
 8004a66:	bf44      	itt	mi
 8004a68:	2320      	movmi	r3, #32
 8004a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a6e:	0713      	lsls	r3, r2, #28
 8004a70:	bf44      	itt	mi
 8004a72:	232b      	movmi	r3, #43	; 0x2b
 8004a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a78:	f89a 3000 	ldrb.w	r3, [sl]
 8004a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a7e:	d015      	beq.n	8004aac <_vfiprintf_r+0x13c>
 8004a80:	9a07      	ldr	r2, [sp, #28]
 8004a82:	4654      	mov	r4, sl
 8004a84:	2000      	movs	r0, #0
 8004a86:	f04f 0c0a 	mov.w	ip, #10
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a90:	3b30      	subs	r3, #48	; 0x30
 8004a92:	2b09      	cmp	r3, #9
 8004a94:	d94e      	bls.n	8004b34 <_vfiprintf_r+0x1c4>
 8004a96:	b1b0      	cbz	r0, 8004ac6 <_vfiprintf_r+0x156>
 8004a98:	9207      	str	r2, [sp, #28]
 8004a9a:	e014      	b.n	8004ac6 <_vfiprintf_r+0x156>
 8004a9c:	eba0 0308 	sub.w	r3, r0, r8
 8004aa0:	fa09 f303 	lsl.w	r3, r9, r3
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	9304      	str	r3, [sp, #16]
 8004aa8:	46a2      	mov	sl, r4
 8004aaa:	e7d2      	b.n	8004a52 <_vfiprintf_r+0xe2>
 8004aac:	9b03      	ldr	r3, [sp, #12]
 8004aae:	1d19      	adds	r1, r3, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	9103      	str	r1, [sp, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bfbb      	ittet	lt
 8004ab8:	425b      	neglt	r3, r3
 8004aba:	f042 0202 	orrlt.w	r2, r2, #2
 8004abe:	9307      	strge	r3, [sp, #28]
 8004ac0:	9307      	strlt	r3, [sp, #28]
 8004ac2:	bfb8      	it	lt
 8004ac4:	9204      	strlt	r2, [sp, #16]
 8004ac6:	7823      	ldrb	r3, [r4, #0]
 8004ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8004aca:	d10c      	bne.n	8004ae6 <_vfiprintf_r+0x176>
 8004acc:	7863      	ldrb	r3, [r4, #1]
 8004ace:	2b2a      	cmp	r3, #42	; 0x2a
 8004ad0:	d135      	bne.n	8004b3e <_vfiprintf_r+0x1ce>
 8004ad2:	9b03      	ldr	r3, [sp, #12]
 8004ad4:	1d1a      	adds	r2, r3, #4
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	9203      	str	r2, [sp, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bfb8      	it	lt
 8004ade:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ae2:	3402      	adds	r4, #2
 8004ae4:	9305      	str	r3, [sp, #20]
 8004ae6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004bcc <_vfiprintf_r+0x25c>
 8004aea:	7821      	ldrb	r1, [r4, #0]
 8004aec:	2203      	movs	r2, #3
 8004aee:	4650      	mov	r0, sl
 8004af0:	f7fb fb6e 	bl	80001d0 <memchr>
 8004af4:	b140      	cbz	r0, 8004b08 <_vfiprintf_r+0x198>
 8004af6:	2340      	movs	r3, #64	; 0x40
 8004af8:	eba0 000a 	sub.w	r0, r0, sl
 8004afc:	fa03 f000 	lsl.w	r0, r3, r0
 8004b00:	9b04      	ldr	r3, [sp, #16]
 8004b02:	4303      	orrs	r3, r0
 8004b04:	3401      	adds	r4, #1
 8004b06:	9304      	str	r3, [sp, #16]
 8004b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b0c:	482c      	ldr	r0, [pc, #176]	; (8004bc0 <_vfiprintf_r+0x250>)
 8004b0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b12:	2206      	movs	r2, #6
 8004b14:	f7fb fb5c 	bl	80001d0 <memchr>
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	d03f      	beq.n	8004b9c <_vfiprintf_r+0x22c>
 8004b1c:	4b29      	ldr	r3, [pc, #164]	; (8004bc4 <_vfiprintf_r+0x254>)
 8004b1e:	bb1b      	cbnz	r3, 8004b68 <_vfiprintf_r+0x1f8>
 8004b20:	9b03      	ldr	r3, [sp, #12]
 8004b22:	3307      	adds	r3, #7
 8004b24:	f023 0307 	bic.w	r3, r3, #7
 8004b28:	3308      	adds	r3, #8
 8004b2a:	9303      	str	r3, [sp, #12]
 8004b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b2e:	443b      	add	r3, r7
 8004b30:	9309      	str	r3, [sp, #36]	; 0x24
 8004b32:	e767      	b.n	8004a04 <_vfiprintf_r+0x94>
 8004b34:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b38:	460c      	mov	r4, r1
 8004b3a:	2001      	movs	r0, #1
 8004b3c:	e7a5      	b.n	8004a8a <_vfiprintf_r+0x11a>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	3401      	adds	r4, #1
 8004b42:	9305      	str	r3, [sp, #20]
 8004b44:	4619      	mov	r1, r3
 8004b46:	f04f 0c0a 	mov.w	ip, #10
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b50:	3a30      	subs	r2, #48	; 0x30
 8004b52:	2a09      	cmp	r2, #9
 8004b54:	d903      	bls.n	8004b5e <_vfiprintf_r+0x1ee>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0c5      	beq.n	8004ae6 <_vfiprintf_r+0x176>
 8004b5a:	9105      	str	r1, [sp, #20]
 8004b5c:	e7c3      	b.n	8004ae6 <_vfiprintf_r+0x176>
 8004b5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b62:	4604      	mov	r4, r0
 8004b64:	2301      	movs	r3, #1
 8004b66:	e7f0      	b.n	8004b4a <_vfiprintf_r+0x1da>
 8004b68:	ab03      	add	r3, sp, #12
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	462a      	mov	r2, r5
 8004b6e:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <_vfiprintf_r+0x258>)
 8004b70:	a904      	add	r1, sp, #16
 8004b72:	4630      	mov	r0, r6
 8004b74:	f3af 8000 	nop.w
 8004b78:	4607      	mov	r7, r0
 8004b7a:	1c78      	adds	r0, r7, #1
 8004b7c:	d1d6      	bne.n	8004b2c <_vfiprintf_r+0x1bc>
 8004b7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b80:	07d9      	lsls	r1, r3, #31
 8004b82:	d405      	bmi.n	8004b90 <_vfiprintf_r+0x220>
 8004b84:	89ab      	ldrh	r3, [r5, #12]
 8004b86:	059a      	lsls	r2, r3, #22
 8004b88:	d402      	bmi.n	8004b90 <_vfiprintf_r+0x220>
 8004b8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b8c:	f7ff fe31 	bl	80047f2 <__retarget_lock_release_recursive>
 8004b90:	89ab      	ldrh	r3, [r5, #12]
 8004b92:	065b      	lsls	r3, r3, #25
 8004b94:	f53f af12 	bmi.w	80049bc <_vfiprintf_r+0x4c>
 8004b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b9a:	e711      	b.n	80049c0 <_vfiprintf_r+0x50>
 8004b9c:	ab03      	add	r3, sp, #12
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	462a      	mov	r2, r5
 8004ba2:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <_vfiprintf_r+0x258>)
 8004ba4:	a904      	add	r1, sp, #16
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	f000 f880 	bl	8004cac <_printf_i>
 8004bac:	e7e4      	b.n	8004b78 <_vfiprintf_r+0x208>
 8004bae:	bf00      	nop
 8004bb0:	08005578 	.word	0x08005578
 8004bb4:	08005598 	.word	0x08005598
 8004bb8:	08005558 	.word	0x08005558
 8004bbc:	080055b8 	.word	0x080055b8
 8004bc0:	080055c2 	.word	0x080055c2
 8004bc4:	00000000 	.word	0x00000000
 8004bc8:	0800494b 	.word	0x0800494b
 8004bcc:	080055be 	.word	0x080055be

08004bd0 <_printf_common>:
 8004bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	4699      	mov	r9, r3
 8004bd8:	688a      	ldr	r2, [r1, #8]
 8004bda:	690b      	ldr	r3, [r1, #16]
 8004bdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004be0:	4293      	cmp	r3, r2
 8004be2:	bfb8      	it	lt
 8004be4:	4613      	movlt	r3, r2
 8004be6:	6033      	str	r3, [r6, #0]
 8004be8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bec:	4607      	mov	r7, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	b10a      	cbz	r2, 8004bf6 <_printf_common+0x26>
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	6033      	str	r3, [r6, #0]
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	0699      	lsls	r1, r3, #26
 8004bfa:	bf42      	ittt	mi
 8004bfc:	6833      	ldrmi	r3, [r6, #0]
 8004bfe:	3302      	addmi	r3, #2
 8004c00:	6033      	strmi	r3, [r6, #0]
 8004c02:	6825      	ldr	r5, [r4, #0]
 8004c04:	f015 0506 	ands.w	r5, r5, #6
 8004c08:	d106      	bne.n	8004c18 <_printf_common+0x48>
 8004c0a:	f104 0a19 	add.w	sl, r4, #25
 8004c0e:	68e3      	ldr	r3, [r4, #12]
 8004c10:	6832      	ldr	r2, [r6, #0]
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	42ab      	cmp	r3, r5
 8004c16:	dc26      	bgt.n	8004c66 <_printf_common+0x96>
 8004c18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c1c:	1e13      	subs	r3, r2, #0
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	bf18      	it	ne
 8004c22:	2301      	movne	r3, #1
 8004c24:	0692      	lsls	r2, r2, #26
 8004c26:	d42b      	bmi.n	8004c80 <_printf_common+0xb0>
 8004c28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	4638      	mov	r0, r7
 8004c30:	47c0      	blx	r8
 8004c32:	3001      	adds	r0, #1
 8004c34:	d01e      	beq.n	8004c74 <_printf_common+0xa4>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	68e5      	ldr	r5, [r4, #12]
 8004c3a:	6832      	ldr	r2, [r6, #0]
 8004c3c:	f003 0306 	and.w	r3, r3, #6
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	bf08      	it	eq
 8004c44:	1aad      	subeq	r5, r5, r2
 8004c46:	68a3      	ldr	r3, [r4, #8]
 8004c48:	6922      	ldr	r2, [r4, #16]
 8004c4a:	bf0c      	ite	eq
 8004c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c50:	2500      	movne	r5, #0
 8004c52:	4293      	cmp	r3, r2
 8004c54:	bfc4      	itt	gt
 8004c56:	1a9b      	subgt	r3, r3, r2
 8004c58:	18ed      	addgt	r5, r5, r3
 8004c5a:	2600      	movs	r6, #0
 8004c5c:	341a      	adds	r4, #26
 8004c5e:	42b5      	cmp	r5, r6
 8004c60:	d11a      	bne.n	8004c98 <_printf_common+0xc8>
 8004c62:	2000      	movs	r0, #0
 8004c64:	e008      	b.n	8004c78 <_printf_common+0xa8>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4652      	mov	r2, sl
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	4638      	mov	r0, r7
 8004c6e:	47c0      	blx	r8
 8004c70:	3001      	adds	r0, #1
 8004c72:	d103      	bne.n	8004c7c <_printf_common+0xac>
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295
 8004c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7c:	3501      	adds	r5, #1
 8004c7e:	e7c6      	b.n	8004c0e <_printf_common+0x3e>
 8004c80:	18e1      	adds	r1, r4, r3
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	2030      	movs	r0, #48	; 0x30
 8004c86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c8a:	4422      	add	r2, r4
 8004c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c94:	3302      	adds	r3, #2
 8004c96:	e7c7      	b.n	8004c28 <_printf_common+0x58>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	4638      	mov	r0, r7
 8004ca0:	47c0      	blx	r8
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	d0e6      	beq.n	8004c74 <_printf_common+0xa4>
 8004ca6:	3601      	adds	r6, #1
 8004ca8:	e7d9      	b.n	8004c5e <_printf_common+0x8e>
	...

08004cac <_printf_i>:
 8004cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb0:	7e0f      	ldrb	r7, [r1, #24]
 8004cb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cb4:	2f78      	cmp	r7, #120	; 0x78
 8004cb6:	4691      	mov	r9, r2
 8004cb8:	4680      	mov	r8, r0
 8004cba:	460c      	mov	r4, r1
 8004cbc:	469a      	mov	sl, r3
 8004cbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cc2:	d807      	bhi.n	8004cd4 <_printf_i+0x28>
 8004cc4:	2f62      	cmp	r7, #98	; 0x62
 8004cc6:	d80a      	bhi.n	8004cde <_printf_i+0x32>
 8004cc8:	2f00      	cmp	r7, #0
 8004cca:	f000 80d8 	beq.w	8004e7e <_printf_i+0x1d2>
 8004cce:	2f58      	cmp	r7, #88	; 0x58
 8004cd0:	f000 80a3 	beq.w	8004e1a <_printf_i+0x16e>
 8004cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cdc:	e03a      	b.n	8004d54 <_printf_i+0xa8>
 8004cde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ce2:	2b15      	cmp	r3, #21
 8004ce4:	d8f6      	bhi.n	8004cd4 <_printf_i+0x28>
 8004ce6:	a101      	add	r1, pc, #4	; (adr r1, 8004cec <_printf_i+0x40>)
 8004ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cec:	08004d45 	.word	0x08004d45
 8004cf0:	08004d59 	.word	0x08004d59
 8004cf4:	08004cd5 	.word	0x08004cd5
 8004cf8:	08004cd5 	.word	0x08004cd5
 8004cfc:	08004cd5 	.word	0x08004cd5
 8004d00:	08004cd5 	.word	0x08004cd5
 8004d04:	08004d59 	.word	0x08004d59
 8004d08:	08004cd5 	.word	0x08004cd5
 8004d0c:	08004cd5 	.word	0x08004cd5
 8004d10:	08004cd5 	.word	0x08004cd5
 8004d14:	08004cd5 	.word	0x08004cd5
 8004d18:	08004e65 	.word	0x08004e65
 8004d1c:	08004d89 	.word	0x08004d89
 8004d20:	08004e47 	.word	0x08004e47
 8004d24:	08004cd5 	.word	0x08004cd5
 8004d28:	08004cd5 	.word	0x08004cd5
 8004d2c:	08004e87 	.word	0x08004e87
 8004d30:	08004cd5 	.word	0x08004cd5
 8004d34:	08004d89 	.word	0x08004d89
 8004d38:	08004cd5 	.word	0x08004cd5
 8004d3c:	08004cd5 	.word	0x08004cd5
 8004d40:	08004e4f 	.word	0x08004e4f
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	1d1a      	adds	r2, r3, #4
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	602a      	str	r2, [r5, #0]
 8004d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0a3      	b.n	8004ea0 <_printf_i+0x1f4>
 8004d58:	6820      	ldr	r0, [r4, #0]
 8004d5a:	6829      	ldr	r1, [r5, #0]
 8004d5c:	0606      	lsls	r6, r0, #24
 8004d5e:	f101 0304 	add.w	r3, r1, #4
 8004d62:	d50a      	bpl.n	8004d7a <_printf_i+0xce>
 8004d64:	680e      	ldr	r6, [r1, #0]
 8004d66:	602b      	str	r3, [r5, #0]
 8004d68:	2e00      	cmp	r6, #0
 8004d6a:	da03      	bge.n	8004d74 <_printf_i+0xc8>
 8004d6c:	232d      	movs	r3, #45	; 0x2d
 8004d6e:	4276      	negs	r6, r6
 8004d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d74:	485e      	ldr	r0, [pc, #376]	; (8004ef0 <_printf_i+0x244>)
 8004d76:	230a      	movs	r3, #10
 8004d78:	e019      	b.n	8004dae <_printf_i+0x102>
 8004d7a:	680e      	ldr	r6, [r1, #0]
 8004d7c:	602b      	str	r3, [r5, #0]
 8004d7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d82:	bf18      	it	ne
 8004d84:	b236      	sxthne	r6, r6
 8004d86:	e7ef      	b.n	8004d68 <_printf_i+0xbc>
 8004d88:	682b      	ldr	r3, [r5, #0]
 8004d8a:	6820      	ldr	r0, [r4, #0]
 8004d8c:	1d19      	adds	r1, r3, #4
 8004d8e:	6029      	str	r1, [r5, #0]
 8004d90:	0601      	lsls	r1, r0, #24
 8004d92:	d501      	bpl.n	8004d98 <_printf_i+0xec>
 8004d94:	681e      	ldr	r6, [r3, #0]
 8004d96:	e002      	b.n	8004d9e <_printf_i+0xf2>
 8004d98:	0646      	lsls	r6, r0, #25
 8004d9a:	d5fb      	bpl.n	8004d94 <_printf_i+0xe8>
 8004d9c:	881e      	ldrh	r6, [r3, #0]
 8004d9e:	4854      	ldr	r0, [pc, #336]	; (8004ef0 <_printf_i+0x244>)
 8004da0:	2f6f      	cmp	r7, #111	; 0x6f
 8004da2:	bf0c      	ite	eq
 8004da4:	2308      	moveq	r3, #8
 8004da6:	230a      	movne	r3, #10
 8004da8:	2100      	movs	r1, #0
 8004daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dae:	6865      	ldr	r5, [r4, #4]
 8004db0:	60a5      	str	r5, [r4, #8]
 8004db2:	2d00      	cmp	r5, #0
 8004db4:	bfa2      	ittt	ge
 8004db6:	6821      	ldrge	r1, [r4, #0]
 8004db8:	f021 0104 	bicge.w	r1, r1, #4
 8004dbc:	6021      	strge	r1, [r4, #0]
 8004dbe:	b90e      	cbnz	r6, 8004dc4 <_printf_i+0x118>
 8004dc0:	2d00      	cmp	r5, #0
 8004dc2:	d04d      	beq.n	8004e60 <_printf_i+0x1b4>
 8004dc4:	4615      	mov	r5, r2
 8004dc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dca:	fb03 6711 	mls	r7, r3, r1, r6
 8004dce:	5dc7      	ldrb	r7, [r0, r7]
 8004dd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004dd4:	4637      	mov	r7, r6
 8004dd6:	42bb      	cmp	r3, r7
 8004dd8:	460e      	mov	r6, r1
 8004dda:	d9f4      	bls.n	8004dc6 <_printf_i+0x11a>
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d10b      	bne.n	8004df8 <_printf_i+0x14c>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	07de      	lsls	r6, r3, #31
 8004de4:	d508      	bpl.n	8004df8 <_printf_i+0x14c>
 8004de6:	6923      	ldr	r3, [r4, #16]
 8004de8:	6861      	ldr	r1, [r4, #4]
 8004dea:	4299      	cmp	r1, r3
 8004dec:	bfde      	ittt	le
 8004dee:	2330      	movle	r3, #48	; 0x30
 8004df0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004df4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004df8:	1b52      	subs	r2, r2, r5
 8004dfa:	6122      	str	r2, [r4, #16]
 8004dfc:	f8cd a000 	str.w	sl, [sp]
 8004e00:	464b      	mov	r3, r9
 8004e02:	aa03      	add	r2, sp, #12
 8004e04:	4621      	mov	r1, r4
 8004e06:	4640      	mov	r0, r8
 8004e08:	f7ff fee2 	bl	8004bd0 <_printf_common>
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d14c      	bne.n	8004eaa <_printf_i+0x1fe>
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	b004      	add	sp, #16
 8004e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1a:	4835      	ldr	r0, [pc, #212]	; (8004ef0 <_printf_i+0x244>)
 8004e1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e20:	6829      	ldr	r1, [r5, #0]
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e28:	6029      	str	r1, [r5, #0]
 8004e2a:	061d      	lsls	r5, r3, #24
 8004e2c:	d514      	bpl.n	8004e58 <_printf_i+0x1ac>
 8004e2e:	07df      	lsls	r7, r3, #31
 8004e30:	bf44      	itt	mi
 8004e32:	f043 0320 	orrmi.w	r3, r3, #32
 8004e36:	6023      	strmi	r3, [r4, #0]
 8004e38:	b91e      	cbnz	r6, 8004e42 <_printf_i+0x196>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	f023 0320 	bic.w	r3, r3, #32
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	2310      	movs	r3, #16
 8004e44:	e7b0      	b.n	8004da8 <_printf_i+0xfc>
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	f043 0320 	orr.w	r3, r3, #32
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	2378      	movs	r3, #120	; 0x78
 8004e50:	4828      	ldr	r0, [pc, #160]	; (8004ef4 <_printf_i+0x248>)
 8004e52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e56:	e7e3      	b.n	8004e20 <_printf_i+0x174>
 8004e58:	0659      	lsls	r1, r3, #25
 8004e5a:	bf48      	it	mi
 8004e5c:	b2b6      	uxthmi	r6, r6
 8004e5e:	e7e6      	b.n	8004e2e <_printf_i+0x182>
 8004e60:	4615      	mov	r5, r2
 8004e62:	e7bb      	b.n	8004ddc <_printf_i+0x130>
 8004e64:	682b      	ldr	r3, [r5, #0]
 8004e66:	6826      	ldr	r6, [r4, #0]
 8004e68:	6961      	ldr	r1, [r4, #20]
 8004e6a:	1d18      	adds	r0, r3, #4
 8004e6c:	6028      	str	r0, [r5, #0]
 8004e6e:	0635      	lsls	r5, r6, #24
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	d501      	bpl.n	8004e78 <_printf_i+0x1cc>
 8004e74:	6019      	str	r1, [r3, #0]
 8004e76:	e002      	b.n	8004e7e <_printf_i+0x1d2>
 8004e78:	0670      	lsls	r0, r6, #25
 8004e7a:	d5fb      	bpl.n	8004e74 <_printf_i+0x1c8>
 8004e7c:	8019      	strh	r1, [r3, #0]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	6123      	str	r3, [r4, #16]
 8004e82:	4615      	mov	r5, r2
 8004e84:	e7ba      	b.n	8004dfc <_printf_i+0x150>
 8004e86:	682b      	ldr	r3, [r5, #0]
 8004e88:	1d1a      	adds	r2, r3, #4
 8004e8a:	602a      	str	r2, [r5, #0]
 8004e8c:	681d      	ldr	r5, [r3, #0]
 8004e8e:	6862      	ldr	r2, [r4, #4]
 8004e90:	2100      	movs	r1, #0
 8004e92:	4628      	mov	r0, r5
 8004e94:	f7fb f99c 	bl	80001d0 <memchr>
 8004e98:	b108      	cbz	r0, 8004e9e <_printf_i+0x1f2>
 8004e9a:	1b40      	subs	r0, r0, r5
 8004e9c:	6060      	str	r0, [r4, #4]
 8004e9e:	6863      	ldr	r3, [r4, #4]
 8004ea0:	6123      	str	r3, [r4, #16]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea8:	e7a8      	b.n	8004dfc <_printf_i+0x150>
 8004eaa:	6923      	ldr	r3, [r4, #16]
 8004eac:	462a      	mov	r2, r5
 8004eae:	4649      	mov	r1, r9
 8004eb0:	4640      	mov	r0, r8
 8004eb2:	47d0      	blx	sl
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d0ab      	beq.n	8004e10 <_printf_i+0x164>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	079b      	lsls	r3, r3, #30
 8004ebc:	d413      	bmi.n	8004ee6 <_printf_i+0x23a>
 8004ebe:	68e0      	ldr	r0, [r4, #12]
 8004ec0:	9b03      	ldr	r3, [sp, #12]
 8004ec2:	4298      	cmp	r0, r3
 8004ec4:	bfb8      	it	lt
 8004ec6:	4618      	movlt	r0, r3
 8004ec8:	e7a4      	b.n	8004e14 <_printf_i+0x168>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	4632      	mov	r2, r6
 8004ece:	4649      	mov	r1, r9
 8004ed0:	4640      	mov	r0, r8
 8004ed2:	47d0      	blx	sl
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d09b      	beq.n	8004e10 <_printf_i+0x164>
 8004ed8:	3501      	adds	r5, #1
 8004eda:	68e3      	ldr	r3, [r4, #12]
 8004edc:	9903      	ldr	r1, [sp, #12]
 8004ede:	1a5b      	subs	r3, r3, r1
 8004ee0:	42ab      	cmp	r3, r5
 8004ee2:	dcf2      	bgt.n	8004eca <_printf_i+0x21e>
 8004ee4:	e7eb      	b.n	8004ebe <_printf_i+0x212>
 8004ee6:	2500      	movs	r5, #0
 8004ee8:	f104 0619 	add.w	r6, r4, #25
 8004eec:	e7f5      	b.n	8004eda <_printf_i+0x22e>
 8004eee:	bf00      	nop
 8004ef0:	080055c9 	.word	0x080055c9
 8004ef4:	080055da 	.word	0x080055da

08004ef8 <_sbrk_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4d06      	ldr	r5, [pc, #24]	; (8004f14 <_sbrk_r+0x1c>)
 8004efc:	2300      	movs	r3, #0
 8004efe:	4604      	mov	r4, r0
 8004f00:	4608      	mov	r0, r1
 8004f02:	602b      	str	r3, [r5, #0]
 8004f04:	f7fb fdc2 	bl	8000a8c <_sbrk>
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	d102      	bne.n	8004f12 <_sbrk_r+0x1a>
 8004f0c:	682b      	ldr	r3, [r5, #0]
 8004f0e:	b103      	cbz	r3, 8004f12 <_sbrk_r+0x1a>
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	2000021c 	.word	0x2000021c

08004f18 <__sread>:
 8004f18:	b510      	push	{r4, lr}
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f20:	f000 fab2 	bl	8005488 <_read_r>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	bfab      	itete	ge
 8004f28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f2c:	181b      	addge	r3, r3, r0
 8004f2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f32:	bfac      	ite	ge
 8004f34:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f36:	81a3      	strhlt	r3, [r4, #12]
 8004f38:	bd10      	pop	{r4, pc}

08004f3a <__swrite>:
 8004f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3e:	461f      	mov	r7, r3
 8004f40:	898b      	ldrh	r3, [r1, #12]
 8004f42:	05db      	lsls	r3, r3, #23
 8004f44:	4605      	mov	r5, r0
 8004f46:	460c      	mov	r4, r1
 8004f48:	4616      	mov	r6, r2
 8004f4a:	d505      	bpl.n	8004f58 <__swrite+0x1e>
 8004f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f50:	2302      	movs	r3, #2
 8004f52:	2200      	movs	r2, #0
 8004f54:	f000 f9c8 	bl	80052e8 <_lseek_r>
 8004f58:	89a3      	ldrh	r3, [r4, #12]
 8004f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f62:	81a3      	strh	r3, [r4, #12]
 8004f64:	4632      	mov	r2, r6
 8004f66:	463b      	mov	r3, r7
 8004f68:	4628      	mov	r0, r5
 8004f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f6e:	f000 b869 	b.w	8005044 <_write_r>

08004f72 <__sseek>:
 8004f72:	b510      	push	{r4, lr}
 8004f74:	460c      	mov	r4, r1
 8004f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f7a:	f000 f9b5 	bl	80052e8 <_lseek_r>
 8004f7e:	1c43      	adds	r3, r0, #1
 8004f80:	89a3      	ldrh	r3, [r4, #12]
 8004f82:	bf15      	itete	ne
 8004f84:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f8e:	81a3      	strheq	r3, [r4, #12]
 8004f90:	bf18      	it	ne
 8004f92:	81a3      	strhne	r3, [r4, #12]
 8004f94:	bd10      	pop	{r4, pc}

08004f96 <__sclose>:
 8004f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9a:	f000 b8d3 	b.w	8005144 <_close_r>
	...

08004fa0 <__swbuf_r>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	460e      	mov	r6, r1
 8004fa4:	4614      	mov	r4, r2
 8004fa6:	4605      	mov	r5, r0
 8004fa8:	b118      	cbz	r0, 8004fb2 <__swbuf_r+0x12>
 8004faa:	6983      	ldr	r3, [r0, #24]
 8004fac:	b90b      	cbnz	r3, 8004fb2 <__swbuf_r+0x12>
 8004fae:	f7ff fb81 	bl	80046b4 <__sinit>
 8004fb2:	4b21      	ldr	r3, [pc, #132]	; (8005038 <__swbuf_r+0x98>)
 8004fb4:	429c      	cmp	r4, r3
 8004fb6:	d12b      	bne.n	8005010 <__swbuf_r+0x70>
 8004fb8:	686c      	ldr	r4, [r5, #4]
 8004fba:	69a3      	ldr	r3, [r4, #24]
 8004fbc:	60a3      	str	r3, [r4, #8]
 8004fbe:	89a3      	ldrh	r3, [r4, #12]
 8004fc0:	071a      	lsls	r2, r3, #28
 8004fc2:	d52f      	bpl.n	8005024 <__swbuf_r+0x84>
 8004fc4:	6923      	ldr	r3, [r4, #16]
 8004fc6:	b36b      	cbz	r3, 8005024 <__swbuf_r+0x84>
 8004fc8:	6923      	ldr	r3, [r4, #16]
 8004fca:	6820      	ldr	r0, [r4, #0]
 8004fcc:	1ac0      	subs	r0, r0, r3
 8004fce:	6963      	ldr	r3, [r4, #20]
 8004fd0:	b2f6      	uxtb	r6, r6
 8004fd2:	4283      	cmp	r3, r0
 8004fd4:	4637      	mov	r7, r6
 8004fd6:	dc04      	bgt.n	8004fe2 <__swbuf_r+0x42>
 8004fd8:	4621      	mov	r1, r4
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f000 f948 	bl	8005270 <_fflush_r>
 8004fe0:	bb30      	cbnz	r0, 8005030 <__swbuf_r+0x90>
 8004fe2:	68a3      	ldr	r3, [r4, #8]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	60a3      	str	r3, [r4, #8]
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	6022      	str	r2, [r4, #0]
 8004fee:	701e      	strb	r6, [r3, #0]
 8004ff0:	6963      	ldr	r3, [r4, #20]
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	4283      	cmp	r3, r0
 8004ff6:	d004      	beq.n	8005002 <__swbuf_r+0x62>
 8004ff8:	89a3      	ldrh	r3, [r4, #12]
 8004ffa:	07db      	lsls	r3, r3, #31
 8004ffc:	d506      	bpl.n	800500c <__swbuf_r+0x6c>
 8004ffe:	2e0a      	cmp	r6, #10
 8005000:	d104      	bne.n	800500c <__swbuf_r+0x6c>
 8005002:	4621      	mov	r1, r4
 8005004:	4628      	mov	r0, r5
 8005006:	f000 f933 	bl	8005270 <_fflush_r>
 800500a:	b988      	cbnz	r0, 8005030 <__swbuf_r+0x90>
 800500c:	4638      	mov	r0, r7
 800500e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005010:	4b0a      	ldr	r3, [pc, #40]	; (800503c <__swbuf_r+0x9c>)
 8005012:	429c      	cmp	r4, r3
 8005014:	d101      	bne.n	800501a <__swbuf_r+0x7a>
 8005016:	68ac      	ldr	r4, [r5, #8]
 8005018:	e7cf      	b.n	8004fba <__swbuf_r+0x1a>
 800501a:	4b09      	ldr	r3, [pc, #36]	; (8005040 <__swbuf_r+0xa0>)
 800501c:	429c      	cmp	r4, r3
 800501e:	bf08      	it	eq
 8005020:	68ec      	ldreq	r4, [r5, #12]
 8005022:	e7ca      	b.n	8004fba <__swbuf_r+0x1a>
 8005024:	4621      	mov	r1, r4
 8005026:	4628      	mov	r0, r5
 8005028:	f000 f81e 	bl	8005068 <__swsetup_r>
 800502c:	2800      	cmp	r0, #0
 800502e:	d0cb      	beq.n	8004fc8 <__swbuf_r+0x28>
 8005030:	f04f 37ff 	mov.w	r7, #4294967295
 8005034:	e7ea      	b.n	800500c <__swbuf_r+0x6c>
 8005036:	bf00      	nop
 8005038:	08005578 	.word	0x08005578
 800503c:	08005598 	.word	0x08005598
 8005040:	08005558 	.word	0x08005558

08005044 <_write_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4d07      	ldr	r5, [pc, #28]	; (8005064 <_write_r+0x20>)
 8005048:	4604      	mov	r4, r0
 800504a:	4608      	mov	r0, r1
 800504c:	4611      	mov	r1, r2
 800504e:	2200      	movs	r2, #0
 8005050:	602a      	str	r2, [r5, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	f7fb fcc9 	bl	80009ea <_write>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d102      	bne.n	8005062 <_write_r+0x1e>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	b103      	cbz	r3, 8005062 <_write_r+0x1e>
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	2000021c 	.word	0x2000021c

08005068 <__swsetup_r>:
 8005068:	4b32      	ldr	r3, [pc, #200]	; (8005134 <__swsetup_r+0xcc>)
 800506a:	b570      	push	{r4, r5, r6, lr}
 800506c:	681d      	ldr	r5, [r3, #0]
 800506e:	4606      	mov	r6, r0
 8005070:	460c      	mov	r4, r1
 8005072:	b125      	cbz	r5, 800507e <__swsetup_r+0x16>
 8005074:	69ab      	ldr	r3, [r5, #24]
 8005076:	b913      	cbnz	r3, 800507e <__swsetup_r+0x16>
 8005078:	4628      	mov	r0, r5
 800507a:	f7ff fb1b 	bl	80046b4 <__sinit>
 800507e:	4b2e      	ldr	r3, [pc, #184]	; (8005138 <__swsetup_r+0xd0>)
 8005080:	429c      	cmp	r4, r3
 8005082:	d10f      	bne.n	80050a4 <__swsetup_r+0x3c>
 8005084:	686c      	ldr	r4, [r5, #4]
 8005086:	89a3      	ldrh	r3, [r4, #12]
 8005088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800508c:	0719      	lsls	r1, r3, #28
 800508e:	d42c      	bmi.n	80050ea <__swsetup_r+0x82>
 8005090:	06dd      	lsls	r5, r3, #27
 8005092:	d411      	bmi.n	80050b8 <__swsetup_r+0x50>
 8005094:	2309      	movs	r3, #9
 8005096:	6033      	str	r3, [r6, #0]
 8005098:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800509c:	81a3      	strh	r3, [r4, #12]
 800509e:	f04f 30ff 	mov.w	r0, #4294967295
 80050a2:	e03e      	b.n	8005122 <__swsetup_r+0xba>
 80050a4:	4b25      	ldr	r3, [pc, #148]	; (800513c <__swsetup_r+0xd4>)
 80050a6:	429c      	cmp	r4, r3
 80050a8:	d101      	bne.n	80050ae <__swsetup_r+0x46>
 80050aa:	68ac      	ldr	r4, [r5, #8]
 80050ac:	e7eb      	b.n	8005086 <__swsetup_r+0x1e>
 80050ae:	4b24      	ldr	r3, [pc, #144]	; (8005140 <__swsetup_r+0xd8>)
 80050b0:	429c      	cmp	r4, r3
 80050b2:	bf08      	it	eq
 80050b4:	68ec      	ldreq	r4, [r5, #12]
 80050b6:	e7e6      	b.n	8005086 <__swsetup_r+0x1e>
 80050b8:	0758      	lsls	r0, r3, #29
 80050ba:	d512      	bpl.n	80050e2 <__swsetup_r+0x7a>
 80050bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050be:	b141      	cbz	r1, 80050d2 <__swsetup_r+0x6a>
 80050c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050c4:	4299      	cmp	r1, r3
 80050c6:	d002      	beq.n	80050ce <__swsetup_r+0x66>
 80050c8:	4630      	mov	r0, r6
 80050ca:	f000 f991 	bl	80053f0 <_free_r>
 80050ce:	2300      	movs	r3, #0
 80050d0:	6363      	str	r3, [r4, #52]	; 0x34
 80050d2:	89a3      	ldrh	r3, [r4, #12]
 80050d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050d8:	81a3      	strh	r3, [r4, #12]
 80050da:	2300      	movs	r3, #0
 80050dc:	6063      	str	r3, [r4, #4]
 80050de:	6923      	ldr	r3, [r4, #16]
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	89a3      	ldrh	r3, [r4, #12]
 80050e4:	f043 0308 	orr.w	r3, r3, #8
 80050e8:	81a3      	strh	r3, [r4, #12]
 80050ea:	6923      	ldr	r3, [r4, #16]
 80050ec:	b94b      	cbnz	r3, 8005102 <__swsetup_r+0x9a>
 80050ee:	89a3      	ldrh	r3, [r4, #12]
 80050f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f8:	d003      	beq.n	8005102 <__swsetup_r+0x9a>
 80050fa:	4621      	mov	r1, r4
 80050fc:	4630      	mov	r0, r6
 80050fe:	f000 f92b 	bl	8005358 <__smakebuf_r>
 8005102:	89a0      	ldrh	r0, [r4, #12]
 8005104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005108:	f010 0301 	ands.w	r3, r0, #1
 800510c:	d00a      	beq.n	8005124 <__swsetup_r+0xbc>
 800510e:	2300      	movs	r3, #0
 8005110:	60a3      	str	r3, [r4, #8]
 8005112:	6963      	ldr	r3, [r4, #20]
 8005114:	425b      	negs	r3, r3
 8005116:	61a3      	str	r3, [r4, #24]
 8005118:	6923      	ldr	r3, [r4, #16]
 800511a:	b943      	cbnz	r3, 800512e <__swsetup_r+0xc6>
 800511c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005120:	d1ba      	bne.n	8005098 <__swsetup_r+0x30>
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	0781      	lsls	r1, r0, #30
 8005126:	bf58      	it	pl
 8005128:	6963      	ldrpl	r3, [r4, #20]
 800512a:	60a3      	str	r3, [r4, #8]
 800512c:	e7f4      	b.n	8005118 <__swsetup_r+0xb0>
 800512e:	2000      	movs	r0, #0
 8005130:	e7f7      	b.n	8005122 <__swsetup_r+0xba>
 8005132:	bf00      	nop
 8005134:	2000000c 	.word	0x2000000c
 8005138:	08005578 	.word	0x08005578
 800513c:	08005598 	.word	0x08005598
 8005140:	08005558 	.word	0x08005558

08005144 <_close_r>:
 8005144:	b538      	push	{r3, r4, r5, lr}
 8005146:	4d06      	ldr	r5, [pc, #24]	; (8005160 <_close_r+0x1c>)
 8005148:	2300      	movs	r3, #0
 800514a:	4604      	mov	r4, r0
 800514c:	4608      	mov	r0, r1
 800514e:	602b      	str	r3, [r5, #0]
 8005150:	f7fb fc67 	bl	8000a22 <_close>
 8005154:	1c43      	adds	r3, r0, #1
 8005156:	d102      	bne.n	800515e <_close_r+0x1a>
 8005158:	682b      	ldr	r3, [r5, #0]
 800515a:	b103      	cbz	r3, 800515e <_close_r+0x1a>
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	bd38      	pop	{r3, r4, r5, pc}
 8005160:	2000021c 	.word	0x2000021c

08005164 <__sflush_r>:
 8005164:	898a      	ldrh	r2, [r1, #12]
 8005166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800516a:	4605      	mov	r5, r0
 800516c:	0710      	lsls	r0, r2, #28
 800516e:	460c      	mov	r4, r1
 8005170:	d458      	bmi.n	8005224 <__sflush_r+0xc0>
 8005172:	684b      	ldr	r3, [r1, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	dc05      	bgt.n	8005184 <__sflush_r+0x20>
 8005178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	dc02      	bgt.n	8005184 <__sflush_r+0x20>
 800517e:	2000      	movs	r0, #0
 8005180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005186:	2e00      	cmp	r6, #0
 8005188:	d0f9      	beq.n	800517e <__sflush_r+0x1a>
 800518a:	2300      	movs	r3, #0
 800518c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005190:	682f      	ldr	r7, [r5, #0]
 8005192:	602b      	str	r3, [r5, #0]
 8005194:	d032      	beq.n	80051fc <__sflush_r+0x98>
 8005196:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	075a      	lsls	r2, r3, #29
 800519c:	d505      	bpl.n	80051aa <__sflush_r+0x46>
 800519e:	6863      	ldr	r3, [r4, #4]
 80051a0:	1ac0      	subs	r0, r0, r3
 80051a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051a4:	b10b      	cbz	r3, 80051aa <__sflush_r+0x46>
 80051a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051a8:	1ac0      	subs	r0, r0, r3
 80051aa:	2300      	movs	r3, #0
 80051ac:	4602      	mov	r2, r0
 80051ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051b0:	6a21      	ldr	r1, [r4, #32]
 80051b2:	4628      	mov	r0, r5
 80051b4:	47b0      	blx	r6
 80051b6:	1c43      	adds	r3, r0, #1
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	d106      	bne.n	80051ca <__sflush_r+0x66>
 80051bc:	6829      	ldr	r1, [r5, #0]
 80051be:	291d      	cmp	r1, #29
 80051c0:	d82c      	bhi.n	800521c <__sflush_r+0xb8>
 80051c2:	4a2a      	ldr	r2, [pc, #168]	; (800526c <__sflush_r+0x108>)
 80051c4:	40ca      	lsrs	r2, r1
 80051c6:	07d6      	lsls	r6, r2, #31
 80051c8:	d528      	bpl.n	800521c <__sflush_r+0xb8>
 80051ca:	2200      	movs	r2, #0
 80051cc:	6062      	str	r2, [r4, #4]
 80051ce:	04d9      	lsls	r1, r3, #19
 80051d0:	6922      	ldr	r2, [r4, #16]
 80051d2:	6022      	str	r2, [r4, #0]
 80051d4:	d504      	bpl.n	80051e0 <__sflush_r+0x7c>
 80051d6:	1c42      	adds	r2, r0, #1
 80051d8:	d101      	bne.n	80051de <__sflush_r+0x7a>
 80051da:	682b      	ldr	r3, [r5, #0]
 80051dc:	b903      	cbnz	r3, 80051e0 <__sflush_r+0x7c>
 80051de:	6560      	str	r0, [r4, #84]	; 0x54
 80051e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051e2:	602f      	str	r7, [r5, #0]
 80051e4:	2900      	cmp	r1, #0
 80051e6:	d0ca      	beq.n	800517e <__sflush_r+0x1a>
 80051e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051ec:	4299      	cmp	r1, r3
 80051ee:	d002      	beq.n	80051f6 <__sflush_r+0x92>
 80051f0:	4628      	mov	r0, r5
 80051f2:	f000 f8fd 	bl	80053f0 <_free_r>
 80051f6:	2000      	movs	r0, #0
 80051f8:	6360      	str	r0, [r4, #52]	; 0x34
 80051fa:	e7c1      	b.n	8005180 <__sflush_r+0x1c>
 80051fc:	6a21      	ldr	r1, [r4, #32]
 80051fe:	2301      	movs	r3, #1
 8005200:	4628      	mov	r0, r5
 8005202:	47b0      	blx	r6
 8005204:	1c41      	adds	r1, r0, #1
 8005206:	d1c7      	bne.n	8005198 <__sflush_r+0x34>
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0c4      	beq.n	8005198 <__sflush_r+0x34>
 800520e:	2b1d      	cmp	r3, #29
 8005210:	d001      	beq.n	8005216 <__sflush_r+0xb2>
 8005212:	2b16      	cmp	r3, #22
 8005214:	d101      	bne.n	800521a <__sflush_r+0xb6>
 8005216:	602f      	str	r7, [r5, #0]
 8005218:	e7b1      	b.n	800517e <__sflush_r+0x1a>
 800521a:	89a3      	ldrh	r3, [r4, #12]
 800521c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005220:	81a3      	strh	r3, [r4, #12]
 8005222:	e7ad      	b.n	8005180 <__sflush_r+0x1c>
 8005224:	690f      	ldr	r7, [r1, #16]
 8005226:	2f00      	cmp	r7, #0
 8005228:	d0a9      	beq.n	800517e <__sflush_r+0x1a>
 800522a:	0793      	lsls	r3, r2, #30
 800522c:	680e      	ldr	r6, [r1, #0]
 800522e:	bf08      	it	eq
 8005230:	694b      	ldreq	r3, [r1, #20]
 8005232:	600f      	str	r7, [r1, #0]
 8005234:	bf18      	it	ne
 8005236:	2300      	movne	r3, #0
 8005238:	eba6 0807 	sub.w	r8, r6, r7
 800523c:	608b      	str	r3, [r1, #8]
 800523e:	f1b8 0f00 	cmp.w	r8, #0
 8005242:	dd9c      	ble.n	800517e <__sflush_r+0x1a>
 8005244:	6a21      	ldr	r1, [r4, #32]
 8005246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005248:	4643      	mov	r3, r8
 800524a:	463a      	mov	r2, r7
 800524c:	4628      	mov	r0, r5
 800524e:	47b0      	blx	r6
 8005250:	2800      	cmp	r0, #0
 8005252:	dc06      	bgt.n	8005262 <__sflush_r+0xfe>
 8005254:	89a3      	ldrh	r3, [r4, #12]
 8005256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800525a:	81a3      	strh	r3, [r4, #12]
 800525c:	f04f 30ff 	mov.w	r0, #4294967295
 8005260:	e78e      	b.n	8005180 <__sflush_r+0x1c>
 8005262:	4407      	add	r7, r0
 8005264:	eba8 0800 	sub.w	r8, r8, r0
 8005268:	e7e9      	b.n	800523e <__sflush_r+0xda>
 800526a:	bf00      	nop
 800526c:	20400001 	.word	0x20400001

08005270 <_fflush_r>:
 8005270:	b538      	push	{r3, r4, r5, lr}
 8005272:	690b      	ldr	r3, [r1, #16]
 8005274:	4605      	mov	r5, r0
 8005276:	460c      	mov	r4, r1
 8005278:	b913      	cbnz	r3, 8005280 <_fflush_r+0x10>
 800527a:	2500      	movs	r5, #0
 800527c:	4628      	mov	r0, r5
 800527e:	bd38      	pop	{r3, r4, r5, pc}
 8005280:	b118      	cbz	r0, 800528a <_fflush_r+0x1a>
 8005282:	6983      	ldr	r3, [r0, #24]
 8005284:	b90b      	cbnz	r3, 800528a <_fflush_r+0x1a>
 8005286:	f7ff fa15 	bl	80046b4 <__sinit>
 800528a:	4b14      	ldr	r3, [pc, #80]	; (80052dc <_fflush_r+0x6c>)
 800528c:	429c      	cmp	r4, r3
 800528e:	d11b      	bne.n	80052c8 <_fflush_r+0x58>
 8005290:	686c      	ldr	r4, [r5, #4]
 8005292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0ef      	beq.n	800527a <_fflush_r+0xa>
 800529a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800529c:	07d0      	lsls	r0, r2, #31
 800529e:	d404      	bmi.n	80052aa <_fflush_r+0x3a>
 80052a0:	0599      	lsls	r1, r3, #22
 80052a2:	d402      	bmi.n	80052aa <_fflush_r+0x3a>
 80052a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052a6:	f7ff faa3 	bl	80047f0 <__retarget_lock_acquire_recursive>
 80052aa:	4628      	mov	r0, r5
 80052ac:	4621      	mov	r1, r4
 80052ae:	f7ff ff59 	bl	8005164 <__sflush_r>
 80052b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052b4:	07da      	lsls	r2, r3, #31
 80052b6:	4605      	mov	r5, r0
 80052b8:	d4e0      	bmi.n	800527c <_fflush_r+0xc>
 80052ba:	89a3      	ldrh	r3, [r4, #12]
 80052bc:	059b      	lsls	r3, r3, #22
 80052be:	d4dd      	bmi.n	800527c <_fflush_r+0xc>
 80052c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052c2:	f7ff fa96 	bl	80047f2 <__retarget_lock_release_recursive>
 80052c6:	e7d9      	b.n	800527c <_fflush_r+0xc>
 80052c8:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <_fflush_r+0x70>)
 80052ca:	429c      	cmp	r4, r3
 80052cc:	d101      	bne.n	80052d2 <_fflush_r+0x62>
 80052ce:	68ac      	ldr	r4, [r5, #8]
 80052d0:	e7df      	b.n	8005292 <_fflush_r+0x22>
 80052d2:	4b04      	ldr	r3, [pc, #16]	; (80052e4 <_fflush_r+0x74>)
 80052d4:	429c      	cmp	r4, r3
 80052d6:	bf08      	it	eq
 80052d8:	68ec      	ldreq	r4, [r5, #12]
 80052da:	e7da      	b.n	8005292 <_fflush_r+0x22>
 80052dc:	08005578 	.word	0x08005578
 80052e0:	08005598 	.word	0x08005598
 80052e4:	08005558 	.word	0x08005558

080052e8 <_lseek_r>:
 80052e8:	b538      	push	{r3, r4, r5, lr}
 80052ea:	4d07      	ldr	r5, [pc, #28]	; (8005308 <_lseek_r+0x20>)
 80052ec:	4604      	mov	r4, r0
 80052ee:	4608      	mov	r0, r1
 80052f0:	4611      	mov	r1, r2
 80052f2:	2200      	movs	r2, #0
 80052f4:	602a      	str	r2, [r5, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	f7fb fbba 	bl	8000a70 <_lseek>
 80052fc:	1c43      	adds	r3, r0, #1
 80052fe:	d102      	bne.n	8005306 <_lseek_r+0x1e>
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	b103      	cbz	r3, 8005306 <_lseek_r+0x1e>
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	bd38      	pop	{r3, r4, r5, pc}
 8005308:	2000021c 	.word	0x2000021c

0800530c <__swhatbuf_r>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	460e      	mov	r6, r1
 8005310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005314:	2900      	cmp	r1, #0
 8005316:	b096      	sub	sp, #88	; 0x58
 8005318:	4614      	mov	r4, r2
 800531a:	461d      	mov	r5, r3
 800531c:	da08      	bge.n	8005330 <__swhatbuf_r+0x24>
 800531e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	602a      	str	r2, [r5, #0]
 8005326:	061a      	lsls	r2, r3, #24
 8005328:	d410      	bmi.n	800534c <__swhatbuf_r+0x40>
 800532a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800532e:	e00e      	b.n	800534e <__swhatbuf_r+0x42>
 8005330:	466a      	mov	r2, sp
 8005332:	f000 f8bb 	bl	80054ac <_fstat_r>
 8005336:	2800      	cmp	r0, #0
 8005338:	dbf1      	blt.n	800531e <__swhatbuf_r+0x12>
 800533a:	9a01      	ldr	r2, [sp, #4]
 800533c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005340:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005344:	425a      	negs	r2, r3
 8005346:	415a      	adcs	r2, r3
 8005348:	602a      	str	r2, [r5, #0]
 800534a:	e7ee      	b.n	800532a <__swhatbuf_r+0x1e>
 800534c:	2340      	movs	r3, #64	; 0x40
 800534e:	2000      	movs	r0, #0
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	b016      	add	sp, #88	; 0x58
 8005354:	bd70      	pop	{r4, r5, r6, pc}
	...

08005358 <__smakebuf_r>:
 8005358:	898b      	ldrh	r3, [r1, #12]
 800535a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800535c:	079d      	lsls	r5, r3, #30
 800535e:	4606      	mov	r6, r0
 8005360:	460c      	mov	r4, r1
 8005362:	d507      	bpl.n	8005374 <__smakebuf_r+0x1c>
 8005364:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	6123      	str	r3, [r4, #16]
 800536c:	2301      	movs	r3, #1
 800536e:	6163      	str	r3, [r4, #20]
 8005370:	b002      	add	sp, #8
 8005372:	bd70      	pop	{r4, r5, r6, pc}
 8005374:	ab01      	add	r3, sp, #4
 8005376:	466a      	mov	r2, sp
 8005378:	f7ff ffc8 	bl	800530c <__swhatbuf_r>
 800537c:	9900      	ldr	r1, [sp, #0]
 800537e:	4605      	mov	r5, r0
 8005380:	4630      	mov	r0, r6
 8005382:	f7ff fa57 	bl	8004834 <_malloc_r>
 8005386:	b948      	cbnz	r0, 800539c <__smakebuf_r+0x44>
 8005388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800538c:	059a      	lsls	r2, r3, #22
 800538e:	d4ef      	bmi.n	8005370 <__smakebuf_r+0x18>
 8005390:	f023 0303 	bic.w	r3, r3, #3
 8005394:	f043 0302 	orr.w	r3, r3, #2
 8005398:	81a3      	strh	r3, [r4, #12]
 800539a:	e7e3      	b.n	8005364 <__smakebuf_r+0xc>
 800539c:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <__smakebuf_r+0x7c>)
 800539e:	62b3      	str	r3, [r6, #40]	; 0x28
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	6020      	str	r0, [r4, #0]
 80053a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a8:	81a3      	strh	r3, [r4, #12]
 80053aa:	9b00      	ldr	r3, [sp, #0]
 80053ac:	6163      	str	r3, [r4, #20]
 80053ae:	9b01      	ldr	r3, [sp, #4]
 80053b0:	6120      	str	r0, [r4, #16]
 80053b2:	b15b      	cbz	r3, 80053cc <__smakebuf_r+0x74>
 80053b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053b8:	4630      	mov	r0, r6
 80053ba:	f000 f889 	bl	80054d0 <_isatty_r>
 80053be:	b128      	cbz	r0, 80053cc <__smakebuf_r+0x74>
 80053c0:	89a3      	ldrh	r3, [r4, #12]
 80053c2:	f023 0303 	bic.w	r3, r3, #3
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	81a3      	strh	r3, [r4, #12]
 80053cc:	89a0      	ldrh	r0, [r4, #12]
 80053ce:	4305      	orrs	r5, r0
 80053d0:	81a5      	strh	r5, [r4, #12]
 80053d2:	e7cd      	b.n	8005370 <__smakebuf_r+0x18>
 80053d4:	0800464d 	.word	0x0800464d

080053d8 <__malloc_lock>:
 80053d8:	4801      	ldr	r0, [pc, #4]	; (80053e0 <__malloc_lock+0x8>)
 80053da:	f7ff ba09 	b.w	80047f0 <__retarget_lock_acquire_recursive>
 80053de:	bf00      	nop
 80053e0:	20000210 	.word	0x20000210

080053e4 <__malloc_unlock>:
 80053e4:	4801      	ldr	r0, [pc, #4]	; (80053ec <__malloc_unlock+0x8>)
 80053e6:	f7ff ba04 	b.w	80047f2 <__retarget_lock_release_recursive>
 80053ea:	bf00      	nop
 80053ec:	20000210 	.word	0x20000210

080053f0 <_free_r>:
 80053f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053f2:	2900      	cmp	r1, #0
 80053f4:	d044      	beq.n	8005480 <_free_r+0x90>
 80053f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053fa:	9001      	str	r0, [sp, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005402:	bfb8      	it	lt
 8005404:	18e4      	addlt	r4, r4, r3
 8005406:	f7ff ffe7 	bl	80053d8 <__malloc_lock>
 800540a:	4a1e      	ldr	r2, [pc, #120]	; (8005484 <_free_r+0x94>)
 800540c:	9801      	ldr	r0, [sp, #4]
 800540e:	6813      	ldr	r3, [r2, #0]
 8005410:	b933      	cbnz	r3, 8005420 <_free_r+0x30>
 8005412:	6063      	str	r3, [r4, #4]
 8005414:	6014      	str	r4, [r2, #0]
 8005416:	b003      	add	sp, #12
 8005418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800541c:	f7ff bfe2 	b.w	80053e4 <__malloc_unlock>
 8005420:	42a3      	cmp	r3, r4
 8005422:	d908      	bls.n	8005436 <_free_r+0x46>
 8005424:	6825      	ldr	r5, [r4, #0]
 8005426:	1961      	adds	r1, r4, r5
 8005428:	428b      	cmp	r3, r1
 800542a:	bf01      	itttt	eq
 800542c:	6819      	ldreq	r1, [r3, #0]
 800542e:	685b      	ldreq	r3, [r3, #4]
 8005430:	1949      	addeq	r1, r1, r5
 8005432:	6021      	streq	r1, [r4, #0]
 8005434:	e7ed      	b.n	8005412 <_free_r+0x22>
 8005436:	461a      	mov	r2, r3
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	b10b      	cbz	r3, 8005440 <_free_r+0x50>
 800543c:	42a3      	cmp	r3, r4
 800543e:	d9fa      	bls.n	8005436 <_free_r+0x46>
 8005440:	6811      	ldr	r1, [r2, #0]
 8005442:	1855      	adds	r5, r2, r1
 8005444:	42a5      	cmp	r5, r4
 8005446:	d10b      	bne.n	8005460 <_free_r+0x70>
 8005448:	6824      	ldr	r4, [r4, #0]
 800544a:	4421      	add	r1, r4
 800544c:	1854      	adds	r4, r2, r1
 800544e:	42a3      	cmp	r3, r4
 8005450:	6011      	str	r1, [r2, #0]
 8005452:	d1e0      	bne.n	8005416 <_free_r+0x26>
 8005454:	681c      	ldr	r4, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	6053      	str	r3, [r2, #4]
 800545a:	4421      	add	r1, r4
 800545c:	6011      	str	r1, [r2, #0]
 800545e:	e7da      	b.n	8005416 <_free_r+0x26>
 8005460:	d902      	bls.n	8005468 <_free_r+0x78>
 8005462:	230c      	movs	r3, #12
 8005464:	6003      	str	r3, [r0, #0]
 8005466:	e7d6      	b.n	8005416 <_free_r+0x26>
 8005468:	6825      	ldr	r5, [r4, #0]
 800546a:	1961      	adds	r1, r4, r5
 800546c:	428b      	cmp	r3, r1
 800546e:	bf04      	itt	eq
 8005470:	6819      	ldreq	r1, [r3, #0]
 8005472:	685b      	ldreq	r3, [r3, #4]
 8005474:	6063      	str	r3, [r4, #4]
 8005476:	bf04      	itt	eq
 8005478:	1949      	addeq	r1, r1, r5
 800547a:	6021      	streq	r1, [r4, #0]
 800547c:	6054      	str	r4, [r2, #4]
 800547e:	e7ca      	b.n	8005416 <_free_r+0x26>
 8005480:	b003      	add	sp, #12
 8005482:	bd30      	pop	{r4, r5, pc}
 8005484:	20000214 	.word	0x20000214

08005488 <_read_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4d07      	ldr	r5, [pc, #28]	; (80054a8 <_read_r+0x20>)
 800548c:	4604      	mov	r4, r0
 800548e:	4608      	mov	r0, r1
 8005490:	4611      	mov	r1, r2
 8005492:	2200      	movs	r2, #0
 8005494:	602a      	str	r2, [r5, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	f7fb fa8a 	bl	80009b0 <_read>
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	d102      	bne.n	80054a6 <_read_r+0x1e>
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	b103      	cbz	r3, 80054a6 <_read_r+0x1e>
 80054a4:	6023      	str	r3, [r4, #0]
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	2000021c 	.word	0x2000021c

080054ac <_fstat_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4d07      	ldr	r5, [pc, #28]	; (80054cc <_fstat_r+0x20>)
 80054b0:	2300      	movs	r3, #0
 80054b2:	4604      	mov	r4, r0
 80054b4:	4608      	mov	r0, r1
 80054b6:	4611      	mov	r1, r2
 80054b8:	602b      	str	r3, [r5, #0]
 80054ba:	f7fb fabe 	bl	8000a3a <_fstat>
 80054be:	1c43      	adds	r3, r0, #1
 80054c0:	d102      	bne.n	80054c8 <_fstat_r+0x1c>
 80054c2:	682b      	ldr	r3, [r5, #0]
 80054c4:	b103      	cbz	r3, 80054c8 <_fstat_r+0x1c>
 80054c6:	6023      	str	r3, [r4, #0]
 80054c8:	bd38      	pop	{r3, r4, r5, pc}
 80054ca:	bf00      	nop
 80054cc:	2000021c 	.word	0x2000021c

080054d0 <_isatty_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4d06      	ldr	r5, [pc, #24]	; (80054ec <_isatty_r+0x1c>)
 80054d4:	2300      	movs	r3, #0
 80054d6:	4604      	mov	r4, r0
 80054d8:	4608      	mov	r0, r1
 80054da:	602b      	str	r3, [r5, #0]
 80054dc:	f7fb fabd 	bl	8000a5a <_isatty>
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	d102      	bne.n	80054ea <_isatty_r+0x1a>
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	b103      	cbz	r3, 80054ea <_isatty_r+0x1a>
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	bd38      	pop	{r3, r4, r5, pc}
 80054ec:	2000021c 	.word	0x2000021c

080054f0 <_init>:
 80054f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f2:	bf00      	nop
 80054f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f6:	bc08      	pop	{r3}
 80054f8:	469e      	mov	lr, r3
 80054fa:	4770      	bx	lr

080054fc <_fini>:
 80054fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fe:	bf00      	nop
 8005500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005502:	bc08      	pop	{r3}
 8005504:	469e      	mov	lr, r3
 8005506:	4770      	bx	lr
