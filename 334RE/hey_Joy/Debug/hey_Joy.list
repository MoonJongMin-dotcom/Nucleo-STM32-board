
hey_Joy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004d9c  08004d9c  00014d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e80  08004e80  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004e80  08004e80  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e80  08004e80  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e80  08004e80  00014e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e84  08004e84  00014e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000110  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000180  20000180  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b9f9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018b6  00000000  00000000  0002ba99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000920  00000000  00000000  0002d350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000878  00000000  00000000  0002dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020aaa  00000000  00000000  0002e4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c656  00000000  00000000  0004ef92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1d60  00000000  00000000  0005b5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011d348  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c78  00000000  00000000  0011d398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d84 	.word	0x08004d84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004d84 	.word	0x08004d84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__io_putchar>:
* @brief Retargets the C library printf function to the USART.
* @param None
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART1 and Loop until the end of transmission */
if (ch == '\n')
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b0a      	cmp	r3, #10
 800027c:	d106      	bne.n	800028c <__io_putchar+0x1c>
HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800027e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000282:	2201      	movs	r2, #1
 8000284:	4907      	ldr	r1, [pc, #28]	; (80002a4 <__io_putchar+0x34>)
 8000286:	4808      	ldr	r0, [pc, #32]	; (80002a8 <__io_putchar+0x38>)
 8000288:	f003 fa42 	bl	8003710 <HAL_UART_Transmit>
HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800028c:	1d39      	adds	r1, r7, #4
 800028e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000292:	2201      	movs	r2, #1
 8000294:	4804      	ldr	r0, [pc, #16]	; (80002a8 <__io_putchar+0x38>)
 8000296:	f003 fa3b 	bl	8003710 <HAL_UART_Transmit>
return ch;
 800029a:	687b      	ldr	r3, [r7, #4]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	08004d9c 	.word	0x08004d9c
 80002a8:	200000e4 	.word	0x200000e4

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b2:	f000 fb93 	bl	80009dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b6:	f000 f861 	bl	800037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ba:	f000 f95d 	bl	8000578 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002be:	f000 f92b 	bl	8000518 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80002c2:	f000 f89d 	bl	8000400 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

 // uint16_t SW;
  //HAL_ADCEx_Calibration_Start(&hadc1, ADC_CHANNEL_1);
  if( HAL_ADCEx_Calibration_Start(&hadc1, ADC_CHANNEL_1) != HAL_OK ){
 80002c6:	2101      	movs	r1, #1
 80002c8:	4829      	ldr	r0, [pc, #164]	; (8000370 <main+0xc4>)
 80002ca:	f000 ff76 	bl	80011ba <HAL_ADCEx_Calibration_Start>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <main+0x2c>
  Error_Handler();
 80002d4:	f000 f9b6 	bl	8000644 <Error_Handler>
  }
  if( HAL_ADCEx_Calibration_Start(&hadc1, ADC_CHANNEL_6) != HAL_OK ){
 80002d8:	2106      	movs	r1, #6
 80002da:	4825      	ldr	r0, [pc, #148]	; (8000370 <main+0xc4>)
 80002dc:	f000 ff6d 	bl	80011ba <HAL_ADCEx_Calibration_Start>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <main+0x3e>
  Error_Handler();
 80002e6:	f000 f9ad 	bl	8000644 <Error_Handler>
  }
  if( HAL_ADCEx_Calibration_Start(&hadc1, ADC_CHANNEL_7) != HAL_OK ){
 80002ea:	2107      	movs	r1, #7
 80002ec:	4820      	ldr	r0, [pc, #128]	; (8000370 <main+0xc4>)
 80002ee:	f000 ff64 	bl	80011ba <HAL_ADCEx_Calibration_Start>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <main+0x50>
  Error_Handler();
 80002f8:	f000 f9a4 	bl	8000644 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (HAL_ADC_Start (&hadc1) != HAL_OK)
 80002fc:	481c      	ldr	r0, [pc, #112]	; (8000370 <main+0xc4>)
 80002fe:	f000 fd95 	bl	8000e2c <HAL_ADC_Start>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <main+0x60>
		{

		Error_Handler ();
 8000308:	f000 f99c 	bl	8000644 <Error_Handler>
		}

	  for (uint8_t i = 0; i < 3; i++)
 800030c:	2300      	movs	r3, #0
 800030e:	71fb      	strb	r3, [r7, #7]
 8000310:	e019      	b.n	8000346 <main+0x9a>
	  {
	  /* ### - 5 - Wait for the end of conversion ############## */


	  HAL_ADC_PollForConversion (&hadc1, 10000); //HAL_MAX_DELAY
 8000312:	f242 7110 	movw	r1, #10000	; 0x2710
 8000316:	4816      	ldr	r0, [pc, #88]	; (8000370 <main+0xc4>)
 8000318:	f000 fe74 	bl	8001004 <HAL_ADC_PollForConversion>

	  /* Check if the continuous conversion of regular channel is finished */
	  if ((HAL_ADC_GetState (&hadc1) & HAL_ADC_STATE_REG_EOC) == HAL_ADC_STATE_REG_EOC)
 800031c:	4814      	ldr	r0, [pc, #80]	; (8000370 <main+0xc4>)
 800031e:	f000 fbe7 	bl	8000af0 <HAL_ADC_GetState>
 8000322:	4603      	mov	r3, r0
 8000324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800032c:	d108      	bne.n	8000340 <main+0x94>
	  {
	  /* ### - 6 - Get the converted value of regular channel ############ */
	  uwADCxConvertedValue[i] = HAL_ADC_GetValue (&hadc1);
 800032e:	4810      	ldr	r0, [pc, #64]	; (8000370 <main+0xc4>)
 8000330:	f000 ff36 	bl	80011a0 <HAL_ADC_GetValue>
 8000334:	4602      	mov	r2, r0
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	b291      	uxth	r1, r2
 800033a:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <main+0xc8>)
 800033c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for (uint8_t i = 0; i < 3; i++)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	3301      	adds	r3, #1
 8000344:	71fb      	strb	r3, [r7, #7]
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d9e2      	bls.n	8000312 <main+0x66>
	  SW = 5000;
	  else
	  SW = 0;
	  }
	  */
	  HAL_ADC_Stop (&hadc1);
 800034c:	4808      	ldr	r0, [pc, #32]	; (8000370 <main+0xc4>)
 800034e:	f000 fe23 	bl	8000f98 <HAL_ADC_Stop>

	  printf ("%4d, %4d, %4d \n", uwADCxConvertedValue[0], uwADCxConvertedValue[1], uwADCxConvertedValue[2]);
 8000352:	4b08      	ldr	r3, [pc, #32]	; (8000374 <main+0xc8>)
 8000354:	881b      	ldrh	r3, [r3, #0]
 8000356:	4619      	mov	r1, r3
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <main+0xc8>)
 800035a:	885b      	ldrh	r3, [r3, #2]
 800035c:	461a      	mov	r2, r3
 800035e:	4b05      	ldr	r3, [pc, #20]	; (8000374 <main+0xc8>)
 8000360:	889b      	ldrh	r3, [r3, #4]
 8000362:	4805      	ldr	r0, [pc, #20]	; (8000378 <main+0xcc>)
 8000364:	f003 fd80 	bl	8003e68 <iprintf>
	  HAL_Delay (100);
 8000368:	2064      	movs	r0, #100	; 0x64
 800036a:	f000 fb9d 	bl	8000aa8 <HAL_Delay>
	  if (HAL_ADC_Start (&hadc1) != HAL_OK)
 800036e:	e7c5      	b.n	80002fc <main+0x50>
 8000370:	20000094 	.word	0x20000094
 8000374:	2000008c 	.word	0x2000008c
 8000378:	08004da0 	.word	0x08004da0

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b090      	sub	sp, #64	; 0x40
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0318 	add.w	r3, r7, #24
 8000386:	2228      	movs	r2, #40	; 0x28
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f003 fd64 	bl	8003e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800039e:	2302      	movs	r3, #2
 80003a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a2:	2301      	movs	r3, #1
 80003a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a6:	2310      	movs	r3, #16
 80003a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003aa:	2302      	movs	r3, #2
 80003ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003ae:	2300      	movs	r3, #0
 80003b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003b2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b8:	f107 0318 	add.w	r3, r7, #24
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 fee5 	bl	800218c <HAL_RCC_OscConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003c8:	f000 f93c 	bl	8000644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003cc:	230f      	movs	r3, #15
 80003ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d0:	2302      	movs	r3, #2
 80003d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2102      	movs	r1, #2
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 ff0e 	bl	8003208 <HAL_RCC_ClockConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003f2:	f000 f927 	bl	8000644 <Error_Handler>
  }
}
 80003f6:	bf00      	nop
 80003f8:	3740      	adds	r7, #64	; 0x40
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08a      	sub	sp, #40	; 0x28
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000406:	f107 031c 	add.w	r3, r7, #28
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
 800041e:	611a      	str	r2, [r3, #16]
 8000420:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000422:	4b3c      	ldr	r3, [pc, #240]	; (8000514 <MX_ADC1_Init+0x114>)
 8000424:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000428:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800042a:	4b3a      	ldr	r3, [pc, #232]	; (8000514 <MX_ADC1_Init+0x114>)
 800042c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000430:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000432:	4b38      	ldr	r3, [pc, #224]	; (8000514 <MX_ADC1_Init+0x114>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000438:	4b36      	ldr	r3, [pc, #216]	; (8000514 <MX_ADC1_Init+0x114>)
 800043a:	2201      	movs	r2, #1
 800043c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800043e:	4b35      	ldr	r3, [pc, #212]	; (8000514 <MX_ADC1_Init+0x114>)
 8000440:	2201      	movs	r2, #1
 8000442:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000444:	4b33      	ldr	r3, [pc, #204]	; (8000514 <MX_ADC1_Init+0x114>)
 8000446:	2200      	movs	r2, #0
 8000448:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800044c:	4b31      	ldr	r3, [pc, #196]	; (8000514 <MX_ADC1_Init+0x114>)
 800044e:	2200      	movs	r2, #0
 8000450:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000452:	4b30      	ldr	r3, [pc, #192]	; (8000514 <MX_ADC1_Init+0x114>)
 8000454:	2201      	movs	r2, #1
 8000456:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000458:	4b2e      	ldr	r3, [pc, #184]	; (8000514 <MX_ADC1_Init+0x114>)
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800045e:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <MX_ADC1_Init+0x114>)
 8000460:	2203      	movs	r2, #3
 8000462:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000464:	4b2b      	ldr	r3, [pc, #172]	; (8000514 <MX_ADC1_Init+0x114>)
 8000466:	2200      	movs	r2, #0
 8000468:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800046c:	4b29      	ldr	r3, [pc, #164]	; (8000514 <MX_ADC1_Init+0x114>)
 800046e:	2204      	movs	r2, #4
 8000470:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000472:	4b28      	ldr	r3, [pc, #160]	; (8000514 <MX_ADC1_Init+0x114>)
 8000474:	2200      	movs	r2, #0
 8000476:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000478:	4b26      	ldr	r3, [pc, #152]	; (8000514 <MX_ADC1_Init+0x114>)
 800047a:	2200      	movs	r2, #0
 800047c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800047e:	4825      	ldr	r0, [pc, #148]	; (8000514 <MX_ADC1_Init+0x114>)
 8000480:	f000 fb42 	bl	8000b08 <HAL_ADC_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800048a:	f000 f8db 	bl	8000644 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000492:	f107 031c 	add.w	r3, r7, #28
 8000496:	4619      	mov	r1, r3
 8000498:	481e      	ldr	r0, [pc, #120]	; (8000514 <MX_ADC1_Init+0x114>)
 800049a:	f001 f9c1 	bl	8001820 <HAL_ADCEx_MultiModeConfigChannel>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80004a4:	f000 f8ce 	bl	8000644 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004a8:	2301      	movs	r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ac:	2301      	movs	r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004b0:	2300      	movs	r3, #0
 80004b2:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80004b4:	2305      	movs	r3, #5
 80004b6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	4619      	mov	r1, r3
 80004c4:	4813      	ldr	r0, [pc, #76]	; (8000514 <MX_ADC1_Init+0x114>)
 80004c6:	f000 feeb 	bl	80012a0 <HAL_ADC_ConfigChannel>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80004d0:	f000 f8b8 	bl	8000644 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004d4:	2306      	movs	r3, #6
 80004d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004d8:	2302      	movs	r3, #2
 80004da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	4619      	mov	r1, r3
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <MX_ADC1_Init+0x114>)
 80004e2:	f000 fedd 	bl	80012a0 <HAL_ADC_ConfigChannel>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80004ec:	f000 f8aa 	bl	8000644 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004f0:	2307      	movs	r3, #7
 80004f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004f4:	2303      	movs	r3, #3
 80004f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	4619      	mov	r1, r3
 80004fc:	4805      	ldr	r0, [pc, #20]	; (8000514 <MX_ADC1_Init+0x114>)
 80004fe:	f000 fecf 	bl	80012a0 <HAL_ADC_ConfigChannel>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8000508:	f000 f89c 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800050c:	bf00      	nop
 800050e:	3728      	adds	r7, #40	; 0x28
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000094 	.word	0x20000094

08000518 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_USART2_UART_Init+0x58>)
 800051e:	4a15      	ldr	r2, [pc, #84]	; (8000574 <MX_USART2_UART_Init+0x5c>)
 8000520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <MX_USART2_UART_Init+0x58>)
 8000524:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_USART2_UART_Init+0x58>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_USART2_UART_Init+0x58>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_USART2_UART_Init+0x58>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_USART2_UART_Init+0x58>)
 800053e:	220c      	movs	r2, #12
 8000540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <MX_USART2_UART_Init+0x58>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_USART2_UART_Init+0x58>)
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <MX_USART2_UART_Init+0x58>)
 8000550:	2200      	movs	r2, #0
 8000552:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_USART2_UART_Init+0x58>)
 8000556:	2200      	movs	r2, #0
 8000558:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800055a:	4805      	ldr	r0, [pc, #20]	; (8000570 <MX_USART2_UART_Init+0x58>)
 800055c:	f003 f88a 	bl	8003674 <HAL_UART_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000566:	f000 f86d 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	200000e4 	.word	0x200000e4
 8000574:	40004400 	.word	0x40004400

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <MX_GPIO_Init+0xc4>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a2a      	ldr	r2, [pc, #168]	; (800063c <MX_GPIO_Init+0xc4>)
 8000594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <MX_GPIO_Init+0xc4>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <MX_GPIO_Init+0xc4>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a24      	ldr	r2, [pc, #144]	; (800063c <MX_GPIO_Init+0xc4>)
 80005ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <MX_GPIO_Init+0xc4>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_GPIO_Init+0xc4>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a1e      	ldr	r2, [pc, #120]	; (800063c <MX_GPIO_Init+0xc4>)
 80005c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_GPIO_Init+0xc4>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_GPIO_Init+0xc4>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <MX_GPIO_Init+0xc4>)
 80005dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005e0:	6153      	str	r3, [r2, #20]
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_GPIO_Init+0xc4>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2120      	movs	r1, #32
 80005f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f6:	f001 fdb1 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000600:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	480b      	ldr	r0, [pc, #44]	; (8000640 <MX_GPIO_Init+0xc8>)
 8000612:	f001 fc31 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000616:	2320      	movs	r3, #32
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2300      	movs	r3, #0
 8000624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f001 fc22 	bl	8001e78 <HAL_GPIO_Init>

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	; 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000
 8000640:	48000800 	.word	0x48000800

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	e7fe      	b.n	800064c <Error_Handler+0x8>
	...

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_MspInit+0x44>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_MspInit+0x44>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6193      	str	r3, [r2, #24]
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_MspInit+0x44>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_MspInit+0x44>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <HAL_MspInit+0x44>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_MspInit+0x44>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000686:	2007      	movs	r0, #7
 8000688:	f001 fbc2 	bl	8001e10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000

08000698 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006b8:	d13c      	bne.n	8000734 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <HAL_ADC_MspInit+0xa4>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a1f      	ldr	r2, [pc, #124]	; (800073c <HAL_ADC_MspInit+0xa4>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	6153      	str	r3, [r2, #20]
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <HAL_ADC_MspInit+0xa4>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <HAL_ADC_MspInit+0xa4>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a19      	ldr	r2, [pc, #100]	; (800073c <HAL_ADC_MspInit+0xa4>)
 80006d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006dc:	6153      	str	r3, [r2, #20]
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <HAL_ADC_MspInit+0xa4>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <HAL_ADC_MspInit+0xa4>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <HAL_ADC_MspInit+0xa4>)
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <HAL_ADC_MspInit+0xa4>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000702:	2303      	movs	r3, #3
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000706:	2303      	movs	r3, #3
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	480a      	ldr	r0, [pc, #40]	; (8000740 <HAL_ADC_MspInit+0xa8>)
 8000716:	f001 fbaf 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800071a:	2301      	movs	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071e:	2303      	movs	r3, #3
 8000720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000730:	f001 fba2 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	; 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40021000 	.word	0x40021000
 8000740:	48000800 	.word	0x48000800

08000744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <HAL_UART_MspInit+0x7c>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d128      	bne.n	80007b8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <HAL_UART_MspInit+0x80>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a16      	ldr	r2, [pc, #88]	; (80007c4 <HAL_UART_MspInit+0x80>)
 800076c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <HAL_UART_MspInit+0x80>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <HAL_UART_MspInit+0x80>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <HAL_UART_MspInit+0x80>)
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <HAL_UART_MspInit+0x80>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000796:	230c      	movs	r3, #12
 8000798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007a6:	2307      	movs	r3, #7
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b4:	f001 fb60 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007b8:	bf00      	nop
 80007ba:	3728      	adds	r7, #40	; 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40004400 	.word	0x40004400
 80007c4:	40021000 	.word	0x40021000

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <NMI_Handler+0x4>

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <MemManage_Handler+0x4>

080007da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000814:	f000 f928 	bl	8000a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	e00a      	b.n	8000844 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800082e:	f3af 8000 	nop.w
 8000832:	4601      	mov	r1, r0
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	60ba      	str	r2, [r7, #8]
 800083a:	b2ca      	uxtb	r2, r1
 800083c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	429a      	cmp	r2, r3
 800084a:	dbf0      	blt.n	800082e <_read+0x12>
	}

return len;
 800084c:	687b      	ldr	r3, [r7, #4]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	60f8      	str	r0, [r7, #12]
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	e009      	b.n	800087c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	60ba      	str	r2, [r7, #8]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fcfd 	bl	8000270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	3301      	adds	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	429a      	cmp	r2, r3
 8000882:	dbf1      	blt.n	8000868 <_write+0x12>
	}
	return len;
 8000884:	687b      	ldr	r3, [r7, #4]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <_close>:

int _close(int file)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	return -1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b6:	605a      	str	r2, [r3, #4]
	return 0;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <_isatty>:

int _isatty(int file)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
	return 1;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
	return 0;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000900:	4a14      	ldr	r2, [pc, #80]	; (8000954 <_sbrk+0x5c>)
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <_sbrk+0x60>)
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d102      	bne.n	800091a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <_sbrk+0x64>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <_sbrk+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	429a      	cmp	r2, r3
 8000926:	d207      	bcs.n	8000938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000928:	f003 fa6c 	bl	8003e04 <__errno>
 800092c:	4603      	mov	r3, r0
 800092e:	220c      	movs	r2, #12
 8000930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	e009      	b.n	800094c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <_sbrk+0x64>)
 8000948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20003000 	.word	0x20003000
 8000958:	00000400 	.word	0x00000400
 800095c:	20000168 	.word	0x20000168
 8000960:	20000180 	.word	0x20000180

08000964 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SystemInit+0x20>)
 800096a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <SystemInit+0x20>)
 8000970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800098e:	490e      	ldr	r1, [pc, #56]	; (80009c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000990:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <LoopForever+0xe>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a4:	4c0b      	ldr	r4, [pc, #44]	; (80009d4 <LoopForever+0x16>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009b2:	f7ff ffd7 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b6:	f003 fa2b 	bl	8003e10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ba:	f7ff fc77 	bl	80002ac <main>

080009be <LoopForever>:

LoopForever:
    b LoopForever
 80009be:	e7fe      	b.n	80009be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009c0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009cc:	08004e88 	.word	0x08004e88
  ldr r2, =_sbss
 80009d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009d4:	20000180 	.word	0x20000180

080009d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC1_2_IRQHandler>
	...

080009dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_Init+0x28>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_Init+0x28>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ec:	2003      	movs	r0, #3
 80009ee:	f001 fa0f 	bl	8001e10 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f808 	bl	8000a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f8:	f7ff fe2a 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40022000 	.word	0x40022000

08000a08 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_InitTick+0x54>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_InitTick+0x58>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 fa19 	bl	8001e5e <HAL_SYSTICK_Config>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e00e      	b.n	8000a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	d80a      	bhi.n	8000a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	f001 f9ef 	bl	8001e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a48:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <HAL_InitTick+0x5c>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e000      	b.n	8000a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	20000008 	.word	0x20000008
 8000a64:	20000004 	.word	0x20000004

08000a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_IncTick+0x20>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_IncTick+0x24>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_IncTick+0x24>)
 8000a7a:	6013      	str	r3, [r2, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	2000016c 	.word	0x2000016c

08000a90 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <HAL_GetTick+0x14>)
 8000a96:	681b      	ldr	r3, [r3, #0]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	2000016c 	.word	0x2000016c

08000aa8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab0:	f7ff ffee 	bl	8000a90 <HAL_GetTick>
 8000ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac0:	d005      	beq.n	8000ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <HAL_Delay+0x44>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ace:	bf00      	nop
 8000ad0:	f7ff ffde 	bl	8000a90 <HAL_GetTick>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d8f7      	bhi.n	8000ad0 <HAL_Delay+0x28>
  {
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000008 	.word	0x20000008

08000af0 <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC state */
  return hadc->State;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b09a      	sub	sp, #104	; 0x68
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b16:	2300      	movs	r3, #0
 8000b18:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d101      	bne.n	8000b28 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e172      	b.n	8000e0e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	691b      	ldr	r3, [r3, #16]
 8000b2c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d176      	bne.n	8000c28 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d152      	bne.n	8000be8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fd9b 	bl	8000698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d13b      	bne.n	8000be8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f000 ff7f 	bl	8001a74 <ADC_Disable>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d12f      	bne.n	8000be8 <HAL_ADC_Init+0xe0>
 8000b88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d12b      	bne.n	8000be8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b98:	f023 0302 	bic.w	r3, r3, #2
 8000b9c:	f043 0202 	orr.w	r2, r3, #2
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000bb2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bc2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bc4:	4b94      	ldr	r3, [pc, #592]	; (8000e18 <HAL_ADC_Init+0x310>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a94      	ldr	r2, [pc, #592]	; (8000e1c <HAL_ADC_Init+0x314>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	0c9a      	lsrs	r2, r3, #18
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bda:	e002      	b.n	8000be2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1f9      	bne.n	8000bdc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d007      	beq.n	8000c06 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c04:	d110      	bne.n	8000c28 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f023 0312 	bic.w	r3, r3, #18
 8000c0e:	f043 0210 	orr.w	r2, r3, #16
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f043 0201 	orr.w	r2, r3, #1
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	f003 0310 	and.w	r3, r3, #16
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f040 80df 	bne.w	8000df4 <HAL_ADC_Init+0x2ec>
 8000c36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f040 80da 	bne.w	8000df4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f040 80d2 	bne.w	8000df4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c58:	f043 0202 	orr.w	r2, r3, #2
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c60:	4b6f      	ldr	r3, [pc, #444]	; (8000e20 <HAL_ADC_Init+0x318>)
 8000c62:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c6c:	d102      	bne.n	8000c74 <HAL_ADC_Init+0x16c>
 8000c6e:	4b6d      	ldr	r3, [pc, #436]	; (8000e24 <HAL_ADC_Init+0x31c>)
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	e002      	b.n	8000c7a <HAL_ADC_Init+0x172>
 8000c74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c78:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d108      	bne.n	8000c9a <HAL_ADC_Init+0x192>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d101      	bne.n	8000c9a <HAL_ADC_Init+0x192>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e000      	b.n	8000c9c <HAL_ADC_Init+0x194>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d11c      	bne.n	8000cda <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d010      	beq.n	8000cc8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d107      	bne.n	8000cc2 <HAL_ADC_Init+0x1ba>
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d101      	bne.n	8000cc2 <HAL_ADC_Init+0x1ba>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <HAL_ADC_Init+0x1bc>
 8000cc2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d108      	bne.n	8000cda <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cd8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	7e5b      	ldrb	r3, [r3, #25]
 8000cde:	035b      	lsls	r3, r3, #13
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000ce4:	2a01      	cmp	r2, #1
 8000ce6:	d002      	beq.n	8000cee <HAL_ADC_Init+0x1e6>
 8000ce8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cec:	e000      	b.n	8000cf0 <HAL_ADC_Init+0x1e8>
 8000cee:	2200      	movs	r2, #0
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d00:	4313      	orrs	r3, r2
 8000d02:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d11b      	bne.n	8000d46 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7e5b      	ldrb	r3, [r3, #25]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d109      	bne.n	8000d2a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	045a      	lsls	r2, r3, #17
 8000d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d20:	4313      	orrs	r3, r2
 8000d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d26:	663b      	str	r3, [r7, #96]	; 0x60
 8000d28:	e00d      	b.n	8000d46 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000d32:	f043 0220 	orr.w	r2, r3, #32
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	f043 0201 	orr.w	r2, r3, #1
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d007      	beq.n	8000d5e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d56:	4313      	orrs	r3, r2
 8000d58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f003 030c 	and.w	r3, r3, #12
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d114      	bne.n	8000d96 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d7a:	f023 0302 	bic.w	r3, r3, #2
 8000d7e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7e1b      	ldrb	r3, [r3, #24]
 8000d84:	039a      	lsls	r2, r3, #14
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d92:	4313      	orrs	r3, r2
 8000d94:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <HAL_ADC_Init+0x320>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	6812      	ldr	r2, [r2, #0]
 8000da4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000da6:	430b      	orrs	r3, r1
 8000da8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d10c      	bne.n	8000dcc <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f023 010f 	bic.w	r1, r3, #15
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	1e5a      	subs	r2, r3, #1
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dca:	e007      	b.n	8000ddc <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f022 020f 	bic.w	r2, r2, #15
 8000dda:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f023 0303 	bic.w	r3, r3, #3
 8000dea:	f043 0201 	orr.w	r2, r3, #1
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	641a      	str	r2, [r3, #64]	; 0x40
 8000df2:	e00a      	b.n	8000e0a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f023 0312 	bic.w	r3, r3, #18
 8000dfc:	f043 0210 	orr.w	r2, r3, #16
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e04:	2301      	movs	r3, #1
 8000e06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3768      	adds	r7, #104	; 0x68
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	431bde83 	.word	0x431bde83
 8000e20:	50000300 	.word	0x50000300
 8000e24:	50000100 	.word	0x50000100
 8000e28:	fff0c007 	.word	0xfff0c007

08000e2c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 809c 	bne.w	8000f80 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d101      	bne.n	8000e56 <HAL_ADC_Start+0x2a>
 8000e52:	2302      	movs	r3, #2
 8000e54:	e097      	b.n	8000f86 <HAL_ADC_Start+0x15a>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 fda4 	bl	80019ac <ADC_Enable>
 8000e64:	4603      	mov	r3, r0
 8000e66:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f040 8083 	bne.w	8000f76 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e78:	f023 0301 	bic.w	r3, r3, #1
 8000e7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e84:	4b42      	ldr	r3, [pc, #264]	; (8000f90 <HAL_ADC_Start+0x164>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f003 031f 	and.w	r3, r3, #31
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <HAL_ADC_Start+0x6e>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e98:	d115      	bne.n	8000ec6 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d027      	beq.n	8000f04 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ebc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ec4:	e01e      	b.n	8000f04 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eda:	d004      	beq.n	8000ee6 <HAL_ADC_Start+0xba>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2c      	ldr	r2, [pc, #176]	; (8000f94 <HAL_ADC_Start+0x168>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d10e      	bne.n	8000f04 <HAL_ADC_Start+0xd8>
 8000ee6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d007      	beq.n	8000f04 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000efc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f10:	d106      	bne.n	8000f20 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f023 0206 	bic.w	r2, r3, #6
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	645a      	str	r2, [r3, #68]	; 0x44
 8000f1e:	e002      	b.n	8000f26 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	221c      	movs	r2, #28
 8000f34:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_ADC_Start+0x164>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f003 031f 	and.w	r3, r3, #31
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d010      	beq.n	8000f64 <HAL_ADC_Start+0x138>
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <HAL_ADC_Start+0x164>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 031f 	and.w	r3, r3, #31
 8000f4a:	2b05      	cmp	r3, #5
 8000f4c:	d00a      	beq.n	8000f64 <HAL_ADC_Start+0x138>
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_ADC_Start+0x164>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 031f 	and.w	r3, r3, #31
 8000f56:	2b09      	cmp	r3, #9
 8000f58:	d004      	beq.n	8000f64 <HAL_ADC_Start+0x138>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f62:	d10f      	bne.n	8000f84 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0204 	orr.w	r2, r2, #4
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	e006      	b.n	8000f84 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000f7e:	e001      	b.n	8000f84 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f80:	2302      	movs	r3, #2
 8000f82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	50000300 	.word	0x50000300
 8000f94:	50000100 	.word	0x50000100

08000f98 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d101      	bne.n	8000fb2 <HAL_ADC_Stop+0x1a>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e023      	b.n	8000ffa <HAL_ADC_Stop+0x62>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000fba:	216c      	movs	r1, #108	; 0x6c
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 fdbf 	bl	8001b40 <ADC_ConversionStop>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d111      	bne.n	8000ff0 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fd51 	bl	8001a74 <ADC_Disable>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d109      	bne.n	8000ff0 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fe4:	f023 0301 	bic.w	r3, r3, #1
 8000fe8:	f043 0201 	orr.w	r2, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	2b08      	cmp	r3, #8
 8001018:	d102      	bne.n	8001020 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800101a:	2308      	movs	r3, #8
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	e02e      	b.n	800107e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001020:	4b5e      	ldr	r3, [pc, #376]	; (800119c <HAL_ADC_PollForConversion+0x198>)
 8001022:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	2b00      	cmp	r3, #0
 800102e:	d112      	bne.n	8001056 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b01      	cmp	r3, #1
 800103c:	d11d      	bne.n	800107a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f043 0220 	orr.w	r2, r3, #32
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e09d      	b.n	8001192 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00b      	beq.n	800107a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f043 0220 	orr.w	r2, r3, #32
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e08b      	b.n	8001192 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800107a:	230c      	movs	r3, #12
 800107c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800107e:	4b47      	ldr	r3, [pc, #284]	; (800119c <HAL_ADC_PollForConversion+0x198>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 031f 	and.w	r3, r3, #31
 8001086:	2b00      	cmp	r3, #0
 8001088:	d004      	beq.n	8001094 <HAL_ADC_PollForConversion+0x90>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001092:	d104      	bne.n	800109e <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	e003      	b.n	80010a6 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800109e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80010a6:	f7ff fcf3 	bl	8000a90 <HAL_GetTick>
 80010aa:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010ac:	e021      	b.n	80010f2 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b4:	d01d      	beq.n	80010f2 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d007      	beq.n	80010cc <HAL_ADC_PollForConversion+0xc8>
 80010bc:	f7ff fce8 	bl	8000a90 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d212      	bcs.n	80010f2 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	4013      	ands	r3, r2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10b      	bne.n	80010f2 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f043 0204 	orr.w	r2, r3, #4
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e04f      	b.n	8001192 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0d6      	beq.n	80010ae <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001116:	2b00      	cmp	r3, #0
 8001118:	d131      	bne.n	800117e <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001120:	2b00      	cmp	r3, #0
 8001122:	d12c      	bne.n	800117e <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	2b08      	cmp	r3, #8
 8001130:	d125      	bne.n	800117e <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	d112      	bne.n	8001166 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d112      	bne.n	800117e <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f043 0201 	orr.w	r2, r3, #1
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	641a      	str	r2, [r3, #64]	; 0x40
 8001164:	e00b      	b.n	800117e <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f043 0220 	orr.w	r2, r3, #32
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f043 0201 	orr.w	r2, r3, #1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d103      	bne.n	8001190 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	50000300 	.word	0x50000300

080011a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d101      	bne.n	80011d6 <HAL_ADCEx_Calibration_Start+0x1c>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e05f      	b.n	8001296 <HAL_ADCEx_Calibration_Start+0xdc>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 fc48 	bl	8001a74 <ADC_Disable>
 80011e4:	4603      	mov	r3, r0
 80011e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d14e      	bne.n	800128c <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001202:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d107      	bne.n	800121a <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001218:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001228:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800122a:	f7ff fc31 	bl	8000a90 <HAL_GetTick>
 800122e:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001230:	e01c      	b.n	800126c <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001232:	f7ff fc2d 	bl	8000a90 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b0a      	cmp	r3, #10
 800123e:	d915      	bls.n	800126c <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800124a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800124e:	d10d      	bne.n	800126c <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f023 0312 	bic.w	r3, r3, #18
 8001258:	f043 0210 	orr.w	r2, r3, #16
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e014      	b.n	8001296 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800127a:	d0da      	beq.n	8001232 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f023 0303 	bic.w	r3, r3, #3
 8001284:	f043 0201 	orr.w	r2, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b09b      	sub	sp, #108	; 0x6c
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d101      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x22>
 80012be:	2302      	movs	r3, #2
 80012c0:	e2a4      	b.n	800180c <HAL_ADC_ConfigChannel+0x56c>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f040 8288 	bne.w	80017ea <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d81c      	bhi.n	800131c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	461a      	mov	r2, r3
 80012f6:	231f      	movs	r3, #31
 80012f8:	4093      	lsls	r3, r2
 80012fa:	43db      	mvns	r3, r3
 80012fc:	4019      	ands	r1, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	6818      	ldr	r0, [r3, #0]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fa00 f203 	lsl.w	r2, r0, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	631a      	str	r2, [r3, #48]	; 0x30
 800131a:	e063      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b09      	cmp	r3, #9
 8001322:	d81e      	bhi.n	8001362 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	3b1e      	subs	r3, #30
 8001338:	221f      	movs	r2, #31
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	4019      	ands	r1, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	3b1e      	subs	r3, #30
 8001354:	fa00 f203 	lsl.w	r2, r0, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	635a      	str	r2, [r3, #52]	; 0x34
 8001360:	e040      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b0e      	cmp	r3, #14
 8001368:	d81e      	bhi.n	80013a8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	3b3c      	subs	r3, #60	; 0x3c
 800137e:	221f      	movs	r2, #31
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	4019      	ands	r1, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	3b3c      	subs	r3, #60	; 0x3c
 800139a:	fa00 f203 	lsl.w	r2, r0, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	639a      	str	r2, [r3, #56]	; 0x38
 80013a6:	e01d      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	3b5a      	subs	r3, #90	; 0x5a
 80013bc:	221f      	movs	r2, #31
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	4019      	ands	r1, r3
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	3b5a      	subs	r3, #90	; 0x5a
 80013d8:	fa00 f203 	lsl.w	r2, r0, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 80e5 	bne.w	80015be <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b09      	cmp	r3, #9
 80013fa:	d91c      	bls.n	8001436 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6999      	ldr	r1, [r3, #24]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	3b1e      	subs	r3, #30
 800140e:	2207      	movs	r2, #7
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	4019      	ands	r1, r3
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	6898      	ldr	r0, [r3, #8]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	3b1e      	subs	r3, #30
 8001428:	fa00 f203 	lsl.w	r2, r0, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	430a      	orrs	r2, r1
 8001432:	619a      	str	r2, [r3, #24]
 8001434:	e019      	b.n	800146a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6959      	ldr	r1, [r3, #20]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	2207      	movs	r2, #7
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	4019      	ands	r1, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	6898      	ldr	r0, [r3, #8]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	fa00 f203 	lsl.w	r2, r0, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	695a      	ldr	r2, [r3, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	08db      	lsrs	r3, r3, #3
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	3b01      	subs	r3, #1
 8001488:	2b03      	cmp	r3, #3
 800148a:	d84f      	bhi.n	800152c <HAL_ADC_ConfigChannel+0x28c>
 800148c:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <HAL_ADC_ConfigChannel+0x1f4>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014a5 	.word	0x080014a5
 8001498:	080014c7 	.word	0x080014c7
 800149c:	080014e9 	.word	0x080014e9
 80014a0:	0800150b 	.word	0x0800150b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014aa:	4b94      	ldr	r3, [pc, #592]	; (80016fc <HAL_ADC_ConfigChannel+0x45c>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	0691      	lsls	r1, r2, #26
 80014b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014b6:	430a      	orrs	r2, r1
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014c2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014c4:	e07e      	b.n	80015c4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014cc:	4b8b      	ldr	r3, [pc, #556]	; (80016fc <HAL_ADC_ConfigChannel+0x45c>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	6812      	ldr	r2, [r2, #0]
 80014d4:	0691      	lsls	r1, r2, #26
 80014d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014d8:	430a      	orrs	r2, r1
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014e4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014e6:	e06d      	b.n	80015c4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80014ee:	4b83      	ldr	r3, [pc, #524]	; (80016fc <HAL_ADC_ConfigChannel+0x45c>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	6812      	ldr	r2, [r2, #0]
 80014f6:	0691      	lsls	r1, r2, #26
 80014f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014fa:	430a      	orrs	r2, r1
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001506:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001508:	e05c      	b.n	80015c4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001510:	4b7a      	ldr	r3, [pc, #488]	; (80016fc <HAL_ADC_ConfigChannel+0x45c>)
 8001512:	4013      	ands	r3, r2
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	0691      	lsls	r1, r2, #26
 800151a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800151c:	430a      	orrs	r2, r1
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001528:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800152a:	e04b      	b.n	80015c4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	069b      	lsls	r3, r3, #26
 800153c:	429a      	cmp	r2, r3
 800153e:	d107      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800154e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001556:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	069b      	lsls	r3, r3, #26
 8001560:	429a      	cmp	r2, r3
 8001562:	d107      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001572:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800157a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	069b      	lsls	r3, r3, #26
 8001584:	429a      	cmp	r2, r3
 8001586:	d107      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001596:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800159e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	069b      	lsls	r3, r3, #26
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d10a      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015ba:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80015bc:	e001      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80015be:	bf00      	nop
 80015c0:	e000      	b.n	80015c4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80015c2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d108      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x344>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x344>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_ADC_ConfigChannel+0x346>
 80015e4:	2300      	movs	r3, #0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 810a 	bne.w	8001800 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d00f      	beq.n	8001614 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2201      	movs	r2, #1
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	400a      	ands	r2, r1
 800160e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001612:	e049      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2201      	movs	r2, #1
 8001622:	409a      	lsls	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b09      	cmp	r3, #9
 8001634:	d91c      	bls.n	8001670 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6999      	ldr	r1, [r3, #24]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	3b1b      	subs	r3, #27
 8001648:	2207      	movs	r2, #7
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	4019      	ands	r1, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	6898      	ldr	r0, [r3, #8]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	3b1b      	subs	r3, #27
 8001662:	fa00 f203 	lsl.w	r2, r0, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	619a      	str	r2, [r3, #24]
 800166e:	e01b      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6959      	ldr	r1, [r3, #20]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	4613      	mov	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	2207      	movs	r2, #7
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	4019      	ands	r1, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6898      	ldr	r0, [r3, #8]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	fa00 f203 	lsl.w	r2, r0, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_ADC_ConfigChannel+0x460>)
 80016aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b10      	cmp	r3, #16
 80016b2:	d105      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d015      	beq.n	80016ec <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016c4:	2b11      	cmp	r3, #17
 80016c6:	d105      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00b      	beq.n	80016ec <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016d8:	2b12      	cmp	r3, #18
 80016da:	f040 8091 	bne.w	8001800 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80016de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 808a 	bne.w	8001800 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016f4:	d108      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x468>
 80016f6:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_ADC_ConfigChannel+0x464>)
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e008      	b.n	800170e <HAL_ADC_ConfigChannel+0x46e>
 80016fc:	83fff000 	.word	0x83fff000
 8001700:	50000300 	.word	0x50000300
 8001704:	50000100 	.word	0x50000100
 8001708:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800170c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b01      	cmp	r3, #1
 800171a:	d108      	bne.n	800172e <HAL_ADC_ConfigChannel+0x48e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_ADC_ConfigChannel+0x48e>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_ADC_ConfigChannel+0x490>
 800172e:	2300      	movs	r3, #0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d150      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001734:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001736:	2b00      	cmp	r3, #0
 8001738:	d010      	beq.n	800175c <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d107      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x4b6>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x4b6>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <HAL_ADC_ConfigChannel+0x4b8>
 8001756:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001758:	2b00      	cmp	r3, #0
 800175a:	d13c      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b10      	cmp	r3, #16
 8001762:	d11d      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x500>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800176c:	d118      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800176e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001778:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800177a:	4b27      	ldr	r3, [pc, #156]	; (8001818 <HAL_ADC_ConfigChannel+0x578>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a27      	ldr	r2, [pc, #156]	; (800181c <HAL_ADC_ConfigChannel+0x57c>)
 8001780:	fba2 2303 	umull	r2, r3, r2, r3
 8001784:	0c9a      	lsrs	r2, r3, #18
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001790:	e002      	b.n	8001798 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	3b01      	subs	r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f9      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800179e:	e02e      	b.n	80017fe <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b11      	cmp	r3, #17
 80017a6:	d10b      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x520>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017b0:	d106      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80017b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80017ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017bc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017be:	e01e      	b.n	80017fe <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b12      	cmp	r3, #18
 80017c6:	d11a      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80017c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017d2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017d4:	e013      	b.n	80017fe <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f043 0220 	orr.w	r2, r3, #32
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80017e8:	e00a      	b.n	8001800 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f043 0220 	orr.w	r2, r3, #32
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80017fc:	e000      	b.n	8001800 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017fe:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001808:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800180c:	4618      	mov	r0, r3
 800180e:	376c      	adds	r7, #108	; 0x6c
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	20000000 	.word	0x20000000
 800181c:	431bde83 	.word	0x431bde83

08001820 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001820:	b480      	push	{r7}
 8001822:	b099      	sub	sp, #100	; 0x64
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001838:	d102      	bne.n	8001840 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800183a:	4b5a      	ldr	r3, [pc, #360]	; (80019a4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	e002      	b.n	8001846 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001840:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001844:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0a2      	b.n	8001996 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800185a:	2302      	movs	r3, #2
 800185c:	e09b      	b.n	8001996 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d17f      	bne.n	8001974 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d179      	bne.n	8001974 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001880:	4b49      	ldr	r3, [pc, #292]	; (80019a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001882:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d040      	beq.n	800190e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800188c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	6859      	ldr	r1, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800189e:	035b      	lsls	r3, r3, #13
 80018a0:	430b      	orrs	r3, r1
 80018a2:	431a      	orrs	r2, r3
 80018a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018a6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d108      	bne.n	80018c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80018c8:	2300      	movs	r3, #0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d15c      	bne.n	8001988 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d107      	bne.n	80018ea <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80018ea:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d14b      	bne.n	8001988 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80018f8:	f023 030f 	bic.w	r3, r3, #15
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	6811      	ldr	r1, [r2, #0]
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	6892      	ldr	r2, [r2, #8]
 8001904:	430a      	orrs	r2, r1
 8001906:	431a      	orrs	r2, r3
 8001908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800190a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800190c:	e03c      	b.n	8001988 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800190e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001918:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b01      	cmp	r3, #1
 8001926:	d108      	bne.n	800193a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800193a:	2300      	movs	r3, #0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d123      	bne.n	8001988 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d107      	bne.n	800195c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800195c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800195e:	2b00      	cmp	r3, #0
 8001960:	d112      	bne.n	8001988 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800196a:	f023 030f 	bic.w	r3, r3, #15
 800196e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001970:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001972:	e009      	b.n	8001988 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	f043 0220 	orr.w	r2, r3, #32
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001986:	e000      	b.n	800198a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001988:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001992:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001996:	4618      	mov	r0, r3
 8001998:	3764      	adds	r7, #100	; 0x64
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	50000100 	.word	0x50000100
 80019a8:	50000300 	.word	0x50000300

080019ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d108      	bne.n	80019d8 <ADC_Enable+0x2c>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <ADC_Enable+0x2c>
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <ADC_Enable+0x2e>
 80019d8:	2300      	movs	r3, #0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d143      	bne.n	8001a66 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <ADC_Enable+0xc4>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00d      	beq.n	8001a08 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f043 0210 	orr.w	r2, r3, #16
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	f043 0201 	orr.w	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e02f      	b.n	8001a68 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001a18:	f7ff f83a 	bl	8000a90 <HAL_GetTick>
 8001a1c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a1e:	e01b      	b.n	8001a58 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a20:	f7ff f836 	bl	8000a90 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d914      	bls.n	8001a58 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d00d      	beq.n	8001a58 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f043 0210 	orr.w	r2, r3, #16
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4c:	f043 0201 	orr.w	r2, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e007      	b.n	8001a68 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d1dc      	bne.n	8001a20 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	8000003f 	.word	0x8000003f

08001a74 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d108      	bne.n	8001aa0 <ADC_Disable+0x2c>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <ADC_Disable+0x2c>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <ADC_Disable+0x2e>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d047      	beq.n	8001b36 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 030d 	and.w	r3, r3, #13
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d10f      	bne.n	8001ad4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0202 	orr.w	r2, r2, #2
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2203      	movs	r2, #3
 8001aca:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001acc:	f7fe ffe0 	bl	8000a90 <HAL_GetTick>
 8001ad0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ad2:	e029      	b.n	8001b28 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	f043 0210 	orr.w	r2, r3, #16
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	f043 0201 	orr.w	r2, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e023      	b.n	8001b38 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001af0:	f7fe ffce 	bl	8000a90 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d914      	bls.n	8001b28 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d10d      	bne.n	8001b28 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	f043 0210 	orr.w	r2, r3, #16
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	f043 0201 	orr.w	r2, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e007      	b.n	8001b38 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d0dc      	beq.n	8001af0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 809b 	beq.w	8001c9c <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b74:	d12a      	bne.n	8001bcc <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d126      	bne.n	8001bcc <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d122      	bne.n	8001bcc <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001b86:	230c      	movs	r3, #12
 8001b88:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001b8a:	e014      	b.n	8001bb6 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4a46      	ldr	r2, [pc, #280]	; (8001ca8 <ADC_ConversionStop+0x168>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d90d      	bls.n	8001bb0 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f043 0210 	orr.w	r2, r3, #16
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e076      	b.n	8001c9e <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc0:	2b40      	cmp	r3, #64	; 0x40
 8001bc2:	d1e3      	bne.n	8001b8c <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2240      	movs	r2, #64	; 0x40
 8001bca:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	2b60      	cmp	r3, #96	; 0x60
 8001bd0:	d015      	beq.n	8001bfe <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d10e      	bne.n	8001bfe <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d107      	bne.n	8001bfe <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0210 	orr.w	r2, r2, #16
 8001bfc:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b0c      	cmp	r3, #12
 8001c02:	d015      	beq.n	8001c30 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d10e      	bne.n	8001c30 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d107      	bne.n	8001c30 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0220 	orr.w	r2, r2, #32
 8001c2e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2b60      	cmp	r3, #96	; 0x60
 8001c34:	d005      	beq.n	8001c42 <ADC_ConversionStop+0x102>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b6c      	cmp	r3, #108	; 0x6c
 8001c3a:	d105      	bne.n	8001c48 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001c3c:	230c      	movs	r3, #12
 8001c3e:	617b      	str	r3, [r7, #20]
        break;
 8001c40:	e005      	b.n	8001c4e <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001c42:	2308      	movs	r3, #8
 8001c44:	617b      	str	r3, [r7, #20]
        break;
 8001c46:	e002      	b.n	8001c4e <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001c48:	2304      	movs	r3, #4
 8001c4a:	617b      	str	r3, [r7, #20]
        break;
 8001c4c:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001c4e:	f7fe ff1f 	bl	8000a90 <HAL_GetTick>
 8001c52:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001c54:	e01b      	b.n	8001c8e <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001c56:	f7fe ff1b 	bl	8000a90 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b0b      	cmp	r3, #11
 8001c62:	d914      	bls.n	8001c8e <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00d      	beq.n	8001c8e <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f043 0210 	orr.w	r2, r3, #16
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f043 0201 	orr.w	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e007      	b.n	8001c9e <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1dc      	bne.n	8001c56 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	000993ff 	.word	0x000993ff

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db0a      	blt.n	8001d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	490c      	ldr	r1, [pc, #48]	; (8001d5c <__NVIC_SetPriority+0x4c>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	0112      	lsls	r2, r2, #4
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	440b      	add	r3, r1
 8001d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d38:	e00a      	b.n	8001d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4908      	ldr	r1, [pc, #32]	; (8001d60 <__NVIC_SetPriority+0x50>)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	3b04      	subs	r3, #4
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	761a      	strb	r2, [r3, #24]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000e100 	.word	0xe000e100
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f1c3 0307 	rsb	r3, r3, #7
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	bf28      	it	cs
 8001d82:	2304      	movcs	r3, #4
 8001d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d902      	bls.n	8001d94 <NVIC_EncodePriority+0x30>
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3b03      	subs	r3, #3
 8001d92:	e000      	b.n	8001d96 <NVIC_EncodePriority+0x32>
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	401a      	ands	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	4313      	orrs	r3, r2
         );
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	; 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ddc:	d301      	bcc.n	8001de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00f      	b.n	8001e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <SysTick_Config+0x40>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dea:	210f      	movs	r1, #15
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	f7ff ff8e 	bl	8001d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <SysTick_Config+0x40>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfa:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <SysTick_Config+0x40>)
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	e000e010 	.word	0xe000e010

08001e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ff47 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e38:	f7ff ff5c 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	6978      	ldr	r0, [r7, #20]
 8001e44:	f7ff ff8e 	bl	8001d64 <NVIC_EncodePriority>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff5d 	bl	8001d10 <__NVIC_SetPriority>
}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ffb0 	bl	8001dcc <SysTick_Config>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e86:	e14e      	b.n	8002126 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8140 	beq.w	8002120 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d005      	beq.n	8001eb8 <HAL_GPIO_Init+0x40>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d130      	bne.n	8001f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eee:	2201      	movs	r2, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	f003 0201 	and.w	r2, r3, #1
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d017      	beq.n	8001f56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d123      	bne.n	8001faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	220f      	movs	r2, #15
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	6939      	ldr	r1, [r7, #16]
 8001fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0203 	and.w	r2, r3, #3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 809a 	beq.w	8002120 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fec:	4b55      	ldr	r3, [pc, #340]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a54      	ldr	r2, [pc, #336]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b52      	ldr	r3, [pc, #328]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002004:	4a50      	ldr	r2, [pc, #320]	; (8002148 <HAL_GPIO_Init+0x2d0>)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800202e:	d013      	beq.n	8002058 <HAL_GPIO_Init+0x1e0>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a46      	ldr	r2, [pc, #280]	; (800214c <HAL_GPIO_Init+0x2d4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00d      	beq.n	8002054 <HAL_GPIO_Init+0x1dc>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a45      	ldr	r2, [pc, #276]	; (8002150 <HAL_GPIO_Init+0x2d8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d007      	beq.n	8002050 <HAL_GPIO_Init+0x1d8>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a44      	ldr	r2, [pc, #272]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d101      	bne.n	800204c <HAL_GPIO_Init+0x1d4>
 8002048:	2303      	movs	r3, #3
 800204a:	e006      	b.n	800205a <HAL_GPIO_Init+0x1e2>
 800204c:	2305      	movs	r3, #5
 800204e:	e004      	b.n	800205a <HAL_GPIO_Init+0x1e2>
 8002050:	2302      	movs	r3, #2
 8002052:	e002      	b.n	800205a <HAL_GPIO_Init+0x1e2>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <HAL_GPIO_Init+0x1e2>
 8002058:	2300      	movs	r3, #0
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	f002 0203 	and.w	r2, r2, #3
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	4093      	lsls	r3, r2
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800206a:	4937      	ldr	r1, [pc, #220]	; (8002148 <HAL_GPIO_Init+0x2d0>)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002078:	4b37      	ldr	r3, [pc, #220]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800209c:	4a2e      	ldr	r2, [pc, #184]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020a2:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020c6:	4a24      	ldr	r2, [pc, #144]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020cc:	4b22      	ldr	r3, [pc, #136]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020f0:	4a19      	ldr	r2, [pc, #100]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f6:	4b18      	ldr	r3, [pc, #96]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800211a:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3301      	adds	r3, #1
 8002124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	f47f aea9 	bne.w	8001e88 <HAL_GPIO_Init+0x10>
  }
}
 8002136:	bf00      	nop
 8002138:	bf00      	nop
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40021000 	.word	0x40021000
 8002148:	40010000 	.word	0x40010000
 800214c:	48000400 	.word	0x48000400
 8002150:	48000800 	.word	0x48000800
 8002154:	48000c00 	.word	0x48000c00
 8002158:	40010400 	.word	0x40010400

0800215c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
 8002168:	4613      	mov	r3, r2
 800216a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002178:	e002      	b.n	8002180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002192:	af00      	add	r7, sp, #0
 8002194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002198:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800219c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800219e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d102      	bne.n	80021b2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f001 b823 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 817d 	beq.w	80024c2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021c8:	4bbc      	ldr	r3, [pc, #752]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d00c      	beq.n	80021ee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021d4:	4bb9      	ldr	r3, [pc, #740]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d15c      	bne.n	800229a <HAL_RCC_OscConfig+0x10e>
 80021e0:	4bb6      	ldr	r3, [pc, #728]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ec:	d155      	bne.n	800229a <HAL_RCC_OscConfig+0x10e>
 80021ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021f2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002202:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	095b      	lsrs	r3, r3, #5
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d102      	bne.n	8002220 <HAL_RCC_OscConfig+0x94>
 800221a:	4ba8      	ldr	r3, [pc, #672]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	e015      	b.n	800224c <HAL_RCC_OscConfig+0xc0>
 8002220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002224:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002238:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800223c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002248:	4b9c      	ldr	r3, [pc, #624]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002250:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002254:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002258:	fa92 f2a2 	rbit	r2, r2
 800225c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002260:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002264:	fab2 f282 	clz	r2, r2
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	f042 0220 	orr.w	r2, r2, #32
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	f002 021f 	and.w	r2, r2, #31
 8002274:	2101      	movs	r1, #1
 8002276:	fa01 f202 	lsl.w	r2, r1, r2
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 811f 	beq.w	80024c0 <HAL_RCC_OscConfig+0x334>
 8002282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002286:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f040 8116 	bne.w	80024c0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	f000 bfaf 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x12e>
 80022ac:	4b83      	ldr	r3, [pc, #524]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a82      	ldr	r2, [pc, #520]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	e036      	b.n	8002328 <HAL_RCC_OscConfig+0x19c>
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x158>
 80022ca:	4b7c      	ldr	r3, [pc, #496]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7b      	ldr	r2, [pc, #492]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 80022d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b79      	ldr	r3, [pc, #484]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a78      	ldr	r2, [pc, #480]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 80022dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e021      	b.n	8002328 <HAL_RCC_OscConfig+0x19c>
 80022e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x184>
 80022f6:	4b71      	ldr	r3, [pc, #452]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a70      	ldr	r2, [pc, #448]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b6e      	ldr	r3, [pc, #440]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a6d      	ldr	r2, [pc, #436]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e00b      	b.n	8002328 <HAL_RCC_OscConfig+0x19c>
 8002310:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a69      	ldr	r2, [pc, #420]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 8002316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b67      	ldr	r3, [pc, #412]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a66      	ldr	r2, [pc, #408]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 8002322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002326:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002328:	4b64      	ldr	r3, [pc, #400]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	f023 020f 	bic.w	r2, r3, #15
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	495f      	ldr	r1, [pc, #380]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 800233e:	4313      	orrs	r3, r2
 8002340:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002346:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d059      	beq.n	8002406 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7fe fb9d 	bl	8000a90 <HAL_GetTick>
 8002356:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	e00a      	b.n	8002372 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe fb98 	bl	8000a90 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b64      	cmp	r3, #100	; 0x64
 800236a:	d902      	bls.n	8002372 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	f000 bf43 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002372:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002376:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002386:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d102      	bne.n	80023a4 <HAL_RCC_OscConfig+0x218>
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e015      	b.n	80023d0 <HAL_RCC_OscConfig+0x244>
 80023a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80023b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023bc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80023c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80023cc:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023d4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80023d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80023dc:	fa92 f2a2 	rbit	r2, r2
 80023e0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80023e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80023e8:	fab2 f282 	clz	r2, r2
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	f042 0220 	orr.w	r2, r2, #32
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	f002 021f 	and.w	r2, r2, #31
 80023f8:	2101      	movs	r1, #1
 80023fa:	fa01 f202 	lsl.w	r2, r1, r2
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0ab      	beq.n	800235c <HAL_RCC_OscConfig+0x1d0>
 8002404:	e05d      	b.n	80024c2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7fe fb43 	bl	8000a90 <HAL_GetTick>
 800240a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	e00a      	b.n	8002426 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002410:	f7fe fb3e 	bl	8000a90 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b64      	cmp	r3, #100	; 0x64
 800241e:	d902      	bls.n	8002426 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	f000 bee9 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002426:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800242a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800243a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d102      	bne.n	8002458 <HAL_RCC_OscConfig+0x2cc>
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	e015      	b.n	8002484 <HAL_RCC_OscConfig+0x2f8>
 8002458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800245c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800246c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002470:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002474:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_RCC_OscConfig+0x330>)
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002488:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800248c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002490:	fa92 f2a2 	rbit	r2, r2
 8002494:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002498:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800249c:	fab2 f282 	clz	r2, r2
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	f042 0220 	orr.w	r2, r2, #32
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	f002 021f 	and.w	r2, r2, #31
 80024ac:	2101      	movs	r1, #1
 80024ae:	fa01 f202 	lsl.w	r2, r1, r2
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ab      	bne.n	8002410 <HAL_RCC_OscConfig+0x284>
 80024b8:	e003      	b.n	80024c2 <HAL_RCC_OscConfig+0x336>
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 817d 	beq.w	80027d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024d8:	4ba6      	ldr	r3, [pc, #664]	; (8002774 <HAL_RCC_OscConfig+0x5e8>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00b      	beq.n	80024fc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024e4:	4ba3      	ldr	r3, [pc, #652]	; (8002774 <HAL_RCC_OscConfig+0x5e8>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d172      	bne.n	80025d6 <HAL_RCC_OscConfig+0x44a>
 80024f0:	4ba0      	ldr	r3, [pc, #640]	; (8002774 <HAL_RCC_OscConfig+0x5e8>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d16c      	bne.n	80025d6 <HAL_RCC_OscConfig+0x44a>
 80024fc:	2302      	movs	r3, #2
 80024fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800250e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	b2db      	uxtb	r3, r3
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b01      	cmp	r3, #1
 8002524:	d102      	bne.n	800252c <HAL_RCC_OscConfig+0x3a0>
 8002526:	4b93      	ldr	r3, [pc, #588]	; (8002774 <HAL_RCC_OscConfig+0x5e8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	e013      	b.n	8002554 <HAL_RCC_OscConfig+0x3c8>
 800252c:	2302      	movs	r3, #2
 800252e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800253e:	2302      	movs	r3, #2
 8002540:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002544:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002550:	4b88      	ldr	r3, [pc, #544]	; (8002774 <HAL_RCC_OscConfig+0x5e8>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	2202      	movs	r2, #2
 8002556:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800255a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800255e:	fa92 f2a2 	rbit	r2, r2
 8002562:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002566:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800256a:	fab2 f282 	clz	r2, r2
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	f042 0220 	orr.w	r2, r2, #32
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	f002 021f 	and.w	r2, r2, #31
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f202 	lsl.w	r2, r1, r2
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <HAL_RCC_OscConfig+0x410>
 8002586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d002      	beq.n	800259c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	f000 be2e 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4b75      	ldr	r3, [pc, #468]	; (8002774 <HAL_RCC_OscConfig+0x5e8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	21f8      	movs	r1, #248	; 0xf8
 80025b2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80025ba:	fa91 f1a1 	rbit	r1, r1
 80025be:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80025c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80025c6:	fab1 f181 	clz	r1, r1
 80025ca:	b2c9      	uxtb	r1, r1
 80025cc:	408b      	lsls	r3, r1
 80025ce:	4969      	ldr	r1, [pc, #420]	; (8002774 <HAL_RCC_OscConfig+0x5e8>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d4:	e0fd      	b.n	80027d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8088 	beq.w	80026f8 <HAL_RCC_OscConfig+0x56c>
 80025e8:	2301      	movs	r3, #1
 80025ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80025fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002608:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	461a      	mov	r2, r3
 8002610:	2301      	movs	r3, #1
 8002612:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe fa3c 	bl	8000a90 <HAL_GetTick>
 8002618:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261e:	f7fe fa37 	bl	8000a90 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d902      	bls.n	8002634 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	f000 bde2 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002634:	2302      	movs	r3, #2
 8002636:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002646:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d102      	bne.n	8002664 <HAL_RCC_OscConfig+0x4d8>
 800265e:	4b45      	ldr	r3, [pc, #276]	; (8002774 <HAL_RCC_OscConfig+0x5e8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	e013      	b.n	800268c <HAL_RCC_OscConfig+0x500>
 8002664:	2302      	movs	r3, #2
 8002666:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002676:	2302      	movs	r3, #2
 8002678:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800267c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002688:	4b3a      	ldr	r3, [pc, #232]	; (8002774 <HAL_RCC_OscConfig+0x5e8>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	2202      	movs	r2, #2
 800268e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002692:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002696:	fa92 f2a2 	rbit	r2, r2
 800269a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800269e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80026a2:	fab2 f282 	clz	r2, r2
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	f042 0220 	orr.w	r2, r2, #32
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	f002 021f 	and.w	r2, r2, #31
 80026b2:	2101      	movs	r1, #1
 80026b4:	fa01 f202 	lsl.w	r2, r1, r2
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0af      	beq.n	800261e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026be:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <HAL_RCC_OscConfig+0x5e8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	21f8      	movs	r1, #248	; 0xf8
 80026d4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026dc:	fa91 f1a1 	rbit	r1, r1
 80026e0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80026e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80026e8:	fab1 f181 	clz	r1, r1
 80026ec:	b2c9      	uxtb	r1, r1
 80026ee:	408b      	lsls	r3, r1
 80026f0:	4920      	ldr	r1, [pc, #128]	; (8002774 <HAL_RCC_OscConfig+0x5e8>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
 80026f6:	e06c      	b.n	80027d2 <HAL_RCC_OscConfig+0x646>
 80026f8:	2301      	movs	r3, #1
 80026fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800270a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002718:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	461a      	mov	r2, r3
 8002720:	2300      	movs	r3, #0
 8002722:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7fe f9b4 	bl	8000a90 <HAL_GetTick>
 8002728:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272c:	e00a      	b.n	8002744 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800272e:	f7fe f9af 	bl	8000a90 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d902      	bls.n	8002744 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	f000 bd5a 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002744:	2302      	movs	r3, #2
 8002746:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d104      	bne.n	8002778 <HAL_RCC_OscConfig+0x5ec>
 800276e:	4b01      	ldr	r3, [pc, #4]	; (8002774 <HAL_RCC_OscConfig+0x5e8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	e015      	b.n	80027a0 <HAL_RCC_OscConfig+0x614>
 8002774:	40021000 	.word	0x40021000
 8002778:	2302      	movs	r3, #2
 800277a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800278a:	2302      	movs	r3, #2
 800278c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002790:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800279c:	4bc8      	ldr	r3, [pc, #800]	; (8002ac0 <HAL_RCC_OscConfig+0x934>)
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	2202      	movs	r2, #2
 80027a2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80027a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80027aa:	fa92 f2a2 	rbit	r2, r2
 80027ae:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80027b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80027b6:	fab2 f282 	clz	r2, r2
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	f042 0220 	orr.w	r2, r2, #32
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	f002 021f 	and.w	r2, r2, #31
 80027c6:	2101      	movs	r1, #1
 80027c8:	fa01 f202 	lsl.w	r2, r1, r2
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1ad      	bne.n	800272e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8110 	beq.w	8002a08 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d079      	beq.n	80028ec <HAL_RCC_OscConfig+0x760>
 80027f8:	2301      	movs	r3, #1
 80027fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800280a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	4bab      	ldr	r3, [pc, #684]	; (8002ac4 <HAL_RCC_OscConfig+0x938>)
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	461a      	mov	r2, r3
 800281e:	2301      	movs	r3, #1
 8002820:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002822:	f7fe f935 	bl	8000a90 <HAL_GetTick>
 8002826:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	e00a      	b.n	8002842 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282c:	f7fe f930 	bl	8000a90 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d902      	bls.n	8002842 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	f000 bcdb 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002842:	2302      	movs	r3, #2
 8002844:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002858:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800285c:	2202      	movs	r2, #2
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002864:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	fa93 f2a3 	rbit	r2, r3
 800286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002872:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002880:	2202      	movs	r2, #2
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	fa93 f2a3 	rbit	r2, r3
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800289a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289c:	4b88      	ldr	r3, [pc, #544]	; (8002ac0 <HAL_RCC_OscConfig+0x934>)
 800289e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028a8:	2102      	movs	r1, #2
 80028aa:	6019      	str	r1, [r3, #0]
 80028ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	fa93 f1a3 	rbit	r1, r3
 80028ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028c2:	6019      	str	r1, [r3, #0]
  return result;
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f003 031f 	and.w	r3, r3, #31
 80028de:	2101      	movs	r1, #1
 80028e0:	fa01 f303 	lsl.w	r3, r1, r3
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0a0      	beq.n	800282c <HAL_RCC_OscConfig+0x6a0>
 80028ea:	e08d      	b.n	8002a08 <HAL_RCC_OscConfig+0x87c>
 80028ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	fa93 f2a3 	rbit	r2, r3
 8002906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800290e:	601a      	str	r2, [r3, #0]
  return result;
 8002910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002914:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002918:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	4b68      	ldr	r3, [pc, #416]	; (8002ac4 <HAL_RCC_OscConfig+0x938>)
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	461a      	mov	r2, r3
 800292a:	2300      	movs	r3, #0
 800292c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292e:	f7fe f8af 	bl	8000a90 <HAL_GetTick>
 8002932:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002938:	f7fe f8aa 	bl	8000a90 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d902      	bls.n	800294e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	f000 bc55 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>
 800294e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002952:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002956:	2202      	movs	r2, #2
 8002958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	fa93 f2a3 	rbit	r2, r3
 8002968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800297a:	2202      	movs	r2, #2
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002982:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	fa93 f2a3 	rbit	r2, r3
 800298c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002990:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800299e:	2202      	movs	r2, #2
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	fa93 f2a3 	rbit	r2, r3
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ba:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <HAL_RCC_OscConfig+0x934>)
 80029bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029c6:	2102      	movs	r1, #2
 80029c8:	6019      	str	r1, [r3, #0]
 80029ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	fa93 f1a3 	rbit	r1, r3
 80029d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029e0:	6019      	str	r1, [r3, #0]
  return result;
 80029e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	2101      	movs	r1, #1
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d197      	bne.n	8002938 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 81a1 	beq.w	8002d60 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a24:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <HAL_RCC_OscConfig+0x934>)
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d116      	bne.n	8002a5e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a30:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <HAL_RCC_OscConfig+0x934>)
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	4a22      	ldr	r2, [pc, #136]	; (8002ac0 <HAL_RCC_OscConfig+0x934>)
 8002a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	61d3      	str	r3, [r2, #28]
 8002a3c:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_RCC_OscConfig+0x934>)
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a48:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a56:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <HAL_RCC_OscConfig+0x93c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11a      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a6a:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <HAL_RCC_OscConfig+0x93c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a16      	ldr	r2, [pc, #88]	; (8002ac8 <HAL_RCC_OscConfig+0x93c>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a76:	f7fe f80b 	bl	8000a90 <HAL_GetTick>
 8002a7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7e:	e009      	b.n	8002a94 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a80:	f7fe f806 	bl	8000a90 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b64      	cmp	r3, #100	; 0x64
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e3b1      	b.n	80031f8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <HAL_RCC_OscConfig+0x93c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ef      	beq.n	8002a80 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d10d      	bne.n	8002acc <HAL_RCC_OscConfig+0x940>
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_RCC_OscConfig+0x934>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4a02      	ldr	r2, [pc, #8]	; (8002ac0 <HAL_RCC_OscConfig+0x934>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6213      	str	r3, [r2, #32]
 8002abc:	e03c      	b.n	8002b38 <HAL_RCC_OscConfig+0x9ac>
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	10908120 	.word	0x10908120
 8002ac8:	40007000 	.word	0x40007000
 8002acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10c      	bne.n	8002af6 <HAL_RCC_OscConfig+0x96a>
 8002adc:	4bc1      	ldr	r3, [pc, #772]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4ac0      	ldr	r2, [pc, #768]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6213      	str	r3, [r2, #32]
 8002ae8:	4bbe      	ldr	r3, [pc, #760]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4abd      	ldr	r2, [pc, #756]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002aee:	f023 0304 	bic.w	r3, r3, #4
 8002af2:	6213      	str	r3, [r2, #32]
 8002af4:	e020      	b.n	8002b38 <HAL_RCC_OscConfig+0x9ac>
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x994>
 8002b06:	4bb7      	ldr	r3, [pc, #732]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4ab6      	ldr	r2, [pc, #728]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6213      	str	r3, [r2, #32]
 8002b12:	4bb4      	ldr	r3, [pc, #720]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4ab3      	ldr	r2, [pc, #716]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6213      	str	r3, [r2, #32]
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_OscConfig+0x9ac>
 8002b20:	4bb0      	ldr	r3, [pc, #704]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4aaf      	ldr	r2, [pc, #700]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	6213      	str	r3, [r2, #32]
 8002b2c:	4bad      	ldr	r3, [pc, #692]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4aac      	ldr	r2, [pc, #688]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002b32:	f023 0304 	bic.w	r3, r3, #4
 8002b36:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 8081 	beq.w	8002c4c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4a:	f7fd ffa1 	bl	8000a90 <HAL_GetTick>
 8002b4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	e00b      	b.n	8002b6c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b54:	f7fd ff9c 	bl	8000a90 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e345      	b.n	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b74:	2202      	movs	r2, #2
 8002b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	fa93 f2a3 	rbit	r2, r3
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b98:	2202      	movs	r2, #2
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	fa93 f2a3 	rbit	r2, r3
 8002baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002bb2:	601a      	str	r2, [r3, #0]
  return result;
 8002bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002bbc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d102      	bne.n	8002bd8 <HAL_RCC_OscConfig+0xa4c>
 8002bd2:	4b84      	ldr	r3, [pc, #528]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	e013      	b.n	8002c00 <HAL_RCC_OscConfig+0xa74>
 8002bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bdc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002be0:	2202      	movs	r2, #2
 8002be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	fa93 f2a3 	rbit	r2, r3
 8002bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	4b79      	ldr	r3, [pc, #484]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c04:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c08:	2102      	movs	r1, #2
 8002c0a:	6011      	str	r1, [r2, #0]
 8002c0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c10:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	fa92 f1a2 	rbit	r1, r2
 8002c1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c1e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c22:	6011      	str	r1, [r2, #0]
  return result;
 8002c24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c28:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	fab2 f282 	clz	r2, r2
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	f002 021f 	and.w	r2, r2, #31
 8002c3e:	2101      	movs	r1, #1
 8002c40:	fa01 f202 	lsl.w	r2, r1, r2
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d084      	beq.n	8002b54 <HAL_RCC_OscConfig+0x9c8>
 8002c4a:	e07f      	b.n	8002d4c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4c:	f7fd ff20 	bl	8000a90 <HAL_GetTick>
 8002c50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c54:	e00b      	b.n	8002c6e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c56:	f7fd ff1b 	bl	8000a90 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e2c4      	b.n	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c76:	2202      	movs	r2, #2
 8002c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	fa93 f2a3 	rbit	r2, r3
 8002c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c96:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	fa93 f2a3 	rbit	r2, r3
 8002cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002cb4:	601a      	str	r2, [r3, #0]
  return result;
 8002cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002cbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	f043 0302 	orr.w	r3, r3, #2
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d102      	bne.n	8002cda <HAL_RCC_OscConfig+0xb4e>
 8002cd4:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	e013      	b.n	8002d02 <HAL_RCC_OscConfig+0xb76>
 8002cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cde:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	fa93 f2a3 	rbit	r2, r3
 8002cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d06:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d0a:	2102      	movs	r1, #2
 8002d0c:	6011      	str	r1, [r2, #0]
 8002d0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d12:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	fa92 f1a2 	rbit	r1, r2
 8002d1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d20:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d24:	6011      	str	r1, [r2, #0]
  return result;
 8002d26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d2a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	fab2 f282 	clz	r2, r2
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	f002 021f 	and.w	r2, r2, #31
 8002d40:	2101      	movs	r1, #1
 8002d42:	fa01 f202 	lsl.w	r2, r1, r2
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d184      	bne.n	8002c56 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d4c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d105      	bne.n	8002d60 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d54:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8242 	beq.w	80031f6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d72:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	f000 8213 	beq.w	80031a6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	f040 8162 	bne.w	8003056 <HAL_RCC_OscConfig+0xeca>
 8002d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d96:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	fa93 f2a3 	rbit	r2, r3
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002db6:	601a      	str	r2, [r3, #0]
  return result;
 8002db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002dc0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fd fe5a 	bl	8000a90 <HAL_GetTick>
 8002ddc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de0:	e00c      	b.n	8002dfc <HAL_RCC_OscConfig+0xc70>
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fd fe52 	bl	8000a90 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e1fd      	b.n	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e00:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	fa93 f2a3 	rbit	r2, r3
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e20:	601a      	str	r2, [r3, #0]
  return result;
 8002e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e26:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d102      	bne.n	8002e46 <HAL_RCC_OscConfig+0xcba>
 8002e40:	4bb0      	ldr	r3, [pc, #704]	; (8003104 <HAL_RCC_OscConfig+0xf78>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	e027      	b.n	8002e96 <HAL_RCC_OscConfig+0xd0a>
 8002e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e58:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	fa93 f2a3 	rbit	r2, r3
 8002e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e66:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e70:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	fa93 f2a3 	rbit	r2, r3
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	4b9c      	ldr	r3, [pc, #624]	; (8003104 <HAL_RCC_OscConfig+0xf78>)
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e9a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e9e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ea2:	6011      	str	r1, [r2, #0]
 8002ea4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ea8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	fa92 f1a2 	rbit	r1, r2
 8002eb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eb6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002eba:	6011      	str	r1, [r2, #0]
  return result;
 8002ebc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ec0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	fab2 f282 	clz	r2, r2
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	f042 0220 	orr.w	r2, r2, #32
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	f002 021f 	and.w	r2, r2, #31
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d182      	bne.n	8002de8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee2:	4b88      	ldr	r3, [pc, #544]	; (8003104 <HAL_RCC_OscConfig+0xf78>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	430b      	orrs	r3, r1
 8002f04:	497f      	ldr	r1, [pc, #508]	; (8003104 <HAL_RCC_OscConfig+0xf78>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	604b      	str	r3, [r1, #4]
 8002f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	fa93 f2a3 	rbit	r2, r3
 8002f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f2e:	601a      	str	r2, [r3, #0]
  return result;
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f38:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fd fd9e 	bl	8000a90 <HAL_GetTick>
 8002f54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f58:	e009      	b.n	8002f6e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5a:	f7fd fd99 	bl	8000a90 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e144      	b.n	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f72:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	fa93 f2a3 	rbit	r2, r3
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f92:	601a      	str	r2, [r3, #0]
  return result;
 8002f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f98:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d102      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xe2c>
 8002fb2:	4b54      	ldr	r3, [pc, #336]	; (8003104 <HAL_RCC_OscConfig+0xf78>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	e027      	b.n	8003008 <HAL_RCC_OscConfig+0xe7c>
 8002fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	fa93 f2a3 	rbit	r2, r3
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002fe6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	fa93 f2a3 	rbit	r2, r3
 8002ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <HAL_RCC_OscConfig+0xf78>)
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800300c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003010:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003014:	6011      	str	r1, [r2, #0]
 8003016:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800301a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	fa92 f1a2 	rbit	r1, r2
 8003024:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003028:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800302c:	6011      	str	r1, [r2, #0]
  return result;
 800302e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003032:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	fab2 f282 	clz	r2, r2
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	f042 0220 	orr.w	r2, r2, #32
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	f002 021f 	and.w	r2, r2, #31
 8003048:	2101      	movs	r1, #1
 800304a:	fa01 f202 	lsl.w	r2, r1, r2
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d082      	beq.n	8002f5a <HAL_RCC_OscConfig+0xdce>
 8003054:	e0cf      	b.n	80031f6 <HAL_RCC_OscConfig+0x106a>
 8003056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800305e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003062:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003068:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	fa93 f2a3 	rbit	r2, r3
 8003072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003076:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800307a:	601a      	str	r2, [r3, #0]
  return result;
 800307c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003080:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003084:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003090:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	461a      	mov	r2, r3
 8003098:	2300      	movs	r3, #0
 800309a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fd fcf8 	bl	8000a90 <HAL_GetTick>
 80030a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a4:	e009      	b.n	80030ba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a6:	f7fd fcf3 	bl	8000a90 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e09e      	b.n	80031f8 <HAL_RCC_OscConfig+0x106c>
 80030ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030be:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030cc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	fa93 f2a3 	rbit	r2, r3
 80030d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030da:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030de:	601a      	str	r2, [r3, #0]
  return result;
 80030e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	095b      	lsrs	r3, r3, #5
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d104      	bne.n	8003108 <HAL_RCC_OscConfig+0xf7c>
 80030fe:	4b01      	ldr	r3, [pc, #4]	; (8003104 <HAL_RCC_OscConfig+0xf78>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	e029      	b.n	8003158 <HAL_RCC_OscConfig+0xfcc>
 8003104:	40021000 	.word	0x40021000
 8003108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003110:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	fa93 f2a3 	rbit	r2, r3
 8003124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003128:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003132:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003136:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003140:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	fa93 f2a3 	rbit	r2, r3
 800314a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	4b2b      	ldr	r3, [pc, #172]	; (8003204 <HAL_RCC_OscConfig+0x1078>)
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800315c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003160:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003164:	6011      	str	r1, [r2, #0]
 8003166:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800316a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	fa92 f1a2 	rbit	r1, r2
 8003174:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003178:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800317c:	6011      	str	r1, [r2, #0]
  return result;
 800317e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003182:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	fab2 f282 	clz	r2, r2
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	f042 0220 	orr.w	r2, r2, #32
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	f002 021f 	and.w	r2, r2, #31
 8003198:	2101      	movs	r1, #1
 800319a:	fa01 f202 	lsl.w	r2, r1, r2
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d180      	bne.n	80030a6 <HAL_RCC_OscConfig+0xf1a>
 80031a4:	e027      	b.n	80031f6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e01e      	b.n	80031f8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031ba:	4b12      	ldr	r3, [pc, #72]	; (8003204 <HAL_RCC_OscConfig+0x1078>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031c6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d10b      	bne.n	80031f2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000

08003208 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b09e      	sub	sp, #120	; 0x78
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e162      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003220:	4b90      	ldr	r3, [pc, #576]	; (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d910      	bls.n	8003250 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b8d      	ldr	r3, [pc, #564]	; (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 0207 	bic.w	r2, r3, #7
 8003236:	498b      	ldr	r1, [pc, #556]	; (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b89      	ldr	r3, [pc, #548]	; (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e14a      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800325c:	4b82      	ldr	r3, [pc, #520]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	497f      	ldr	r1, [pc, #508]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 800326a:	4313      	orrs	r3, r2
 800326c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80dc 	beq.w	8003434 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d13c      	bne.n	80032fe <HAL_RCC_ClockConfig+0xf6>
 8003284:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003288:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	b2db      	uxtb	r3, r3
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	b2db      	uxtb	r3, r3
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d102      	bne.n	80032ae <HAL_RCC_ClockConfig+0xa6>
 80032a8:	4b6f      	ldr	r3, [pc, #444]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	e00f      	b.n	80032ce <HAL_RCC_ClockConfig+0xc6>
 80032ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	667b      	str	r3, [r7, #100]	; 0x64
 80032bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032c0:	663b      	str	r3, [r7, #96]	; 0x60
 80032c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032c4:	fa93 f3a3 	rbit	r3, r3
 80032c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ca:	4b67      	ldr	r3, [pc, #412]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80032d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032d6:	fa92 f2a2 	rbit	r2, r2
 80032da:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032de:	fab2 f282 	clz	r2, r2
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	f042 0220 	orr.w	r2, r2, #32
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	f002 021f 	and.w	r2, r2, #31
 80032ee:	2101      	movs	r1, #1
 80032f0:	fa01 f202 	lsl.w	r2, r1, r2
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d17b      	bne.n	80033f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e0f3      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d13c      	bne.n	8003380 <HAL_RCC_ClockConfig+0x178>
 8003306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800330a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b01      	cmp	r3, #1
 8003328:	d102      	bne.n	8003330 <HAL_RCC_ClockConfig+0x128>
 800332a:	4b4f      	ldr	r3, [pc, #316]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	e00f      	b.n	8003350 <HAL_RCC_ClockConfig+0x148>
 8003330:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003334:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003338:	fa93 f3a3 	rbit	r3, r3
 800333c:	647b      	str	r3, [r7, #68]	; 0x44
 800333e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003342:	643b      	str	r3, [r7, #64]	; 0x40
 8003344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003346:	fa93 f3a3 	rbit	r3, r3
 800334a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800334c:	4b46      	ldr	r3, [pc, #280]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003354:	63ba      	str	r2, [r7, #56]	; 0x38
 8003356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003358:	fa92 f2a2 	rbit	r2, r2
 800335c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800335e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003360:	fab2 f282 	clz	r2, r2
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	f042 0220 	orr.w	r2, r2, #32
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	f002 021f 	and.w	r2, r2, #31
 8003370:	2101      	movs	r1, #1
 8003372:	fa01 f202 	lsl.w	r2, r1, r2
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d13a      	bne.n	80033f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0b2      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2de>
 8003380:	2302      	movs	r3, #2
 8003382:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d102      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x1a0>
 80033a2:	4b31      	ldr	r3, [pc, #196]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	e00d      	b.n	80033c4 <HAL_RCC_ClockConfig+0x1bc>
 80033a8:	2302      	movs	r3, #2
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
 80033b4:	2302      	movs	r3, #2
 80033b6:	623b      	str	r3, [r7, #32]
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	4b29      	ldr	r3, [pc, #164]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	2202      	movs	r2, #2
 80033c6:	61ba      	str	r2, [r7, #24]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	fa92 f2a2 	rbit	r2, r2
 80033ce:	617a      	str	r2, [r7, #20]
  return result;
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	fab2 f282 	clz	r2, r2
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	f042 0220 	orr.w	r2, r2, #32
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	f002 021f 	and.w	r2, r2, #31
 80033e2:	2101      	movs	r1, #1
 80033e4:	fa01 f202 	lsl.w	r2, r1, r2
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e079      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f023 0203 	bic.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	491a      	ldr	r1, [pc, #104]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003404:	f7fd fb44 	bl	8000a90 <HAL_GetTick>
 8003408:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	e00a      	b.n	8003422 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340c:	f7fd fb40 	bl	8000a90 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	; 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e061      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	4b11      	ldr	r3, [pc, #68]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 020c 	and.w	r2, r3, #12
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	429a      	cmp	r2, r3
 8003432:	d1eb      	bne.n	800340c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d214      	bcs.n	800346c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 0207 	bic.w	r2, r3, #7
 800344a:	4906      	ldr	r1, [pc, #24]	; (8003464 <HAL_RCC_ClockConfig+0x25c>)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b04      	ldr	r3, [pc, #16]	; (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d005      	beq.n	800346c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e040      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2de>
 8003464:	40022000 	.word	0x40022000
 8003468:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_RCC_ClockConfig+0x2e8>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	491a      	ldr	r1, [pc, #104]	; (80034f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003496:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4912      	ldr	r1, [pc, #72]	; (80034f0 <HAL_RCC_ClockConfig+0x2e8>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034aa:	f000 f829 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 80034ae:	4601      	mov	r1, r0
 80034b0:	4b0f      	ldr	r3, [pc, #60]	; (80034f0 <HAL_RCC_ClockConfig+0x2e8>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b8:	22f0      	movs	r2, #240	; 0xf0
 80034ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	fa92 f2a2 	rbit	r2, r2
 80034c2:	60fa      	str	r2, [r7, #12]
  return result;
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	fab2 f282 	clz	r2, r2
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	40d3      	lsrs	r3, r2
 80034ce:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <HAL_RCC_ClockConfig+0x2ec>)
 80034d0:	5cd3      	ldrb	r3, [r2, r3]
 80034d2:	fa21 f303 	lsr.w	r3, r1, r3
 80034d6:	4a08      	ldr	r2, [pc, #32]	; (80034f8 <HAL_RCC_ClockConfig+0x2f0>)
 80034d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034da:	4b08      	ldr	r3, [pc, #32]	; (80034fc <HAL_RCC_ClockConfig+0x2f4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd fa92 	bl	8000a08 <HAL_InitTick>
  
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3778      	adds	r7, #120	; 0x78
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	08004db0 	.word	0x08004db0
 80034f8:	20000000 	.word	0x20000000
 80034fc:	20000004 	.word	0x20000004

08003500 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003500:	b480      	push	{r7}
 8003502:	b08b      	sub	sp, #44	; 0x2c
 8003504:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	2300      	movs	r3, #0
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800351a:	4b29      	ldr	r3, [pc, #164]	; (80035c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b04      	cmp	r3, #4
 8003528:	d002      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x30>
 800352a:	2b08      	cmp	r3, #8
 800352c:	d003      	beq.n	8003536 <HAL_RCC_GetSysClockFreq+0x36>
 800352e:	e03c      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003530:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003532:	623b      	str	r3, [r7, #32]
      break;
 8003534:	e03c      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800353c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003540:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	fa92 f2a2 	rbit	r2, r2
 8003548:	607a      	str	r2, [r7, #4]
  return result;
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	fab2 f282 	clz	r2, r2
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	40d3      	lsrs	r3, r2
 8003554:	4a1c      	ldr	r2, [pc, #112]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003556:	5cd3      	ldrb	r3, [r2, r3]
 8003558:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800355a:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	220f      	movs	r2, #15
 8003564:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	fa92 f2a2 	rbit	r2, r2
 800356c:	60fa      	str	r2, [r7, #12]
  return result;
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	fab2 f282 	clz	r2, r2
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	40d3      	lsrs	r3, r2
 8003578:	4a14      	ldr	r2, [pc, #80]	; (80035cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800357a:	5cd3      	ldrb	r3, [r2, r3]
 800357c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003588:	4a0e      	ldr	r2, [pc, #56]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
 8003598:	e004      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	4a0c      	ldr	r2, [pc, #48]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	623b      	str	r3, [r7, #32]
      break;
 80035a8:	e002      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035ac:	623b      	str	r3, [r7, #32]
      break;
 80035ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b0:	6a3b      	ldr	r3, [r7, #32]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	372c      	adds	r7, #44	; 0x2c
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000
 80035c4:	007a1200 	.word	0x007a1200
 80035c8:	08004dc8 	.word	0x08004dc8
 80035cc:	08004dd8 	.word	0x08004dd8
 80035d0:	003d0900 	.word	0x003d0900

080035d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d8:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035da:	681b      	ldr	r3, [r3, #0]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	20000000 	.word	0x20000000

080035ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80035f2:	f7ff ffef 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 80035f6:	4601      	mov	r1, r0
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003600:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003604:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	fa92 f2a2 	rbit	r2, r2
 800360c:	603a      	str	r2, [r7, #0]
  return result;
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	fab2 f282 	clz	r2, r2
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	40d3      	lsrs	r3, r2
 8003618:	4a04      	ldr	r2, [pc, #16]	; (800362c <HAL_RCC_GetPCLK1Freq+0x40>)
 800361a:	5cd3      	ldrb	r3, [r2, r3]
 800361c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000
 800362c:	08004dc0 	.word	0x08004dc0

08003630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003636:	f7ff ffcd 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 800363a:	4601      	mov	r1, r0
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003644:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003648:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	fa92 f2a2 	rbit	r2, r2
 8003650:	603a      	str	r2, [r7, #0]
  return result;
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	fab2 f282 	clz	r2, r2
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	40d3      	lsrs	r3, r2
 800365c:	4a04      	ldr	r2, [pc, #16]	; (8003670 <HAL_RCC_GetPCLK2Freq+0x40>)
 800365e:	5cd3      	ldrb	r3, [r2, r3]
 8003660:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40021000 	.word	0x40021000
 8003670:	08004dc0 	.word	0x08004dc0

08003674 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e040      	b.n	8003708 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fd f854 	bl	8000744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2224      	movs	r2, #36	; 0x24
 80036a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0201 	bic.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f8c0 	bl	8003838 <UART_SetConfig>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e022      	b.n	8003708 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f9ea 	bl	8003aa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fa71 	bl	8003be8 <UART_CheckIdleState>
 8003706:	4603      	mov	r3, r0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	; 0x28
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003724:	2b20      	cmp	r3, #32
 8003726:	f040 8082 	bne.w	800382e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_UART_Transmit+0x26>
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e07a      	b.n	8003830 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_UART_Transmit+0x38>
 8003744:	2302      	movs	r3, #2
 8003746:	e073      	b.n	8003830 <HAL_UART_Transmit+0x120>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2221      	movs	r2, #33	; 0x21
 800375c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800375e:	f7fd f997 	bl	8000a90 <HAL_GetTick>
 8003762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	88fa      	ldrh	r2, [r7, #6]
 8003768:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	88fa      	ldrh	r2, [r7, #6]
 8003770:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377c:	d108      	bne.n	8003790 <HAL_UART_Transmit+0x80>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d104      	bne.n	8003790 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	e003      	b.n	8003798 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003794:	2300      	movs	r3, #0
 8003796:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80037a0:	e02d      	b.n	80037fe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2200      	movs	r2, #0
 80037aa:	2180      	movs	r1, #128	; 0x80
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 fa64 	bl	8003c7a <UART_WaitOnFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e039      	b.n	8003830 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10b      	bne.n	80037da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ce:	b292      	uxth	r2, r2
 80037d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	3302      	adds	r3, #2
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	e008      	b.n	80037ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	b292      	uxth	r2, r2
 80037e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	3301      	adds	r3, #1
 80037ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1cb      	bne.n	80037a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2200      	movs	r2, #0
 8003812:	2140      	movs	r1, #64	; 0x40
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fa30 	bl	8003c7a <UART_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e005      	b.n	8003830 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	e000      	b.n	8003830 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4b8a      	ldr	r3, [pc, #552]	; (8003a8c <UART_SetConfig+0x254>)
 8003864:	4013      	ands	r3, r2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	6979      	ldr	r1, [r7, #20]
 800386c:	430b      	orrs	r3, r1
 800386e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a78      	ldr	r2, [pc, #480]	; (8003a90 <UART_SetConfig+0x258>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d120      	bne.n	80038f6 <UART_SetConfig+0xbe>
 80038b4:	4b77      	ldr	r3, [pc, #476]	; (8003a94 <UART_SetConfig+0x25c>)
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d817      	bhi.n	80038f0 <UART_SetConfig+0xb8>
 80038c0:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <UART_SetConfig+0x90>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038e5 	.word	0x080038e5
 80038d0:	080038eb 	.word	0x080038eb
 80038d4:	080038df 	.word	0x080038df
 80038d8:	2300      	movs	r3, #0
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e01d      	b.n	800391a <UART_SetConfig+0xe2>
 80038de:	2302      	movs	r3, #2
 80038e0:	77fb      	strb	r3, [r7, #31]
 80038e2:	e01a      	b.n	800391a <UART_SetConfig+0xe2>
 80038e4:	2304      	movs	r3, #4
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e017      	b.n	800391a <UART_SetConfig+0xe2>
 80038ea:	2308      	movs	r3, #8
 80038ec:	77fb      	strb	r3, [r7, #31]
 80038ee:	e014      	b.n	800391a <UART_SetConfig+0xe2>
 80038f0:	2310      	movs	r3, #16
 80038f2:	77fb      	strb	r3, [r7, #31]
 80038f4:	e011      	b.n	800391a <UART_SetConfig+0xe2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a67      	ldr	r2, [pc, #412]	; (8003a98 <UART_SetConfig+0x260>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d102      	bne.n	8003906 <UART_SetConfig+0xce>
 8003900:	2300      	movs	r3, #0
 8003902:	77fb      	strb	r3, [r7, #31]
 8003904:	e009      	b.n	800391a <UART_SetConfig+0xe2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a64      	ldr	r2, [pc, #400]	; (8003a9c <UART_SetConfig+0x264>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d102      	bne.n	8003916 <UART_SetConfig+0xde>
 8003910:	2300      	movs	r3, #0
 8003912:	77fb      	strb	r3, [r7, #31]
 8003914:	e001      	b.n	800391a <UART_SetConfig+0xe2>
 8003916:	2310      	movs	r3, #16
 8003918:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003922:	d15b      	bne.n	80039dc <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003924:	7ffb      	ldrb	r3, [r7, #31]
 8003926:	2b08      	cmp	r3, #8
 8003928:	d827      	bhi.n	800397a <UART_SetConfig+0x142>
 800392a:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <UART_SetConfig+0xf8>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	08003955 	.word	0x08003955
 8003934:	0800395d 	.word	0x0800395d
 8003938:	08003965 	.word	0x08003965
 800393c:	0800397b 	.word	0x0800397b
 8003940:	0800396b 	.word	0x0800396b
 8003944:	0800397b 	.word	0x0800397b
 8003948:	0800397b 	.word	0x0800397b
 800394c:	0800397b 	.word	0x0800397b
 8003950:	08003973 	.word	0x08003973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003954:	f7ff fe4a 	bl	80035ec <HAL_RCC_GetPCLK1Freq>
 8003958:	61b8      	str	r0, [r7, #24]
        break;
 800395a:	e013      	b.n	8003984 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800395c:	f7ff fe68 	bl	8003630 <HAL_RCC_GetPCLK2Freq>
 8003960:	61b8      	str	r0, [r7, #24]
        break;
 8003962:	e00f      	b.n	8003984 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003964:	4b4e      	ldr	r3, [pc, #312]	; (8003aa0 <UART_SetConfig+0x268>)
 8003966:	61bb      	str	r3, [r7, #24]
        break;
 8003968:	e00c      	b.n	8003984 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800396a:	f7ff fdc9 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 800396e:	61b8      	str	r0, [r7, #24]
        break;
 8003970:	e008      	b.n	8003984 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003976:	61bb      	str	r3, [r7, #24]
        break;
 8003978:	e004      	b.n	8003984 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	77bb      	strb	r3, [r7, #30]
        break;
 8003982:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d074      	beq.n	8003a74 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	005a      	lsls	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	441a      	add	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	b29b      	uxth	r3, r3
 80039a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b0f      	cmp	r3, #15
 80039a6:	d916      	bls.n	80039d6 <UART_SetConfig+0x19e>
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ae:	d212      	bcs.n	80039d6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	f023 030f 	bic.w	r3, r3, #15
 80039b8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	085b      	lsrs	r3, r3, #1
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	89fb      	ldrh	r3, [r7, #14]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	89fa      	ldrh	r2, [r7, #14]
 80039d2:	60da      	str	r2, [r3, #12]
 80039d4:	e04e      	b.n	8003a74 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	77bb      	strb	r3, [r7, #30]
 80039da:	e04b      	b.n	8003a74 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039dc:	7ffb      	ldrb	r3, [r7, #31]
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d827      	bhi.n	8003a32 <UART_SetConfig+0x1fa>
 80039e2:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <UART_SetConfig+0x1b0>)
 80039e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e8:	08003a0d 	.word	0x08003a0d
 80039ec:	08003a15 	.word	0x08003a15
 80039f0:	08003a1d 	.word	0x08003a1d
 80039f4:	08003a33 	.word	0x08003a33
 80039f8:	08003a23 	.word	0x08003a23
 80039fc:	08003a33 	.word	0x08003a33
 8003a00:	08003a33 	.word	0x08003a33
 8003a04:	08003a33 	.word	0x08003a33
 8003a08:	08003a2b 	.word	0x08003a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a0c:	f7ff fdee 	bl	80035ec <HAL_RCC_GetPCLK1Freq>
 8003a10:	61b8      	str	r0, [r7, #24]
        break;
 8003a12:	e013      	b.n	8003a3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a14:	f7ff fe0c 	bl	8003630 <HAL_RCC_GetPCLK2Freq>
 8003a18:	61b8      	str	r0, [r7, #24]
        break;
 8003a1a:	e00f      	b.n	8003a3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a1c:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <UART_SetConfig+0x268>)
 8003a1e:	61bb      	str	r3, [r7, #24]
        break;
 8003a20:	e00c      	b.n	8003a3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a22:	f7ff fd6d 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 8003a26:	61b8      	str	r0, [r7, #24]
        break;
 8003a28:	e008      	b.n	8003a3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a2e:	61bb      	str	r3, [r7, #24]
        break;
 8003a30:	e004      	b.n	8003a3c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	77bb      	strb	r3, [r7, #30]
        break;
 8003a3a:	bf00      	nop
    }

    if (pclk != 0U)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d018      	beq.n	8003a74 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	085a      	lsrs	r2, r3, #1
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	441a      	add	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	2b0f      	cmp	r3, #15
 8003a5c:	d908      	bls.n	8003a70 <UART_SetConfig+0x238>
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a64:	d204      	bcs.n	8003a70 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	e001      	b.n	8003a74 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a80:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	efff69f3 	.word	0xefff69f3
 8003a90:	40013800 	.word	0x40013800
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40004400 	.word	0x40004400
 8003a9c:	40004800 	.word	0x40004800
 8003aa0:	007a1200 	.word	0x007a1200

08003aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01a      	beq.n	8003bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba2:	d10a      	bne.n	8003bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
  }
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bf8:	f7fc ff4a 	bl	8000a90 <HAL_GetTick>
 8003bfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d10e      	bne.n	8003c2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f82d 	bl	8003c7a <UART_WaitOnFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e023      	b.n	8003c72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d10e      	bne.n	8003c56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f817 	bl	8003c7a <UART_WaitOnFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e00d      	b.n	8003c72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b09c      	sub	sp, #112	; 0x70
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	4613      	mov	r3, r2
 8003c88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8a:	e0a5      	b.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c92:	f000 80a1 	beq.w	8003dd8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c96:	f7fc fefb 	bl	8000a90 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d302      	bcc.n	8003cac <UART_WaitOnFlagUntilTimeout+0x32>
 8003ca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d13e      	bne.n	8003d2a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cc0:	667b      	str	r3, [r7, #100]	; 0x64
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ccc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003cd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e6      	bne.n	8003cac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf0:	f023 0301 	bic.w	r3, r3, #1
 8003cf4:	663b      	str	r3, [r7, #96]	; 0x60
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3308      	adds	r3, #8
 8003cfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cfe:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e5      	bne.n	8003cde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e067      	b.n	8003dfa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d04f      	beq.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d46:	d147      	bne.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d70:	637b      	str	r3, [r7, #52]	; 0x34
 8003d72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e6      	bne.n	8003d52 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3308      	adds	r3, #8
 8003d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	613b      	str	r3, [r7, #16]
   return(result);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3308      	adds	r3, #8
 8003da2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003da4:	623a      	str	r2, [r7, #32]
 8003da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	69f9      	ldr	r1, [r7, #28]
 8003daa:	6a3a      	ldr	r2, [r7, #32]
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e5      	bne.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e010      	b.n	8003dfa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	69da      	ldr	r2, [r3, #28]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4013      	ands	r3, r2
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	f43f af4a 	beq.w	8003c8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3770      	adds	r7, #112	; 0x70
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <__errno>:
 8003e04:	4b01      	ldr	r3, [pc, #4]	; (8003e0c <__errno+0x8>)
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	2000000c 	.word	0x2000000c

08003e10 <__libc_init_array>:
 8003e10:	b570      	push	{r4, r5, r6, lr}
 8003e12:	4d0d      	ldr	r5, [pc, #52]	; (8003e48 <__libc_init_array+0x38>)
 8003e14:	4c0d      	ldr	r4, [pc, #52]	; (8003e4c <__libc_init_array+0x3c>)
 8003e16:	1b64      	subs	r4, r4, r5
 8003e18:	10a4      	asrs	r4, r4, #2
 8003e1a:	2600      	movs	r6, #0
 8003e1c:	42a6      	cmp	r6, r4
 8003e1e:	d109      	bne.n	8003e34 <__libc_init_array+0x24>
 8003e20:	4d0b      	ldr	r5, [pc, #44]	; (8003e50 <__libc_init_array+0x40>)
 8003e22:	4c0c      	ldr	r4, [pc, #48]	; (8003e54 <__libc_init_array+0x44>)
 8003e24:	f000 ffae 	bl	8004d84 <_init>
 8003e28:	1b64      	subs	r4, r4, r5
 8003e2a:	10a4      	asrs	r4, r4, #2
 8003e2c:	2600      	movs	r6, #0
 8003e2e:	42a6      	cmp	r6, r4
 8003e30:	d105      	bne.n	8003e3e <__libc_init_array+0x2e>
 8003e32:	bd70      	pop	{r4, r5, r6, pc}
 8003e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e38:	4798      	blx	r3
 8003e3a:	3601      	adds	r6, #1
 8003e3c:	e7ee      	b.n	8003e1c <__libc_init_array+0xc>
 8003e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e42:	4798      	blx	r3
 8003e44:	3601      	adds	r6, #1
 8003e46:	e7f2      	b.n	8003e2e <__libc_init_array+0x1e>
 8003e48:	08004e80 	.word	0x08004e80
 8003e4c:	08004e80 	.word	0x08004e80
 8003e50:	08004e80 	.word	0x08004e80
 8003e54:	08004e84 	.word	0x08004e84

08003e58 <memset>:
 8003e58:	4402      	add	r2, r0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d100      	bne.n	8003e62 <memset+0xa>
 8003e60:	4770      	bx	lr
 8003e62:	f803 1b01 	strb.w	r1, [r3], #1
 8003e66:	e7f9      	b.n	8003e5c <memset+0x4>

08003e68 <iprintf>:
 8003e68:	b40f      	push	{r0, r1, r2, r3}
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <iprintf+0x2c>)
 8003e6c:	b513      	push	{r0, r1, r4, lr}
 8003e6e:	681c      	ldr	r4, [r3, #0]
 8003e70:	b124      	cbz	r4, 8003e7c <iprintf+0x14>
 8003e72:	69a3      	ldr	r3, [r4, #24]
 8003e74:	b913      	cbnz	r3, 8003e7c <iprintf+0x14>
 8003e76:	4620      	mov	r0, r4
 8003e78:	f000 f866 	bl	8003f48 <__sinit>
 8003e7c:	ab05      	add	r3, sp, #20
 8003e7e:	9a04      	ldr	r2, [sp, #16]
 8003e80:	68a1      	ldr	r1, [r4, #8]
 8003e82:	9301      	str	r3, [sp, #4]
 8003e84:	4620      	mov	r0, r4
 8003e86:	f000 f9bd 	bl	8004204 <_vfiprintf_r>
 8003e8a:	b002      	add	sp, #8
 8003e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e90:	b004      	add	sp, #16
 8003e92:	4770      	bx	lr
 8003e94:	2000000c 	.word	0x2000000c

08003e98 <std>:
 8003e98:	2300      	movs	r3, #0
 8003e9a:	b510      	push	{r4, lr}
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	e9c0 3300 	strd	r3, r3, [r0]
 8003ea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ea6:	6083      	str	r3, [r0, #8]
 8003ea8:	8181      	strh	r1, [r0, #12]
 8003eaa:	6643      	str	r3, [r0, #100]	; 0x64
 8003eac:	81c2      	strh	r2, [r0, #14]
 8003eae:	6183      	str	r3, [r0, #24]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	2208      	movs	r2, #8
 8003eb4:	305c      	adds	r0, #92	; 0x5c
 8003eb6:	f7ff ffcf 	bl	8003e58 <memset>
 8003eba:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <std+0x38>)
 8003ebc:	6263      	str	r3, [r4, #36]	; 0x24
 8003ebe:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <std+0x3c>)
 8003ec0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ec2:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <std+0x40>)
 8003ec4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <std+0x44>)
 8003ec8:	6224      	str	r4, [r4, #32]
 8003eca:	6323      	str	r3, [r4, #48]	; 0x30
 8003ecc:	bd10      	pop	{r4, pc}
 8003ece:	bf00      	nop
 8003ed0:	080047ad 	.word	0x080047ad
 8003ed4:	080047cf 	.word	0x080047cf
 8003ed8:	08004807 	.word	0x08004807
 8003edc:	0800482b 	.word	0x0800482b

08003ee0 <_cleanup_r>:
 8003ee0:	4901      	ldr	r1, [pc, #4]	; (8003ee8 <_cleanup_r+0x8>)
 8003ee2:	f000 b8af 	b.w	8004044 <_fwalk_reent>
 8003ee6:	bf00      	nop
 8003ee8:	08004b05 	.word	0x08004b05

08003eec <__sfmoreglue>:
 8003eec:	b570      	push	{r4, r5, r6, lr}
 8003eee:	2268      	movs	r2, #104	; 0x68
 8003ef0:	1e4d      	subs	r5, r1, #1
 8003ef2:	4355      	muls	r5, r2
 8003ef4:	460e      	mov	r6, r1
 8003ef6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003efa:	f000 f8e5 	bl	80040c8 <_malloc_r>
 8003efe:	4604      	mov	r4, r0
 8003f00:	b140      	cbz	r0, 8003f14 <__sfmoreglue+0x28>
 8003f02:	2100      	movs	r1, #0
 8003f04:	e9c0 1600 	strd	r1, r6, [r0]
 8003f08:	300c      	adds	r0, #12
 8003f0a:	60a0      	str	r0, [r4, #8]
 8003f0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003f10:	f7ff ffa2 	bl	8003e58 <memset>
 8003f14:	4620      	mov	r0, r4
 8003f16:	bd70      	pop	{r4, r5, r6, pc}

08003f18 <__sfp_lock_acquire>:
 8003f18:	4801      	ldr	r0, [pc, #4]	; (8003f20 <__sfp_lock_acquire+0x8>)
 8003f1a:	f000 b8b3 	b.w	8004084 <__retarget_lock_acquire_recursive>
 8003f1e:	bf00      	nop
 8003f20:	20000171 	.word	0x20000171

08003f24 <__sfp_lock_release>:
 8003f24:	4801      	ldr	r0, [pc, #4]	; (8003f2c <__sfp_lock_release+0x8>)
 8003f26:	f000 b8ae 	b.w	8004086 <__retarget_lock_release_recursive>
 8003f2a:	bf00      	nop
 8003f2c:	20000171 	.word	0x20000171

08003f30 <__sinit_lock_acquire>:
 8003f30:	4801      	ldr	r0, [pc, #4]	; (8003f38 <__sinit_lock_acquire+0x8>)
 8003f32:	f000 b8a7 	b.w	8004084 <__retarget_lock_acquire_recursive>
 8003f36:	bf00      	nop
 8003f38:	20000172 	.word	0x20000172

08003f3c <__sinit_lock_release>:
 8003f3c:	4801      	ldr	r0, [pc, #4]	; (8003f44 <__sinit_lock_release+0x8>)
 8003f3e:	f000 b8a2 	b.w	8004086 <__retarget_lock_release_recursive>
 8003f42:	bf00      	nop
 8003f44:	20000172 	.word	0x20000172

08003f48 <__sinit>:
 8003f48:	b510      	push	{r4, lr}
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	f7ff fff0 	bl	8003f30 <__sinit_lock_acquire>
 8003f50:	69a3      	ldr	r3, [r4, #24]
 8003f52:	b11b      	cbz	r3, 8003f5c <__sinit+0x14>
 8003f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f58:	f7ff bff0 	b.w	8003f3c <__sinit_lock_release>
 8003f5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003f60:	6523      	str	r3, [r4, #80]	; 0x50
 8003f62:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <__sinit+0x68>)
 8003f64:	4a13      	ldr	r2, [pc, #76]	; (8003fb4 <__sinit+0x6c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f6a:	42a3      	cmp	r3, r4
 8003f6c:	bf04      	itt	eq
 8003f6e:	2301      	moveq	r3, #1
 8003f70:	61a3      	streq	r3, [r4, #24]
 8003f72:	4620      	mov	r0, r4
 8003f74:	f000 f820 	bl	8003fb8 <__sfp>
 8003f78:	6060      	str	r0, [r4, #4]
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	f000 f81c 	bl	8003fb8 <__sfp>
 8003f80:	60a0      	str	r0, [r4, #8]
 8003f82:	4620      	mov	r0, r4
 8003f84:	f000 f818 	bl	8003fb8 <__sfp>
 8003f88:	2200      	movs	r2, #0
 8003f8a:	60e0      	str	r0, [r4, #12]
 8003f8c:	2104      	movs	r1, #4
 8003f8e:	6860      	ldr	r0, [r4, #4]
 8003f90:	f7ff ff82 	bl	8003e98 <std>
 8003f94:	68a0      	ldr	r0, [r4, #8]
 8003f96:	2201      	movs	r2, #1
 8003f98:	2109      	movs	r1, #9
 8003f9a:	f7ff ff7d 	bl	8003e98 <std>
 8003f9e:	68e0      	ldr	r0, [r4, #12]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	2112      	movs	r1, #18
 8003fa4:	f7ff ff78 	bl	8003e98 <std>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	61a3      	str	r3, [r4, #24]
 8003fac:	e7d2      	b.n	8003f54 <__sinit+0xc>
 8003fae:	bf00      	nop
 8003fb0:	08004de8 	.word	0x08004de8
 8003fb4:	08003ee1 	.word	0x08003ee1

08003fb8 <__sfp>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	4607      	mov	r7, r0
 8003fbc:	f7ff ffac 	bl	8003f18 <__sfp_lock_acquire>
 8003fc0:	4b1e      	ldr	r3, [pc, #120]	; (800403c <__sfp+0x84>)
 8003fc2:	681e      	ldr	r6, [r3, #0]
 8003fc4:	69b3      	ldr	r3, [r6, #24]
 8003fc6:	b913      	cbnz	r3, 8003fce <__sfp+0x16>
 8003fc8:	4630      	mov	r0, r6
 8003fca:	f7ff ffbd 	bl	8003f48 <__sinit>
 8003fce:	3648      	adds	r6, #72	; 0x48
 8003fd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	d503      	bpl.n	8003fe0 <__sfp+0x28>
 8003fd8:	6833      	ldr	r3, [r6, #0]
 8003fda:	b30b      	cbz	r3, 8004020 <__sfp+0x68>
 8003fdc:	6836      	ldr	r6, [r6, #0]
 8003fde:	e7f7      	b.n	8003fd0 <__sfp+0x18>
 8003fe0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003fe4:	b9d5      	cbnz	r5, 800401c <__sfp+0x64>
 8003fe6:	4b16      	ldr	r3, [pc, #88]	; (8004040 <__sfp+0x88>)
 8003fe8:	60e3      	str	r3, [r4, #12]
 8003fea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003fee:	6665      	str	r5, [r4, #100]	; 0x64
 8003ff0:	f000 f847 	bl	8004082 <__retarget_lock_init_recursive>
 8003ff4:	f7ff ff96 	bl	8003f24 <__sfp_lock_release>
 8003ff8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ffc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004000:	6025      	str	r5, [r4, #0]
 8004002:	61a5      	str	r5, [r4, #24]
 8004004:	2208      	movs	r2, #8
 8004006:	4629      	mov	r1, r5
 8004008:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800400c:	f7ff ff24 	bl	8003e58 <memset>
 8004010:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004014:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004018:	4620      	mov	r0, r4
 800401a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800401c:	3468      	adds	r4, #104	; 0x68
 800401e:	e7d9      	b.n	8003fd4 <__sfp+0x1c>
 8004020:	2104      	movs	r1, #4
 8004022:	4638      	mov	r0, r7
 8004024:	f7ff ff62 	bl	8003eec <__sfmoreglue>
 8004028:	4604      	mov	r4, r0
 800402a:	6030      	str	r0, [r6, #0]
 800402c:	2800      	cmp	r0, #0
 800402e:	d1d5      	bne.n	8003fdc <__sfp+0x24>
 8004030:	f7ff ff78 	bl	8003f24 <__sfp_lock_release>
 8004034:	230c      	movs	r3, #12
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	e7ee      	b.n	8004018 <__sfp+0x60>
 800403a:	bf00      	nop
 800403c:	08004de8 	.word	0x08004de8
 8004040:	ffff0001 	.word	0xffff0001

08004044 <_fwalk_reent>:
 8004044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004048:	4606      	mov	r6, r0
 800404a:	4688      	mov	r8, r1
 800404c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004050:	2700      	movs	r7, #0
 8004052:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004056:	f1b9 0901 	subs.w	r9, r9, #1
 800405a:	d505      	bpl.n	8004068 <_fwalk_reent+0x24>
 800405c:	6824      	ldr	r4, [r4, #0]
 800405e:	2c00      	cmp	r4, #0
 8004060:	d1f7      	bne.n	8004052 <_fwalk_reent+0xe>
 8004062:	4638      	mov	r0, r7
 8004064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004068:	89ab      	ldrh	r3, [r5, #12]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d907      	bls.n	800407e <_fwalk_reent+0x3a>
 800406e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004072:	3301      	adds	r3, #1
 8004074:	d003      	beq.n	800407e <_fwalk_reent+0x3a>
 8004076:	4629      	mov	r1, r5
 8004078:	4630      	mov	r0, r6
 800407a:	47c0      	blx	r8
 800407c:	4307      	orrs	r7, r0
 800407e:	3568      	adds	r5, #104	; 0x68
 8004080:	e7e9      	b.n	8004056 <_fwalk_reent+0x12>

08004082 <__retarget_lock_init_recursive>:
 8004082:	4770      	bx	lr

08004084 <__retarget_lock_acquire_recursive>:
 8004084:	4770      	bx	lr

08004086 <__retarget_lock_release_recursive>:
 8004086:	4770      	bx	lr

08004088 <sbrk_aligned>:
 8004088:	b570      	push	{r4, r5, r6, lr}
 800408a:	4e0e      	ldr	r6, [pc, #56]	; (80040c4 <sbrk_aligned+0x3c>)
 800408c:	460c      	mov	r4, r1
 800408e:	6831      	ldr	r1, [r6, #0]
 8004090:	4605      	mov	r5, r0
 8004092:	b911      	cbnz	r1, 800409a <sbrk_aligned+0x12>
 8004094:	f000 fb7a 	bl	800478c <_sbrk_r>
 8004098:	6030      	str	r0, [r6, #0]
 800409a:	4621      	mov	r1, r4
 800409c:	4628      	mov	r0, r5
 800409e:	f000 fb75 	bl	800478c <_sbrk_r>
 80040a2:	1c43      	adds	r3, r0, #1
 80040a4:	d00a      	beq.n	80040bc <sbrk_aligned+0x34>
 80040a6:	1cc4      	adds	r4, r0, #3
 80040a8:	f024 0403 	bic.w	r4, r4, #3
 80040ac:	42a0      	cmp	r0, r4
 80040ae:	d007      	beq.n	80040c0 <sbrk_aligned+0x38>
 80040b0:	1a21      	subs	r1, r4, r0
 80040b2:	4628      	mov	r0, r5
 80040b4:	f000 fb6a 	bl	800478c <_sbrk_r>
 80040b8:	3001      	adds	r0, #1
 80040ba:	d101      	bne.n	80040c0 <sbrk_aligned+0x38>
 80040bc:	f04f 34ff 	mov.w	r4, #4294967295
 80040c0:	4620      	mov	r0, r4
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	20000178 	.word	0x20000178

080040c8 <_malloc_r>:
 80040c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040cc:	1ccd      	adds	r5, r1, #3
 80040ce:	f025 0503 	bic.w	r5, r5, #3
 80040d2:	3508      	adds	r5, #8
 80040d4:	2d0c      	cmp	r5, #12
 80040d6:	bf38      	it	cc
 80040d8:	250c      	movcc	r5, #12
 80040da:	2d00      	cmp	r5, #0
 80040dc:	4607      	mov	r7, r0
 80040de:	db01      	blt.n	80040e4 <_malloc_r+0x1c>
 80040e0:	42a9      	cmp	r1, r5
 80040e2:	d905      	bls.n	80040f0 <_malloc_r+0x28>
 80040e4:	230c      	movs	r3, #12
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	2600      	movs	r6, #0
 80040ea:	4630      	mov	r0, r6
 80040ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040f0:	4e2e      	ldr	r6, [pc, #184]	; (80041ac <_malloc_r+0xe4>)
 80040f2:	f000 fdbb 	bl	8004c6c <__malloc_lock>
 80040f6:	6833      	ldr	r3, [r6, #0]
 80040f8:	461c      	mov	r4, r3
 80040fa:	bb34      	cbnz	r4, 800414a <_malloc_r+0x82>
 80040fc:	4629      	mov	r1, r5
 80040fe:	4638      	mov	r0, r7
 8004100:	f7ff ffc2 	bl	8004088 <sbrk_aligned>
 8004104:	1c43      	adds	r3, r0, #1
 8004106:	4604      	mov	r4, r0
 8004108:	d14d      	bne.n	80041a6 <_malloc_r+0xde>
 800410a:	6834      	ldr	r4, [r6, #0]
 800410c:	4626      	mov	r6, r4
 800410e:	2e00      	cmp	r6, #0
 8004110:	d140      	bne.n	8004194 <_malloc_r+0xcc>
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	4631      	mov	r1, r6
 8004116:	4638      	mov	r0, r7
 8004118:	eb04 0803 	add.w	r8, r4, r3
 800411c:	f000 fb36 	bl	800478c <_sbrk_r>
 8004120:	4580      	cmp	r8, r0
 8004122:	d13a      	bne.n	800419a <_malloc_r+0xd2>
 8004124:	6821      	ldr	r1, [r4, #0]
 8004126:	3503      	adds	r5, #3
 8004128:	1a6d      	subs	r5, r5, r1
 800412a:	f025 0503 	bic.w	r5, r5, #3
 800412e:	3508      	adds	r5, #8
 8004130:	2d0c      	cmp	r5, #12
 8004132:	bf38      	it	cc
 8004134:	250c      	movcc	r5, #12
 8004136:	4629      	mov	r1, r5
 8004138:	4638      	mov	r0, r7
 800413a:	f7ff ffa5 	bl	8004088 <sbrk_aligned>
 800413e:	3001      	adds	r0, #1
 8004140:	d02b      	beq.n	800419a <_malloc_r+0xd2>
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	442b      	add	r3, r5
 8004146:	6023      	str	r3, [r4, #0]
 8004148:	e00e      	b.n	8004168 <_malloc_r+0xa0>
 800414a:	6822      	ldr	r2, [r4, #0]
 800414c:	1b52      	subs	r2, r2, r5
 800414e:	d41e      	bmi.n	800418e <_malloc_r+0xc6>
 8004150:	2a0b      	cmp	r2, #11
 8004152:	d916      	bls.n	8004182 <_malloc_r+0xba>
 8004154:	1961      	adds	r1, r4, r5
 8004156:	42a3      	cmp	r3, r4
 8004158:	6025      	str	r5, [r4, #0]
 800415a:	bf18      	it	ne
 800415c:	6059      	strne	r1, [r3, #4]
 800415e:	6863      	ldr	r3, [r4, #4]
 8004160:	bf08      	it	eq
 8004162:	6031      	streq	r1, [r6, #0]
 8004164:	5162      	str	r2, [r4, r5]
 8004166:	604b      	str	r3, [r1, #4]
 8004168:	4638      	mov	r0, r7
 800416a:	f104 060b 	add.w	r6, r4, #11
 800416e:	f000 fd83 	bl	8004c78 <__malloc_unlock>
 8004172:	f026 0607 	bic.w	r6, r6, #7
 8004176:	1d23      	adds	r3, r4, #4
 8004178:	1af2      	subs	r2, r6, r3
 800417a:	d0b6      	beq.n	80040ea <_malloc_r+0x22>
 800417c:	1b9b      	subs	r3, r3, r6
 800417e:	50a3      	str	r3, [r4, r2]
 8004180:	e7b3      	b.n	80040ea <_malloc_r+0x22>
 8004182:	6862      	ldr	r2, [r4, #4]
 8004184:	42a3      	cmp	r3, r4
 8004186:	bf0c      	ite	eq
 8004188:	6032      	streq	r2, [r6, #0]
 800418a:	605a      	strne	r2, [r3, #4]
 800418c:	e7ec      	b.n	8004168 <_malloc_r+0xa0>
 800418e:	4623      	mov	r3, r4
 8004190:	6864      	ldr	r4, [r4, #4]
 8004192:	e7b2      	b.n	80040fa <_malloc_r+0x32>
 8004194:	4634      	mov	r4, r6
 8004196:	6876      	ldr	r6, [r6, #4]
 8004198:	e7b9      	b.n	800410e <_malloc_r+0x46>
 800419a:	230c      	movs	r3, #12
 800419c:	603b      	str	r3, [r7, #0]
 800419e:	4638      	mov	r0, r7
 80041a0:	f000 fd6a 	bl	8004c78 <__malloc_unlock>
 80041a4:	e7a1      	b.n	80040ea <_malloc_r+0x22>
 80041a6:	6025      	str	r5, [r4, #0]
 80041a8:	e7de      	b.n	8004168 <_malloc_r+0xa0>
 80041aa:	bf00      	nop
 80041ac:	20000174 	.word	0x20000174

080041b0 <__sfputc_r>:
 80041b0:	6893      	ldr	r3, [r2, #8]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	b410      	push	{r4}
 80041b8:	6093      	str	r3, [r2, #8]
 80041ba:	da08      	bge.n	80041ce <__sfputc_r+0x1e>
 80041bc:	6994      	ldr	r4, [r2, #24]
 80041be:	42a3      	cmp	r3, r4
 80041c0:	db01      	blt.n	80041c6 <__sfputc_r+0x16>
 80041c2:	290a      	cmp	r1, #10
 80041c4:	d103      	bne.n	80041ce <__sfputc_r+0x1e>
 80041c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041ca:	f000 bb33 	b.w	8004834 <__swbuf_r>
 80041ce:	6813      	ldr	r3, [r2, #0]
 80041d0:	1c58      	adds	r0, r3, #1
 80041d2:	6010      	str	r0, [r2, #0]
 80041d4:	7019      	strb	r1, [r3, #0]
 80041d6:	4608      	mov	r0, r1
 80041d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041dc:	4770      	bx	lr

080041de <__sfputs_r>:
 80041de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e0:	4606      	mov	r6, r0
 80041e2:	460f      	mov	r7, r1
 80041e4:	4614      	mov	r4, r2
 80041e6:	18d5      	adds	r5, r2, r3
 80041e8:	42ac      	cmp	r4, r5
 80041ea:	d101      	bne.n	80041f0 <__sfputs_r+0x12>
 80041ec:	2000      	movs	r0, #0
 80041ee:	e007      	b.n	8004200 <__sfputs_r+0x22>
 80041f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041f4:	463a      	mov	r2, r7
 80041f6:	4630      	mov	r0, r6
 80041f8:	f7ff ffda 	bl	80041b0 <__sfputc_r>
 80041fc:	1c43      	adds	r3, r0, #1
 80041fe:	d1f3      	bne.n	80041e8 <__sfputs_r+0xa>
 8004200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004204 <_vfiprintf_r>:
 8004204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004208:	460d      	mov	r5, r1
 800420a:	b09d      	sub	sp, #116	; 0x74
 800420c:	4614      	mov	r4, r2
 800420e:	4698      	mov	r8, r3
 8004210:	4606      	mov	r6, r0
 8004212:	b118      	cbz	r0, 800421c <_vfiprintf_r+0x18>
 8004214:	6983      	ldr	r3, [r0, #24]
 8004216:	b90b      	cbnz	r3, 800421c <_vfiprintf_r+0x18>
 8004218:	f7ff fe96 	bl	8003f48 <__sinit>
 800421c:	4b89      	ldr	r3, [pc, #548]	; (8004444 <_vfiprintf_r+0x240>)
 800421e:	429d      	cmp	r5, r3
 8004220:	d11b      	bne.n	800425a <_vfiprintf_r+0x56>
 8004222:	6875      	ldr	r5, [r6, #4]
 8004224:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004226:	07d9      	lsls	r1, r3, #31
 8004228:	d405      	bmi.n	8004236 <_vfiprintf_r+0x32>
 800422a:	89ab      	ldrh	r3, [r5, #12]
 800422c:	059a      	lsls	r2, r3, #22
 800422e:	d402      	bmi.n	8004236 <_vfiprintf_r+0x32>
 8004230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004232:	f7ff ff27 	bl	8004084 <__retarget_lock_acquire_recursive>
 8004236:	89ab      	ldrh	r3, [r5, #12]
 8004238:	071b      	lsls	r3, r3, #28
 800423a:	d501      	bpl.n	8004240 <_vfiprintf_r+0x3c>
 800423c:	692b      	ldr	r3, [r5, #16]
 800423e:	b9eb      	cbnz	r3, 800427c <_vfiprintf_r+0x78>
 8004240:	4629      	mov	r1, r5
 8004242:	4630      	mov	r0, r6
 8004244:	f000 fb5a 	bl	80048fc <__swsetup_r>
 8004248:	b1c0      	cbz	r0, 800427c <_vfiprintf_r+0x78>
 800424a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800424c:	07dc      	lsls	r4, r3, #31
 800424e:	d50e      	bpl.n	800426e <_vfiprintf_r+0x6a>
 8004250:	f04f 30ff 	mov.w	r0, #4294967295
 8004254:	b01d      	add	sp, #116	; 0x74
 8004256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800425a:	4b7b      	ldr	r3, [pc, #492]	; (8004448 <_vfiprintf_r+0x244>)
 800425c:	429d      	cmp	r5, r3
 800425e:	d101      	bne.n	8004264 <_vfiprintf_r+0x60>
 8004260:	68b5      	ldr	r5, [r6, #8]
 8004262:	e7df      	b.n	8004224 <_vfiprintf_r+0x20>
 8004264:	4b79      	ldr	r3, [pc, #484]	; (800444c <_vfiprintf_r+0x248>)
 8004266:	429d      	cmp	r5, r3
 8004268:	bf08      	it	eq
 800426a:	68f5      	ldreq	r5, [r6, #12]
 800426c:	e7da      	b.n	8004224 <_vfiprintf_r+0x20>
 800426e:	89ab      	ldrh	r3, [r5, #12]
 8004270:	0598      	lsls	r0, r3, #22
 8004272:	d4ed      	bmi.n	8004250 <_vfiprintf_r+0x4c>
 8004274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004276:	f7ff ff06 	bl	8004086 <__retarget_lock_release_recursive>
 800427a:	e7e9      	b.n	8004250 <_vfiprintf_r+0x4c>
 800427c:	2300      	movs	r3, #0
 800427e:	9309      	str	r3, [sp, #36]	; 0x24
 8004280:	2320      	movs	r3, #32
 8004282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004286:	f8cd 800c 	str.w	r8, [sp, #12]
 800428a:	2330      	movs	r3, #48	; 0x30
 800428c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004450 <_vfiprintf_r+0x24c>
 8004290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004294:	f04f 0901 	mov.w	r9, #1
 8004298:	4623      	mov	r3, r4
 800429a:	469a      	mov	sl, r3
 800429c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042a0:	b10a      	cbz	r2, 80042a6 <_vfiprintf_r+0xa2>
 80042a2:	2a25      	cmp	r2, #37	; 0x25
 80042a4:	d1f9      	bne.n	800429a <_vfiprintf_r+0x96>
 80042a6:	ebba 0b04 	subs.w	fp, sl, r4
 80042aa:	d00b      	beq.n	80042c4 <_vfiprintf_r+0xc0>
 80042ac:	465b      	mov	r3, fp
 80042ae:	4622      	mov	r2, r4
 80042b0:	4629      	mov	r1, r5
 80042b2:	4630      	mov	r0, r6
 80042b4:	f7ff ff93 	bl	80041de <__sfputs_r>
 80042b8:	3001      	adds	r0, #1
 80042ba:	f000 80aa 	beq.w	8004412 <_vfiprintf_r+0x20e>
 80042be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042c0:	445a      	add	r2, fp
 80042c2:	9209      	str	r2, [sp, #36]	; 0x24
 80042c4:	f89a 3000 	ldrb.w	r3, [sl]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80a2 	beq.w	8004412 <_vfiprintf_r+0x20e>
 80042ce:	2300      	movs	r3, #0
 80042d0:	f04f 32ff 	mov.w	r2, #4294967295
 80042d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042d8:	f10a 0a01 	add.w	sl, sl, #1
 80042dc:	9304      	str	r3, [sp, #16]
 80042de:	9307      	str	r3, [sp, #28]
 80042e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042e4:	931a      	str	r3, [sp, #104]	; 0x68
 80042e6:	4654      	mov	r4, sl
 80042e8:	2205      	movs	r2, #5
 80042ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042ee:	4858      	ldr	r0, [pc, #352]	; (8004450 <_vfiprintf_r+0x24c>)
 80042f0:	f7fb ff6e 	bl	80001d0 <memchr>
 80042f4:	9a04      	ldr	r2, [sp, #16]
 80042f6:	b9d8      	cbnz	r0, 8004330 <_vfiprintf_r+0x12c>
 80042f8:	06d1      	lsls	r1, r2, #27
 80042fa:	bf44      	itt	mi
 80042fc:	2320      	movmi	r3, #32
 80042fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004302:	0713      	lsls	r3, r2, #28
 8004304:	bf44      	itt	mi
 8004306:	232b      	movmi	r3, #43	; 0x2b
 8004308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800430c:	f89a 3000 	ldrb.w	r3, [sl]
 8004310:	2b2a      	cmp	r3, #42	; 0x2a
 8004312:	d015      	beq.n	8004340 <_vfiprintf_r+0x13c>
 8004314:	9a07      	ldr	r2, [sp, #28]
 8004316:	4654      	mov	r4, sl
 8004318:	2000      	movs	r0, #0
 800431a:	f04f 0c0a 	mov.w	ip, #10
 800431e:	4621      	mov	r1, r4
 8004320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004324:	3b30      	subs	r3, #48	; 0x30
 8004326:	2b09      	cmp	r3, #9
 8004328:	d94e      	bls.n	80043c8 <_vfiprintf_r+0x1c4>
 800432a:	b1b0      	cbz	r0, 800435a <_vfiprintf_r+0x156>
 800432c:	9207      	str	r2, [sp, #28]
 800432e:	e014      	b.n	800435a <_vfiprintf_r+0x156>
 8004330:	eba0 0308 	sub.w	r3, r0, r8
 8004334:	fa09 f303 	lsl.w	r3, r9, r3
 8004338:	4313      	orrs	r3, r2
 800433a:	9304      	str	r3, [sp, #16]
 800433c:	46a2      	mov	sl, r4
 800433e:	e7d2      	b.n	80042e6 <_vfiprintf_r+0xe2>
 8004340:	9b03      	ldr	r3, [sp, #12]
 8004342:	1d19      	adds	r1, r3, #4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	9103      	str	r1, [sp, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	bfbb      	ittet	lt
 800434c:	425b      	neglt	r3, r3
 800434e:	f042 0202 	orrlt.w	r2, r2, #2
 8004352:	9307      	strge	r3, [sp, #28]
 8004354:	9307      	strlt	r3, [sp, #28]
 8004356:	bfb8      	it	lt
 8004358:	9204      	strlt	r2, [sp, #16]
 800435a:	7823      	ldrb	r3, [r4, #0]
 800435c:	2b2e      	cmp	r3, #46	; 0x2e
 800435e:	d10c      	bne.n	800437a <_vfiprintf_r+0x176>
 8004360:	7863      	ldrb	r3, [r4, #1]
 8004362:	2b2a      	cmp	r3, #42	; 0x2a
 8004364:	d135      	bne.n	80043d2 <_vfiprintf_r+0x1ce>
 8004366:	9b03      	ldr	r3, [sp, #12]
 8004368:	1d1a      	adds	r2, r3, #4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	9203      	str	r2, [sp, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	bfb8      	it	lt
 8004372:	f04f 33ff 	movlt.w	r3, #4294967295
 8004376:	3402      	adds	r4, #2
 8004378:	9305      	str	r3, [sp, #20]
 800437a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004460 <_vfiprintf_r+0x25c>
 800437e:	7821      	ldrb	r1, [r4, #0]
 8004380:	2203      	movs	r2, #3
 8004382:	4650      	mov	r0, sl
 8004384:	f7fb ff24 	bl	80001d0 <memchr>
 8004388:	b140      	cbz	r0, 800439c <_vfiprintf_r+0x198>
 800438a:	2340      	movs	r3, #64	; 0x40
 800438c:	eba0 000a 	sub.w	r0, r0, sl
 8004390:	fa03 f000 	lsl.w	r0, r3, r0
 8004394:	9b04      	ldr	r3, [sp, #16]
 8004396:	4303      	orrs	r3, r0
 8004398:	3401      	adds	r4, #1
 800439a:	9304      	str	r3, [sp, #16]
 800439c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a0:	482c      	ldr	r0, [pc, #176]	; (8004454 <_vfiprintf_r+0x250>)
 80043a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043a6:	2206      	movs	r2, #6
 80043a8:	f7fb ff12 	bl	80001d0 <memchr>
 80043ac:	2800      	cmp	r0, #0
 80043ae:	d03f      	beq.n	8004430 <_vfiprintf_r+0x22c>
 80043b0:	4b29      	ldr	r3, [pc, #164]	; (8004458 <_vfiprintf_r+0x254>)
 80043b2:	bb1b      	cbnz	r3, 80043fc <_vfiprintf_r+0x1f8>
 80043b4:	9b03      	ldr	r3, [sp, #12]
 80043b6:	3307      	adds	r3, #7
 80043b8:	f023 0307 	bic.w	r3, r3, #7
 80043bc:	3308      	adds	r3, #8
 80043be:	9303      	str	r3, [sp, #12]
 80043c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043c2:	443b      	add	r3, r7
 80043c4:	9309      	str	r3, [sp, #36]	; 0x24
 80043c6:	e767      	b.n	8004298 <_vfiprintf_r+0x94>
 80043c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80043cc:	460c      	mov	r4, r1
 80043ce:	2001      	movs	r0, #1
 80043d0:	e7a5      	b.n	800431e <_vfiprintf_r+0x11a>
 80043d2:	2300      	movs	r3, #0
 80043d4:	3401      	adds	r4, #1
 80043d6:	9305      	str	r3, [sp, #20]
 80043d8:	4619      	mov	r1, r3
 80043da:	f04f 0c0a 	mov.w	ip, #10
 80043de:	4620      	mov	r0, r4
 80043e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043e4:	3a30      	subs	r2, #48	; 0x30
 80043e6:	2a09      	cmp	r2, #9
 80043e8:	d903      	bls.n	80043f2 <_vfiprintf_r+0x1ee>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0c5      	beq.n	800437a <_vfiprintf_r+0x176>
 80043ee:	9105      	str	r1, [sp, #20]
 80043f0:	e7c3      	b.n	800437a <_vfiprintf_r+0x176>
 80043f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80043f6:	4604      	mov	r4, r0
 80043f8:	2301      	movs	r3, #1
 80043fa:	e7f0      	b.n	80043de <_vfiprintf_r+0x1da>
 80043fc:	ab03      	add	r3, sp, #12
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	462a      	mov	r2, r5
 8004402:	4b16      	ldr	r3, [pc, #88]	; (800445c <_vfiprintf_r+0x258>)
 8004404:	a904      	add	r1, sp, #16
 8004406:	4630      	mov	r0, r6
 8004408:	f3af 8000 	nop.w
 800440c:	4607      	mov	r7, r0
 800440e:	1c78      	adds	r0, r7, #1
 8004410:	d1d6      	bne.n	80043c0 <_vfiprintf_r+0x1bc>
 8004412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004414:	07d9      	lsls	r1, r3, #31
 8004416:	d405      	bmi.n	8004424 <_vfiprintf_r+0x220>
 8004418:	89ab      	ldrh	r3, [r5, #12]
 800441a:	059a      	lsls	r2, r3, #22
 800441c:	d402      	bmi.n	8004424 <_vfiprintf_r+0x220>
 800441e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004420:	f7ff fe31 	bl	8004086 <__retarget_lock_release_recursive>
 8004424:	89ab      	ldrh	r3, [r5, #12]
 8004426:	065b      	lsls	r3, r3, #25
 8004428:	f53f af12 	bmi.w	8004250 <_vfiprintf_r+0x4c>
 800442c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800442e:	e711      	b.n	8004254 <_vfiprintf_r+0x50>
 8004430:	ab03      	add	r3, sp, #12
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	462a      	mov	r2, r5
 8004436:	4b09      	ldr	r3, [pc, #36]	; (800445c <_vfiprintf_r+0x258>)
 8004438:	a904      	add	r1, sp, #16
 800443a:	4630      	mov	r0, r6
 800443c:	f000 f880 	bl	8004540 <_printf_i>
 8004440:	e7e4      	b.n	800440c <_vfiprintf_r+0x208>
 8004442:	bf00      	nop
 8004444:	08004e0c 	.word	0x08004e0c
 8004448:	08004e2c 	.word	0x08004e2c
 800444c:	08004dec 	.word	0x08004dec
 8004450:	08004e4c 	.word	0x08004e4c
 8004454:	08004e56 	.word	0x08004e56
 8004458:	00000000 	.word	0x00000000
 800445c:	080041df 	.word	0x080041df
 8004460:	08004e52 	.word	0x08004e52

08004464 <_printf_common>:
 8004464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004468:	4616      	mov	r6, r2
 800446a:	4699      	mov	r9, r3
 800446c:	688a      	ldr	r2, [r1, #8]
 800446e:	690b      	ldr	r3, [r1, #16]
 8004470:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004474:	4293      	cmp	r3, r2
 8004476:	bfb8      	it	lt
 8004478:	4613      	movlt	r3, r2
 800447a:	6033      	str	r3, [r6, #0]
 800447c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004480:	4607      	mov	r7, r0
 8004482:	460c      	mov	r4, r1
 8004484:	b10a      	cbz	r2, 800448a <_printf_common+0x26>
 8004486:	3301      	adds	r3, #1
 8004488:	6033      	str	r3, [r6, #0]
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	0699      	lsls	r1, r3, #26
 800448e:	bf42      	ittt	mi
 8004490:	6833      	ldrmi	r3, [r6, #0]
 8004492:	3302      	addmi	r3, #2
 8004494:	6033      	strmi	r3, [r6, #0]
 8004496:	6825      	ldr	r5, [r4, #0]
 8004498:	f015 0506 	ands.w	r5, r5, #6
 800449c:	d106      	bne.n	80044ac <_printf_common+0x48>
 800449e:	f104 0a19 	add.w	sl, r4, #25
 80044a2:	68e3      	ldr	r3, [r4, #12]
 80044a4:	6832      	ldr	r2, [r6, #0]
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	42ab      	cmp	r3, r5
 80044aa:	dc26      	bgt.n	80044fa <_printf_common+0x96>
 80044ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044b0:	1e13      	subs	r3, r2, #0
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	bf18      	it	ne
 80044b6:	2301      	movne	r3, #1
 80044b8:	0692      	lsls	r2, r2, #26
 80044ba:	d42b      	bmi.n	8004514 <_printf_common+0xb0>
 80044bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044c0:	4649      	mov	r1, r9
 80044c2:	4638      	mov	r0, r7
 80044c4:	47c0      	blx	r8
 80044c6:	3001      	adds	r0, #1
 80044c8:	d01e      	beq.n	8004508 <_printf_common+0xa4>
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	68e5      	ldr	r5, [r4, #12]
 80044ce:	6832      	ldr	r2, [r6, #0]
 80044d0:	f003 0306 	and.w	r3, r3, #6
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	bf08      	it	eq
 80044d8:	1aad      	subeq	r5, r5, r2
 80044da:	68a3      	ldr	r3, [r4, #8]
 80044dc:	6922      	ldr	r2, [r4, #16]
 80044de:	bf0c      	ite	eq
 80044e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044e4:	2500      	movne	r5, #0
 80044e6:	4293      	cmp	r3, r2
 80044e8:	bfc4      	itt	gt
 80044ea:	1a9b      	subgt	r3, r3, r2
 80044ec:	18ed      	addgt	r5, r5, r3
 80044ee:	2600      	movs	r6, #0
 80044f0:	341a      	adds	r4, #26
 80044f2:	42b5      	cmp	r5, r6
 80044f4:	d11a      	bne.n	800452c <_printf_common+0xc8>
 80044f6:	2000      	movs	r0, #0
 80044f8:	e008      	b.n	800450c <_printf_common+0xa8>
 80044fa:	2301      	movs	r3, #1
 80044fc:	4652      	mov	r2, sl
 80044fe:	4649      	mov	r1, r9
 8004500:	4638      	mov	r0, r7
 8004502:	47c0      	blx	r8
 8004504:	3001      	adds	r0, #1
 8004506:	d103      	bne.n	8004510 <_printf_common+0xac>
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004510:	3501      	adds	r5, #1
 8004512:	e7c6      	b.n	80044a2 <_printf_common+0x3e>
 8004514:	18e1      	adds	r1, r4, r3
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	2030      	movs	r0, #48	; 0x30
 800451a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800451e:	4422      	add	r2, r4
 8004520:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004524:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004528:	3302      	adds	r3, #2
 800452a:	e7c7      	b.n	80044bc <_printf_common+0x58>
 800452c:	2301      	movs	r3, #1
 800452e:	4622      	mov	r2, r4
 8004530:	4649      	mov	r1, r9
 8004532:	4638      	mov	r0, r7
 8004534:	47c0      	blx	r8
 8004536:	3001      	adds	r0, #1
 8004538:	d0e6      	beq.n	8004508 <_printf_common+0xa4>
 800453a:	3601      	adds	r6, #1
 800453c:	e7d9      	b.n	80044f2 <_printf_common+0x8e>
	...

08004540 <_printf_i>:
 8004540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004544:	7e0f      	ldrb	r7, [r1, #24]
 8004546:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004548:	2f78      	cmp	r7, #120	; 0x78
 800454a:	4691      	mov	r9, r2
 800454c:	4680      	mov	r8, r0
 800454e:	460c      	mov	r4, r1
 8004550:	469a      	mov	sl, r3
 8004552:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004556:	d807      	bhi.n	8004568 <_printf_i+0x28>
 8004558:	2f62      	cmp	r7, #98	; 0x62
 800455a:	d80a      	bhi.n	8004572 <_printf_i+0x32>
 800455c:	2f00      	cmp	r7, #0
 800455e:	f000 80d8 	beq.w	8004712 <_printf_i+0x1d2>
 8004562:	2f58      	cmp	r7, #88	; 0x58
 8004564:	f000 80a3 	beq.w	80046ae <_printf_i+0x16e>
 8004568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800456c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004570:	e03a      	b.n	80045e8 <_printf_i+0xa8>
 8004572:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004576:	2b15      	cmp	r3, #21
 8004578:	d8f6      	bhi.n	8004568 <_printf_i+0x28>
 800457a:	a101      	add	r1, pc, #4	; (adr r1, 8004580 <_printf_i+0x40>)
 800457c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004580:	080045d9 	.word	0x080045d9
 8004584:	080045ed 	.word	0x080045ed
 8004588:	08004569 	.word	0x08004569
 800458c:	08004569 	.word	0x08004569
 8004590:	08004569 	.word	0x08004569
 8004594:	08004569 	.word	0x08004569
 8004598:	080045ed 	.word	0x080045ed
 800459c:	08004569 	.word	0x08004569
 80045a0:	08004569 	.word	0x08004569
 80045a4:	08004569 	.word	0x08004569
 80045a8:	08004569 	.word	0x08004569
 80045ac:	080046f9 	.word	0x080046f9
 80045b0:	0800461d 	.word	0x0800461d
 80045b4:	080046db 	.word	0x080046db
 80045b8:	08004569 	.word	0x08004569
 80045bc:	08004569 	.word	0x08004569
 80045c0:	0800471b 	.word	0x0800471b
 80045c4:	08004569 	.word	0x08004569
 80045c8:	0800461d 	.word	0x0800461d
 80045cc:	08004569 	.word	0x08004569
 80045d0:	08004569 	.word	0x08004569
 80045d4:	080046e3 	.word	0x080046e3
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	1d1a      	adds	r2, r3, #4
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	602a      	str	r2, [r5, #0]
 80045e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0a3      	b.n	8004734 <_printf_i+0x1f4>
 80045ec:	6820      	ldr	r0, [r4, #0]
 80045ee:	6829      	ldr	r1, [r5, #0]
 80045f0:	0606      	lsls	r6, r0, #24
 80045f2:	f101 0304 	add.w	r3, r1, #4
 80045f6:	d50a      	bpl.n	800460e <_printf_i+0xce>
 80045f8:	680e      	ldr	r6, [r1, #0]
 80045fa:	602b      	str	r3, [r5, #0]
 80045fc:	2e00      	cmp	r6, #0
 80045fe:	da03      	bge.n	8004608 <_printf_i+0xc8>
 8004600:	232d      	movs	r3, #45	; 0x2d
 8004602:	4276      	negs	r6, r6
 8004604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004608:	485e      	ldr	r0, [pc, #376]	; (8004784 <_printf_i+0x244>)
 800460a:	230a      	movs	r3, #10
 800460c:	e019      	b.n	8004642 <_printf_i+0x102>
 800460e:	680e      	ldr	r6, [r1, #0]
 8004610:	602b      	str	r3, [r5, #0]
 8004612:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004616:	bf18      	it	ne
 8004618:	b236      	sxthne	r6, r6
 800461a:	e7ef      	b.n	80045fc <_printf_i+0xbc>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	6820      	ldr	r0, [r4, #0]
 8004620:	1d19      	adds	r1, r3, #4
 8004622:	6029      	str	r1, [r5, #0]
 8004624:	0601      	lsls	r1, r0, #24
 8004626:	d501      	bpl.n	800462c <_printf_i+0xec>
 8004628:	681e      	ldr	r6, [r3, #0]
 800462a:	e002      	b.n	8004632 <_printf_i+0xf2>
 800462c:	0646      	lsls	r6, r0, #25
 800462e:	d5fb      	bpl.n	8004628 <_printf_i+0xe8>
 8004630:	881e      	ldrh	r6, [r3, #0]
 8004632:	4854      	ldr	r0, [pc, #336]	; (8004784 <_printf_i+0x244>)
 8004634:	2f6f      	cmp	r7, #111	; 0x6f
 8004636:	bf0c      	ite	eq
 8004638:	2308      	moveq	r3, #8
 800463a:	230a      	movne	r3, #10
 800463c:	2100      	movs	r1, #0
 800463e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004642:	6865      	ldr	r5, [r4, #4]
 8004644:	60a5      	str	r5, [r4, #8]
 8004646:	2d00      	cmp	r5, #0
 8004648:	bfa2      	ittt	ge
 800464a:	6821      	ldrge	r1, [r4, #0]
 800464c:	f021 0104 	bicge.w	r1, r1, #4
 8004650:	6021      	strge	r1, [r4, #0]
 8004652:	b90e      	cbnz	r6, 8004658 <_printf_i+0x118>
 8004654:	2d00      	cmp	r5, #0
 8004656:	d04d      	beq.n	80046f4 <_printf_i+0x1b4>
 8004658:	4615      	mov	r5, r2
 800465a:	fbb6 f1f3 	udiv	r1, r6, r3
 800465e:	fb03 6711 	mls	r7, r3, r1, r6
 8004662:	5dc7      	ldrb	r7, [r0, r7]
 8004664:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004668:	4637      	mov	r7, r6
 800466a:	42bb      	cmp	r3, r7
 800466c:	460e      	mov	r6, r1
 800466e:	d9f4      	bls.n	800465a <_printf_i+0x11a>
 8004670:	2b08      	cmp	r3, #8
 8004672:	d10b      	bne.n	800468c <_printf_i+0x14c>
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	07de      	lsls	r6, r3, #31
 8004678:	d508      	bpl.n	800468c <_printf_i+0x14c>
 800467a:	6923      	ldr	r3, [r4, #16]
 800467c:	6861      	ldr	r1, [r4, #4]
 800467e:	4299      	cmp	r1, r3
 8004680:	bfde      	ittt	le
 8004682:	2330      	movle	r3, #48	; 0x30
 8004684:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004688:	f105 35ff 	addle.w	r5, r5, #4294967295
 800468c:	1b52      	subs	r2, r2, r5
 800468e:	6122      	str	r2, [r4, #16]
 8004690:	f8cd a000 	str.w	sl, [sp]
 8004694:	464b      	mov	r3, r9
 8004696:	aa03      	add	r2, sp, #12
 8004698:	4621      	mov	r1, r4
 800469a:	4640      	mov	r0, r8
 800469c:	f7ff fee2 	bl	8004464 <_printf_common>
 80046a0:	3001      	adds	r0, #1
 80046a2:	d14c      	bne.n	800473e <_printf_i+0x1fe>
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295
 80046a8:	b004      	add	sp, #16
 80046aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ae:	4835      	ldr	r0, [pc, #212]	; (8004784 <_printf_i+0x244>)
 80046b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046b4:	6829      	ldr	r1, [r5, #0]
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80046bc:	6029      	str	r1, [r5, #0]
 80046be:	061d      	lsls	r5, r3, #24
 80046c0:	d514      	bpl.n	80046ec <_printf_i+0x1ac>
 80046c2:	07df      	lsls	r7, r3, #31
 80046c4:	bf44      	itt	mi
 80046c6:	f043 0320 	orrmi.w	r3, r3, #32
 80046ca:	6023      	strmi	r3, [r4, #0]
 80046cc:	b91e      	cbnz	r6, 80046d6 <_printf_i+0x196>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	f023 0320 	bic.w	r3, r3, #32
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	2310      	movs	r3, #16
 80046d8:	e7b0      	b.n	800463c <_printf_i+0xfc>
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	f043 0320 	orr.w	r3, r3, #32
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	2378      	movs	r3, #120	; 0x78
 80046e4:	4828      	ldr	r0, [pc, #160]	; (8004788 <_printf_i+0x248>)
 80046e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046ea:	e7e3      	b.n	80046b4 <_printf_i+0x174>
 80046ec:	0659      	lsls	r1, r3, #25
 80046ee:	bf48      	it	mi
 80046f0:	b2b6      	uxthmi	r6, r6
 80046f2:	e7e6      	b.n	80046c2 <_printf_i+0x182>
 80046f4:	4615      	mov	r5, r2
 80046f6:	e7bb      	b.n	8004670 <_printf_i+0x130>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	6826      	ldr	r6, [r4, #0]
 80046fc:	6961      	ldr	r1, [r4, #20]
 80046fe:	1d18      	adds	r0, r3, #4
 8004700:	6028      	str	r0, [r5, #0]
 8004702:	0635      	lsls	r5, r6, #24
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	d501      	bpl.n	800470c <_printf_i+0x1cc>
 8004708:	6019      	str	r1, [r3, #0]
 800470a:	e002      	b.n	8004712 <_printf_i+0x1d2>
 800470c:	0670      	lsls	r0, r6, #25
 800470e:	d5fb      	bpl.n	8004708 <_printf_i+0x1c8>
 8004710:	8019      	strh	r1, [r3, #0]
 8004712:	2300      	movs	r3, #0
 8004714:	6123      	str	r3, [r4, #16]
 8004716:	4615      	mov	r5, r2
 8004718:	e7ba      	b.n	8004690 <_printf_i+0x150>
 800471a:	682b      	ldr	r3, [r5, #0]
 800471c:	1d1a      	adds	r2, r3, #4
 800471e:	602a      	str	r2, [r5, #0]
 8004720:	681d      	ldr	r5, [r3, #0]
 8004722:	6862      	ldr	r2, [r4, #4]
 8004724:	2100      	movs	r1, #0
 8004726:	4628      	mov	r0, r5
 8004728:	f7fb fd52 	bl	80001d0 <memchr>
 800472c:	b108      	cbz	r0, 8004732 <_printf_i+0x1f2>
 800472e:	1b40      	subs	r0, r0, r5
 8004730:	6060      	str	r0, [r4, #4]
 8004732:	6863      	ldr	r3, [r4, #4]
 8004734:	6123      	str	r3, [r4, #16]
 8004736:	2300      	movs	r3, #0
 8004738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800473c:	e7a8      	b.n	8004690 <_printf_i+0x150>
 800473e:	6923      	ldr	r3, [r4, #16]
 8004740:	462a      	mov	r2, r5
 8004742:	4649      	mov	r1, r9
 8004744:	4640      	mov	r0, r8
 8004746:	47d0      	blx	sl
 8004748:	3001      	adds	r0, #1
 800474a:	d0ab      	beq.n	80046a4 <_printf_i+0x164>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	079b      	lsls	r3, r3, #30
 8004750:	d413      	bmi.n	800477a <_printf_i+0x23a>
 8004752:	68e0      	ldr	r0, [r4, #12]
 8004754:	9b03      	ldr	r3, [sp, #12]
 8004756:	4298      	cmp	r0, r3
 8004758:	bfb8      	it	lt
 800475a:	4618      	movlt	r0, r3
 800475c:	e7a4      	b.n	80046a8 <_printf_i+0x168>
 800475e:	2301      	movs	r3, #1
 8004760:	4632      	mov	r2, r6
 8004762:	4649      	mov	r1, r9
 8004764:	4640      	mov	r0, r8
 8004766:	47d0      	blx	sl
 8004768:	3001      	adds	r0, #1
 800476a:	d09b      	beq.n	80046a4 <_printf_i+0x164>
 800476c:	3501      	adds	r5, #1
 800476e:	68e3      	ldr	r3, [r4, #12]
 8004770:	9903      	ldr	r1, [sp, #12]
 8004772:	1a5b      	subs	r3, r3, r1
 8004774:	42ab      	cmp	r3, r5
 8004776:	dcf2      	bgt.n	800475e <_printf_i+0x21e>
 8004778:	e7eb      	b.n	8004752 <_printf_i+0x212>
 800477a:	2500      	movs	r5, #0
 800477c:	f104 0619 	add.w	r6, r4, #25
 8004780:	e7f5      	b.n	800476e <_printf_i+0x22e>
 8004782:	bf00      	nop
 8004784:	08004e5d 	.word	0x08004e5d
 8004788:	08004e6e 	.word	0x08004e6e

0800478c <_sbrk_r>:
 800478c:	b538      	push	{r3, r4, r5, lr}
 800478e:	4d06      	ldr	r5, [pc, #24]	; (80047a8 <_sbrk_r+0x1c>)
 8004790:	2300      	movs	r3, #0
 8004792:	4604      	mov	r4, r0
 8004794:	4608      	mov	r0, r1
 8004796:	602b      	str	r3, [r5, #0]
 8004798:	f7fc f8ae 	bl	80008f8 <_sbrk>
 800479c:	1c43      	adds	r3, r0, #1
 800479e:	d102      	bne.n	80047a6 <_sbrk_r+0x1a>
 80047a0:	682b      	ldr	r3, [r5, #0]
 80047a2:	b103      	cbz	r3, 80047a6 <_sbrk_r+0x1a>
 80047a4:	6023      	str	r3, [r4, #0]
 80047a6:	bd38      	pop	{r3, r4, r5, pc}
 80047a8:	2000017c 	.word	0x2000017c

080047ac <__sread>:
 80047ac:	b510      	push	{r4, lr}
 80047ae:	460c      	mov	r4, r1
 80047b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047b4:	f000 fab2 	bl	8004d1c <_read_r>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	bfab      	itete	ge
 80047bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047be:	89a3      	ldrhlt	r3, [r4, #12]
 80047c0:	181b      	addge	r3, r3, r0
 80047c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047c6:	bfac      	ite	ge
 80047c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80047ca:	81a3      	strhlt	r3, [r4, #12]
 80047cc:	bd10      	pop	{r4, pc}

080047ce <__swrite>:
 80047ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d2:	461f      	mov	r7, r3
 80047d4:	898b      	ldrh	r3, [r1, #12]
 80047d6:	05db      	lsls	r3, r3, #23
 80047d8:	4605      	mov	r5, r0
 80047da:	460c      	mov	r4, r1
 80047dc:	4616      	mov	r6, r2
 80047de:	d505      	bpl.n	80047ec <__swrite+0x1e>
 80047e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e4:	2302      	movs	r3, #2
 80047e6:	2200      	movs	r2, #0
 80047e8:	f000 f9c8 	bl	8004b7c <_lseek_r>
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047f6:	81a3      	strh	r3, [r4, #12]
 80047f8:	4632      	mov	r2, r6
 80047fa:	463b      	mov	r3, r7
 80047fc:	4628      	mov	r0, r5
 80047fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004802:	f000 b869 	b.w	80048d8 <_write_r>

08004806 <__sseek>:
 8004806:	b510      	push	{r4, lr}
 8004808:	460c      	mov	r4, r1
 800480a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800480e:	f000 f9b5 	bl	8004b7c <_lseek_r>
 8004812:	1c43      	adds	r3, r0, #1
 8004814:	89a3      	ldrh	r3, [r4, #12]
 8004816:	bf15      	itete	ne
 8004818:	6560      	strne	r0, [r4, #84]	; 0x54
 800481a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800481e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004822:	81a3      	strheq	r3, [r4, #12]
 8004824:	bf18      	it	ne
 8004826:	81a3      	strhne	r3, [r4, #12]
 8004828:	bd10      	pop	{r4, pc}

0800482a <__sclose>:
 800482a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800482e:	f000 b8d3 	b.w	80049d8 <_close_r>
	...

08004834 <__swbuf_r>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	460e      	mov	r6, r1
 8004838:	4614      	mov	r4, r2
 800483a:	4605      	mov	r5, r0
 800483c:	b118      	cbz	r0, 8004846 <__swbuf_r+0x12>
 800483e:	6983      	ldr	r3, [r0, #24]
 8004840:	b90b      	cbnz	r3, 8004846 <__swbuf_r+0x12>
 8004842:	f7ff fb81 	bl	8003f48 <__sinit>
 8004846:	4b21      	ldr	r3, [pc, #132]	; (80048cc <__swbuf_r+0x98>)
 8004848:	429c      	cmp	r4, r3
 800484a:	d12b      	bne.n	80048a4 <__swbuf_r+0x70>
 800484c:	686c      	ldr	r4, [r5, #4]
 800484e:	69a3      	ldr	r3, [r4, #24]
 8004850:	60a3      	str	r3, [r4, #8]
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	071a      	lsls	r2, r3, #28
 8004856:	d52f      	bpl.n	80048b8 <__swbuf_r+0x84>
 8004858:	6923      	ldr	r3, [r4, #16]
 800485a:	b36b      	cbz	r3, 80048b8 <__swbuf_r+0x84>
 800485c:	6923      	ldr	r3, [r4, #16]
 800485e:	6820      	ldr	r0, [r4, #0]
 8004860:	1ac0      	subs	r0, r0, r3
 8004862:	6963      	ldr	r3, [r4, #20]
 8004864:	b2f6      	uxtb	r6, r6
 8004866:	4283      	cmp	r3, r0
 8004868:	4637      	mov	r7, r6
 800486a:	dc04      	bgt.n	8004876 <__swbuf_r+0x42>
 800486c:	4621      	mov	r1, r4
 800486e:	4628      	mov	r0, r5
 8004870:	f000 f948 	bl	8004b04 <_fflush_r>
 8004874:	bb30      	cbnz	r0, 80048c4 <__swbuf_r+0x90>
 8004876:	68a3      	ldr	r3, [r4, #8]
 8004878:	3b01      	subs	r3, #1
 800487a:	60a3      	str	r3, [r4, #8]
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	6022      	str	r2, [r4, #0]
 8004882:	701e      	strb	r6, [r3, #0]
 8004884:	6963      	ldr	r3, [r4, #20]
 8004886:	3001      	adds	r0, #1
 8004888:	4283      	cmp	r3, r0
 800488a:	d004      	beq.n	8004896 <__swbuf_r+0x62>
 800488c:	89a3      	ldrh	r3, [r4, #12]
 800488e:	07db      	lsls	r3, r3, #31
 8004890:	d506      	bpl.n	80048a0 <__swbuf_r+0x6c>
 8004892:	2e0a      	cmp	r6, #10
 8004894:	d104      	bne.n	80048a0 <__swbuf_r+0x6c>
 8004896:	4621      	mov	r1, r4
 8004898:	4628      	mov	r0, r5
 800489a:	f000 f933 	bl	8004b04 <_fflush_r>
 800489e:	b988      	cbnz	r0, 80048c4 <__swbuf_r+0x90>
 80048a0:	4638      	mov	r0, r7
 80048a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048a4:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <__swbuf_r+0x9c>)
 80048a6:	429c      	cmp	r4, r3
 80048a8:	d101      	bne.n	80048ae <__swbuf_r+0x7a>
 80048aa:	68ac      	ldr	r4, [r5, #8]
 80048ac:	e7cf      	b.n	800484e <__swbuf_r+0x1a>
 80048ae:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <__swbuf_r+0xa0>)
 80048b0:	429c      	cmp	r4, r3
 80048b2:	bf08      	it	eq
 80048b4:	68ec      	ldreq	r4, [r5, #12]
 80048b6:	e7ca      	b.n	800484e <__swbuf_r+0x1a>
 80048b8:	4621      	mov	r1, r4
 80048ba:	4628      	mov	r0, r5
 80048bc:	f000 f81e 	bl	80048fc <__swsetup_r>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d0cb      	beq.n	800485c <__swbuf_r+0x28>
 80048c4:	f04f 37ff 	mov.w	r7, #4294967295
 80048c8:	e7ea      	b.n	80048a0 <__swbuf_r+0x6c>
 80048ca:	bf00      	nop
 80048cc:	08004e0c 	.word	0x08004e0c
 80048d0:	08004e2c 	.word	0x08004e2c
 80048d4:	08004dec 	.word	0x08004dec

080048d8 <_write_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4d07      	ldr	r5, [pc, #28]	; (80048f8 <_write_r+0x20>)
 80048dc:	4604      	mov	r4, r0
 80048de:	4608      	mov	r0, r1
 80048e0:	4611      	mov	r1, r2
 80048e2:	2200      	movs	r2, #0
 80048e4:	602a      	str	r2, [r5, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f7fb ffb5 	bl	8000856 <_write>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	d102      	bne.n	80048f6 <_write_r+0x1e>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	b103      	cbz	r3, 80048f6 <_write_r+0x1e>
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
 80048f8:	2000017c 	.word	0x2000017c

080048fc <__swsetup_r>:
 80048fc:	4b32      	ldr	r3, [pc, #200]	; (80049c8 <__swsetup_r+0xcc>)
 80048fe:	b570      	push	{r4, r5, r6, lr}
 8004900:	681d      	ldr	r5, [r3, #0]
 8004902:	4606      	mov	r6, r0
 8004904:	460c      	mov	r4, r1
 8004906:	b125      	cbz	r5, 8004912 <__swsetup_r+0x16>
 8004908:	69ab      	ldr	r3, [r5, #24]
 800490a:	b913      	cbnz	r3, 8004912 <__swsetup_r+0x16>
 800490c:	4628      	mov	r0, r5
 800490e:	f7ff fb1b 	bl	8003f48 <__sinit>
 8004912:	4b2e      	ldr	r3, [pc, #184]	; (80049cc <__swsetup_r+0xd0>)
 8004914:	429c      	cmp	r4, r3
 8004916:	d10f      	bne.n	8004938 <__swsetup_r+0x3c>
 8004918:	686c      	ldr	r4, [r5, #4]
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004920:	0719      	lsls	r1, r3, #28
 8004922:	d42c      	bmi.n	800497e <__swsetup_r+0x82>
 8004924:	06dd      	lsls	r5, r3, #27
 8004926:	d411      	bmi.n	800494c <__swsetup_r+0x50>
 8004928:	2309      	movs	r3, #9
 800492a:	6033      	str	r3, [r6, #0]
 800492c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004930:	81a3      	strh	r3, [r4, #12]
 8004932:	f04f 30ff 	mov.w	r0, #4294967295
 8004936:	e03e      	b.n	80049b6 <__swsetup_r+0xba>
 8004938:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <__swsetup_r+0xd4>)
 800493a:	429c      	cmp	r4, r3
 800493c:	d101      	bne.n	8004942 <__swsetup_r+0x46>
 800493e:	68ac      	ldr	r4, [r5, #8]
 8004940:	e7eb      	b.n	800491a <__swsetup_r+0x1e>
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <__swsetup_r+0xd8>)
 8004944:	429c      	cmp	r4, r3
 8004946:	bf08      	it	eq
 8004948:	68ec      	ldreq	r4, [r5, #12]
 800494a:	e7e6      	b.n	800491a <__swsetup_r+0x1e>
 800494c:	0758      	lsls	r0, r3, #29
 800494e:	d512      	bpl.n	8004976 <__swsetup_r+0x7a>
 8004950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004952:	b141      	cbz	r1, 8004966 <__swsetup_r+0x6a>
 8004954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004958:	4299      	cmp	r1, r3
 800495a:	d002      	beq.n	8004962 <__swsetup_r+0x66>
 800495c:	4630      	mov	r0, r6
 800495e:	f000 f991 	bl	8004c84 <_free_r>
 8004962:	2300      	movs	r3, #0
 8004964:	6363      	str	r3, [r4, #52]	; 0x34
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800496c:	81a3      	strh	r3, [r4, #12]
 800496e:	2300      	movs	r3, #0
 8004970:	6063      	str	r3, [r4, #4]
 8004972:	6923      	ldr	r3, [r4, #16]
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	89a3      	ldrh	r3, [r4, #12]
 8004978:	f043 0308 	orr.w	r3, r3, #8
 800497c:	81a3      	strh	r3, [r4, #12]
 800497e:	6923      	ldr	r3, [r4, #16]
 8004980:	b94b      	cbnz	r3, 8004996 <__swsetup_r+0x9a>
 8004982:	89a3      	ldrh	r3, [r4, #12]
 8004984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800498c:	d003      	beq.n	8004996 <__swsetup_r+0x9a>
 800498e:	4621      	mov	r1, r4
 8004990:	4630      	mov	r0, r6
 8004992:	f000 f92b 	bl	8004bec <__smakebuf_r>
 8004996:	89a0      	ldrh	r0, [r4, #12]
 8004998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800499c:	f010 0301 	ands.w	r3, r0, #1
 80049a0:	d00a      	beq.n	80049b8 <__swsetup_r+0xbc>
 80049a2:	2300      	movs	r3, #0
 80049a4:	60a3      	str	r3, [r4, #8]
 80049a6:	6963      	ldr	r3, [r4, #20]
 80049a8:	425b      	negs	r3, r3
 80049aa:	61a3      	str	r3, [r4, #24]
 80049ac:	6923      	ldr	r3, [r4, #16]
 80049ae:	b943      	cbnz	r3, 80049c2 <__swsetup_r+0xc6>
 80049b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049b4:	d1ba      	bne.n	800492c <__swsetup_r+0x30>
 80049b6:	bd70      	pop	{r4, r5, r6, pc}
 80049b8:	0781      	lsls	r1, r0, #30
 80049ba:	bf58      	it	pl
 80049bc:	6963      	ldrpl	r3, [r4, #20]
 80049be:	60a3      	str	r3, [r4, #8]
 80049c0:	e7f4      	b.n	80049ac <__swsetup_r+0xb0>
 80049c2:	2000      	movs	r0, #0
 80049c4:	e7f7      	b.n	80049b6 <__swsetup_r+0xba>
 80049c6:	bf00      	nop
 80049c8:	2000000c 	.word	0x2000000c
 80049cc:	08004e0c 	.word	0x08004e0c
 80049d0:	08004e2c 	.word	0x08004e2c
 80049d4:	08004dec 	.word	0x08004dec

080049d8 <_close_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	4d06      	ldr	r5, [pc, #24]	; (80049f4 <_close_r+0x1c>)
 80049dc:	2300      	movs	r3, #0
 80049de:	4604      	mov	r4, r0
 80049e0:	4608      	mov	r0, r1
 80049e2:	602b      	str	r3, [r5, #0]
 80049e4:	f7fb ff53 	bl	800088e <_close>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_close_r+0x1a>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_close_r+0x1a>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	2000017c 	.word	0x2000017c

080049f8 <__sflush_r>:
 80049f8:	898a      	ldrh	r2, [r1, #12]
 80049fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049fe:	4605      	mov	r5, r0
 8004a00:	0710      	lsls	r0, r2, #28
 8004a02:	460c      	mov	r4, r1
 8004a04:	d458      	bmi.n	8004ab8 <__sflush_r+0xc0>
 8004a06:	684b      	ldr	r3, [r1, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	dc05      	bgt.n	8004a18 <__sflush_r+0x20>
 8004a0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	dc02      	bgt.n	8004a18 <__sflush_r+0x20>
 8004a12:	2000      	movs	r0, #0
 8004a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a1a:	2e00      	cmp	r6, #0
 8004a1c:	d0f9      	beq.n	8004a12 <__sflush_r+0x1a>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a24:	682f      	ldr	r7, [r5, #0]
 8004a26:	602b      	str	r3, [r5, #0]
 8004a28:	d032      	beq.n	8004a90 <__sflush_r+0x98>
 8004a2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a2c:	89a3      	ldrh	r3, [r4, #12]
 8004a2e:	075a      	lsls	r2, r3, #29
 8004a30:	d505      	bpl.n	8004a3e <__sflush_r+0x46>
 8004a32:	6863      	ldr	r3, [r4, #4]
 8004a34:	1ac0      	subs	r0, r0, r3
 8004a36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a38:	b10b      	cbz	r3, 8004a3e <__sflush_r+0x46>
 8004a3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a3c:	1ac0      	subs	r0, r0, r3
 8004a3e:	2300      	movs	r3, #0
 8004a40:	4602      	mov	r2, r0
 8004a42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a44:	6a21      	ldr	r1, [r4, #32]
 8004a46:	4628      	mov	r0, r5
 8004a48:	47b0      	blx	r6
 8004a4a:	1c43      	adds	r3, r0, #1
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	d106      	bne.n	8004a5e <__sflush_r+0x66>
 8004a50:	6829      	ldr	r1, [r5, #0]
 8004a52:	291d      	cmp	r1, #29
 8004a54:	d82c      	bhi.n	8004ab0 <__sflush_r+0xb8>
 8004a56:	4a2a      	ldr	r2, [pc, #168]	; (8004b00 <__sflush_r+0x108>)
 8004a58:	40ca      	lsrs	r2, r1
 8004a5a:	07d6      	lsls	r6, r2, #31
 8004a5c:	d528      	bpl.n	8004ab0 <__sflush_r+0xb8>
 8004a5e:	2200      	movs	r2, #0
 8004a60:	6062      	str	r2, [r4, #4]
 8004a62:	04d9      	lsls	r1, r3, #19
 8004a64:	6922      	ldr	r2, [r4, #16]
 8004a66:	6022      	str	r2, [r4, #0]
 8004a68:	d504      	bpl.n	8004a74 <__sflush_r+0x7c>
 8004a6a:	1c42      	adds	r2, r0, #1
 8004a6c:	d101      	bne.n	8004a72 <__sflush_r+0x7a>
 8004a6e:	682b      	ldr	r3, [r5, #0]
 8004a70:	b903      	cbnz	r3, 8004a74 <__sflush_r+0x7c>
 8004a72:	6560      	str	r0, [r4, #84]	; 0x54
 8004a74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a76:	602f      	str	r7, [r5, #0]
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	d0ca      	beq.n	8004a12 <__sflush_r+0x1a>
 8004a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a80:	4299      	cmp	r1, r3
 8004a82:	d002      	beq.n	8004a8a <__sflush_r+0x92>
 8004a84:	4628      	mov	r0, r5
 8004a86:	f000 f8fd 	bl	8004c84 <_free_r>
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	6360      	str	r0, [r4, #52]	; 0x34
 8004a8e:	e7c1      	b.n	8004a14 <__sflush_r+0x1c>
 8004a90:	6a21      	ldr	r1, [r4, #32]
 8004a92:	2301      	movs	r3, #1
 8004a94:	4628      	mov	r0, r5
 8004a96:	47b0      	blx	r6
 8004a98:	1c41      	adds	r1, r0, #1
 8004a9a:	d1c7      	bne.n	8004a2c <__sflush_r+0x34>
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0c4      	beq.n	8004a2c <__sflush_r+0x34>
 8004aa2:	2b1d      	cmp	r3, #29
 8004aa4:	d001      	beq.n	8004aaa <__sflush_r+0xb2>
 8004aa6:	2b16      	cmp	r3, #22
 8004aa8:	d101      	bne.n	8004aae <__sflush_r+0xb6>
 8004aaa:	602f      	str	r7, [r5, #0]
 8004aac:	e7b1      	b.n	8004a12 <__sflush_r+0x1a>
 8004aae:	89a3      	ldrh	r3, [r4, #12]
 8004ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab4:	81a3      	strh	r3, [r4, #12]
 8004ab6:	e7ad      	b.n	8004a14 <__sflush_r+0x1c>
 8004ab8:	690f      	ldr	r7, [r1, #16]
 8004aba:	2f00      	cmp	r7, #0
 8004abc:	d0a9      	beq.n	8004a12 <__sflush_r+0x1a>
 8004abe:	0793      	lsls	r3, r2, #30
 8004ac0:	680e      	ldr	r6, [r1, #0]
 8004ac2:	bf08      	it	eq
 8004ac4:	694b      	ldreq	r3, [r1, #20]
 8004ac6:	600f      	str	r7, [r1, #0]
 8004ac8:	bf18      	it	ne
 8004aca:	2300      	movne	r3, #0
 8004acc:	eba6 0807 	sub.w	r8, r6, r7
 8004ad0:	608b      	str	r3, [r1, #8]
 8004ad2:	f1b8 0f00 	cmp.w	r8, #0
 8004ad6:	dd9c      	ble.n	8004a12 <__sflush_r+0x1a>
 8004ad8:	6a21      	ldr	r1, [r4, #32]
 8004ada:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004adc:	4643      	mov	r3, r8
 8004ade:	463a      	mov	r2, r7
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	47b0      	blx	r6
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	dc06      	bgt.n	8004af6 <__sflush_r+0xfe>
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aee:	81a3      	strh	r3, [r4, #12]
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295
 8004af4:	e78e      	b.n	8004a14 <__sflush_r+0x1c>
 8004af6:	4407      	add	r7, r0
 8004af8:	eba8 0800 	sub.w	r8, r8, r0
 8004afc:	e7e9      	b.n	8004ad2 <__sflush_r+0xda>
 8004afe:	bf00      	nop
 8004b00:	20400001 	.word	0x20400001

08004b04 <_fflush_r>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	690b      	ldr	r3, [r1, #16]
 8004b08:	4605      	mov	r5, r0
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	b913      	cbnz	r3, 8004b14 <_fflush_r+0x10>
 8004b0e:	2500      	movs	r5, #0
 8004b10:	4628      	mov	r0, r5
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	b118      	cbz	r0, 8004b1e <_fflush_r+0x1a>
 8004b16:	6983      	ldr	r3, [r0, #24]
 8004b18:	b90b      	cbnz	r3, 8004b1e <_fflush_r+0x1a>
 8004b1a:	f7ff fa15 	bl	8003f48 <__sinit>
 8004b1e:	4b14      	ldr	r3, [pc, #80]	; (8004b70 <_fflush_r+0x6c>)
 8004b20:	429c      	cmp	r4, r3
 8004b22:	d11b      	bne.n	8004b5c <_fflush_r+0x58>
 8004b24:	686c      	ldr	r4, [r5, #4]
 8004b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0ef      	beq.n	8004b0e <_fflush_r+0xa>
 8004b2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b30:	07d0      	lsls	r0, r2, #31
 8004b32:	d404      	bmi.n	8004b3e <_fflush_r+0x3a>
 8004b34:	0599      	lsls	r1, r3, #22
 8004b36:	d402      	bmi.n	8004b3e <_fflush_r+0x3a>
 8004b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b3a:	f7ff faa3 	bl	8004084 <__retarget_lock_acquire_recursive>
 8004b3e:	4628      	mov	r0, r5
 8004b40:	4621      	mov	r1, r4
 8004b42:	f7ff ff59 	bl	80049f8 <__sflush_r>
 8004b46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b48:	07da      	lsls	r2, r3, #31
 8004b4a:	4605      	mov	r5, r0
 8004b4c:	d4e0      	bmi.n	8004b10 <_fflush_r+0xc>
 8004b4e:	89a3      	ldrh	r3, [r4, #12]
 8004b50:	059b      	lsls	r3, r3, #22
 8004b52:	d4dd      	bmi.n	8004b10 <_fflush_r+0xc>
 8004b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b56:	f7ff fa96 	bl	8004086 <__retarget_lock_release_recursive>
 8004b5a:	e7d9      	b.n	8004b10 <_fflush_r+0xc>
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <_fflush_r+0x70>)
 8004b5e:	429c      	cmp	r4, r3
 8004b60:	d101      	bne.n	8004b66 <_fflush_r+0x62>
 8004b62:	68ac      	ldr	r4, [r5, #8]
 8004b64:	e7df      	b.n	8004b26 <_fflush_r+0x22>
 8004b66:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <_fflush_r+0x74>)
 8004b68:	429c      	cmp	r4, r3
 8004b6a:	bf08      	it	eq
 8004b6c:	68ec      	ldreq	r4, [r5, #12]
 8004b6e:	e7da      	b.n	8004b26 <_fflush_r+0x22>
 8004b70:	08004e0c 	.word	0x08004e0c
 8004b74:	08004e2c 	.word	0x08004e2c
 8004b78:	08004dec 	.word	0x08004dec

08004b7c <_lseek_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4d07      	ldr	r5, [pc, #28]	; (8004b9c <_lseek_r+0x20>)
 8004b80:	4604      	mov	r4, r0
 8004b82:	4608      	mov	r0, r1
 8004b84:	4611      	mov	r1, r2
 8004b86:	2200      	movs	r2, #0
 8004b88:	602a      	str	r2, [r5, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f7fb fea6 	bl	80008dc <_lseek>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d102      	bne.n	8004b9a <_lseek_r+0x1e>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	b103      	cbz	r3, 8004b9a <_lseek_r+0x1e>
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	2000017c 	.word	0x2000017c

08004ba0 <__swhatbuf_r>:
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	460e      	mov	r6, r1
 8004ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	b096      	sub	sp, #88	; 0x58
 8004bac:	4614      	mov	r4, r2
 8004bae:	461d      	mov	r5, r3
 8004bb0:	da08      	bge.n	8004bc4 <__swhatbuf_r+0x24>
 8004bb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	602a      	str	r2, [r5, #0]
 8004bba:	061a      	lsls	r2, r3, #24
 8004bbc:	d410      	bmi.n	8004be0 <__swhatbuf_r+0x40>
 8004bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bc2:	e00e      	b.n	8004be2 <__swhatbuf_r+0x42>
 8004bc4:	466a      	mov	r2, sp
 8004bc6:	f000 f8bb 	bl	8004d40 <_fstat_r>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	dbf1      	blt.n	8004bb2 <__swhatbuf_r+0x12>
 8004bce:	9a01      	ldr	r2, [sp, #4]
 8004bd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004bd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004bd8:	425a      	negs	r2, r3
 8004bda:	415a      	adcs	r2, r3
 8004bdc:	602a      	str	r2, [r5, #0]
 8004bde:	e7ee      	b.n	8004bbe <__swhatbuf_r+0x1e>
 8004be0:	2340      	movs	r3, #64	; 0x40
 8004be2:	2000      	movs	r0, #0
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	b016      	add	sp, #88	; 0x58
 8004be8:	bd70      	pop	{r4, r5, r6, pc}
	...

08004bec <__smakebuf_r>:
 8004bec:	898b      	ldrh	r3, [r1, #12]
 8004bee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bf0:	079d      	lsls	r5, r3, #30
 8004bf2:	4606      	mov	r6, r0
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	d507      	bpl.n	8004c08 <__smakebuf_r+0x1c>
 8004bf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	6123      	str	r3, [r4, #16]
 8004c00:	2301      	movs	r3, #1
 8004c02:	6163      	str	r3, [r4, #20]
 8004c04:	b002      	add	sp, #8
 8004c06:	bd70      	pop	{r4, r5, r6, pc}
 8004c08:	ab01      	add	r3, sp, #4
 8004c0a:	466a      	mov	r2, sp
 8004c0c:	f7ff ffc8 	bl	8004ba0 <__swhatbuf_r>
 8004c10:	9900      	ldr	r1, [sp, #0]
 8004c12:	4605      	mov	r5, r0
 8004c14:	4630      	mov	r0, r6
 8004c16:	f7ff fa57 	bl	80040c8 <_malloc_r>
 8004c1a:	b948      	cbnz	r0, 8004c30 <__smakebuf_r+0x44>
 8004c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c20:	059a      	lsls	r2, r3, #22
 8004c22:	d4ef      	bmi.n	8004c04 <__smakebuf_r+0x18>
 8004c24:	f023 0303 	bic.w	r3, r3, #3
 8004c28:	f043 0302 	orr.w	r3, r3, #2
 8004c2c:	81a3      	strh	r3, [r4, #12]
 8004c2e:	e7e3      	b.n	8004bf8 <__smakebuf_r+0xc>
 8004c30:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <__smakebuf_r+0x7c>)
 8004c32:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c34:	89a3      	ldrh	r3, [r4, #12]
 8004c36:	6020      	str	r0, [r4, #0]
 8004c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c3c:	81a3      	strh	r3, [r4, #12]
 8004c3e:	9b00      	ldr	r3, [sp, #0]
 8004c40:	6163      	str	r3, [r4, #20]
 8004c42:	9b01      	ldr	r3, [sp, #4]
 8004c44:	6120      	str	r0, [r4, #16]
 8004c46:	b15b      	cbz	r3, 8004c60 <__smakebuf_r+0x74>
 8004c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f000 f889 	bl	8004d64 <_isatty_r>
 8004c52:	b128      	cbz	r0, 8004c60 <__smakebuf_r+0x74>
 8004c54:	89a3      	ldrh	r3, [r4, #12]
 8004c56:	f023 0303 	bic.w	r3, r3, #3
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	81a3      	strh	r3, [r4, #12]
 8004c60:	89a0      	ldrh	r0, [r4, #12]
 8004c62:	4305      	orrs	r5, r0
 8004c64:	81a5      	strh	r5, [r4, #12]
 8004c66:	e7cd      	b.n	8004c04 <__smakebuf_r+0x18>
 8004c68:	08003ee1 	.word	0x08003ee1

08004c6c <__malloc_lock>:
 8004c6c:	4801      	ldr	r0, [pc, #4]	; (8004c74 <__malloc_lock+0x8>)
 8004c6e:	f7ff ba09 	b.w	8004084 <__retarget_lock_acquire_recursive>
 8004c72:	bf00      	nop
 8004c74:	20000170 	.word	0x20000170

08004c78 <__malloc_unlock>:
 8004c78:	4801      	ldr	r0, [pc, #4]	; (8004c80 <__malloc_unlock+0x8>)
 8004c7a:	f7ff ba04 	b.w	8004086 <__retarget_lock_release_recursive>
 8004c7e:	bf00      	nop
 8004c80:	20000170 	.word	0x20000170

08004c84 <_free_r>:
 8004c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c86:	2900      	cmp	r1, #0
 8004c88:	d044      	beq.n	8004d14 <_free_r+0x90>
 8004c8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c8e:	9001      	str	r0, [sp, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f1a1 0404 	sub.w	r4, r1, #4
 8004c96:	bfb8      	it	lt
 8004c98:	18e4      	addlt	r4, r4, r3
 8004c9a:	f7ff ffe7 	bl	8004c6c <__malloc_lock>
 8004c9e:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <_free_r+0x94>)
 8004ca0:	9801      	ldr	r0, [sp, #4]
 8004ca2:	6813      	ldr	r3, [r2, #0]
 8004ca4:	b933      	cbnz	r3, 8004cb4 <_free_r+0x30>
 8004ca6:	6063      	str	r3, [r4, #4]
 8004ca8:	6014      	str	r4, [r2, #0]
 8004caa:	b003      	add	sp, #12
 8004cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cb0:	f7ff bfe2 	b.w	8004c78 <__malloc_unlock>
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	d908      	bls.n	8004cca <_free_r+0x46>
 8004cb8:	6825      	ldr	r5, [r4, #0]
 8004cba:	1961      	adds	r1, r4, r5
 8004cbc:	428b      	cmp	r3, r1
 8004cbe:	bf01      	itttt	eq
 8004cc0:	6819      	ldreq	r1, [r3, #0]
 8004cc2:	685b      	ldreq	r3, [r3, #4]
 8004cc4:	1949      	addeq	r1, r1, r5
 8004cc6:	6021      	streq	r1, [r4, #0]
 8004cc8:	e7ed      	b.n	8004ca6 <_free_r+0x22>
 8004cca:	461a      	mov	r2, r3
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	b10b      	cbz	r3, 8004cd4 <_free_r+0x50>
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	d9fa      	bls.n	8004cca <_free_r+0x46>
 8004cd4:	6811      	ldr	r1, [r2, #0]
 8004cd6:	1855      	adds	r5, r2, r1
 8004cd8:	42a5      	cmp	r5, r4
 8004cda:	d10b      	bne.n	8004cf4 <_free_r+0x70>
 8004cdc:	6824      	ldr	r4, [r4, #0]
 8004cde:	4421      	add	r1, r4
 8004ce0:	1854      	adds	r4, r2, r1
 8004ce2:	42a3      	cmp	r3, r4
 8004ce4:	6011      	str	r1, [r2, #0]
 8004ce6:	d1e0      	bne.n	8004caa <_free_r+0x26>
 8004ce8:	681c      	ldr	r4, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	6053      	str	r3, [r2, #4]
 8004cee:	4421      	add	r1, r4
 8004cf0:	6011      	str	r1, [r2, #0]
 8004cf2:	e7da      	b.n	8004caa <_free_r+0x26>
 8004cf4:	d902      	bls.n	8004cfc <_free_r+0x78>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	6003      	str	r3, [r0, #0]
 8004cfa:	e7d6      	b.n	8004caa <_free_r+0x26>
 8004cfc:	6825      	ldr	r5, [r4, #0]
 8004cfe:	1961      	adds	r1, r4, r5
 8004d00:	428b      	cmp	r3, r1
 8004d02:	bf04      	itt	eq
 8004d04:	6819      	ldreq	r1, [r3, #0]
 8004d06:	685b      	ldreq	r3, [r3, #4]
 8004d08:	6063      	str	r3, [r4, #4]
 8004d0a:	bf04      	itt	eq
 8004d0c:	1949      	addeq	r1, r1, r5
 8004d0e:	6021      	streq	r1, [r4, #0]
 8004d10:	6054      	str	r4, [r2, #4]
 8004d12:	e7ca      	b.n	8004caa <_free_r+0x26>
 8004d14:	b003      	add	sp, #12
 8004d16:	bd30      	pop	{r4, r5, pc}
 8004d18:	20000174 	.word	0x20000174

08004d1c <_read_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4d07      	ldr	r5, [pc, #28]	; (8004d3c <_read_r+0x20>)
 8004d20:	4604      	mov	r4, r0
 8004d22:	4608      	mov	r0, r1
 8004d24:	4611      	mov	r1, r2
 8004d26:	2200      	movs	r2, #0
 8004d28:	602a      	str	r2, [r5, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f7fb fd76 	bl	800081c <_read>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d102      	bne.n	8004d3a <_read_r+0x1e>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	b103      	cbz	r3, 8004d3a <_read_r+0x1e>
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	2000017c 	.word	0x2000017c

08004d40 <_fstat_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4d07      	ldr	r5, [pc, #28]	; (8004d60 <_fstat_r+0x20>)
 8004d44:	2300      	movs	r3, #0
 8004d46:	4604      	mov	r4, r0
 8004d48:	4608      	mov	r0, r1
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	602b      	str	r3, [r5, #0]
 8004d4e:	f7fb fdaa 	bl	80008a6 <_fstat>
 8004d52:	1c43      	adds	r3, r0, #1
 8004d54:	d102      	bne.n	8004d5c <_fstat_r+0x1c>
 8004d56:	682b      	ldr	r3, [r5, #0]
 8004d58:	b103      	cbz	r3, 8004d5c <_fstat_r+0x1c>
 8004d5a:	6023      	str	r3, [r4, #0]
 8004d5c:	bd38      	pop	{r3, r4, r5, pc}
 8004d5e:	bf00      	nop
 8004d60:	2000017c 	.word	0x2000017c

08004d64 <_isatty_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4d06      	ldr	r5, [pc, #24]	; (8004d80 <_isatty_r+0x1c>)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	602b      	str	r3, [r5, #0]
 8004d70:	f7fb fda9 	bl	80008c6 <_isatty>
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	d102      	bne.n	8004d7e <_isatty_r+0x1a>
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	b103      	cbz	r3, 8004d7e <_isatty_r+0x1a>
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	bd38      	pop	{r3, r4, r5, pc}
 8004d80:	2000017c 	.word	0x2000017c

08004d84 <_init>:
 8004d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d86:	bf00      	nop
 8004d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8a:	bc08      	pop	{r3}
 8004d8c:	469e      	mov	lr, r3
 8004d8e:	4770      	bx	lr

08004d90 <_fini>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	bf00      	nop
 8004d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d96:	bc08      	pop	{r3}
 8004d98:	469e      	mov	lr, r3
 8004d9a:	4770      	bx	lr
