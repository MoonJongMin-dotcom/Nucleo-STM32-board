
ADC_DMA_EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004030  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f0  080041f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080041f0  080041f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041f0  080041f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041f4  080041f4  000141f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000188  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000194  20000194  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010938  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e4b  00000000  00000000  00030974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  000327c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000da0  00000000  00000000  00033618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002021b  00000000  00000000  000343b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011420  00000000  00000000  000545d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c64d0  00000000  00000000  000659f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012bec3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d10  00000000  00000000  0012bf14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080041a0 	.word	0x080041a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080041a0 	.word	0x080041a0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb46 	bl	800085c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81a 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f978 	bl	80004c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f958 	bl	800048c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001dc:	f000 f926 	bl	800042c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001e0:	f000 f854 	bl	800028c <MX_ADC1_Init>
  MX_TIM3_Init();
 80001e4:	f000 f8d2 	bl	800038c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 80001e8:	4804      	ldr	r0, [pc, #16]	; (80001fc <main+0x34>)
 80001ea:	f003 f9db 	bl	80035a4 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcVal, 2);
 80001ee:	2202      	movs	r2, #2
 80001f0:	4903      	ldr	r1, [pc, #12]	; (8000200 <main+0x38>)
 80001f2:	4804      	ldr	r0, [pc, #16]	; (8000204 <main+0x3c>)
 80001f4:	f000 fd48 	bl	8000c88 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f8:	e7fe      	b.n	80001f8 <main+0x30>
 80001fa:	bf00      	nop
 80001fc:	200000bc 	.word	0x200000bc
 8000200:	2000018c 	.word	0x2000018c
 8000204:	20000028 	.word	0x20000028

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b090      	sub	sp, #64	; 0x40
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0318 	add.w	r3, r7, #24
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f003 ffba 	bl	8004190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022a:	2302      	movs	r3, #2
 800022c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000232:	2310      	movs	r3, #16
 8000234:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000236:	2302      	movs	r3, #2
 8000238:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800023a:	2300      	movs	r3, #0
 800023c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800023e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000242:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000244:	f107 0318 	add.w	r3, r7, #24
 8000248:	4618      	mov	r0, r3
 800024a:	f001 fedf 	bl	800200c <HAL_RCC_OscConfig>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000254:	f000 f99e 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000258:	230f      	movs	r3, #15
 800025a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025c:	2302      	movs	r3, #2
 800025e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000268:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2102      	movs	r1, #2
 8000272:	4618      	mov	r0, r3
 8000274:	f002 ff08 	bl	8003088 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800027e:	f000 f989 	bl	8000594 <Error_Handler>
  }
}
 8000282:	bf00      	nop
 8000284:	3740      	adds	r7, #64	; 0x40
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
	...

0800028c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b08a      	sub	sp, #40	; 0x28
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000292:	f107 031c 	add.w	r3, r7, #28
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
 80002ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ae:	4b36      	ldr	r3, [pc, #216]	; (8000388 <MX_ADC1_Init+0xfc>)
 80002b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002b6:	4b34      	ldr	r3, [pc, #208]	; (8000388 <MX_ADC1_Init+0xfc>)
 80002b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80002bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002be:	4b32      	ldr	r3, [pc, #200]	; (8000388 <MX_ADC1_Init+0xfc>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002c4:	4b30      	ldr	r3, [pc, #192]	; (8000388 <MX_ADC1_Init+0xfc>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ca:	4b2f      	ldr	r3, [pc, #188]	; (8000388 <MX_ADC1_Init+0xfc>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <MX_ADC1_Init+0xfc>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80002d8:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <MX_ADC1_Init+0xfc>)
 80002da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80002e0:	4b29      	ldr	r3, [pc, #164]	; (8000388 <MX_ADC1_Init+0xfc>)
 80002e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002e8:	4b27      	ldr	r3, [pc, #156]	; (8000388 <MX_ADC1_Init+0xfc>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <MX_ADC1_Init+0xfc>)
 80002f0:	2202      	movs	r2, #2
 80002f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80002f4:	4b24      	ldr	r3, [pc, #144]	; (8000388 <MX_ADC1_Init+0xfc>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002fc:	4b22      	ldr	r3, [pc, #136]	; (8000388 <MX_ADC1_Init+0xfc>)
 80002fe:	2204      	movs	r2, #4
 8000300:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000302:	4b21      	ldr	r3, [pc, #132]	; (8000388 <MX_ADC1_Init+0xfc>)
 8000304:	2200      	movs	r2, #0
 8000306:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000308:	4b1f      	ldr	r3, [pc, #124]	; (8000388 <MX_ADC1_Init+0xfc>)
 800030a:	2200      	movs	r2, #0
 800030c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800030e:	481e      	ldr	r0, [pc, #120]	; (8000388 <MX_ADC1_Init+0xfc>)
 8000310:	f000 fb28 	bl	8000964 <HAL_ADC_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800031a:	f000 f93b 	bl	8000594 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800031e:	2300      	movs	r3, #0
 8000320:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000322:	f107 031c 	add.w	r3, r7, #28
 8000326:	4619      	mov	r1, r3
 8000328:	4817      	ldr	r0, [pc, #92]	; (8000388 <MX_ADC1_Init+0xfc>)
 800032a:	f001 f847 	bl	80013bc <HAL_ADCEx_MultiModeConfigChannel>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000334:	f000 f92e 	bl	8000594 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000338:	2310      	movs	r3, #16
 800033a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800033c:	2301      	movs	r3, #1
 800033e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000344:	2304      	movs	r3, #4
 8000346:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000348:	2300      	movs	r3, #0
 800034a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	4619      	mov	r1, r3
 8000354:	480c      	ldr	r0, [pc, #48]	; (8000388 <MX_ADC1_Init+0xfc>)
 8000356:	f000 fd71 	bl	8000e3c <HAL_ADC_ConfigChannel>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000360:	f000 f918 	bl	8000594 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000364:	2301      	movs	r3, #1
 8000366:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000368:	2302      	movs	r3, #2
 800036a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	4619      	mov	r1, r3
 8000370:	4805      	ldr	r0, [pc, #20]	; (8000388 <MX_ADC1_Init+0xfc>)
 8000372:	f000 fd63 	bl	8000e3c <HAL_ADC_ConfigChannel>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 800037c:	f000 f90a 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	3728      	adds	r7, #40	; 0x28
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000028 	.word	0x20000028

0800038c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003aa:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <MX_TIM3_Init+0x98>)
 80003ac:	4a1e      	ldr	r2, [pc, #120]	; (8000428 <MX_TIM3_Init+0x9c>)
 80003ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6799;
 80003b0:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <MX_TIM3_Init+0x98>)
 80003b2:	f641 228f 	movw	r2, #6799	; 0x1a8f
 80003b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b8:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <MX_TIM3_Init+0x98>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <MX_TIM3_Init+0x98>)
 80003c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80003c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c6:	4b17      	ldr	r3, [pc, #92]	; (8000424 <MX_TIM3_Init+0x98>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003cc:	4b15      	ldr	r3, [pc, #84]	; (8000424 <MX_TIM3_Init+0x98>)
 80003ce:	2280      	movs	r2, #128	; 0x80
 80003d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003d2:	4814      	ldr	r0, [pc, #80]	; (8000424 <MX_TIM3_Init+0x98>)
 80003d4:	f003 f88e 	bl	80034f4 <HAL_TIM_Base_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80003de:	f000 f8d9 	bl	8000594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003e8:	f107 0310 	add.w	r3, r7, #16
 80003ec:	4619      	mov	r1, r3
 80003ee:	480d      	ldr	r0, [pc, #52]	; (8000424 <MX_TIM3_Init+0x98>)
 80003f0:	f003 f92c 	bl	800364c <HAL_TIM_ConfigClockSource>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80003fa:	f000 f8cb 	bl	8000594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003fe:	2320      	movs	r3, #32
 8000400:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000402:	2300      	movs	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4619      	mov	r1, r3
 800040a:	4806      	ldr	r0, [pc, #24]	; (8000424 <MX_TIM3_Init+0x98>)
 800040c:	f003 fafa 	bl	8003a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000416:	f000 f8bd 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800041a:	bf00      	nop
 800041c:	3720      	adds	r7, #32
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	200000bc 	.word	0x200000bc
 8000428:	40000400 	.word	0x40000400

0800042c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000432:	4a15      	ldr	r2, [pc, #84]	; (8000488 <MX_USART2_UART_Init+0x5c>)
 8000434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000436:	4b13      	ldr	r3, [pc, #76]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000438:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800043c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800043e:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000452:	220c      	movs	r2, #12
 8000454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <MX_USART2_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800046e:	4805      	ldr	r0, [pc, #20]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000470:	f003 fb36 	bl	8003ae0 <HAL_UART_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800047a:	f000 f88b 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000108 	.word	0x20000108
 8000488:	40004400 	.word	0x40004400

0800048c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_DMA_Init+0x38>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <MX_DMA_Init+0x38>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_DMA_Init+0x38>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	200b      	movs	r0, #11
 80004b0:	f001 fa55 	bl	800195e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004b4:	200b      	movs	r0, #11
 80004b6:	f001 fa6e 	bl	8001996 <HAL_NVIC_EnableIRQ>

}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000

080004c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	4b2b      	ldr	r3, [pc, #172]	; (800058c <MX_GPIO_Init+0xc4>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a2a      	ldr	r2, [pc, #168]	; (800058c <MX_GPIO_Init+0xc4>)
 80004e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b28      	ldr	r3, [pc, #160]	; (800058c <MX_GPIO_Init+0xc4>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <MX_GPIO_Init+0xc4>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a24      	ldr	r2, [pc, #144]	; (800058c <MX_GPIO_Init+0xc4>)
 80004fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	4b22      	ldr	r3, [pc, #136]	; (800058c <MX_GPIO_Init+0xc4>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b1f      	ldr	r3, [pc, #124]	; (800058c <MX_GPIO_Init+0xc4>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a1e      	ldr	r2, [pc, #120]	; (800058c <MX_GPIO_Init+0xc4>)
 8000514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	4b1c      	ldr	r3, [pc, #112]	; (800058c <MX_GPIO_Init+0xc4>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <MX_GPIO_Init+0xc4>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a18      	ldr	r2, [pc, #96]	; (800058c <MX_GPIO_Init+0xc4>)
 800052c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	4b16      	ldr	r3, [pc, #88]	; (800058c <MX_GPIO_Init+0xc4>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2120      	movs	r1, #32
 8000542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000546:	f001 fd49 	bl	8001fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800054a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000550:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	4619      	mov	r1, r3
 8000560:	480b      	ldr	r0, [pc, #44]	; (8000590 <MX_GPIO_Init+0xc8>)
 8000562:	f001 fbc9 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000566:	2320      	movs	r3, #32
 8000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	2301      	movs	r3, #1
 800056c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	2300      	movs	r3, #0
 8000574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4619      	mov	r1, r3
 800057c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000580:	f001 fbba 	bl	8001cf8 <HAL_GPIO_Init>

}
 8000584:	bf00      	nop
 8000586:	3728      	adds	r7, #40	; 0x28
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	48000800 	.word	0x48000800

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	e7fe      	b.n	800059c <Error_Handler+0x8>
	...

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <HAL_MspInit+0x44>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <HAL_MspInit+0x44>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6193      	str	r3, [r2, #24]
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <HAL_MspInit+0x44>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <HAL_MspInit+0x44>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <HAL_MspInit+0x44>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c8:	61d3      	str	r3, [r2, #28]
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_MspInit+0x44>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005d6:	2007      	movs	r0, #7
 80005d8:	f001 f9b6 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021000 	.word	0x40021000

080005e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000608:	d14c      	bne.n	80006a4 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800060a:	4b28      	ldr	r3, [pc, #160]	; (80006ac <HAL_ADC_MspInit+0xc4>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a27      	ldr	r2, [pc, #156]	; (80006ac <HAL_ADC_MspInit+0xc4>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b25      	ldr	r3, [pc, #148]	; (80006ac <HAL_ADC_MspInit+0xc4>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <HAL_ADC_MspInit+0xc4>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a21      	ldr	r2, [pc, #132]	; (80006ac <HAL_ADC_MspInit+0xc4>)
 8000628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <HAL_ADC_MspInit+0xc4>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800063a:	2301      	movs	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800063e:	2303      	movs	r3, #3
 8000640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f001 fb52 	bl	8001cf8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <HAL_ADC_MspInit+0xc8>)
 8000656:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <HAL_ADC_MspInit+0xcc>)
 8000658:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_ADC_MspInit+0xc8>)
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <HAL_ADC_MspInit+0xc8>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_ADC_MspInit+0xc8>)
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <HAL_ADC_MspInit+0xc8>)
 800066e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000672:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <HAL_ADC_MspInit+0xc8>)
 8000676:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800067a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_ADC_MspInit+0xc8>)
 800067e:	2220      	movs	r2, #32
 8000680:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <HAL_ADC_MspInit+0xc8>)
 8000684:	2200      	movs	r2, #0
 8000686:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000688:	4809      	ldr	r0, [pc, #36]	; (80006b0 <HAL_ADC_MspInit+0xc8>)
 800068a:	f001 f99e 	bl	80019ca <HAL_DMA_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000694:	f7ff ff7e 	bl	8000594 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <HAL_ADC_MspInit+0xc8>)
 800069c:	639a      	str	r2, [r3, #56]	; 0x38
 800069e:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <HAL_ADC_MspInit+0xc8>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	; 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40021000 	.word	0x40021000
 80006b0:	20000078 	.word	0x20000078
 80006b4:	40020008 	.word	0x40020008

080006b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <HAL_TIM_Base_MspInit+0x38>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d10b      	bne.n	80006e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <HAL_TIM_Base_MspInit+0x3c>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <HAL_TIM_Base_MspInit+0x3c>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	61d3      	str	r3, [r2, #28]
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <HAL_TIM_Base_MspInit+0x3c>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40000400 	.word	0x40000400
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a17      	ldr	r2, [pc, #92]	; (8000774 <HAL_UART_MspInit+0x7c>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d128      	bne.n	800076c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <HAL_UART_MspInit+0x80>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a16      	ldr	r2, [pc, #88]	; (8000778 <HAL_UART_MspInit+0x80>)
 8000720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <HAL_UART_MspInit+0x80>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <HAL_UART_MspInit+0x80>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	4a10      	ldr	r2, [pc, #64]	; (8000778 <HAL_UART_MspInit+0x80>)
 8000738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800073c:	6153      	str	r3, [r2, #20]
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <HAL_UART_MspInit+0x80>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800074a:	230c      	movs	r3, #12
 800074c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	2302      	movs	r3, #2
 8000750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000756:	2303      	movs	r3, #3
 8000758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800075a:	2307      	movs	r3, #7
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f001 fac6 	bl	8001cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40004400 	.word	0x40004400
 8000778:	40021000 	.word	0x40021000

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <NMI_Handler+0x4>

08000782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <MemManage_Handler+0x4>

0800078e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <UsageFault_Handler+0x4>

0800079a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 f88e 	bl	80008e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <DMA1_Channel1_IRQHandler+0x10>)
 80007d6:	f001 f99e 	bl	8001b16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000078 	.word	0x20000078

080007e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <SystemInit+0x20>)
 80007ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ee:	4a05      	ldr	r2, [pc, #20]	; (8000804 <SystemInit+0x20>)
 80007f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000840 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <LoopForever+0x6>)
  ldr r1, =_edata
 800080e:	490e      	ldr	r1, [pc, #56]	; (8000848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000810:	4a0e      	ldr	r2, [pc, #56]	; (800084c <LoopForever+0xe>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000824:	4c0b      	ldr	r4, [pc, #44]	; (8000854 <LoopForever+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000832:	f7ff ffd7 	bl	80007e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000836:	f003 fc87 	bl	8004148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800083a:	f7ff fcc5 	bl	80001c8 <main>

0800083e <LoopForever>:

LoopForever:
    b LoopForever
 800083e:	e7fe      	b.n	800083e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000840:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800084c:	080041f8 	.word	0x080041f8
  ldr r2, =_sbss
 8000850:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000854:	20000194 	.word	0x20000194

08000858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_2_IRQHandler>
	...

0800085c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_Init+0x28>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a07      	ldr	r2, [pc, #28]	; (8000884 <HAL_Init+0x28>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086c:	2003      	movs	r0, #3
 800086e:	f001 f86b 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000872:	2000      	movs	r0, #0
 8000874:	f000 f808 	bl	8000888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000878:	f7ff fe92 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40022000 	.word	0x40022000

08000888 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_InitTick+0x54>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_InitTick+0x58>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 f883 	bl	80019b2 <HAL_SYSTICK_Config>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00e      	b.n	80008d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	d80a      	bhi.n	80008d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008bc:	2200      	movs	r2, #0
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008c4:	f001 f84b 	bl	800195e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c8:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <HAL_InitTick+0x5c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e000      	b.n	80008d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000004 	.word	0x20000004

080008e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_IncTick+0x20>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_IncTick+0x24>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_IncTick+0x24>)
 80008fa:	6013      	str	r3, [r2, #0]
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000008 	.word	0x20000008
 800090c:	20000190 	.word	0x20000190

08000910 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;  
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <HAL_GetTick+0x14>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000190 	.word	0x20000190

08000928 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b09a      	sub	sp, #104	; 0x68
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000972:	2300      	movs	r3, #0
 8000974:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d101      	bne.n	8000984 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000980:	2301      	movs	r3, #1
 8000982:	e172      	b.n	8000c6a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	691b      	ldr	r3, [r3, #16]
 8000988:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 0310 	and.w	r3, r3, #16
 8000992:	2b00      	cmp	r3, #0
 8000994:	d176      	bne.n	8000a84 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	2b00      	cmp	r3, #0
 800099c:	d152      	bne.n	8000a44 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2200      	movs	r2, #0
 80009ae:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff fe15 	bl	80005e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d13b      	bne.n	8000a44 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 fe85 	bl	80016dc <ADC_Disable>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	f003 0310 	and.w	r3, r3, #16
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d12f      	bne.n	8000a44 <HAL_ADC_Init+0xe0>
 80009e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d12b      	bne.n	8000a44 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009f4:	f023 0302 	bic.w	r3, r3, #2
 80009f8:	f043 0202 	orr.w	r2, r3, #2
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	689a      	ldr	r2, [r3, #8]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a0e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	689a      	ldr	r2, [r3, #8]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a1e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a20:	4b94      	ldr	r3, [pc, #592]	; (8000c74 <HAL_ADC_Init+0x310>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a94      	ldr	r2, [pc, #592]	; (8000c78 <HAL_ADC_Init+0x314>)
 8000a26:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2a:	0c9a      	lsrs	r2, r3, #18
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4413      	add	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a36:	e002      	b.n	8000a3e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1f9      	bne.n	8000a38 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d007      	beq.n	8000a62 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a60:	d110      	bne.n	8000a84 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f023 0312 	bic.w	r3, r3, #18
 8000a6a:	f043 0210 	orr.w	r2, r3, #16
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f043 0201 	orr.w	r2, r3, #1
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f040 80df 	bne.w	8000c50 <HAL_ADC_Init+0x2ec>
 8000a92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 80da 	bne.w	8000c50 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f040 80d2 	bne.w	8000c50 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ab4:	f043 0202 	orr.w	r2, r3, #2
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000abc:	4b6f      	ldr	r3, [pc, #444]	; (8000c7c <HAL_ADC_Init+0x318>)
 8000abe:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ac8:	d102      	bne.n	8000ad0 <HAL_ADC_Init+0x16c>
 8000aca:	4b6d      	ldr	r3, [pc, #436]	; (8000c80 <HAL_ADC_Init+0x31c>)
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	e002      	b.n	8000ad6 <HAL_ADC_Init+0x172>
 8000ad0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ad4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	f003 0303 	and.w	r3, r3, #3
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d108      	bne.n	8000af6 <HAL_ADC_Init+0x192>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d101      	bne.n	8000af6 <HAL_ADC_Init+0x192>
 8000af2:	2301      	movs	r3, #1
 8000af4:	e000      	b.n	8000af8 <HAL_ADC_Init+0x194>
 8000af6:	2300      	movs	r3, #0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d11c      	bne.n	8000b36 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000afc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d010      	beq.n	8000b24 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	f003 0303 	and.w	r3, r3, #3
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d107      	bne.n	8000b1e <HAL_ADC_Init+0x1ba>
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d101      	bne.n	8000b1e <HAL_ADC_Init+0x1ba>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e000      	b.n	8000b20 <HAL_ADC_Init+0x1bc>
 8000b1e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d108      	bne.n	8000b36 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	431a      	orrs	r2, r3
 8000b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b34:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7e5b      	ldrb	r3, [r3, #25]
 8000b3a:	035b      	lsls	r3, r3, #13
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b40:	2a01      	cmp	r2, #1
 8000b42:	d002      	beq.n	8000b4a <HAL_ADC_Init+0x1e6>
 8000b44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b48:	e000      	b.n	8000b4c <HAL_ADC_Init+0x1e8>
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	431a      	orrs	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d11b      	bne.n	8000ba2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	7e5b      	ldrb	r3, [r3, #25]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d109      	bne.n	8000b86 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b76:	3b01      	subs	r3, #1
 8000b78:	045a      	lsls	r2, r3, #17
 8000b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b82:	663b      	str	r3, [r7, #96]	; 0x60
 8000b84:	e00d      	b.n	8000ba2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000b8e:	f043 0220 	orr.w	r2, r3, #32
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	f043 0201 	orr.w	r2, r3, #1
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d007      	beq.n	8000bba <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f003 030c 	and.w	r3, r3, #12
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d114      	bne.n	8000bf2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	6812      	ldr	r2, [r2, #0]
 8000bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000bd6:	f023 0302 	bic.w	r3, r3, #2
 8000bda:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7e1b      	ldrb	r3, [r3, #24]
 8000be0:	039a      	lsls	r2, r3, #14
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4313      	orrs	r3, r2
 8000bec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <HAL_ADC_Init+0x320>)
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	6812      	ldr	r2, [r2, #0]
 8000c00:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c02:	430b      	orrs	r3, r1
 8000c04:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d10c      	bne.n	8000c28 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	f023 010f 	bic.w	r1, r3, #15
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69db      	ldr	r3, [r3, #28]
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	430a      	orrs	r2, r1
 8000c24:	631a      	str	r2, [r3, #48]	; 0x30
 8000c26:	e007      	b.n	8000c38 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f022 020f 	bic.w	r2, r2, #15
 8000c36:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f023 0303 	bic.w	r3, r3, #3
 8000c46:	f043 0201 	orr.w	r2, r3, #1
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c4e:	e00a      	b.n	8000c66 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f023 0312 	bic.w	r3, r3, #18
 8000c58:	f043 0210 	orr.w	r2, r3, #16
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000c60:	2301      	movs	r3, #1
 8000c62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000c66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3768      	adds	r7, #104	; 0x68
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000000 	.word	0x20000000
 8000c78:	431bde83 	.word	0x431bde83
 8000c7c:	50000300 	.word	0x50000300
 8000c80:	50000100 	.word	0x50000100
 8000c84:	fff0c007 	.word	0xfff0c007

08000c88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 80b9 	bne.w	8000e1a <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d101      	bne.n	8000cb6 <HAL_ADC_Start_DMA+0x2e>
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	e0b4      	b.n	8000e20 <HAL_ADC_Start_DMA+0x198>
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000cbe:	4b5a      	ldr	r3, [pc, #360]	; (8000e28 <HAL_ADC_Start_DMA+0x1a0>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f003 031f 	and.w	r3, r3, #31
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 80a0 	bne.w	8000e0c <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f000 fca1 	bl	8001614 <ADC_Enable>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000cd6:	7dfb      	ldrb	r3, [r7, #23]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f040 8092 	bne.w	8000e02 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ce6:	f023 0301 	bic.w	r3, r3, #1
 8000cea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cf2:	4b4d      	ldr	r3, [pc, #308]	; (8000e28 <HAL_ADC_Start_DMA+0x1a0>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f003 031f 	and.w	r3, r3, #31
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d004      	beq.n	8000d08 <HAL_ADC_Start_DMA+0x80>
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d06:	d115      	bne.n	8000d34 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d027      	beq.n	8000d72 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d32:	e01e      	b.n	8000d72 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d48:	d004      	beq.n	8000d54 <HAL_ADC_Start_DMA+0xcc>
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a37      	ldr	r2, [pc, #220]	; (8000e2c <HAL_ADC_Start_DMA+0x1a4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d10e      	bne.n	8000d72 <HAL_ADC_Start_DMA+0xea>
 8000d54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d007      	beq.n	8000d72 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d7e:	d106      	bne.n	8000d8e <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d84:	f023 0206 	bic.w	r2, r3, #6
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	645a      	str	r2, [r3, #68]	; 0x44
 8000d8c:	e002      	b.n	8000d94 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2200      	movs	r2, #0
 8000d92:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2200      	movs	r2, #0
 8000d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da0:	4a23      	ldr	r2, [pc, #140]	; (8000e30 <HAL_ADC_Start_DMA+0x1a8>)
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da8:	4a22      	ldr	r2, [pc, #136]	; (8000e34 <HAL_ADC_Start_DMA+0x1ac>)
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db0:	4a21      	ldr	r2, [pc, #132]	; (8000e38 <HAL_ADC_Start_DMA+0x1b0>)
 8000db2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	221c      	movs	r2, #28
 8000dba:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f042 0210 	orr.w	r2, r2, #16
 8000dca:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f042 0201 	orr.w	r2, r2, #1
 8000dda:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3340      	adds	r3, #64	; 0x40
 8000de6:	4619      	mov	r1, r3
 8000de8:	68ba      	ldr	r2, [r7, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f000 fe34 	bl	8001a58 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0204 	orr.w	r2, r2, #4
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	e00d      	b.n	8000e1e <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000e0a:	e008      	b.n	8000e1e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000e18:	e001      	b.n	8000e1e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	50000300 	.word	0x50000300
 8000e2c:	50000100 	.word	0x50000100
 8000e30:	08001549 	.word	0x08001549
 8000e34:	080015c3 	.word	0x080015c3
 8000e38:	080015df 	.word	0x080015df

08000e3c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b09b      	sub	sp, #108	; 0x6c
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d101      	bne.n	8000e5e <HAL_ADC_ConfigChannel+0x22>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e2a4      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x56c>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f040 8288 	bne.w	8001386 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d81c      	bhi.n	8000eb8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	461a      	mov	r2, r3
 8000e92:	231f      	movs	r3, #31
 8000e94:	4093      	lsls	r3, r2
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4019      	ands	r1, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8000eb6:	e063      	b.n	8000f80 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b09      	cmp	r3, #9
 8000ebe:	d81e      	bhi.n	8000efe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	4413      	add	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	3b1e      	subs	r3, #30
 8000ed4:	221f      	movs	r2, #31
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	4019      	ands	r1, r3
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	6818      	ldr	r0, [r3, #0]
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	3b1e      	subs	r3, #30
 8000ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	635a      	str	r2, [r3, #52]	; 0x34
 8000efc:	e040      	b.n	8000f80 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b0e      	cmp	r3, #14
 8000f04:	d81e      	bhi.n	8000f44 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	3b3c      	subs	r3, #60	; 0x3c
 8000f1a:	221f      	movs	r2, #31
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	4019      	ands	r1, r3
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	6818      	ldr	r0, [r3, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	3b3c      	subs	r3, #60	; 0x3c
 8000f36:	fa00 f203 	lsl.w	r2, r0, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	639a      	str	r2, [r3, #56]	; 0x38
 8000f42:	e01d      	b.n	8000f80 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	3b5a      	subs	r3, #90	; 0x5a
 8000f58:	221f      	movs	r2, #31
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	4019      	ands	r1, r3
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	6818      	ldr	r0, [r3, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	3b5a      	subs	r3, #90	; 0x5a
 8000f74:	fa00 f203 	lsl.w	r2, r0, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f040 80e5 	bne.w	800115a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b09      	cmp	r3, #9
 8000f96:	d91c      	bls.n	8000fd2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6999      	ldr	r1, [r3, #24]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3b1e      	subs	r3, #30
 8000faa:	2207      	movs	r2, #7
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	4019      	ands	r1, r3
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	6898      	ldr	r0, [r3, #8]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	3b1e      	subs	r3, #30
 8000fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	619a      	str	r2, [r3, #24]
 8000fd0:	e019      	b.n	8001006 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6959      	ldr	r1, [r3, #20]
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	4019      	ands	r1, r3
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	6898      	ldr	r0, [r3, #8]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	430a      	orrs	r2, r1
 8001004:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	695a      	ldr	r2, [r3, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	3b01      	subs	r3, #1
 8001024:	2b03      	cmp	r3, #3
 8001026:	d84f      	bhi.n	80010c8 <HAL_ADC_ConfigChannel+0x28c>
 8001028:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <HAL_ADC_ConfigChannel+0x1f4>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001041 	.word	0x08001041
 8001034:	08001063 	.word	0x08001063
 8001038:	08001085 	.word	0x08001085
 800103c:	080010a7 	.word	0x080010a7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001046:	4b94      	ldr	r3, [pc, #592]	; (8001298 <HAL_ADC_ConfigChannel+0x45c>)
 8001048:	4013      	ands	r3, r2
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	6812      	ldr	r2, [r2, #0]
 800104e:	0691      	lsls	r1, r2, #26
 8001050:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001052:	430a      	orrs	r2, r1
 8001054:	431a      	orrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800105e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001060:	e07e      	b.n	8001160 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001068:	4b8b      	ldr	r3, [pc, #556]	; (8001298 <HAL_ADC_ConfigChannel+0x45c>)
 800106a:	4013      	ands	r3, r2
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	6812      	ldr	r2, [r2, #0]
 8001070:	0691      	lsls	r1, r2, #26
 8001072:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001074:	430a      	orrs	r2, r1
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001080:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001082:	e06d      	b.n	8001160 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800108a:	4b83      	ldr	r3, [pc, #524]	; (8001298 <HAL_ADC_ConfigChannel+0x45c>)
 800108c:	4013      	ands	r3, r2
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	0691      	lsls	r1, r2, #26
 8001094:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001096:	430a      	orrs	r2, r1
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010a2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010a4:	e05c      	b.n	8001160 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80010ac:	4b7a      	ldr	r3, [pc, #488]	; (8001298 <HAL_ADC_ConfigChannel+0x45c>)
 80010ae:	4013      	ands	r3, r2
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	0691      	lsls	r1, r2, #26
 80010b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010b8:	430a      	orrs	r2, r1
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010c4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010c6:	e04b      	b.n	8001160 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	069b      	lsls	r3, r3, #26
 80010d8:	429a      	cmp	r2, r3
 80010da:	d107      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80010ea:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80010f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	069b      	lsls	r3, r3, #26
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d107      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800110e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	069b      	lsls	r3, r3, #26
 8001120:	429a      	cmp	r2, r3
 8001122:	d107      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001132:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800113a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	069b      	lsls	r3, r3, #26
 8001144:	429a      	cmp	r2, r3
 8001146:	d10a      	bne.n	800115e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001156:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001158:	e001      	b.n	800115e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800115a:	bf00      	nop
 800115c:	e000      	b.n	8001160 <HAL_ADC_ConfigChannel+0x324>
      break;
 800115e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b01      	cmp	r3, #1
 800116c:	d108      	bne.n	8001180 <HAL_ADC_ConfigChannel+0x344>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <HAL_ADC_ConfigChannel+0x344>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <HAL_ADC_ConfigChannel+0x346>
 8001180:	2300      	movs	r3, #0
 8001182:	2b00      	cmp	r3, #0
 8001184:	f040 810a 	bne.w	800139c <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d00f      	beq.n	80011b0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2201      	movs	r2, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	400a      	ands	r2, r1
 80011aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80011ae:	e049      	b.n	8001244 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2201      	movs	r2, #1
 80011be:	409a      	lsls	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b09      	cmp	r3, #9
 80011d0:	d91c      	bls.n	800120c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6999      	ldr	r1, [r3, #24]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4613      	mov	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	3b1b      	subs	r3, #27
 80011e4:	2207      	movs	r2, #7
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	4019      	ands	r1, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	6898      	ldr	r0, [r3, #8]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	3b1b      	subs	r3, #27
 80011fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	619a      	str	r2, [r3, #24]
 800120a:	e01b      	b.n	8001244 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6959      	ldr	r1, [r3, #20]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	2207      	movs	r2, #7
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	4019      	ands	r1, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	6898      	ldr	r0, [r3, #8]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	fa00 f203 	lsl.w	r2, r0, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_ADC_ConfigChannel+0x460>)
 8001246:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b10      	cmp	r3, #16
 800124e:	d105      	bne.n	800125c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001258:	2b00      	cmp	r3, #0
 800125a:	d015      	beq.n	8001288 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001260:	2b11      	cmp	r3, #17
 8001262:	d105      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00b      	beq.n	8001288 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001274:	2b12      	cmp	r3, #18
 8001276:	f040 8091 	bne.w	800139c <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800127a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001282:	2b00      	cmp	r3, #0
 8001284:	f040 808a 	bne.w	800139c <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001290:	d108      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x468>
 8001292:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_ADC_ConfigChannel+0x464>)
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	e008      	b.n	80012aa <HAL_ADC_ConfigChannel+0x46e>
 8001298:	83fff000 	.word	0x83fff000
 800129c:	50000300 	.word	0x50000300
 80012a0:	50000100 	.word	0x50000100
 80012a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012a8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d108      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x48e>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x48e>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_ADC_ConfigChannel+0x490>
 80012ca:	2300      	movs	r3, #0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d150      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012d0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d010      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d107      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x4b6>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x4b6>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x4b8>
 80012f2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d13c      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b10      	cmp	r3, #16
 80012fe:	d11d      	bne.n	800133c <HAL_ADC_ConfigChannel+0x500>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001308:	d118      	bne.n	800133c <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800130a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001314:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001316:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <HAL_ADC_ConfigChannel+0x578>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <HAL_ADC_ConfigChannel+0x57c>)
 800131c:	fba2 2303 	umull	r2, r3, r2, r3
 8001320:	0c9a      	lsrs	r2, r3, #18
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800132c:	e002      	b.n	8001334 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	3b01      	subs	r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f9      	bne.n	800132e <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800133a:	e02e      	b.n	800139a <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b11      	cmp	r3, #17
 8001342:	d10b      	bne.n	800135c <HAL_ADC_ConfigChannel+0x520>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800134c:	d106      	bne.n	800135c <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800134e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001358:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800135a:	e01e      	b.n	800139a <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b12      	cmp	r3, #18
 8001362:	d11a      	bne.n	800139a <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800136c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800136e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001370:	e013      	b.n	800139a <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f043 0220 	orr.w	r2, r3, #32
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001384:	e00a      	b.n	800139c <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f043 0220 	orr.w	r2, r3, #32
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001398:	e000      	b.n	800139c <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800139a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80013a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	376c      	adds	r7, #108	; 0x6c
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	20000000 	.word	0x20000000
 80013b8:	431bde83 	.word	0x431bde83

080013bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80013bc:	b480      	push	{r7}
 80013be:	b099      	sub	sp, #100	; 0x64
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013d4:	d102      	bne.n	80013dc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80013d6:	4b5a      	ldr	r3, [pc, #360]	; (8001540 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	e002      	b.n	80013e2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80013dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013e0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0a2      	b.n	8001532 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d101      	bne.n	80013fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e09b      	b.n	8001532 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	d17f      	bne.n	8001510 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d179      	bne.n	8001510 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800141c:	4b49      	ldr	r3, [pc, #292]	; (8001544 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800141e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d040      	beq.n	80014aa <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800143a:	035b      	lsls	r3, r3, #13
 800143c:	430b      	orrs	r3, r1
 800143e:	431a      	orrs	r2, r3
 8001440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001442:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d108      	bne.n	8001464 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001464:	2300      	movs	r3, #0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d15c      	bne.n	8001524 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d107      	bne.n	8001486 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b01      	cmp	r3, #1
 8001480:	d101      	bne.n	8001486 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001486:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001488:	2b00      	cmp	r3, #0
 800148a:	d14b      	bne.n	8001524 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800148c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001494:	f023 030f 	bic.w	r3, r3, #15
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	6811      	ldr	r1, [r2, #0]
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	6892      	ldr	r2, [r2, #8]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	431a      	orrs	r2, r3
 80014a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014a6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80014a8:	e03c      	b.n	8001524 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80014aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014b4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d108      	bne.n	80014d6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80014d6:	2300      	movs	r3, #0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d123      	bne.n	8001524 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d107      	bne.n	80014f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80014f8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d112      	bne.n	8001524 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80014fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001506:	f023 030f 	bic.w	r3, r3, #15
 800150a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800150c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800150e:	e009      	b.n	8001524 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	f043 0220 	orr.w	r2, r3, #32
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001522:	e000      	b.n	8001526 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001524:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800152e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001532:	4618      	mov	r0, r3
 8001534:	3764      	adds	r7, #100	; 0x64
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	50000100 	.word	0x50000100
 8001544:	50000300 	.word	0x50000300

08001548 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800155e:	2b00      	cmp	r3, #0
 8001560:	d126      	bne.n	80015b0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001578:	2b00      	cmp	r3, #0
 800157a:	d115      	bne.n	80015a8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001580:	2b00      	cmp	r3, #0
 8001582:	d111      	bne.n	80015a8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d105      	bne.n	80015a8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f043 0201 	orr.w	r2, r3, #1
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7ff f9bd 	bl	8000928 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80015ae:	e004      	b.n	80015ba <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	4798      	blx	r3
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f7ff f9b3 	bl	800093c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	f043 0204 	orr.w	r2, r3, #4
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7ff f9a3 	bl	8000950 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b01      	cmp	r3, #1
 800162c:	d108      	bne.n	8001640 <ADC_Enable+0x2c>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <ADC_Enable+0x2c>
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <ADC_Enable+0x2e>
 8001640:	2300      	movs	r3, #0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d143      	bne.n	80016ce <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <ADC_Enable+0xc4>)
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00d      	beq.n	8001670 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	f043 0210 	orr.w	r2, r3, #16
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	f043 0201 	orr.w	r2, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e02f      	b.n	80016d0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001680:	f7ff f946 	bl	8000910 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001686:	e01b      	b.n	80016c0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001688:	f7ff f942 	bl	8000910 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d914      	bls.n	80016c0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d00d      	beq.n	80016c0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f043 0210 	orr.w	r2, r3, #16
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b4:	f043 0201 	orr.w	r2, r3, #1
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e007      	b.n	80016d0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d1dc      	bne.n	8001688 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	8000003f 	.word	0x8000003f

080016dc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d108      	bne.n	8001708 <ADC_Disable+0x2c>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <ADC_Disable+0x2c>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <ADC_Disable+0x2e>
 8001708:	2300      	movs	r3, #0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d047      	beq.n	800179e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 030d 	and.w	r3, r3, #13
 8001718:	2b01      	cmp	r3, #1
 800171a:	d10f      	bne.n	800173c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0202 	orr.w	r2, r2, #2
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2203      	movs	r2, #3
 8001732:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001734:	f7ff f8ec 	bl	8000910 <HAL_GetTick>
 8001738:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800173a:	e029      	b.n	8001790 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f043 0210 	orr.w	r2, r3, #16
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174c:	f043 0201 	orr.w	r2, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e023      	b.n	80017a0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001758:	f7ff f8da 	bl	8000910 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d914      	bls.n	8001790 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b01      	cmp	r3, #1
 8001772:	d10d      	bne.n	8001790 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f043 0210 	orr.w	r2, r3, #16
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001784:	f043 0201 	orr.w	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e007      	b.n	80017a0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b01      	cmp	r3, #1
 800179c:	d0dc      	beq.n	8001758 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001914:	d301      	bcc.n	800191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <SysTick_Config+0x40>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001922:	210f      	movs	r1, #15
 8001924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001928:	f7ff ff8e 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <SysTick_Config+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <SysTick_Config+0x40>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff29 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001970:	f7ff ff3e 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 8001974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	6978      	ldr	r0, [r7, #20]
 800197c:	f7ff ff8e 	bl	800189c <NVIC_EncodePriority>
 8001980:	4602      	mov	r2, r0
 8001982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff5d 	bl	8001848 <__NVIC_SetPriority>
}
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff31 	bl	800180c <__NVIC_EnableIRQ>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffa2 	bl	8001904 <SysTick_Config>
 80019c0:	4603      	mov	r3, r0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e037      	b.n	8001a50 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80019fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f940 	bl	8001cb8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}  
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_DMA_Start_IT+0x20>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e04a      	b.n	8001b0e <HAL_DMA_Start_IT+0xb6>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d13a      	bne.n	8001b00 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0201 	bic.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f8d4 	bl	8001c5c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 020e 	orr.w	r2, r2, #14
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	e00f      	b.n	8001aee <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 020a 	orr.w	r2, r2, #10
 8001adc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0204 	bic.w	r2, r2, #4
 8001aec:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0201 	orr.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	e005      	b.n	8001b0c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	2204      	movs	r2, #4
 8001b34:	409a      	lsls	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d024      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x72>
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d01f      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0320 	and.w	r3, r3, #32
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d107      	bne.n	8001b66 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0204 	bic.w	r2, r2, #4
 8001b64:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6e:	2104      	movs	r1, #4
 8001b70:	fa01 f202 	lsl.w	r2, r1, r2
 8001b74:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d06a      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001b86:	e065      	b.n	8001c54 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d02c      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0xdc>
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d027      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10b      	bne.n	8001bc8 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 020a 	bic.w	r2, r2, #10
 8001bbe:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd0:	2102      	movs	r1, #2
 8001bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d035      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001bf0:	e030      	b.n	8001c54 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	2208      	movs	r2, #8
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d028      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x13e>
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d023      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 020e 	bic.w	r2, r2, #14
 8001c1a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c24:	2101      	movs	r1, #1
 8001c26:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d004      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	4798      	blx	r3
    }
  }
}  
 8001c52:	e7ff      	b.n	8001c54 <HAL_DMA_IRQHandler+0x13e>
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c72:	2101      	movs	r1, #1
 8001c74:	fa01 f202 	lsl.w	r2, r1, r2
 8001c78:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b10      	cmp	r3, #16
 8001c88:	d108      	bne.n	8001c9c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c9a:	e007      	b.n	8001cac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	60da      	str	r2, [r3, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <DMA_CalcBaseAndBitshift+0x34>)
 8001cc8:	4413      	add	r3, r2
 8001cca:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <DMA_CalcBaseAndBitshift+0x38>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	009a      	lsls	r2, r3, #2
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a06      	ldr	r2, [pc, #24]	; (8001cf4 <DMA_CalcBaseAndBitshift+0x3c>)
 8001cdc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	bffdfff8 	.word	0xbffdfff8
 8001cf0:	cccccccd 	.word	0xcccccccd
 8001cf4:	40020000 	.word	0x40020000

08001cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d06:	e14e      	b.n	8001fa6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	4013      	ands	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8140 	beq.w	8001fa0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d005      	beq.n	8001d38 <HAL_GPIO_Init+0x40>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d130      	bne.n	8001d9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d6e:	2201      	movs	r2, #1
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	f003 0201 	and.w	r2, r3, #1
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d017      	beq.n	8001dd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	2203      	movs	r2, #3
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d123      	bne.n	8001e2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	08da      	lsrs	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3208      	adds	r2, #8
 8001dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	220f      	movs	r2, #15
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	08da      	lsrs	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3208      	adds	r2, #8
 8001e24:	6939      	ldr	r1, [r7, #16]
 8001e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0203 	and.w	r2, r3, #3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 809a 	beq.w	8001fa0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6c:	4b55      	ldr	r3, [pc, #340]	; (8001fc4 <HAL_GPIO_Init+0x2cc>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	4a54      	ldr	r2, [pc, #336]	; (8001fc4 <HAL_GPIO_Init+0x2cc>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6193      	str	r3, [r2, #24]
 8001e78:	4b52      	ldr	r3, [pc, #328]	; (8001fc4 <HAL_GPIO_Init+0x2cc>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e84:	4a50      	ldr	r2, [pc, #320]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	089b      	lsrs	r3, r3, #2
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	220f      	movs	r2, #15
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eae:	d013      	beq.n	8001ed8 <HAL_GPIO_Init+0x1e0>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a46      	ldr	r2, [pc, #280]	; (8001fcc <HAL_GPIO_Init+0x2d4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00d      	beq.n	8001ed4 <HAL_GPIO_Init+0x1dc>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a45      	ldr	r2, [pc, #276]	; (8001fd0 <HAL_GPIO_Init+0x2d8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d007      	beq.n	8001ed0 <HAL_GPIO_Init+0x1d8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a44      	ldr	r2, [pc, #272]	; (8001fd4 <HAL_GPIO_Init+0x2dc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d101      	bne.n	8001ecc <HAL_GPIO_Init+0x1d4>
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e006      	b.n	8001eda <HAL_GPIO_Init+0x1e2>
 8001ecc:	2305      	movs	r3, #5
 8001ece:	e004      	b.n	8001eda <HAL_GPIO_Init+0x1e2>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e002      	b.n	8001eda <HAL_GPIO_Init+0x1e2>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <HAL_GPIO_Init+0x1e2>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	f002 0203 	and.w	r2, r2, #3
 8001ee0:	0092      	lsls	r2, r2, #2
 8001ee2:	4093      	lsls	r3, r2
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eea:	4937      	ldr	r1, [pc, #220]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef8:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <HAL_GPIO_Init+0x2e0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f1c:	4a2e      	ldr	r2, [pc, #184]	; (8001fd8 <HAL_GPIO_Init+0x2e0>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f22:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_GPIO_Init+0x2e0>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f46:	4a24      	ldr	r2, [pc, #144]	; (8001fd8 <HAL_GPIO_Init+0x2e0>)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_GPIO_Init+0x2e0>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f70:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <HAL_GPIO_Init+0x2e0>)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f76:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <HAL_GPIO_Init+0x2e0>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f9a:	4a0f      	ldr	r2, [pc, #60]	; (8001fd8 <HAL_GPIO_Init+0x2e0>)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f47f aea9 	bne.w	8001d08 <HAL_GPIO_Init+0x10>
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	bf00      	nop
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	48000400 	.word	0x48000400
 8001fd0:	48000800 	.word	0x48000800
 8001fd4:	48000c00 	.word	0x48000c00
 8001fd8:	40010400 	.word	0x40010400

08001fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fec:	787b      	ldrb	r3, [r7, #1]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ff2:	887a      	ldrh	r2, [r7, #2]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ff8:	e002      	b.n	8002000 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002012:	af00      	add	r7, sp, #0
 8002014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002018:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800201c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800201e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d102      	bne.n	8002032 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	f001 b823 	b.w	8003078 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002036:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 817d 	beq.w	8002342 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002048:	4bbc      	ldr	r3, [pc, #752]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 030c 	and.w	r3, r3, #12
 8002050:	2b04      	cmp	r3, #4
 8002052:	d00c      	beq.n	800206e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002054:	4bb9      	ldr	r3, [pc, #740]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d15c      	bne.n	800211a <HAL_RCC_OscConfig+0x10e>
 8002060:	4bb6      	ldr	r3, [pc, #728]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206c:	d155      	bne.n	800211a <HAL_RCC_OscConfig+0x10e>
 800206e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002072:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002082:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b01      	cmp	r3, #1
 8002098:	d102      	bne.n	80020a0 <HAL_RCC_OscConfig+0x94>
 800209a:	4ba8      	ldr	r3, [pc, #672]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	e015      	b.n	80020cc <HAL_RCC_OscConfig+0xc0>
 80020a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80020b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80020bc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80020c8:	4b9c      	ldr	r3, [pc, #624]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020d0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80020d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80020d8:	fa92 f2a2 	rbit	r2, r2
 80020dc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80020e0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80020e4:	fab2 f282 	clz	r2, r2
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	f042 0220 	orr.w	r2, r2, #32
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	f002 021f 	and.w	r2, r2, #31
 80020f4:	2101      	movs	r1, #1
 80020f6:	fa01 f202 	lsl.w	r2, r1, r2
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 811f 	beq.w	8002340 <HAL_RCC_OscConfig+0x334>
 8002102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 8116 	bne.w	8002340 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	f000 bfaf 	b.w	8003078 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212a:	d106      	bne.n	800213a <HAL_RCC_OscConfig+0x12e>
 800212c:	4b83      	ldr	r3, [pc, #524]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a82      	ldr	r2, [pc, #520]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	e036      	b.n	80021a8 <HAL_RCC_OscConfig+0x19c>
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x158>
 800214a:	4b7c      	ldr	r3, [pc, #496]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a7b      	ldr	r2, [pc, #492]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b79      	ldr	r3, [pc, #484]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a78      	ldr	r2, [pc, #480]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800215c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e021      	b.n	80021a8 <HAL_RCC_OscConfig+0x19c>
 8002164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002168:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x184>
 8002176:	4b71      	ldr	r3, [pc, #452]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a70      	ldr	r2, [pc, #448]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800217c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b6e      	ldr	r3, [pc, #440]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a6d      	ldr	r2, [pc, #436]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e00b      	b.n	80021a8 <HAL_RCC_OscConfig+0x19c>
 8002190:	4b6a      	ldr	r3, [pc, #424]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a69      	ldr	r2, [pc, #420]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b67      	ldr	r3, [pc, #412]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a66      	ldr	r2, [pc, #408]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80021a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021a8:	4b64      	ldr	r3, [pc, #400]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	f023 020f 	bic.w	r2, r3, #15
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	495f      	ldr	r1, [pc, #380]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d059      	beq.n	8002286 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7fe fb9d 	bl	8000910 <HAL_GetTick>
 80021d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021dc:	f7fe fb98 	bl	8000910 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b64      	cmp	r3, #100	; 0x64
 80021ea:	d902      	bls.n	80021f2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	f000 bf43 	b.w	8003078 <HAL_RCC_OscConfig+0x106c>
 80021f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021f6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002206:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d102      	bne.n	8002224 <HAL_RCC_OscConfig+0x218>
 800221e:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	e015      	b.n	8002250 <HAL_RCC_OscConfig+0x244>
 8002224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002228:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002230:	fa93 f3a3 	rbit	r3, r3
 8002234:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800223c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002240:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800224c:	4b3b      	ldr	r3, [pc, #236]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002254:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002258:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800225c:	fa92 f2a2 	rbit	r2, r2
 8002260:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002264:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002268:	fab2 f282 	clz	r2, r2
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f042 0220 	orr.w	r2, r2, #32
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	f002 021f 	and.w	r2, r2, #31
 8002278:	2101      	movs	r1, #1
 800227a:	fa01 f202 	lsl.w	r2, r1, r2
 800227e:	4013      	ands	r3, r2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ab      	beq.n	80021dc <HAL_RCC_OscConfig+0x1d0>
 8002284:	e05d      	b.n	8002342 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe fb43 	bl	8000910 <HAL_GetTick>
 800228a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002290:	f7fe fb3e 	bl	8000910 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b64      	cmp	r3, #100	; 0x64
 800229e:	d902      	bls.n	80022a6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	f000 bee9 	b.w	8003078 <HAL_RCC_OscConfig+0x106c>
 80022a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022aa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80022ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	095b      	lsrs	r3, r3, #5
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d102      	bne.n	80022d8 <HAL_RCC_OscConfig+0x2cc>
 80022d2:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	e015      	b.n	8002304 <HAL_RCC_OscConfig+0x2f8>
 80022d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022dc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80022ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022f0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80022f4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002300:	4b0e      	ldr	r3, [pc, #56]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002308:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800230c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002310:	fa92 f2a2 	rbit	r2, r2
 8002314:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002318:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800231c:	fab2 f282 	clz	r2, r2
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	f042 0220 	orr.w	r2, r2, #32
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	f002 021f 	and.w	r2, r2, #31
 800232c:	2101      	movs	r1, #1
 800232e:	fa01 f202 	lsl.w	r2, r1, r2
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1ab      	bne.n	8002290 <HAL_RCC_OscConfig+0x284>
 8002338:	e003      	b.n	8002342 <HAL_RCC_OscConfig+0x336>
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002346:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 817d 	beq.w	8002652 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002358:	4ba6      	ldr	r3, [pc, #664]	; (80025f4 <HAL_RCC_OscConfig+0x5e8>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00b      	beq.n	800237c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002364:	4ba3      	ldr	r3, [pc, #652]	; (80025f4 <HAL_RCC_OscConfig+0x5e8>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 030c 	and.w	r3, r3, #12
 800236c:	2b08      	cmp	r3, #8
 800236e:	d172      	bne.n	8002456 <HAL_RCC_OscConfig+0x44a>
 8002370:	4ba0      	ldr	r3, [pc, #640]	; (80025f4 <HAL_RCC_OscConfig+0x5e8>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d16c      	bne.n	8002456 <HAL_RCC_OscConfig+0x44a>
 800237c:	2302      	movs	r3, #2
 800237e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800238e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	095b      	lsrs	r3, r3, #5
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d102      	bne.n	80023ac <HAL_RCC_OscConfig+0x3a0>
 80023a6:	4b93      	ldr	r3, [pc, #588]	; (80025f4 <HAL_RCC_OscConfig+0x5e8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	e013      	b.n	80023d4 <HAL_RCC_OscConfig+0x3c8>
 80023ac:	2302      	movs	r3, #2
 80023ae:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80023be:	2302      	movs	r3, #2
 80023c0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80023d0:	4b88      	ldr	r3, [pc, #544]	; (80025f4 <HAL_RCC_OscConfig+0x5e8>)
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	2202      	movs	r2, #2
 80023d6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80023da:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80023de:	fa92 f2a2 	rbit	r2, r2
 80023e2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80023e6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80023ea:	fab2 f282 	clz	r2, r2
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	f042 0220 	orr.w	r2, r2, #32
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	f002 021f 	and.w	r2, r2, #31
 80023fa:	2101      	movs	r1, #1
 80023fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCC_OscConfig+0x410>
 8002406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d002      	beq.n	800241c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	f000 be2e 	b.w	8003078 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241c:	4b75      	ldr	r3, [pc, #468]	; (80025f4 <HAL_RCC_OscConfig+0x5e8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002428:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	21f8      	movs	r1, #248	; 0xf8
 8002432:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800243a:	fa91 f1a1 	rbit	r1, r1
 800243e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002442:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002446:	fab1 f181 	clz	r1, r1
 800244a:	b2c9      	uxtb	r1, r1
 800244c:	408b      	lsls	r3, r1
 800244e:	4969      	ldr	r1, [pc, #420]	; (80025f4 <HAL_RCC_OscConfig+0x5e8>)
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002454:	e0fd      	b.n	8002652 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 8088 	beq.w	8002578 <HAL_RCC_OscConfig+0x56c>
 8002468:	2301      	movs	r3, #1
 800246a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800247a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002488:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	461a      	mov	r2, r3
 8002490:	2301      	movs	r3, #1
 8002492:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7fe fa3c 	bl	8000910 <HAL_GetTick>
 8002498:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800249e:	f7fe fa37 	bl	8000910 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d902      	bls.n	80024b4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	f000 bde2 	b.w	8003078 <HAL_RCC_OscConfig+0x106c>
 80024b4:	2302      	movs	r3, #2
 80024b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80024c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d102      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4d8>
 80024de:	4b45      	ldr	r3, [pc, #276]	; (80025f4 <HAL_RCC_OscConfig+0x5e8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	e013      	b.n	800250c <HAL_RCC_OscConfig+0x500>
 80024e4:	2302      	movs	r3, #2
 80024e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80024f6:	2302      	movs	r3, #2
 80024f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80024fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002508:	4b3a      	ldr	r3, [pc, #232]	; (80025f4 <HAL_RCC_OscConfig+0x5e8>)
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	2202      	movs	r2, #2
 800250e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002512:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002516:	fa92 f2a2 	rbit	r2, r2
 800251a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800251e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002522:	fab2 f282 	clz	r2, r2
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	f042 0220 	orr.w	r2, r2, #32
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	f002 021f 	and.w	r2, r2, #31
 8002532:	2101      	movs	r1, #1
 8002534:	fa01 f202 	lsl.w	r2, r1, r2
 8002538:	4013      	ands	r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0af      	beq.n	800249e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <HAL_RCC_OscConfig+0x5e8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	21f8      	movs	r1, #248	; 0xf8
 8002554:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800255c:	fa91 f1a1 	rbit	r1, r1
 8002560:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002564:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002568:	fab1 f181 	clz	r1, r1
 800256c:	b2c9      	uxtb	r1, r1
 800256e:	408b      	lsls	r3, r1
 8002570:	4920      	ldr	r1, [pc, #128]	; (80025f4 <HAL_RCC_OscConfig+0x5e8>)
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
 8002576:	e06c      	b.n	8002652 <HAL_RCC_OscConfig+0x646>
 8002578:	2301      	movs	r3, #1
 800257a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800258a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002598:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	461a      	mov	r2, r3
 80025a0:	2300      	movs	r3, #0
 80025a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7fe f9b4 	bl	8000910 <HAL_GetTick>
 80025a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ae:	f7fe f9af 	bl	8000910 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d902      	bls.n	80025c4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	f000 bd5a 	b.w	8003078 <HAL_RCC_OscConfig+0x106c>
 80025c4:	2302      	movs	r3, #2
 80025c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80025d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d104      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5ec>
 80025ee:	4b01      	ldr	r3, [pc, #4]	; (80025f4 <HAL_RCC_OscConfig+0x5e8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	e015      	b.n	8002620 <HAL_RCC_OscConfig+0x614>
 80025f4:	40021000 	.word	0x40021000
 80025f8:	2302      	movs	r3, #2
 80025fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800260a:	2302      	movs	r3, #2
 800260c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002610:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800261c:	4bc8      	ldr	r3, [pc, #800]	; (8002940 <HAL_RCC_OscConfig+0x934>)
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	2202      	movs	r2, #2
 8002622:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002626:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800262a:	fa92 f2a2 	rbit	r2, r2
 800262e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002632:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002636:	fab2 f282 	clz	r2, r2
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f042 0220 	orr.w	r2, r2, #32
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	f002 021f 	and.w	r2, r2, #31
 8002646:	2101      	movs	r1, #1
 8002648:	fa01 f202 	lsl.w	r2, r1, r2
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ad      	bne.n	80025ae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002656:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8110 	beq.w	8002888 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d079      	beq.n	800276c <HAL_RCC_OscConfig+0x760>
 8002678:	2301      	movs	r3, #1
 800267a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800268a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	4bab      	ldr	r3, [pc, #684]	; (8002944 <HAL_RCC_OscConfig+0x938>)
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	461a      	mov	r2, r3
 800269e:	2301      	movs	r3, #1
 80026a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a2:	f7fe f935 	bl	8000910 <HAL_GetTick>
 80026a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ac:	f7fe f930 	bl	8000910 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d902      	bls.n	80026c2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	f000 bcdb 	b.w	8003078 <HAL_RCC_OscConfig+0x106c>
 80026c2:	2302      	movs	r3, #2
 80026c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026dc:	2202      	movs	r2, #2
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	fa93 f2a3 	rbit	r2, r3
 80026ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002700:	2202      	movs	r2, #2
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	fa93 f2a3 	rbit	r2, r3
 8002712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002716:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800271a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271c:	4b88      	ldr	r3, [pc, #544]	; (8002940 <HAL_RCC_OscConfig+0x934>)
 800271e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002728:	2102      	movs	r1, #2
 800272a:	6019      	str	r1, [r3, #0]
 800272c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002730:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	fa93 f1a3 	rbit	r1, r3
 800273a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002742:	6019      	str	r1, [r3, #0]
  return result;
 8002744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002748:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	2101      	movs	r1, #1
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0a0      	beq.n	80026ac <HAL_RCC_OscConfig+0x6a0>
 800276a:	e08d      	b.n	8002888 <HAL_RCC_OscConfig+0x87c>
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	fa93 f2a3 	rbit	r2, r3
 8002786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800278e:	601a      	str	r2, [r3, #0]
  return result;
 8002790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002794:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002798:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b68      	ldr	r3, [pc, #416]	; (8002944 <HAL_RCC_OscConfig+0x938>)
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	461a      	mov	r2, r3
 80027aa:	2300      	movs	r3, #0
 80027ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ae:	f7fe f8af 	bl	8000910 <HAL_GetTick>
 80027b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027b8:	f7fe f8aa 	bl	8000910 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d902      	bls.n	80027ce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	f000 bc55 	b.w	8003078 <HAL_RCC_OscConfig+0x106c>
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80027d6:	2202      	movs	r2, #2
 80027d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	fa93 f2a3 	rbit	r2, r3
 80027e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027fa:	2202      	movs	r2, #2
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002802:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	fa93 f2a3 	rbit	r2, r3
 800280c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002810:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800281e:	2202      	movs	r2, #2
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	fa93 f2a3 	rbit	r2, r3
 8002830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002834:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002838:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <HAL_RCC_OscConfig+0x934>)
 800283c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002846:	2102      	movs	r1, #2
 8002848:	6019      	str	r1, [r3, #0]
 800284a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	fa93 f1a3 	rbit	r1, r3
 8002858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002860:	6019      	str	r1, [r3, #0]
  return result;
 8002862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002866:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	2101      	movs	r1, #1
 800287e:	fa01 f303 	lsl.w	r3, r1, r3
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d197      	bne.n	80027b8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 81a1 	beq.w	8002be0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <HAL_RCC_OscConfig+0x934>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d116      	bne.n	80028de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b0:	4b23      	ldr	r3, [pc, #140]	; (8002940 <HAL_RCC_OscConfig+0x934>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	4a22      	ldr	r2, [pc, #136]	; (8002940 <HAL_RCC_OscConfig+0x934>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ba:	61d3      	str	r3, [r2, #28]
 80028bc:	4b20      	ldr	r3, [pc, #128]	; (8002940 <HAL_RCC_OscConfig+0x934>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80028d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028d8:	2301      	movs	r3, #1
 80028da:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028de:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <HAL_RCC_OscConfig+0x93c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d11a      	bne.n	8002920 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ea:	4b17      	ldr	r3, [pc, #92]	; (8002948 <HAL_RCC_OscConfig+0x93c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a16      	ldr	r2, [pc, #88]	; (8002948 <HAL_RCC_OscConfig+0x93c>)
 80028f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f6:	f7fe f80b 	bl	8000910 <HAL_GetTick>
 80028fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fe:	e009      	b.n	8002914 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002900:	f7fe f806 	bl	8000910 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b64      	cmp	r3, #100	; 0x64
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e3b1      	b.n	8003078 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <HAL_RCC_OscConfig+0x93c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ef      	beq.n	8002900 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002924:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d10d      	bne.n	800294c <HAL_RCC_OscConfig+0x940>
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <HAL_RCC_OscConfig+0x934>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4a02      	ldr	r2, [pc, #8]	; (8002940 <HAL_RCC_OscConfig+0x934>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6213      	str	r3, [r2, #32]
 800293c:	e03c      	b.n	80029b8 <HAL_RCC_OscConfig+0x9ac>
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	10908120 	.word	0x10908120
 8002948:	40007000 	.word	0x40007000
 800294c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002950:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10c      	bne.n	8002976 <HAL_RCC_OscConfig+0x96a>
 800295c:	4bc1      	ldr	r3, [pc, #772]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4ac0      	ldr	r2, [pc, #768]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	6213      	str	r3, [r2, #32]
 8002968:	4bbe      	ldr	r3, [pc, #760]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	4abd      	ldr	r2, [pc, #756]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 800296e:	f023 0304 	bic.w	r3, r3, #4
 8002972:	6213      	str	r3, [r2, #32]
 8002974:	e020      	b.n	80029b8 <HAL_RCC_OscConfig+0x9ac>
 8002976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b05      	cmp	r3, #5
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x994>
 8002986:	4bb7      	ldr	r3, [pc, #732]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4ab6      	ldr	r2, [pc, #728]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 800298c:	f043 0304 	orr.w	r3, r3, #4
 8002990:	6213      	str	r3, [r2, #32]
 8002992:	4bb4      	ldr	r3, [pc, #720]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	4ab3      	ldr	r2, [pc, #716]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	6213      	str	r3, [r2, #32]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0x9ac>
 80029a0:	4bb0      	ldr	r3, [pc, #704]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4aaf      	ldr	r2, [pc, #700]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 80029a6:	f023 0301 	bic.w	r3, r3, #1
 80029aa:	6213      	str	r3, [r2, #32]
 80029ac:	4bad      	ldr	r3, [pc, #692]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4aac      	ldr	r2, [pc, #688]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 80029b2:	f023 0304 	bic.w	r3, r3, #4
 80029b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8081 	beq.w	8002acc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ca:	f7fd ffa1 	bl	8000910 <HAL_GetTick>
 80029ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d2:	e00b      	b.n	80029ec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d4:	f7fd ff9c 	bl	8000910 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e345      	b.n	8003078 <HAL_RCC_OscConfig+0x106c>
 80029ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80029f4:	2202      	movs	r2, #2
 80029f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	fa93 f2a3 	rbit	r2, r3
 8002a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a18:	2202      	movs	r2, #2
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	fa93 f2a3 	rbit	r2, r3
 8002a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a32:	601a      	str	r2, [r3, #0]
  return result;
 8002a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a38:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a3c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_OscConfig+0xa4c>
 8002a52:	4b84      	ldr	r3, [pc, #528]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	e013      	b.n	8002a80 <HAL_RCC_OscConfig+0xa74>
 8002a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a60:	2202      	movs	r2, #2
 8002a62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a68:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	fa93 f2a3 	rbit	r2, r3
 8002a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a76:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	4b79      	ldr	r3, [pc, #484]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a88:	2102      	movs	r1, #2
 8002a8a:	6011      	str	r1, [r2, #0]
 8002a8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a90:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	fa92 f1a2 	rbit	r1, r2
 8002a9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a9e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002aa2:	6011      	str	r1, [r2, #0]
  return result;
 8002aa4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aa8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	fab2 f282 	clz	r2, r2
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	f002 021f 	and.w	r2, r2, #31
 8002abe:	2101      	movs	r1, #1
 8002ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d084      	beq.n	80029d4 <HAL_RCC_OscConfig+0x9c8>
 8002aca:	e07f      	b.n	8002bcc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002acc:	f7fd ff20 	bl	8000910 <HAL_GetTick>
 8002ad0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad4:	e00b      	b.n	8002aee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad6:	f7fd ff1b 	bl	8000910 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e2c4      	b.n	8003078 <HAL_RCC_OscConfig+0x106c>
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002af6:	2202      	movs	r2, #2
 8002af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	fa93 f2a3 	rbit	r2, r3
 8002b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b22:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	fa93 f2a3 	rbit	r2, r3
 8002b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b30:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b34:	601a      	str	r2, [r3, #0]
  return result;
 8002b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	f043 0302 	orr.w	r3, r3, #2
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d102      	bne.n	8002b5a <HAL_RCC_OscConfig+0xb4e>
 8002b54:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	e013      	b.n	8002b82 <HAL_RCC_OscConfig+0xb76>
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b62:	2202      	movs	r2, #2
 8002b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	fa93 f2a3 	rbit	r2, r3
 8002b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	4b39      	ldr	r3, [pc, #228]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	6011      	str	r1, [r2, #0]
 8002b8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b92:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	fa92 f1a2 	rbit	r1, r2
 8002b9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ba0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ba4:	6011      	str	r1, [r2, #0]
  return result;
 8002ba6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002baa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	fab2 f282 	clz	r2, r2
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	f002 021f 	and.w	r2, r2, #31
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d184      	bne.n	8002ad6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bcc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd4:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	4a22      	ldr	r2, [pc, #136]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 8002bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bde:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8242 	beq.w	8003076 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bf2:	4b1c      	ldr	r3, [pc, #112]	; (8002c64 <HAL_RCC_OscConfig+0xc58>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	f000 8213 	beq.w	8003026 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	f040 8162 	bne.w	8002ed6 <HAL_RCC_OscConfig+0xeca>
 8002c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c16:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c24:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	fa93 f2a3 	rbit	r2, r3
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c36:	601a      	str	r2, [r3, #0]
  return result;
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c40:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c42:	fab3 f383 	clz	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	461a      	mov	r2, r3
 8002c54:	2300      	movs	r3, #0
 8002c56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7fd fe5a 	bl	8000910 <HAL_GetTick>
 8002c5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c60:	e00c      	b.n	8002c7c <HAL_RCC_OscConfig+0xc70>
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fd fe52 	bl	8000910 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e1fd      	b.n	8003078 <HAL_RCC_OscConfig+0x106c>
 8002c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c80:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	fa93 f2a3 	rbit	r2, r3
 8002c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ca0:	601a      	str	r2, [r3, #0]
  return result;
 8002ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002caa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cac:	fab3 f383 	clz	r3, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCC_OscConfig+0xcba>
 8002cc0:	4bb0      	ldr	r3, [pc, #704]	; (8002f84 <HAL_RCC_OscConfig+0xf78>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	e027      	b.n	8002d16 <HAL_RCC_OscConfig+0xd0a>
 8002cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002cce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	fa93 f2a3 	rbit	r2, r3
 8002ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002cf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	fa93 f2a3 	rbit	r2, r3
 8002d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	4b9c      	ldr	r3, [pc, #624]	; (8002f84 <HAL_RCC_OscConfig+0xf78>)
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d1a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d1e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d22:	6011      	str	r1, [r2, #0]
 8002d24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d28:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	fa92 f1a2 	rbit	r1, r2
 8002d32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d36:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d3a:	6011      	str	r1, [r2, #0]
  return result;
 8002d3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d40:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	fab2 f282 	clz	r2, r2
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	f042 0220 	orr.w	r2, r2, #32
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	f002 021f 	and.w	r2, r2, #31
 8002d56:	2101      	movs	r1, #1
 8002d58:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d182      	bne.n	8002c68 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d62:	4b88      	ldr	r3, [pc, #544]	; (8002f84 <HAL_RCC_OscConfig+0xf78>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	430b      	orrs	r3, r1
 8002d84:	497f      	ldr	r1, [pc, #508]	; (8002f84 <HAL_RCC_OscConfig+0xf78>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	604b      	str	r3, [r1, #4]
 8002d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002dae:	601a      	str	r2, [r3, #0]
  return result;
 8002db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002db8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2301      	movs	r3, #1
 8002dce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7fd fd9e 	bl	8000910 <HAL_GetTick>
 8002dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd8:	e009      	b.n	8002dee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dda:	f7fd fd99 	bl	8000910 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e144      	b.n	8003078 <HAL_RCC_OscConfig+0x106c>
 8002dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002df6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e00:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	fa93 f2a3 	rbit	r2, r3
 8002e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e12:	601a      	str	r2, [r3, #0]
  return result;
 8002e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e18:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e1e:	fab3 f383 	clz	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d102      	bne.n	8002e38 <HAL_RCC_OscConfig+0xe2c>
 8002e32:	4b54      	ldr	r3, [pc, #336]	; (8002f84 <HAL_RCC_OscConfig+0xf78>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	e027      	b.n	8002e88 <HAL_RCC_OscConfig+0xe7c>
 8002e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	fa93 f2a3 	rbit	r2, r3
 8002e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e58:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e70:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	fa93 f2a3 	rbit	r2, r3
 8002e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	4b3f      	ldr	r3, [pc, #252]	; (8002f84 <HAL_RCC_OscConfig+0xf78>)
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e8c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e94:	6011      	str	r1, [r2, #0]
 8002e96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e9a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	fa92 f1a2 	rbit	r1, r2
 8002ea4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ea8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002eac:	6011      	str	r1, [r2, #0]
  return result;
 8002eae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eb2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	fab2 f282 	clz	r2, r2
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	f042 0220 	orr.w	r2, r2, #32
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	f002 021f 	and.w	r2, r2, #31
 8002ec8:	2101      	movs	r1, #1
 8002eca:	fa01 f202 	lsl.w	r2, r1, r2
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d082      	beq.n	8002dda <HAL_RCC_OscConfig+0xdce>
 8002ed4:	e0cf      	b.n	8003076 <HAL_RCC_OscConfig+0x106a>
 8002ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eda:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ede:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	fa93 f2a3 	rbit	r2, r3
 8002ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002efa:	601a      	str	r2, [r3, #0]
  return result;
 8002efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	461a      	mov	r2, r3
 8002f18:	2300      	movs	r3, #0
 8002f1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fd fcf8 	bl	8000910 <HAL_GetTick>
 8002f20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f24:	e009      	b.n	8002f3a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f26:	f7fd fcf3 	bl	8000910 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e09e      	b.n	8003078 <HAL_RCC_OscConfig+0x106c>
 8002f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	fa93 f2a3 	rbit	r2, r3
 8002f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f5e:	601a      	str	r2, [r3, #0]
  return result;
 8002f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f64:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d104      	bne.n	8002f88 <HAL_RCC_OscConfig+0xf7c>
 8002f7e:	4b01      	ldr	r3, [pc, #4]	; (8002f84 <HAL_RCC_OscConfig+0xf78>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	e029      	b.n	8002fd8 <HAL_RCC_OscConfig+0xfcc>
 8002f84:	40021000 	.word	0x40021000
 8002f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	fa93 f2a3 	rbit	r2, r3
 8002fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002fb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	fa93 f2a3 	rbit	r2, r3
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <HAL_RCC_OscConfig+0x1078>)
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fdc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002fe0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fe4:	6011      	str	r1, [r2, #0]
 8002fe6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fea:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	fa92 f1a2 	rbit	r1, r2
 8002ff4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ffc:	6011      	str	r1, [r2, #0]
  return result;
 8002ffe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003002:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	fab2 f282 	clz	r2, r2
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	f042 0220 	orr.w	r2, r2, #32
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	f002 021f 	and.w	r2, r2, #31
 8003018:	2101      	movs	r1, #1
 800301a:	fa01 f202 	lsl.w	r2, r1, r2
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d180      	bne.n	8002f26 <HAL_RCC_OscConfig+0xf1a>
 8003024:	e027      	b.n	8003076 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e01e      	b.n	8003078 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800303a:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_RCC_OscConfig+0x1078>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003042:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003046:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800304a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	429a      	cmp	r2, r3
 8003058:	d10b      	bne.n	8003072 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800305a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800305e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800306e:	429a      	cmp	r2, r3
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000

08003088 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b09e      	sub	sp, #120	; 0x78
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e162      	b.n	8003366 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a0:	4b90      	ldr	r3, [pc, #576]	; (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d910      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b8d      	ldr	r3, [pc, #564]	; (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 0207 	bic.w	r2, r3, #7
 80030b6:	498b      	ldr	r1, [pc, #556]	; (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b89      	ldr	r3, [pc, #548]	; (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e14a      	b.n	8003366 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030dc:	4b82      	ldr	r3, [pc, #520]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	497f      	ldr	r1, [pc, #508]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80dc 	beq.w	80032b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d13c      	bne.n	800317e <HAL_RCC_ClockConfig+0xf6>
 8003104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003108:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003114:	fab3 f383 	clz	r3, r3
 8003118:	b2db      	uxtb	r3, r3
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d102      	bne.n	800312e <HAL_RCC_ClockConfig+0xa6>
 8003128:	4b6f      	ldr	r3, [pc, #444]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	e00f      	b.n	800314e <HAL_RCC_ClockConfig+0xc6>
 800312e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003132:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	667b      	str	r3, [r7, #100]	; 0x64
 800313c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003140:	663b      	str	r3, [r7, #96]	; 0x60
 8003142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	65fb      	str	r3, [r7, #92]	; 0x5c
 800314a:	4b67      	ldr	r3, [pc, #412]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003152:	65ba      	str	r2, [r7, #88]	; 0x58
 8003154:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003156:	fa92 f2a2 	rbit	r2, r2
 800315a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800315c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800315e:	fab2 f282 	clz	r2, r2
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	f042 0220 	orr.w	r2, r2, #32
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	f002 021f 	and.w	r2, r2, #31
 800316e:	2101      	movs	r1, #1
 8003170:	fa01 f202 	lsl.w	r2, r1, r2
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d17b      	bne.n	8003272 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e0f3      	b.n	8003366 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d13c      	bne.n	8003200 <HAL_RCC_ClockConfig+0x178>
 8003186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800318a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d102      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x128>
 80031aa:	4b4f      	ldr	r3, [pc, #316]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	e00f      	b.n	80031d0 <HAL_RCC_ClockConfig+0x148>
 80031b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	647b      	str	r3, [r7, #68]	; 0x44
 80031be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031c2:	643b      	str	r3, [r7, #64]	; 0x40
 80031c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031cc:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80031d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031d8:	fa92 f2a2 	rbit	r2, r2
 80031dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031e0:	fab2 f282 	clz	r2, r2
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	f042 0220 	orr.w	r2, r2, #32
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	f002 021f 	and.w	r2, r2, #31
 80031f0:	2101      	movs	r1, #1
 80031f2:	fa01 f202 	lsl.w	r2, r1, r2
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d13a      	bne.n	8003272 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0b2      	b.n	8003366 <HAL_RCC_ClockConfig+0x2de>
 8003200:	2302      	movs	r3, #2
 8003202:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d102      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1a0>
 8003222:	4b31      	ldr	r3, [pc, #196]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	e00d      	b.n	8003244 <HAL_RCC_ClockConfig+0x1bc>
 8003228:	2302      	movs	r3, #2
 800322a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
 8003234:	2302      	movs	r3, #2
 8003236:	623b      	str	r3, [r7, #32]
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	4b29      	ldr	r3, [pc, #164]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	2202      	movs	r2, #2
 8003246:	61ba      	str	r2, [r7, #24]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	fa92 f2a2 	rbit	r2, r2
 800324e:	617a      	str	r2, [r7, #20]
  return result;
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	fab2 f282 	clz	r2, r2
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	f042 0220 	orr.w	r2, r2, #32
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	f002 021f 	and.w	r2, r2, #31
 8003262:	2101      	movs	r1, #1
 8003264:	fa01 f202 	lsl.w	r2, r1, r2
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e079      	b.n	8003366 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	491a      	ldr	r1, [pc, #104]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003284:	f7fd fb44 	bl	8000910 <HAL_GetTick>
 8003288:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7fd fb40 	bl	8000910 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e061      	b.n	8003366 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 020c 	and.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1eb      	bne.n	800328c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d214      	bcs.n	80032ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f023 0207 	bic.w	r2, r3, #7
 80032ca:	4906      	ldr	r1, [pc, #24]	; (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d005      	beq.n	80032ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e040      	b.n	8003366 <HAL_RCC_ClockConfig+0x2de>
 80032e4:	40022000 	.word	0x40022000
 80032e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032f8:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_RCC_ClockConfig+0x2e8>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	491a      	ldr	r1, [pc, #104]	; (8003370 <HAL_RCC_ClockConfig+0x2e8>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d009      	beq.n	800332a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003316:	4b16      	ldr	r3, [pc, #88]	; (8003370 <HAL_RCC_ClockConfig+0x2e8>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4912      	ldr	r1, [pc, #72]	; (8003370 <HAL_RCC_ClockConfig+0x2e8>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800332a:	f000 f829 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 800332e:	4601      	mov	r1, r0
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <HAL_RCC_ClockConfig+0x2e8>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003338:	22f0      	movs	r2, #240	; 0xf0
 800333a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	fa92 f2a2 	rbit	r2, r2
 8003342:	60fa      	str	r2, [r7, #12]
  return result;
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	fab2 f282 	clz	r2, r2
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	40d3      	lsrs	r3, r2
 800334e:	4a09      	ldr	r2, [pc, #36]	; (8003374 <HAL_RCC_ClockConfig+0x2ec>)
 8003350:	5cd3      	ldrb	r3, [r2, r3]
 8003352:	fa21 f303 	lsr.w	r3, r1, r3
 8003356:	4a08      	ldr	r2, [pc, #32]	; (8003378 <HAL_RCC_ClockConfig+0x2f0>)
 8003358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800335a:	4b08      	ldr	r3, [pc, #32]	; (800337c <HAL_RCC_ClockConfig+0x2f4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd fa92 	bl	8000888 <HAL_InitTick>
  
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3778      	adds	r7, #120	; 0x78
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	080041b8 	.word	0x080041b8
 8003378:	20000000 	.word	0x20000000
 800337c:	20000004 	.word	0x20000004

08003380 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	b08b      	sub	sp, #44	; 0x2c
 8003384:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800339a:	4b29      	ldr	r3, [pc, #164]	; (8003440 <HAL_RCC_GetSysClockFreq+0xc0>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d002      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x30>
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d003      	beq.n	80033b6 <HAL_RCC_GetSysClockFreq+0x36>
 80033ae:	e03c      	b.n	800342a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033b2:	623b      	str	r3, [r7, #32]
      break;
 80033b4:	e03c      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	fa92 f2a2 	rbit	r2, r2
 80033c8:	607a      	str	r2, [r7, #4]
  return result;
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	fab2 f282 	clz	r2, r2
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	40d3      	lsrs	r3, r2
 80033d4:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033da:	4b19      	ldr	r3, [pc, #100]	; (8003440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	220f      	movs	r2, #15
 80033e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	fa92 f2a2 	rbit	r2, r2
 80033ec:	60fa      	str	r2, [r7, #12]
  return result;
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	fab2 f282 	clz	r2, r2
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	40d3      	lsrs	r3, r2
 80033f8:	4a14      	ldr	r2, [pc, #80]	; (800344c <HAL_RCC_GetSysClockFreq+0xcc>)
 80033fa:	5cd3      	ldrb	r3, [r2, r3]
 80033fc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003408:	4a0e      	ldr	r2, [pc, #56]	; (8003444 <HAL_RCC_GetSysClockFreq+0xc4>)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
 8003418:	e004      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	4a0c      	ldr	r2, [pc, #48]	; (8003450 <HAL_RCC_GetSysClockFreq+0xd0>)
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	623b      	str	r3, [r7, #32]
      break;
 8003428:	e002      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_RCC_GetSysClockFreq+0xc4>)
 800342c:	623b      	str	r3, [r7, #32]
      break;
 800342e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003430:	6a3b      	ldr	r3, [r7, #32]
}
 8003432:	4618      	mov	r0, r3
 8003434:	372c      	adds	r7, #44	; 0x2c
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	007a1200 	.word	0x007a1200
 8003448:	080041d0 	.word	0x080041d0
 800344c:	080041e0 	.word	0x080041e0
 8003450:	003d0900 	.word	0x003d0900

08003454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003458:	4b03      	ldr	r3, [pc, #12]	; (8003468 <HAL_RCC_GetHCLKFreq+0x14>)
 800345a:	681b      	ldr	r3, [r3, #0]
}
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	20000000 	.word	0x20000000

0800346c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003472:	f7ff ffef 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003476:	4601      	mov	r1, r0
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003480:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003484:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	fa92 f2a2 	rbit	r2, r2
 800348c:	603a      	str	r2, [r7, #0]
  return result;
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	fab2 f282 	clz	r2, r2
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	40d3      	lsrs	r3, r2
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40021000 	.word	0x40021000
 80034ac:	080041c8 	.word	0x080041c8

080034b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034b6:	f7ff ffcd 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 80034ba:	4601      	mov	r1, r0
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80034c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	fa92 f2a2 	rbit	r2, r2
 80034d0:	603a      	str	r2, [r7, #0]
  return result;
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	fab2 f282 	clz	r2, r2
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	40d3      	lsrs	r3, r2
 80034dc:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80034de:	5cd3      	ldrb	r3, [r2, r3]
 80034e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000
 80034f0:	080041c8 	.word	0x080041c8

080034f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e049      	b.n	800359a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd f8cc 	bl	80006b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3304      	adds	r3, #4
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f000 f954 	bl	80037e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d001      	beq.n	80035bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e038      	b.n	800362e <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1c      	ldr	r2, [pc, #112]	; (800363c <HAL_TIM_Base_Start+0x98>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00e      	beq.n	80035ec <HAL_TIM_Base_Start+0x48>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d6:	d009      	beq.n	80035ec <HAL_TIM_Base_Start+0x48>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a18      	ldr	r2, [pc, #96]	; (8003640 <HAL_TIM_Base_Start+0x9c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_TIM_Base_Start+0x48>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a17      	ldr	r2, [pc, #92]	; (8003644 <HAL_TIM_Base_Start+0xa0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d115      	bne.n	8003618 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <HAL_TIM_Base_Start+0xa4>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d015      	beq.n	800362a <HAL_TIM_Base_Start+0x86>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003604:	d011      	beq.n	800362a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003616:	e008      	b.n	800362a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e000      	b.n	800362c <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40012c00 	.word	0x40012c00
 8003640:	40000400 	.word	0x40000400
 8003644:	40014000 	.word	0x40014000
 8003648:	00010007 	.word	0x00010007

0800364c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_TIM_ConfigClockSource+0x1c>
 8003664:	2302      	movs	r3, #2
 8003666:	e0b6      	b.n	80037d6 <HAL_TIM_ConfigClockSource+0x18a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003686:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800368a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003692:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036a4:	d03e      	beq.n	8003724 <HAL_TIM_ConfigClockSource+0xd8>
 80036a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036aa:	f200 8087 	bhi.w	80037bc <HAL_TIM_ConfigClockSource+0x170>
 80036ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b2:	f000 8086 	beq.w	80037c2 <HAL_TIM_ConfigClockSource+0x176>
 80036b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ba:	d87f      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x170>
 80036bc:	2b70      	cmp	r3, #112	; 0x70
 80036be:	d01a      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0xaa>
 80036c0:	2b70      	cmp	r3, #112	; 0x70
 80036c2:	d87b      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x170>
 80036c4:	2b60      	cmp	r3, #96	; 0x60
 80036c6:	d050      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x11e>
 80036c8:	2b60      	cmp	r3, #96	; 0x60
 80036ca:	d877      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x170>
 80036cc:	2b50      	cmp	r3, #80	; 0x50
 80036ce:	d03c      	beq.n	800374a <HAL_TIM_ConfigClockSource+0xfe>
 80036d0:	2b50      	cmp	r3, #80	; 0x50
 80036d2:	d873      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x170>
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d058      	beq.n	800378a <HAL_TIM_ConfigClockSource+0x13e>
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d86f      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x170>
 80036dc:	2b30      	cmp	r3, #48	; 0x30
 80036de:	d064      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x15e>
 80036e0:	2b30      	cmp	r3, #48	; 0x30
 80036e2:	d86b      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x170>
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	d060      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x15e>
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d867      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x170>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d05c      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x15e>
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d05a      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x15e>
 80036f4:	e062      	b.n	80037bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6899      	ldr	r1, [r3, #8]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f000 f95d 	bl	80039c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003718:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	609a      	str	r2, [r3, #8]
      break;
 8003722:	e04f      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	6899      	ldr	r1, [r3, #8]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f000 f946 	bl	80039c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003746:	609a      	str	r2, [r3, #8]
      break;
 8003748:	e03c      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6859      	ldr	r1, [r3, #4]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	461a      	mov	r2, r3
 8003758:	f000 f8ba 	bl	80038d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2150      	movs	r1, #80	; 0x50
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f913 	bl	800398e <TIM_ITRx_SetConfig>
      break;
 8003768:	e02c      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6859      	ldr	r1, [r3, #4]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	461a      	mov	r2, r3
 8003778:	f000 f8d9 	bl	800392e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2160      	movs	r1, #96	; 0x60
 8003782:	4618      	mov	r0, r3
 8003784:	f000 f903 	bl	800398e <TIM_ITRx_SetConfig>
      break;
 8003788:	e01c      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6859      	ldr	r1, [r3, #4]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	461a      	mov	r2, r3
 8003798:	f000 f89a 	bl	80038d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2140      	movs	r1, #64	; 0x40
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 f8f3 	bl	800398e <TIM_ITRx_SetConfig>
      break;
 80037a8:	e00c      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4619      	mov	r1, r3
 80037b4:	4610      	mov	r0, r2
 80037b6:	f000 f8ea 	bl	800398e <TIM_ITRx_SetConfig>
      break;
 80037ba:	e003      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      break;
 80037c0:	e000      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80037c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a32      	ldr	r2, [pc, #200]	; (80038bc <TIM_Base_SetConfig+0xdc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d007      	beq.n	8003808 <TIM_Base_SetConfig+0x28>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fe:	d003      	beq.n	8003808 <TIM_Base_SetConfig+0x28>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a2f      	ldr	r2, [pc, #188]	; (80038c0 <TIM_Base_SetConfig+0xe0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d108      	bne.n	800381a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a27      	ldr	r2, [pc, #156]	; (80038bc <TIM_Base_SetConfig+0xdc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d013      	beq.n	800384a <TIM_Base_SetConfig+0x6a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003828:	d00f      	beq.n	800384a <TIM_Base_SetConfig+0x6a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a24      	ldr	r2, [pc, #144]	; (80038c0 <TIM_Base_SetConfig+0xe0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00b      	beq.n	800384a <TIM_Base_SetConfig+0x6a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a23      	ldr	r2, [pc, #140]	; (80038c4 <TIM_Base_SetConfig+0xe4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d007      	beq.n	800384a <TIM_Base_SetConfig+0x6a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <TIM_Base_SetConfig+0xe8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d003      	beq.n	800384a <TIM_Base_SetConfig+0x6a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a21      	ldr	r2, [pc, #132]	; (80038cc <TIM_Base_SetConfig+0xec>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d108      	bne.n	800385c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a0e      	ldr	r2, [pc, #56]	; (80038bc <TIM_Base_SetConfig+0xdc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00b      	beq.n	80038a0 <TIM_Base_SetConfig+0xc0>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a0e      	ldr	r2, [pc, #56]	; (80038c4 <TIM_Base_SetConfig+0xe4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <TIM_Base_SetConfig+0xc0>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a0d      	ldr	r2, [pc, #52]	; (80038c8 <TIM_Base_SetConfig+0xe8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_Base_SetConfig+0xc0>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a0c      	ldr	r2, [pc, #48]	; (80038cc <TIM_Base_SetConfig+0xec>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d103      	bne.n	80038a8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	615a      	str	r2, [r3, #20]
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40012c00 	.word	0x40012c00
 80038c0:	40000400 	.word	0x40000400
 80038c4:	40014000 	.word	0x40014000
 80038c8:	40014400 	.word	0x40014400
 80038cc:	40014800 	.word	0x40014800

080038d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f023 0201 	bic.w	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f023 030a 	bic.w	r3, r3, #10
 800390c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800392e:	b480      	push	{r7}
 8003930:	b087      	sub	sp, #28
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	f023 0210 	bic.w	r2, r3, #16
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003958:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	031b      	lsls	r3, r3, #12
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800396a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f043 0307 	orr.w	r3, r3, #7
 80039b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	609a      	str	r2, [r3, #8]
}
 80039b8:	bf00      	nop
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	021a      	lsls	r2, r3, #8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	609a      	str	r2, [r3, #8]
}
 80039f8:	bf00      	nop
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e054      	b.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a24      	ldr	r2, [pc, #144]	; (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d108      	bne.n	8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a17      	ldr	r2, [pc, #92]	; (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00e      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a84:	d009      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a11      	ldr	r2, [pc, #68]	; (8003adc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10c      	bne.n	8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40014000 	.word	0x40014000

08003ae0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e040      	b.n	8003b74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fc fdf8 	bl	80006f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2224      	movs	r2, #36	; 0x24
 8003b0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f82c 	bl	8003b7c <UART_SetConfig>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e022      	b.n	8003b74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f956 	bl	8003de8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f9dd 	bl	8003f2c <UART_CheckIdleState>
 8003b72:	4603      	mov	r3, r0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4b8a      	ldr	r3, [pc, #552]	; (8003dd0 <UART_SetConfig+0x254>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6812      	ldr	r2, [r2, #0]
 8003bae:	6979      	ldr	r1, [r7, #20]
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a78      	ldr	r2, [pc, #480]	; (8003dd4 <UART_SetConfig+0x258>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d120      	bne.n	8003c3a <UART_SetConfig+0xbe>
 8003bf8:	4b77      	ldr	r3, [pc, #476]	; (8003dd8 <UART_SetConfig+0x25c>)
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d817      	bhi.n	8003c34 <UART_SetConfig+0xb8>
 8003c04:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <UART_SetConfig+0x90>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c1d 	.word	0x08003c1d
 8003c10:	08003c29 	.word	0x08003c29
 8003c14:	08003c2f 	.word	0x08003c2f
 8003c18:	08003c23 	.word	0x08003c23
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	77fb      	strb	r3, [r7, #31]
 8003c20:	e01d      	b.n	8003c5e <UART_SetConfig+0xe2>
 8003c22:	2302      	movs	r3, #2
 8003c24:	77fb      	strb	r3, [r7, #31]
 8003c26:	e01a      	b.n	8003c5e <UART_SetConfig+0xe2>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e017      	b.n	8003c5e <UART_SetConfig+0xe2>
 8003c2e:	2308      	movs	r3, #8
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e014      	b.n	8003c5e <UART_SetConfig+0xe2>
 8003c34:	2310      	movs	r3, #16
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e011      	b.n	8003c5e <UART_SetConfig+0xe2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a67      	ldr	r2, [pc, #412]	; (8003ddc <UART_SetConfig+0x260>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d102      	bne.n	8003c4a <UART_SetConfig+0xce>
 8003c44:	2300      	movs	r3, #0
 8003c46:	77fb      	strb	r3, [r7, #31]
 8003c48:	e009      	b.n	8003c5e <UART_SetConfig+0xe2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a64      	ldr	r2, [pc, #400]	; (8003de0 <UART_SetConfig+0x264>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d102      	bne.n	8003c5a <UART_SetConfig+0xde>
 8003c54:	2300      	movs	r3, #0
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e001      	b.n	8003c5e <UART_SetConfig+0xe2>
 8003c5a:	2310      	movs	r3, #16
 8003c5c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c66:	d15b      	bne.n	8003d20 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003c68:	7ffb      	ldrb	r3, [r7, #31]
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d827      	bhi.n	8003cbe <UART_SetConfig+0x142>
 8003c6e:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <UART_SetConfig+0xf8>)
 8003c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c74:	08003c99 	.word	0x08003c99
 8003c78:	08003ca1 	.word	0x08003ca1
 8003c7c:	08003ca9 	.word	0x08003ca9
 8003c80:	08003cbf 	.word	0x08003cbf
 8003c84:	08003caf 	.word	0x08003caf
 8003c88:	08003cbf 	.word	0x08003cbf
 8003c8c:	08003cbf 	.word	0x08003cbf
 8003c90:	08003cbf 	.word	0x08003cbf
 8003c94:	08003cb7 	.word	0x08003cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c98:	f7ff fbe8 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 8003c9c:	61b8      	str	r0, [r7, #24]
        break;
 8003c9e:	e013      	b.n	8003cc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ca0:	f7ff fc06 	bl	80034b0 <HAL_RCC_GetPCLK2Freq>
 8003ca4:	61b8      	str	r0, [r7, #24]
        break;
 8003ca6:	e00f      	b.n	8003cc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ca8:	4b4e      	ldr	r3, [pc, #312]	; (8003de4 <UART_SetConfig+0x268>)
 8003caa:	61bb      	str	r3, [r7, #24]
        break;
 8003cac:	e00c      	b.n	8003cc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cae:	f7ff fb67 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 8003cb2:	61b8      	str	r0, [r7, #24]
        break;
 8003cb4:	e008      	b.n	8003cc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cba:	61bb      	str	r3, [r7, #24]
        break;
 8003cbc:	e004      	b.n	8003cc8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	77bb      	strb	r3, [r7, #30]
        break;
 8003cc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d074      	beq.n	8003db8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	005a      	lsls	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	441a      	add	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	2b0f      	cmp	r3, #15
 8003cea:	d916      	bls.n	8003d1a <UART_SetConfig+0x19e>
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf2:	d212      	bcs.n	8003d1a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	f023 030f 	bic.w	r3, r3, #15
 8003cfc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	085b      	lsrs	r3, r3, #1
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	89fb      	ldrh	r3, [r7, #14]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	89fa      	ldrh	r2, [r7, #14]
 8003d16:	60da      	str	r2, [r3, #12]
 8003d18:	e04e      	b.n	8003db8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	77bb      	strb	r3, [r7, #30]
 8003d1e:	e04b      	b.n	8003db8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d20:	7ffb      	ldrb	r3, [r7, #31]
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d827      	bhi.n	8003d76 <UART_SetConfig+0x1fa>
 8003d26:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <UART_SetConfig+0x1b0>)
 8003d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2c:	08003d51 	.word	0x08003d51
 8003d30:	08003d59 	.word	0x08003d59
 8003d34:	08003d61 	.word	0x08003d61
 8003d38:	08003d77 	.word	0x08003d77
 8003d3c:	08003d67 	.word	0x08003d67
 8003d40:	08003d77 	.word	0x08003d77
 8003d44:	08003d77 	.word	0x08003d77
 8003d48:	08003d77 	.word	0x08003d77
 8003d4c:	08003d6f 	.word	0x08003d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d50:	f7ff fb8c 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 8003d54:	61b8      	str	r0, [r7, #24]
        break;
 8003d56:	e013      	b.n	8003d80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d58:	f7ff fbaa 	bl	80034b0 <HAL_RCC_GetPCLK2Freq>
 8003d5c:	61b8      	str	r0, [r7, #24]
        break;
 8003d5e:	e00f      	b.n	8003d80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d60:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <UART_SetConfig+0x268>)
 8003d62:	61bb      	str	r3, [r7, #24]
        break;
 8003d64:	e00c      	b.n	8003d80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d66:	f7ff fb0b 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 8003d6a:	61b8      	str	r0, [r7, #24]
        break;
 8003d6c:	e008      	b.n	8003d80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d72:	61bb      	str	r3, [r7, #24]
        break;
 8003d74:	e004      	b.n	8003d80 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	77bb      	strb	r3, [r7, #30]
        break;
 8003d7e:	bf00      	nop
    }

    if (pclk != 0U)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d018      	beq.n	8003db8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	085a      	lsrs	r2, r3, #1
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	441a      	add	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b0f      	cmp	r3, #15
 8003da0:	d908      	bls.n	8003db4 <UART_SetConfig+0x238>
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da8:	d204      	bcs.n	8003db4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	60da      	str	r2, [r3, #12]
 8003db2:	e001      	b.n	8003db8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003dc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3720      	adds	r7, #32
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	efff69f3 	.word	0xefff69f3
 8003dd4:	40013800 	.word	0x40013800
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40004400 	.word	0x40004400
 8003de0:	40004800 	.word	0x40004800
 8003de4:	007a1200 	.word	0x007a1200

08003de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01a      	beq.n	8003efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ee6:	d10a      	bne.n	8003efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	605a      	str	r2, [r3, #4]
  }
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f3c:	f7fc fce8 	bl	8000910 <HAL_GetTick>
 8003f40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d10e      	bne.n	8003f6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f82d 	bl	8003fbe <UART_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e023      	b.n	8003fb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d10e      	bne.n	8003f9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f817 	bl	8003fbe <UART_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e00d      	b.n	8003fb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b09c      	sub	sp, #112	; 0x70
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fce:	e0a5      	b.n	800411c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd6:	f000 80a1 	beq.w	800411c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fda:	f7fc fc99 	bl	8000910 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d302      	bcc.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d13e      	bne.n	800406e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004000:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004004:	667b      	str	r3, [r7, #100]	; 0x64
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800400e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004010:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004014:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800401c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e6      	bne.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3308      	adds	r3, #8
 8004028:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	663b      	str	r3, [r7, #96]	; 0x60
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3308      	adds	r3, #8
 8004040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004042:	64ba      	str	r2, [r7, #72]	; 0x48
 8004044:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e5      	bne.n	8004022 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2220      	movs	r2, #32
 800405a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e067      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d04f      	beq.n	800411c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408a:	d147      	bne.n	800411c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004094:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
 80040b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e6      	bne.n	8004096 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3308      	adds	r3, #8
 80040ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	613b      	str	r3, [r7, #16]
   return(result);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	66bb      	str	r3, [r7, #104]	; 0x68
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3308      	adds	r3, #8
 80040e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040e8:	623a      	str	r2, [r7, #32]
 80040ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	69f9      	ldr	r1, [r7, #28]
 80040ee:	6a3a      	ldr	r2, [r7, #32]
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e5      	bne.n	80040c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e010      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69da      	ldr	r2, [r3, #28]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4013      	ands	r3, r2
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	429a      	cmp	r2, r3
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	429a      	cmp	r2, r3
 8004138:	f43f af4a 	beq.w	8003fd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3770      	adds	r7, #112	; 0x70
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <__libc_init_array>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	4d0d      	ldr	r5, [pc, #52]	; (8004180 <__libc_init_array+0x38>)
 800414c:	4c0d      	ldr	r4, [pc, #52]	; (8004184 <__libc_init_array+0x3c>)
 800414e:	1b64      	subs	r4, r4, r5
 8004150:	10a4      	asrs	r4, r4, #2
 8004152:	2600      	movs	r6, #0
 8004154:	42a6      	cmp	r6, r4
 8004156:	d109      	bne.n	800416c <__libc_init_array+0x24>
 8004158:	4d0b      	ldr	r5, [pc, #44]	; (8004188 <__libc_init_array+0x40>)
 800415a:	4c0c      	ldr	r4, [pc, #48]	; (800418c <__libc_init_array+0x44>)
 800415c:	f000 f820 	bl	80041a0 <_init>
 8004160:	1b64      	subs	r4, r4, r5
 8004162:	10a4      	asrs	r4, r4, #2
 8004164:	2600      	movs	r6, #0
 8004166:	42a6      	cmp	r6, r4
 8004168:	d105      	bne.n	8004176 <__libc_init_array+0x2e>
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004170:	4798      	blx	r3
 8004172:	3601      	adds	r6, #1
 8004174:	e7ee      	b.n	8004154 <__libc_init_array+0xc>
 8004176:	f855 3b04 	ldr.w	r3, [r5], #4
 800417a:	4798      	blx	r3
 800417c:	3601      	adds	r6, #1
 800417e:	e7f2      	b.n	8004166 <__libc_init_array+0x1e>
 8004180:	080041f0 	.word	0x080041f0
 8004184:	080041f0 	.word	0x080041f0
 8004188:	080041f0 	.word	0x080041f0
 800418c:	080041f4 	.word	0x080041f4

08004190 <memset>:
 8004190:	4402      	add	r2, r0
 8004192:	4603      	mov	r3, r0
 8004194:	4293      	cmp	r3, r2
 8004196:	d100      	bne.n	800419a <memset+0xa>
 8004198:	4770      	bx	lr
 800419a:	f803 1b01 	strb.w	r1, [r3], #1
 800419e:	e7f9      	b.n	8004194 <memset+0x4>

080041a0 <_init>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr

080041ac <_fini>:
 80041ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ae:	bf00      	nop
 80041b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b2:	bc08      	pop	{r3}
 80041b4:	469e      	mov	lr, r3
 80041b6:	4770      	bx	lr
