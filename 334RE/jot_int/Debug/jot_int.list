
jot_int.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005074  08005074  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005074  08005074  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005074  08005074  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005074  08005074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800507c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000118  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000188  20000188  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c1d7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a18  00000000  00000000  0002c277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002dc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000888  00000000  00000000  0002e5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020aaa  00000000  00000000  0002ee48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c67e  00000000  00000000  0004f8f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1d54  00000000  00000000  0005bf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011dcc4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cb4  00000000  00000000  0011dd14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f78 	.word	0x08004f78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004f78 	.word	0x08004f78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__io_putchar>:
* @brief Retargets the C library printf function to the USART.
* @param None
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART1 and Loop until the end of transmission */
if (ch == '\n')
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b0a      	cmp	r3, #10
 800027c:	d106      	bne.n	800028c <__io_putchar+0x1c>
HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800027e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000282:	2201      	movs	r2, #1
 8000284:	4907      	ldr	r1, [pc, #28]	; (80002a4 <__io_putchar+0x34>)
 8000286:	4808      	ldr	r0, [pc, #32]	; (80002a8 <__io_putchar+0x38>)
 8000288:	f003 fb3c 	bl	8003904 <HAL_UART_Transmit>
HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800028c:	1d39      	adds	r1, r7, #4
 800028e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000292:	2201      	movs	r2, #1
 8000294:	4804      	ldr	r0, [pc, #16]	; (80002a8 <__io_putchar+0x38>)
 8000296:	f003 fb35 	bl	8003904 <HAL_UART_Transmit>
return ch;
 800029a:	687b      	ldr	r3, [r7, #4]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	08004f90 	.word	0x08004f90
 80002a8:	200000ec 	.word	0x200000ec

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 fbc6 	bl	8000a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f83a 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f000 f936 	bl	8000528 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002bc:	f000 f904 	bl	80004c8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80002c0:	f000 f876 	bl	80003b0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  if( HAL_ADCEx_Calibration_Start(&hadc1, ADC_CHANNEL_1) != HAL_OK ){
 80002c4:	2101      	movs	r1, #1
 80002c6:	4814      	ldr	r0, [pc, #80]	; (8000318 <main+0x6c>)
 80002c8:	f001 f8d4 	bl	8001474 <HAL_ADCEx_Calibration_Start>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <main+0x2a>
    Error_Handler();
 80002d2:	f000 f9d7 	bl	8000684 <Error_Handler>
    }
    if( HAL_ADCEx_Calibration_Start(&hadc1, ADC_CHANNEL_6) != HAL_OK ){
 80002d6:	2106      	movs	r1, #6
 80002d8:	480f      	ldr	r0, [pc, #60]	; (8000318 <main+0x6c>)
 80002da:	f001 f8cb 	bl	8001474 <HAL_ADCEx_Calibration_Start>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <main+0x3c>
    Error_Handler();
 80002e4:	f000 f9ce 	bl	8000684 <Error_Handler>
    }
    if( HAL_ADCEx_Calibration_Start(&hadc1, ADC_CHANNEL_7) != HAL_OK ){
 80002e8:	2107      	movs	r1, #7
 80002ea:	480b      	ldr	r0, [pc, #44]	; (8000318 <main+0x6c>)
 80002ec:	f001 f8c2 	bl	8001474 <HAL_ADCEx_Calibration_Start>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <main+0x4e>
    Error_Handler();
 80002f6:	f000 f9c5 	bl	8000684 <Error_Handler>
    }

    HAL_ADC_Start_IT(&hadc1);
 80002fa:	4807      	ldr	r0, [pc, #28]	; (8000318 <main+0x6c>)
 80002fc:	f000 fdac 	bl	8000e58 <HAL_ADC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  printf ("%4d, %4d, %4d \n", x, y, sw);
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <main+0x70>)
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	4619      	mov	r1, r3
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <main+0x74>)
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	461a      	mov	r2, r3
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <main+0x78>)
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	4805      	ldr	r0, [pc, #20]	; (8000328 <main+0x7c>)
 8000312:	f003 fea3 	bl	800405c <iprintf>
 8000316:	e7f3      	b.n	8000300 <main+0x54>
 8000318:	2000009c 	.word	0x2000009c
 800031c:	20000092 	.word	0x20000092
 8000320:	20000094 	.word	0x20000094
 8000324:	20000096 	.word	0x20000096
 8000328:	08004f94 	.word	0x08004f94

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b090      	sub	sp, #64	; 0x40
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2228      	movs	r2, #40	; 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f003 fe86 	bl	800404c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034e:	2302      	movs	r3, #2
 8000350:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000352:	2301      	movs	r3, #1
 8000354:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000356:	2310      	movs	r3, #16
 8000358:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035a:	2302      	movs	r3, #2
 800035c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800035e:	2300      	movs	r3, #0
 8000360:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000362:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000366:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000368:	f107 0318 	add.w	r3, r7, #24
 800036c:	4618      	mov	r0, r3
 800036e:	f002 f807 	bl	8002380 <HAL_RCC_OscConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000378:	f000 f984 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037c:	230f      	movs	r3, #15
 800037e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000380:	2302      	movs	r3, #2
 8000382:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800038c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2102      	movs	r1, #2
 8000396:	4618      	mov	r0, r3
 8000398:	f003 f830 	bl	80033fc <HAL_RCC_ClockConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003a2:	f000 f96f 	bl	8000684 <Error_Handler>
  }
}
 80003a6:	bf00      	nop
 80003a8:	3740      	adds	r7, #64	; 0x40
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08a      	sub	sp, #40	; 0x28
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003b6:	f107 031c 	add.w	r3, r7, #28
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
 80003ce:	611a      	str	r2, [r3, #16]
 80003d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003d2:	4b3c      	ldr	r3, [pc, #240]	; (80004c4 <MX_ADC1_Init+0x114>)
 80003d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80003da:	4b3a      	ldr	r3, [pc, #232]	; (80004c4 <MX_ADC1_Init+0x114>)
 80003dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80003e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003e2:	4b38      	ldr	r3, [pc, #224]	; (80004c4 <MX_ADC1_Init+0x114>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003e8:	4b36      	ldr	r3, [pc, #216]	; (80004c4 <MX_ADC1_Init+0x114>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003ee:	4b35      	ldr	r3, [pc, #212]	; (80004c4 <MX_ADC1_Init+0x114>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003f4:	4b33      	ldr	r3, [pc, #204]	; (80004c4 <MX_ADC1_Init+0x114>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003fc:	4b31      	ldr	r3, [pc, #196]	; (80004c4 <MX_ADC1_Init+0x114>)
 80003fe:	2200      	movs	r2, #0
 8000400:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000402:	4b30      	ldr	r3, [pc, #192]	; (80004c4 <MX_ADC1_Init+0x114>)
 8000404:	2201      	movs	r2, #1
 8000406:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000408:	4b2e      	ldr	r3, [pc, #184]	; (80004c4 <MX_ADC1_Init+0x114>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800040e:	4b2d      	ldr	r3, [pc, #180]	; (80004c4 <MX_ADC1_Init+0x114>)
 8000410:	2203      	movs	r2, #3
 8000412:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000414:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <MX_ADC1_Init+0x114>)
 8000416:	2200      	movs	r2, #0
 8000418:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800041c:	4b29      	ldr	r3, [pc, #164]	; (80004c4 <MX_ADC1_Init+0x114>)
 800041e:	2204      	movs	r2, #4
 8000420:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000422:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <MX_ADC1_Init+0x114>)
 8000424:	2200      	movs	r2, #0
 8000426:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000428:	4b26      	ldr	r3, [pc, #152]	; (80004c4 <MX_ADC1_Init+0x114>)
 800042a:	2200      	movs	r2, #0
 800042c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800042e:	4825      	ldr	r0, [pc, #148]	; (80004c4 <MX_ADC1_Init+0x114>)
 8000430:	f000 fb80 	bl	8000b34 <HAL_ADC_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800043a:	f000 f923 	bl	8000684 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800043e:	2300      	movs	r3, #0
 8000440:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000442:	f107 031c 	add.w	r3, r7, #28
 8000446:	4619      	mov	r1, r3
 8000448:	481e      	ldr	r0, [pc, #120]	; (80004c4 <MX_ADC1_Init+0x114>)
 800044a:	f001 fb6d 	bl	8001b28 <HAL_ADCEx_MultiModeConfigChannel>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000454:	f000 f916 	bl	8000684 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000458:	2301      	movs	r3, #1
 800045a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800045c:	2301      	movs	r3, #1
 800045e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000460:	2300      	movs	r3, #0
 8000462:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000464:	2305      	movs	r3, #5
 8000466:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	4619      	mov	r1, r3
 8000474:	4813      	ldr	r0, [pc, #76]	; (80004c4 <MX_ADC1_Init+0x114>)
 8000476:	f001 f897 	bl	80015a8 <HAL_ADC_ConfigChannel>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000480:	f000 f900 	bl	8000684 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000484:	2306      	movs	r3, #6
 8000486:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000488:	2302      	movs	r3, #2
 800048a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	4619      	mov	r1, r3
 8000490:	480c      	ldr	r0, [pc, #48]	; (80004c4 <MX_ADC1_Init+0x114>)
 8000492:	f001 f889 	bl	80015a8 <HAL_ADC_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 800049c:	f000 f8f2 	bl	8000684 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004a0:	2307      	movs	r3, #7
 80004a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004a4:	2303      	movs	r3, #3
 80004a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4619      	mov	r1, r3
 80004ac:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_ADC1_Init+0x114>)
 80004ae:	f001 f87b 	bl	80015a8 <HAL_ADC_ConfigChannel>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80004b8:	f000 f8e4 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004bc:	bf00      	nop
 80004be:	3728      	adds	r7, #40	; 0x28
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	2000009c 	.word	0x2000009c

080004c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004cc:	4b14      	ldr	r3, [pc, #80]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004ce:	4a15      	ldr	r2, [pc, #84]	; (8000524 <MX_USART2_UART_Init+0x5c>)
 80004d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004d2:	4b13      	ldr	r3, [pc, #76]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004d4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004ee:	220c      	movs	r2, #12
 80004f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_USART2_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_USART2_UART_Init+0x58>)
 8000506:	2200      	movs	r2, #0
 8000508:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_USART2_UART_Init+0x58>)
 800050c:	f003 f9ac 	bl	8003868 <HAL_UART_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000516:	f000 f8b5 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200000ec 	.word	0x200000ec
 8000524:	40004400 	.word	0x40004400

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	; 0x28
 800052c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <MX_GPIO_Init+0xc4>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a2a      	ldr	r2, [pc, #168]	; (80005ec <MX_GPIO_Init+0xc4>)
 8000544:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000548:	6153      	str	r3, [r2, #20]
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <MX_GPIO_Init+0xc4>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000556:	4b25      	ldr	r3, [pc, #148]	; (80005ec <MX_GPIO_Init+0xc4>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a24      	ldr	r2, [pc, #144]	; (80005ec <MX_GPIO_Init+0xc4>)
 800055c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b22      	ldr	r3, [pc, #136]	; (80005ec <MX_GPIO_Init+0xc4>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <MX_GPIO_Init+0xc4>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a1e      	ldr	r2, [pc, #120]	; (80005ec <MX_GPIO_Init+0xc4>)
 8000574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <MX_GPIO_Init+0xc4>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b19      	ldr	r3, [pc, #100]	; (80005ec <MX_GPIO_Init+0xc4>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a18      	ldr	r2, [pc, #96]	; (80005ec <MX_GPIO_Init+0xc4>)
 800058c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b16      	ldr	r3, [pc, #88]	; (80005ec <MX_GPIO_Init+0xc4>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2120      	movs	r1, #32
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f001 fed3 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <MX_GPIO_Init+0xc8>)
 80005c2:	f001 fd53 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005c6:	2320      	movs	r3, #32
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f001 fd44 	bl	800206c <HAL_GPIO_Init>

}
 80005e4:	bf00      	nop
 80005e6:	3728      	adds	r7, #40	; 0x28
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	48000800 	.word	0x48000800

080005f4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]

AC[adcIndex] = HAL_ADC_GetValue(&hadc1);
 80005fc:	481b      	ldr	r0, [pc, #108]	; (800066c <HAL_ADC_ConvCpltCallback+0x78>)
 80005fe:	f000 fd0b 	bl	8001018 <HAL_ADC_GetValue>
 8000602:	4601      	mov	r1, r0
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	b289      	uxth	r1, r1
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <HAL_ADC_ConvCpltCallback+0x80>)
 800060e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]



if(adcIndex == 2) {
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b02      	cmp	r3, #2
 8000618:	d117      	bne.n	800064a <HAL_ADC_ConvCpltCallback+0x56>

    x = AC[0];
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <HAL_ADC_ConvCpltCallback+0x80>)
 800061c:	881a      	ldrh	r2, [r3, #0]
 800061e:	4b16      	ldr	r3, [pc, #88]	; (8000678 <HAL_ADC_ConvCpltCallback+0x84>)
 8000620:	801a      	strh	r2, [r3, #0]
    y = AC[1];
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <HAL_ADC_ConvCpltCallback+0x80>)
 8000624:	885a      	ldrh	r2, [r3, #2]
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_ADC_ConvCpltCallback+0x88>)
 8000628:	801a      	strh	r2, [r3, #0]
    sw = AC[2];
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_ADC_ConvCpltCallback+0x80>)
 800062c:	889a      	ldrh	r2, [r3, #4]
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000630:	801a      	strh	r2, [r3, #0]

    if(sw <50) sw = 0;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	2b31      	cmp	r3, #49	; 0x31
 8000638:	d803      	bhi.n	8000642 <HAL_ADC_ConvCpltCallback+0x4e>
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <HAL_ADC_ConvCpltCallback+0x8c>)
 800063c:	2200      	movs	r2, #0
 800063e:	801a      	strh	r2, [r3, #0]
 8000640:	e003      	b.n	800064a <HAL_ADC_ConvCpltCallback+0x56>
    else sw = 5000;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000644:	f241 3288 	movw	r2, #5000	; 0x1388
 8000648:	801a      	strh	r2, [r3, #0]
   // printf ("%4d, %4d, %4d \n", x, y, sw);

}


	adcIndex++;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <HAL_ADC_ConvCpltCallback+0x7c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000654:	701a      	strb	r2, [r3, #0]

	if(adcIndex > 2) adcIndex = 0;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b02      	cmp	r3, #2
 800065c:	d902      	bls.n	8000664 <HAL_ADC_ConvCpltCallback+0x70>
 800065e:	4b04      	ldr	r3, [pc, #16]	; (8000670 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]

	//HAL_ADC_Start_IT(&hadc1);
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	2000009c 	.word	0x2000009c
 8000670:	20000098 	.word	0x20000098
 8000674:	2000008c 	.word	0x2000008c
 8000678:	20000092 	.word	0x20000092
 800067c:	20000094 	.word	0x20000094
 8000680:	20000096 	.word	0x20000096

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	e7fe      	b.n	800068c <Error_Handler+0x8>
	...

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_MspInit+0x44>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <HAL_MspInit+0x44>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_MspInit+0x44>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_MspInit+0x44>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <HAL_MspInit+0x44>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	61d3      	str	r3, [r2, #28]
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_MspInit+0x44>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006c6:	2007      	movs	r0, #7
 80006c8:	f001 fc8e 	bl	8001fe8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006f8:	d144      	bne.n	8000784 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006fa:	4b24      	ldr	r3, [pc, #144]	; (800078c <HAL_ADC_MspInit+0xb4>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a23      	ldr	r2, [pc, #140]	; (800078c <HAL_ADC_MspInit+0xb4>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <HAL_ADC_MspInit+0xb4>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <HAL_ADC_MspInit+0xb4>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a1d      	ldr	r2, [pc, #116]	; (800078c <HAL_ADC_MspInit+0xb4>)
 8000718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <HAL_ADC_MspInit+0xb4>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_ADC_MspInit+0xb4>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a17      	ldr	r2, [pc, #92]	; (800078c <HAL_ADC_MspInit+0xb4>)
 8000730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_ADC_MspInit+0xb4>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000742:	2303      	movs	r3, #3
 8000744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000746:	2303      	movs	r3, #3
 8000748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	480e      	ldr	r0, [pc, #56]	; (8000790 <HAL_ADC_MspInit+0xb8>)
 8000756:	f001 fc89 	bl	800206c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800075a:	2301      	movs	r3, #1
 800075c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075e:	2303      	movs	r3, #3
 8000760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f001 fc7c 	bl	800206c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2012      	movs	r0, #18
 800077a:	f001 fc40 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800077e:	2012      	movs	r0, #18
 8000780:	f001 fc59 	bl	8002036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	; 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	48000800 	.word	0x48000800

08000794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a17      	ldr	r2, [pc, #92]	; (8000810 <HAL_UART_MspInit+0x7c>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d128      	bne.n	8000808 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <HAL_UART_MspInit+0x80>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	4a16      	ldr	r2, [pc, #88]	; (8000814 <HAL_UART_MspInit+0x80>)
 80007bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c0:	61d3      	str	r3, [r2, #28]
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <HAL_UART_MspInit+0x80>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <HAL_UART_MspInit+0x80>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a10      	ldr	r2, [pc, #64]	; (8000814 <HAL_UART_MspInit+0x80>)
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	6153      	str	r3, [r2, #20]
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_UART_MspInit+0x80>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007e6:	230c      	movs	r3, #12
 80007e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007f6:	2307      	movs	r3, #7
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f001 fc32 	bl	800206c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	; 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40004400 	.word	0x40004400
 8000814:	40021000 	.word	0x40021000

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler+0x4>

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000864:	f000 f932 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <ADC1_2_IRQHandler+0x10>)
 8000872:	f000 fbdf 	bl	8001034 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000009c 	.word	0x2000009c

08000880 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	e00a      	b.n	80008a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000892:	f3af 8000 	nop.w
 8000896:	4601      	mov	r1, r0
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	60ba      	str	r2, [r7, #8]
 800089e:	b2ca      	uxtb	r2, r1
 80008a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	3301      	adds	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	dbf0      	blt.n	8000892 <_read+0x12>
	}

return len;
 80008b0:	687b      	ldr	r3, [r7, #4]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af00      	add	r7, sp, #0
 80008c0:	60f8      	str	r0, [r7, #12]
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	e009      	b.n	80008e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	1c5a      	adds	r2, r3, #1
 80008d0:	60ba      	str	r2, [r7, #8]
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fccb 	bl	8000270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	3301      	adds	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dbf1      	blt.n	80008cc <_write+0x12>
	}
	return len;
 80008e8:	687b      	ldr	r3, [r7, #4]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <_close>:

int _close(int file)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
	return -1;
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008fe:	4618      	mov	r0, r3
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
 8000912:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800091a:	605a      	str	r2, [r3, #4]
	return 0;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <_isatty>:

int _isatty(int file)
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
	return 1;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
	return 0;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000964:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <_sbrk+0x5c>)
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <_sbrk+0x60>)
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d102      	bne.n	800097e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <_sbrk+0x64>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <_sbrk+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <_sbrk+0x64>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	429a      	cmp	r2, r3
 800098a:	d207      	bcs.n	800099c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800098c:	f003 fb34 	bl	8003ff8 <__errno>
 8000990:	4603      	mov	r3, r0
 8000992:	220c      	movs	r2, #12
 8000994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
 800099a:	e009      	b.n	80009b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <_sbrk+0x64>)
 80009ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ae:	68fb      	ldr	r3, [r7, #12]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20003000 	.word	0x20003000
 80009bc:	00000400 	.word	0x00000400
 80009c0:	20000170 	.word	0x20000170
 80009c4:	20000188 	.word	0x20000188

080009c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <SystemInit+0x20>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <SystemInit+0x20>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a24 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f2:	490e      	ldr	r1, [pc, #56]	; (8000a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f4:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <LoopForever+0xe>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a08:	4c0b      	ldr	r4, [pc, #44]	; (8000a38 <LoopForever+0x16>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a16:	f7ff ffd7 	bl	80009c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f003 faf3 	bl	8004004 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1e:	f7ff fc45 	bl	80002ac <main>

08000a22 <LoopForever>:

LoopForever:
    b LoopForever
 8000a22:	e7fe      	b.n	8000a22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a24:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a30:	0800507c 	.word	0x0800507c
  ldr r2, =_sbss
 8000a34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a38:	20000188 	.word	0x20000188

08000a3c <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <CAN_RX0_IRQHandler>
	...

08000a40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_Init+0x28>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_Init+0x28>)
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f001 fac9 	bl	8001fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f000 f808 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5c:	f7ff fe18 	bl	8000690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40022000 	.word	0x40022000

08000a6c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x54>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x58>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 fae1 	bl	8002052 <HAL_SYSTICK_Config>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00e      	b.n	8000ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d80a      	bhi.n	8000ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f001 faa9 	bl	8001ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aac:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <HAL_InitTick+0x5c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000004 	.word	0x20000004

08000acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x20>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x24>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_IncTick+0x24>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000174 	.word	0x20000174

08000af4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <HAL_GetTick+0x14>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000174 	.word	0x20000174

08000b0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b09a      	sub	sp, #104	; 0x68
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b42:	2300      	movs	r3, #0
 8000b44:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d101      	bne.n	8000b54 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e172      	b.n	8000e3a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f003 0310 	and.w	r3, r3, #16
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d176      	bne.n	8000c54 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d152      	bne.n	8000c14 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fda5 	bl	80006d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d13b      	bne.n	8000c14 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f001 f8ed 	bl	8001d7c <ADC_Disable>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	f003 0310 	and.w	r3, r3, #16
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d12f      	bne.n	8000c14 <HAL_ADC_Init+0xe0>
 8000bb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d12b      	bne.n	8000c14 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bc4:	f023 0302 	bic.w	r3, r3, #2
 8000bc8:	f043 0202 	orr.w	r2, r3, #2
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000bde:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bf0:	4b94      	ldr	r3, [pc, #592]	; (8000e44 <HAL_ADC_Init+0x310>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a94      	ldr	r2, [pc, #592]	; (8000e48 <HAL_ADC_Init+0x314>)
 8000bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfa:	0c9a      	lsrs	r2, r3, #18
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c06:	e002      	b.n	8000c0e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d1f9      	bne.n	8000c08 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d007      	beq.n	8000c32 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c30:	d110      	bne.n	8000c54 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f023 0312 	bic.w	r3, r3, #18
 8000c3a:	f043 0210 	orr.w	r2, r3, #16
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f043 0201 	orr.w	r2, r3, #1
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f003 0310 	and.w	r3, r3, #16
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f040 80df 	bne.w	8000e20 <HAL_ADC_Init+0x2ec>
 8000c62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f040 80da 	bne.w	8000e20 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 80d2 	bne.w	8000e20 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c84:	f043 0202 	orr.w	r2, r3, #2
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c8c:	4b6f      	ldr	r3, [pc, #444]	; (8000e4c <HAL_ADC_Init+0x318>)
 8000c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c98:	d102      	bne.n	8000ca0 <HAL_ADC_Init+0x16c>
 8000c9a:	4b6d      	ldr	r3, [pc, #436]	; (8000e50 <HAL_ADC_Init+0x31c>)
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	e002      	b.n	8000ca6 <HAL_ADC_Init+0x172>
 8000ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ca4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d108      	bne.n	8000cc6 <HAL_ADC_Init+0x192>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d101      	bne.n	8000cc6 <HAL_ADC_Init+0x192>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e000      	b.n	8000cc8 <HAL_ADC_Init+0x194>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d11c      	bne.n	8000d06 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d010      	beq.n	8000cf4 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d107      	bne.n	8000cee <HAL_ADC_Init+0x1ba>
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d101      	bne.n	8000cee <HAL_ADC_Init+0x1ba>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <HAL_ADC_Init+0x1bc>
 8000cee:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d108      	bne.n	8000d06 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	431a      	orrs	r2, r3
 8000d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d04:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	7e5b      	ldrb	r3, [r3, #25]
 8000d0a:	035b      	lsls	r3, r3, #13
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d10:	2a01      	cmp	r2, #1
 8000d12:	d002      	beq.n	8000d1a <HAL_ADC_Init+0x1e6>
 8000d14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d18:	e000      	b.n	8000d1c <HAL_ADC_Init+0x1e8>
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	431a      	orrs	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d11b      	bne.n	8000d72 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	7e5b      	ldrb	r3, [r3, #25]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d109      	bne.n	8000d56 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d46:	3b01      	subs	r3, #1
 8000d48:	045a      	lsls	r2, r3, #17
 8000d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d52:	663b      	str	r3, [r7, #96]	; 0x60
 8000d54:	e00d      	b.n	8000d72 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000d5e:	f043 0220 	orr.w	r2, r3, #32
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f043 0201 	orr.w	r2, r3, #1
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d007      	beq.n	8000d8a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d82:	4313      	orrs	r3, r2
 8000d84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d86:	4313      	orrs	r3, r2
 8000d88:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d114      	bne.n	8000dc2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	6812      	ldr	r2, [r2, #0]
 8000da2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000da6:	f023 0302 	bic.w	r3, r3, #2
 8000daa:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	7e1b      	ldrb	r3, [r3, #24]
 8000db0:	039a      	lsls	r2, r3, #14
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <HAL_ADC_Init+0x320>)
 8000dca:	4013      	ands	r3, r2
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	6812      	ldr	r2, [r2, #0]
 8000dd0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000dd2:	430b      	orrs	r3, r1
 8000dd4:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d10c      	bne.n	8000df8 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	f023 010f 	bic.w	r1, r3, #15
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	1e5a      	subs	r2, r3, #1
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	430a      	orrs	r2, r1
 8000df4:	631a      	str	r2, [r3, #48]	; 0x30
 8000df6:	e007      	b.n	8000e08 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 020f 	bic.w	r2, r2, #15
 8000e06:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f023 0303 	bic.w	r3, r3, #3
 8000e16:	f043 0201 	orr.w	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e1e:	e00a      	b.n	8000e36 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f023 0312 	bic.w	r3, r3, #18
 8000e28:	f043 0210 	orr.w	r2, r3, #16
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e30:	2301      	movs	r3, #1
 8000e32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3768      	adds	r7, #104	; 0x68
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000000 	.word	0x20000000
 8000e48:	431bde83 	.word	0x431bde83
 8000e4c:	50000300 	.word	0x50000300
 8000e50:	50000100 	.word	0x50000100
 8000e54:	fff0c007 	.word	0xfff0c007

08000e58 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f040 80c6 	bne.w	8001000 <HAL_ADC_Start_IT+0x1a8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d101      	bne.n	8000e82 <HAL_ADC_Start_IT+0x2a>
 8000e7e:	2302      	movs	r3, #2
 8000e80:	e0c1      	b.n	8001006 <HAL_ADC_Start_IT+0x1ae>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 ff12 	bl	8001cb4 <ADC_Enable>
 8000e90:	4603      	mov	r3, r0
 8000e92:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f040 80ad 	bne.w	8000ff6 <HAL_ADC_Start_IT+0x19e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ea4:	f023 0301 	bic.w	r3, r3, #1
 8000ea8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000eb0:	4b57      	ldr	r3, [pc, #348]	; (8001010 <HAL_ADC_Start_IT+0x1b8>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 031f 	and.w	r3, r3, #31
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d004      	beq.n	8000ec6 <HAL_ADC_Start_IT+0x6e>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ec4:	d115      	bne.n	8000ef2 <HAL_ADC_Start_IT+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d027      	beq.n	8000f30 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ee8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ef0:	e01e      	b.n	8000f30 <HAL_ADC_Start_IT+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f06:	d004      	beq.n	8000f12 <HAL_ADC_Start_IT+0xba>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a41      	ldr	r2, [pc, #260]	; (8001014 <HAL_ADC_Start_IT+0x1bc>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d10e      	bne.n	8000f30 <HAL_ADC_Start_IT+0xd8>
 8000f12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d007      	beq.n	8000f30 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f3c:	d106      	bne.n	8000f4c <HAL_ADC_Start_IT+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f023 0206 	bic.w	r2, r3, #6
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	645a      	str	r2, [r3, #68]	; 0x44
 8000f4a:	e002      	b.n	8000f52 <HAL_ADC_Start_IT+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	221c      	movs	r2, #28
 8000f60:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	2b08      	cmp	r3, #8
 8000f68:	d110      	bne.n	8000f8c <HAL_ADC_Start_IT+0x134>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0204 	bic.w	r2, r2, #4
 8000f78:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f042 0208 	orr.w	r2, r2, #8
 8000f88:	605a      	str	r2, [r3, #4]
          break;
 8000f8a:	e008      	b.n	8000f9e <HAL_ADC_Start_IT+0x146>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 020c 	orr.w	r2, r2, #12
 8000f9a:	605a      	str	r2, [r3, #4]
          break;
 8000f9c:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d107      	bne.n	8000fb6 <HAL_ADC_Start_IT+0x15e>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0210 	bic.w	r2, r2, #16
 8000fb4:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <HAL_ADC_Start_IT+0x1b8>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 031f 	and.w	r3, r3, #31
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d010      	beq.n	8000fe4 <HAL_ADC_Start_IT+0x18c>
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <HAL_ADC_Start_IT+0x1b8>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	2b05      	cmp	r3, #5
 8000fcc:	d00a      	beq.n	8000fe4 <HAL_ADC_Start_IT+0x18c>
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <HAL_ADC_Start_IT+0x1b8>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 031f 	and.w	r3, r3, #31
 8000fd6:	2b09      	cmp	r3, #9
 8000fd8:	d004      	beq.n	8000fe4 <HAL_ADC_Start_IT+0x18c>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fe2:	d10f      	bne.n	8001004 <HAL_ADC_Start_IT+0x1ac>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 0204 	orr.w	r2, r2, #4
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	e006      	b.n	8001004 <HAL_ADC_Start_IT+0x1ac>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000ffe:	e001      	b.n	8001004 <HAL_ADC_Start_IT+0x1ac>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001000:	2302      	movs	r3, #2
 8001002:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	50000300 	.word	0x50000300
 8001014:	50000100 	.word	0x50000100

08001018 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	2b04      	cmp	r3, #4
 8001054:	d106      	bne.n	8001064 <HAL_ADC_IRQHandler+0x30>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b04      	cmp	r3, #4
 8001062:	d00d      	beq.n	8001080 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800106e:	2b08      	cmp	r3, #8
 8001070:	d17a      	bne.n	8001168 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b08      	cmp	r3, #8
 800107e:	d173      	bne.n	8001168 <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	f003 0310 	and.w	r3, r3, #16
 8001088:	2b00      	cmp	r3, #0
 800108a:	d105      	bne.n	8001098 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001098:	4b88      	ldr	r3, [pc, #544]	; (80012bc <HAL_ADC_IRQHandler+0x288>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 031f 	and.w	r3, r3, #31
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d010      	beq.n	80010c6 <HAL_ADC_IRQHandler+0x92>
 80010a4:	4b85      	ldr	r3, [pc, #532]	; (80012bc <HAL_ADC_IRQHandler+0x288>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 031f 	and.w	r3, r3, #31
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d00a      	beq.n	80010c6 <HAL_ADC_IRQHandler+0x92>
 80010b0:	4b82      	ldr	r3, [pc, #520]	; (80012bc <HAL_ADC_IRQHandler+0x288>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 031f 	and.w	r3, r3, #31
 80010b8:	2b09      	cmp	r3, #9
 80010ba:	d004      	beq.n	80010c6 <HAL_ADC_IRQHandler+0x92>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010c4:	d104      	bne.n	80010d0 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	e003      	b.n	80010d8 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80010d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d139      	bne.n	800115a <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d134      	bne.n	800115a <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d12d      	bne.n	800115a <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	2b00      	cmp	r3, #0
 800110a:	d11a      	bne.n	8001142 <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 020c 	bic.w	r2, r2, #12
 800111a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d112      	bne.n	800115a <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	f043 0201 	orr.w	r2, r3, #1
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	641a      	str	r2, [r3, #64]	; 0x40
 8001140:	e00b      	b.n	800115a <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f043 0210 	orr.w	r2, r3, #16
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f043 0201 	orr.w	r2, r3, #1
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff fa4a 	bl	80005f4 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	220c      	movs	r2, #12
 8001166:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	2b20      	cmp	r3, #32
 8001174:	d106      	bne.n	8001184 <HAL_ADC_IRQHandler+0x150>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0320 	and.w	r3, r3, #32
 8001180:	2b20      	cmp	r3, #32
 8001182:	d00f      	beq.n	80011a4 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800118e:	2b40      	cmp	r3, #64	; 0x40
 8001190:	f040 80a9 	bne.w	80012e6 <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119e:	2b40      	cmp	r3, #64	; 0x40
 80011a0:	f040 80a1 	bne.w	80012e6 <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80011b0:	4b42      	ldr	r3, [pc, #264]	; (80012bc <HAL_ADC_IRQHandler+0x288>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 031f 	and.w	r3, r3, #31
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d010      	beq.n	80011de <HAL_ADC_IRQHandler+0x1aa>
 80011bc:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <HAL_ADC_IRQHandler+0x288>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 031f 	and.w	r3, r3, #31
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d00a      	beq.n	80011de <HAL_ADC_IRQHandler+0x1aa>
 80011c8:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <HAL_ADC_IRQHandler+0x288>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 031f 	and.w	r3, r3, #31
 80011d0:	2b09      	cmp	r3, #9
 80011d2:	d004      	beq.n	80011de <HAL_ADC_IRQHandler+0x1aa>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011dc:	d104      	bne.n	80011e8 <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	e003      	b.n	80011f0 <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80011e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d16c      	bne.n	80012d8 <HAL_ADC_IRQHandler+0x2a4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00b      	beq.n	8001220 <HAL_ADC_IRQHandler+0x1ec>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001212:	2b00      	cmp	r3, #0
 8001214:	d160      	bne.n	80012d8 <HAL_ADC_IRQHandler+0x2a4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800121c:	2b00      	cmp	r3, #0
 800121e:	d15b      	bne.n	80012d8 <HAL_ADC_IRQHandler+0x2a4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122a:	2b40      	cmp	r3, #64	; 0x40
 800122c:	d154      	bne.n	80012d8 <HAL_ADC_IRQHandler+0x2a4>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <HAL_ADC_IRQHandler+0x288>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 031f 	and.w	r3, r3, #31
 8001236:	2b00      	cmp	r3, #0
 8001238:	d010      	beq.n	800125c <HAL_ADC_IRQHandler+0x228>
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <HAL_ADC_IRQHandler+0x288>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 031f 	and.w	r3, r3, #31
 8001242:	2b06      	cmp	r3, #6
 8001244:	d00a      	beq.n	800125c <HAL_ADC_IRQHandler+0x228>
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_ADC_IRQHandler+0x288>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 031f 	and.w	r3, r3, #31
 800124e:	2b07      	cmp	r3, #7
 8001250:	d004      	beq.n	800125c <HAL_ADC_IRQHandler+0x228>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800125a:	d104      	bne.n	8001266 <HAL_ADC_IRQHandler+0x232>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	e003      	b.n	800126e <HAL_ADC_IRQHandler+0x23a>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001266:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d12f      	bne.n	80012d8 <HAL_ADC_IRQHandler+0x2a4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d11c      	bne.n	80012c0 <HAL_ADC_IRQHandler+0x28c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001294:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d114      	bne.n	80012d8 <HAL_ADC_IRQHandler+0x2a4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f043 0201 	orr.w	r2, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	; 0x40
 80012ba:	e00d      	b.n	80012d8 <HAL_ADC_IRQHandler+0x2a4>
 80012bc:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f043 0210 	orr.w	r2, r3, #16
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d0:	f043 0201 	orr.w	r2, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 f93d 	bl	8001558 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2260      	movs	r2, #96	; 0x60
 80012e4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f0:	2b80      	cmp	r3, #128	; 0x80
 80012f2:	d113      	bne.n	800131c <HAL_ADC_IRQHandler+0x2e8>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fe:	2b80      	cmp	r3, #128	; 0x80
 8001300:	d10c      	bne.n	800131c <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fbfc 	bl	8000b0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800132a:	d115      	bne.n	8001358 <HAL_ADC_IRQHandler+0x324>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800133a:	d10d      	bne.n	8001358 <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f919 	bl	8001580 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001356:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001366:	d115      	bne.n	8001394 <HAL_ADC_IRQHandler+0x360>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001376:	d10d      	bne.n	8001394 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f905 	bl	8001594 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001392:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	2b10      	cmp	r3, #16
 80013a0:	d13d      	bne.n	800141e <HAL_ADC_IRQHandler+0x3ea>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	2b10      	cmp	r3, #16
 80013ae:	d136      	bne.n	800141e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d102      	bne.n	80013be <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 80013b8:	2301      	movs	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	e019      	b.n	80013f2 <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <HAL_ADC_IRQHandler+0x43c>)
 80013c0:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d109      	bne.n	80013e2 <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d10a      	bne.n	80013f2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80013dc:	2301      	movs	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	e007      	b.n	80013f2 <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80013ee:	2301      	movs	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d10e      	bne.n	8001416 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001408:	f043 0202 	orr.w	r2, r3, #2
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fb85 	bl	8000b20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2210      	movs	r2, #16
 800141c:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800142c:	d11b      	bne.n	8001466 <HAL_ADC_IRQHandler+0x432>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800143c:	d113      	bne.n	8001466 <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f043 0208 	orr.w	r2, r3, #8
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 f883 	bl	800156c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	50000300 	.word	0x50000300

08001474 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_ADCEx_Calibration_Start+0x1c>
 800148c:	2302      	movs	r3, #2
 800148e:	e05f      	b.n	8001550 <HAL_ADCEx_Calibration_Start+0xdc>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 fc6f 	bl	8001d7c <ADC_Disable>
 800149e:	4603      	mov	r3, r0
 80014a0:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d14e      	bne.n	8001546 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80014bc:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d107      	bne.n	80014d4 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014d2:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014e2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80014e4:	f7ff fb06 	bl	8000af4 <HAL_GetTick>
 80014e8:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80014ea:	e01c      	b.n	8001526 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80014ec:	f7ff fb02 	bl	8000af4 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b0a      	cmp	r3, #10
 80014f8:	d915      	bls.n	8001526 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001508:	d10d      	bne.n	8001526 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f023 0312 	bic.w	r3, r3, #18
 8001512:	f043 0210 	orr.w	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e014      	b.n	8001550 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001534:	d0da      	beq.n	80014ec <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f023 0303 	bic.w	r3, r3, #3
 800153e:	f043 0201 	orr.w	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b09b      	sub	sp, #108	; 0x6c
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x22>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e2a4      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x56c>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f040 8288 	bne.w	8001af2 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d81c      	bhi.n	8001624 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	461a      	mov	r2, r3
 80015fe:	231f      	movs	r3, #31
 8001600:	4093      	lsls	r3, r2
 8001602:	43db      	mvns	r3, r3
 8001604:	4019      	ands	r1, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa00 f203 	lsl.w	r2, r0, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	631a      	str	r2, [r3, #48]	; 0x30
 8001622:	e063      	b.n	80016ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b09      	cmp	r3, #9
 800162a:	d81e      	bhi.n	800166a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	3b1e      	subs	r3, #30
 8001640:	221f      	movs	r2, #31
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	4019      	ands	r1, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	3b1e      	subs	r3, #30
 800165c:	fa00 f203 	lsl.w	r2, r0, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	635a      	str	r2, [r3, #52]	; 0x34
 8001668:	e040      	b.n	80016ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b0e      	cmp	r3, #14
 8001670:	d81e      	bhi.n	80016b0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	3b3c      	subs	r3, #60	; 0x3c
 8001686:	221f      	movs	r2, #31
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	4019      	ands	r1, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	3b3c      	subs	r3, #60	; 0x3c
 80016a2:	fa00 f203 	lsl.w	r2, r0, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	639a      	str	r2, [r3, #56]	; 0x38
 80016ae:	e01d      	b.n	80016ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	3b5a      	subs	r3, #90	; 0x5a
 80016c4:	221f      	movs	r2, #31
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	4019      	ands	r1, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	3b5a      	subs	r3, #90	; 0x5a
 80016e0:	fa00 f203 	lsl.w	r2, r0, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f040 80e5 	bne.w	80018c6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b09      	cmp	r3, #9
 8001702:	d91c      	bls.n	800173e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6999      	ldr	r1, [r3, #24]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	3b1e      	subs	r3, #30
 8001716:	2207      	movs	r2, #7
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	4019      	ands	r1, r3
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	6898      	ldr	r0, [r3, #8]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	3b1e      	subs	r3, #30
 8001730:	fa00 f203 	lsl.w	r2, r0, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	619a      	str	r2, [r3, #24]
 800173c:	e019      	b.n	8001772 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6959      	ldr	r1, [r3, #20]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	2207      	movs	r2, #7
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	4019      	ands	r1, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	6898      	ldr	r0, [r3, #8]
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	fa00 f203 	lsl.w	r2, r0, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	08db      	lsrs	r3, r3, #3
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	3b01      	subs	r3, #1
 8001790:	2b03      	cmp	r3, #3
 8001792:	d84f      	bhi.n	8001834 <HAL_ADC_ConfigChannel+0x28c>
 8001794:	a201      	add	r2, pc, #4	; (adr r2, 800179c <HAL_ADC_ConfigChannel+0x1f4>)
 8001796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179a:	bf00      	nop
 800179c:	080017ad 	.word	0x080017ad
 80017a0:	080017cf 	.word	0x080017cf
 80017a4:	080017f1 	.word	0x080017f1
 80017a8:	08001813 	.word	0x08001813
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017b2:	4b94      	ldr	r3, [pc, #592]	; (8001a04 <HAL_ADC_ConfigChannel+0x45c>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	0691      	lsls	r1, r2, #26
 80017bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017be:	430a      	orrs	r2, r1
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ca:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017cc:	e07e      	b.n	80018cc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017d4:	4b8b      	ldr	r3, [pc, #556]	; (8001a04 <HAL_ADC_ConfigChannel+0x45c>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	0691      	lsls	r1, r2, #26
 80017de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017e0:	430a      	orrs	r2, r1
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ec:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017ee:	e06d      	b.n	80018cc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017f6:	4b83      	ldr	r3, [pc, #524]	; (8001a04 <HAL_ADC_ConfigChannel+0x45c>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	0691      	lsls	r1, r2, #26
 8001800:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001802:	430a      	orrs	r2, r1
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800180e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001810:	e05c      	b.n	80018cc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001818:	4b7a      	ldr	r3, [pc, #488]	; (8001a04 <HAL_ADC_ConfigChannel+0x45c>)
 800181a:	4013      	ands	r3, r2
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	0691      	lsls	r1, r2, #26
 8001822:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001824:	430a      	orrs	r2, r1
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001830:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001832:	e04b      	b.n	80018cc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	069b      	lsls	r3, r3, #26
 8001844:	429a      	cmp	r2, r3
 8001846:	d107      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001856:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800185e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	069b      	lsls	r3, r3, #26
 8001868:	429a      	cmp	r2, r3
 800186a:	d107      	bne.n	800187c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800187a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001882:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	069b      	lsls	r3, r3, #26
 800188c:	429a      	cmp	r2, r3
 800188e:	d107      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800189e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	069b      	lsls	r3, r3, #26
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d10a      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018c2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80018c4:	e001      	b.n	80018ca <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80018c6:	bf00      	nop
 80018c8:	e000      	b.n	80018cc <HAL_ADC_ConfigChannel+0x324>
      break;
 80018ca:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d108      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x344>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x344>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_ADC_ConfigChannel+0x346>
 80018ec:	2300      	movs	r3, #0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 810a 	bne.w	8001b08 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d00f      	beq.n	800191c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2201      	movs	r2, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	400a      	ands	r2, r1
 8001916:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800191a:	e049      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	409a      	lsls	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b09      	cmp	r3, #9
 800193c:	d91c      	bls.n	8001978 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6999      	ldr	r1, [r3, #24]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	3b1b      	subs	r3, #27
 8001950:	2207      	movs	r2, #7
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	4019      	ands	r1, r3
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	6898      	ldr	r0, [r3, #8]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	3b1b      	subs	r3, #27
 800196a:	fa00 f203 	lsl.w	r2, r0, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	619a      	str	r2, [r3, #24]
 8001976:	e01b      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6959      	ldr	r1, [r3, #20]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	2207      	movs	r2, #7
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	4019      	ands	r1, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	6898      	ldr	r0, [r3, #8]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	fa00 f203 	lsl.w	r2, r0, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_ADC_ConfigChannel+0x460>)
 80019b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b10      	cmp	r3, #16
 80019ba:	d105      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d015      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019cc:	2b11      	cmp	r3, #17
 80019ce:	d105      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00b      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019e0:	2b12      	cmp	r3, #18
 80019e2:	f040 8091 	bne.w	8001b08 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80019e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f040 808a 	bne.w	8001b08 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019fc:	d108      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x468>
 80019fe:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_ADC_ConfigChannel+0x464>)
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	e008      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x46e>
 8001a04:	83fff000 	.word	0x83fff000
 8001a08:	50000300 	.word	0x50000300
 8001a0c:	50000100 	.word	0x50000100
 8001a10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a14:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d108      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x48e>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x48e>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x490>
 8001a36:	2300      	movs	r3, #0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d150      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a3c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d010      	beq.n	8001a64 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x4b6>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x4b6>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x4b8>
 8001a5e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d13c      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b10      	cmp	r3, #16
 8001a6a:	d11d      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x500>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a74:	d118      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a80:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a82:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_ADC_ConfigChannel+0x578>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a27      	ldr	r2, [pc, #156]	; (8001b24 <HAL_ADC_ConfigChannel+0x57c>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	0c9a      	lsrs	r2, r3, #18
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a98:	e002      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f9      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aa6:	e02e      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b11      	cmp	r3, #17
 8001aae:	d10b      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x520>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ab8:	d106      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ac6:	e01e      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b12      	cmp	r3, #18
 8001ace:	d11a      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ada:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001adc:	e013      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f043 0220 	orr.w	r2, r3, #32
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001af0:	e00a      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f043 0220 	orr.w	r2, r3, #32
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b04:	e000      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b06:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	376c      	adds	r7, #108	; 0x6c
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	20000000 	.word	0x20000000
 8001b24:	431bde83 	.word	0x431bde83

08001b28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b099      	sub	sp, #100	; 0x64
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b40:	d102      	bne.n	8001b48 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001b42:	4b5a      	ldr	r3, [pc, #360]	; (8001cac <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	e002      	b.n	8001b4e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001b48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b4c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0a2      	b.n	8001c9e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e09b      	b.n	8001c9e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d17f      	bne.n	8001c7c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d179      	bne.n	8001c7c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b88:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001b8a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d040      	beq.n	8001c16 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6859      	ldr	r1, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ba6:	035b      	lsls	r3, r3, #13
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	431a      	orrs	r2, r3
 8001bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bae:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d108      	bne.n	8001bd0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d15c      	bne.n	8001c90 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d107      	bne.n	8001bf2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001bf2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d14b      	bne.n	8001c90 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c00:	f023 030f 	bic.w	r3, r3, #15
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	6811      	ldr	r1, [r2, #0]
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	6892      	ldr	r2, [r2, #8]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c12:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c14:	e03c      	b.n	8001c90 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c20:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d108      	bne.n	8001c42 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001c42:	2300      	movs	r3, #0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d123      	bne.n	8001c90 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d107      	bne.n	8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001c64:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d112      	bne.n	8001c90 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c72:	f023 030f 	bic.w	r3, r3, #15
 8001c76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c78:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c7a:	e009      	b.n	8001c90 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f043 0220 	orr.w	r2, r3, #32
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001c8e:	e000      	b.n	8001c92 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c90:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3764      	adds	r7, #100	; 0x64
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	50000100 	.word	0x50000100
 8001cb0:	50000300 	.word	0x50000300

08001cb4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d108      	bne.n	8001ce0 <ADC_Enable+0x2c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <ADC_Enable+0x2c>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <ADC_Enable+0x2e>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d143      	bne.n	8001d6e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <ADC_Enable+0xc4>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00d      	beq.n	8001d10 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	f043 0210 	orr.w	r2, r3, #16
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e02f      	b.n	8001d70 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001d20:	f7fe fee8 	bl	8000af4 <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d26:	e01b      	b.n	8001d60 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d28:	f7fe fee4 	bl	8000af4 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d914      	bls.n	8001d60 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d00d      	beq.n	8001d60 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	f043 0210 	orr.w	r2, r3, #16
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	f043 0201 	orr.w	r2, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e007      	b.n	8001d70 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d1dc      	bne.n	8001d28 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	8000003f 	.word	0x8000003f

08001d7c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d108      	bne.n	8001da8 <ADC_Disable+0x2c>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <ADC_Disable+0x2c>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <ADC_Disable+0x2e>
 8001da8:	2300      	movs	r3, #0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d047      	beq.n	8001e3e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 030d 	and.w	r3, r3, #13
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d10f      	bne.n	8001ddc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0202 	orr.w	r2, r2, #2
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001dd4:	f7fe fe8e 	bl	8000af4 <HAL_GetTick>
 8001dd8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001dda:	e029      	b.n	8001e30 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f043 0210 	orr.w	r2, r3, #16
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dec:	f043 0201 	orr.w	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e023      	b.n	8001e40 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001df8:	f7fe fe7c 	bl	8000af4 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d914      	bls.n	8001e30 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d10d      	bne.n	8001e30 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f043 0210 	orr.w	r2, r3, #16
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	f043 0201 	orr.w	r2, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e007      	b.n	8001e40 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d0dc      	beq.n	8001df8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e64:	4013      	ands	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7a:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	60d3      	str	r3, [r2, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 0307 	and.w	r3, r3, #7
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db0b      	blt.n	8001ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4907      	ldr	r1, [pc, #28]	; (8001ee4 <__NVIC_EnableIRQ+0x38>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	2001      	movs	r0, #1
 8001ece:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000e100 	.word	0xe000e100

08001ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	; (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	; (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f1c3 0307 	rsb	r3, r3, #7
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	bf28      	it	cs
 8001f5a:	2304      	movcs	r3, #4
 8001f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d902      	bls.n	8001f6c <NVIC_EncodePriority+0x30>
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3b03      	subs	r3, #3
 8001f6a:	e000      	b.n	8001f6e <NVIC_EncodePriority+0x32>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	4313      	orrs	r3, r2
         );
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	; 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb4:	d301      	bcc.n	8001fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00f      	b.n	8001fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <SysTick_Config+0x40>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc2:	210f      	movs	r1, #15
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	f7ff ff8e 	bl	8001ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <SysTick_Config+0x40>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <SysTick_Config+0x40>)
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	e000e010 	.word	0xe000e010

08001fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ff29 	bl	8001e48 <__NVIC_SetPriorityGrouping>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002010:	f7ff ff3e 	bl	8001e90 <__NVIC_GetPriorityGrouping>
 8002014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	6978      	ldr	r0, [r7, #20]
 800201c:	f7ff ff8e 	bl	8001f3c <NVIC_EncodePriority>
 8002020:	4602      	mov	r2, r0
 8002022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff5d 	bl	8001ee8 <__NVIC_SetPriority>
}
 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff31 	bl	8001eac <__NVIC_EnableIRQ>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ffa2 	bl	8001fa4 <SysTick_Config>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207a:	e14e      	b.n	800231a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	2101      	movs	r1, #1
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	4013      	ands	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 8140 	beq.w	8002314 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d005      	beq.n	80020ac <HAL_GPIO_Init+0x40>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d130      	bne.n	800210e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e2:	2201      	movs	r2, #1
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	091b      	lsrs	r3, r3, #4
 80020f8:	f003 0201 	and.w	r2, r3, #1
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b03      	cmp	r3, #3
 8002118:	d017      	beq.n	800214a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2203      	movs	r2, #3
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d123      	bne.n	800219e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	08da      	lsrs	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3208      	adds	r2, #8
 800215e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002162:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	220f      	movs	r2, #15
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	08da      	lsrs	r2, r3, #3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3208      	adds	r2, #8
 8002198:	6939      	ldr	r1, [r7, #16]
 800219a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	2203      	movs	r2, #3
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0203 	and.w	r2, r3, #3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 809a 	beq.w	8002314 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e0:	4b55      	ldr	r3, [pc, #340]	; (8002338 <HAL_GPIO_Init+0x2cc>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	4a54      	ldr	r2, [pc, #336]	; (8002338 <HAL_GPIO_Init+0x2cc>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6193      	str	r3, [r2, #24]
 80021ec:	4b52      	ldr	r3, [pc, #328]	; (8002338 <HAL_GPIO_Init+0x2cc>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021f8:	4a50      	ldr	r2, [pc, #320]	; (800233c <HAL_GPIO_Init+0x2d0>)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3302      	adds	r3, #2
 8002200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	220f      	movs	r2, #15
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002222:	d013      	beq.n	800224c <HAL_GPIO_Init+0x1e0>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a46      	ldr	r2, [pc, #280]	; (8002340 <HAL_GPIO_Init+0x2d4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00d      	beq.n	8002248 <HAL_GPIO_Init+0x1dc>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a45      	ldr	r2, [pc, #276]	; (8002344 <HAL_GPIO_Init+0x2d8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d007      	beq.n	8002244 <HAL_GPIO_Init+0x1d8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a44      	ldr	r2, [pc, #272]	; (8002348 <HAL_GPIO_Init+0x2dc>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d101      	bne.n	8002240 <HAL_GPIO_Init+0x1d4>
 800223c:	2303      	movs	r3, #3
 800223e:	e006      	b.n	800224e <HAL_GPIO_Init+0x1e2>
 8002240:	2305      	movs	r3, #5
 8002242:	e004      	b.n	800224e <HAL_GPIO_Init+0x1e2>
 8002244:	2302      	movs	r3, #2
 8002246:	e002      	b.n	800224e <HAL_GPIO_Init+0x1e2>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <HAL_GPIO_Init+0x1e2>
 800224c:	2300      	movs	r3, #0
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	f002 0203 	and.w	r2, r2, #3
 8002254:	0092      	lsls	r2, r2, #2
 8002256:	4093      	lsls	r3, r2
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800225e:	4937      	ldr	r1, [pc, #220]	; (800233c <HAL_GPIO_Init+0x2d0>)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	3302      	adds	r3, #2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800226c:	4b37      	ldr	r3, [pc, #220]	; (800234c <HAL_GPIO_Init+0x2e0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002290:	4a2e      	ldr	r2, [pc, #184]	; (800234c <HAL_GPIO_Init+0x2e0>)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_GPIO_Init+0x2e0>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022ba:	4a24      	ldr	r2, [pc, #144]	; (800234c <HAL_GPIO_Init+0x2e0>)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c0:	4b22      	ldr	r3, [pc, #136]	; (800234c <HAL_GPIO_Init+0x2e0>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022e4:	4a19      	ldr	r2, [pc, #100]	; (800234c <HAL_GPIO_Init+0x2e0>)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ea:	4b18      	ldr	r3, [pc, #96]	; (800234c <HAL_GPIO_Init+0x2e0>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800230e:	4a0f      	ldr	r2, [pc, #60]	; (800234c <HAL_GPIO_Init+0x2e0>)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3301      	adds	r3, #1
 8002318:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	f47f aea9 	bne.w	800207c <HAL_GPIO_Init+0x10>
  }
}
 800232a:	bf00      	nop
 800232c:	bf00      	nop
 800232e:	371c      	adds	r7, #28
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	40021000 	.word	0x40021000
 800233c:	40010000 	.word	0x40010000
 8002340:	48000400 	.word	0x48000400
 8002344:	48000800 	.word	0x48000800
 8002348:	48000c00 	.word	0x48000c00
 800234c:	40010400 	.word	0x40010400

08002350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
 800235c:	4613      	mov	r3, r2
 800235e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002360:	787b      	ldrb	r3, [r7, #1]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800236c:	e002      	b.n	8002374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002386:	af00      	add	r7, sp, #0
 8002388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002390:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f001 b823 	b.w	80033ec <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 817d 	beq.w	80026b6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023bc:	4bbc      	ldr	r3, [pc, #752]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d00c      	beq.n	80023e2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023c8:	4bb9      	ldr	r3, [pc, #740]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d15c      	bne.n	800248e <HAL_RCC_OscConfig+0x10e>
 80023d4:	4bb6      	ldr	r3, [pc, #728]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e0:	d155      	bne.n	800248e <HAL_RCC_OscConfig+0x10e>
 80023e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023f6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d102      	bne.n	8002414 <HAL_RCC_OscConfig+0x94>
 800240e:	4ba8      	ldr	r3, [pc, #672]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	e015      	b.n	8002440 <HAL_RCC_OscConfig+0xc0>
 8002414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002418:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800242c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002430:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800243c:	4b9c      	ldr	r3, [pc, #624]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002444:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002448:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800244c:	fa92 f2a2 	rbit	r2, r2
 8002450:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002454:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002458:	fab2 f282 	clz	r2, r2
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f042 0220 	orr.w	r2, r2, #32
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	f002 021f 	and.w	r2, r2, #31
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f202 	lsl.w	r2, r1, r2
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 811f 	beq.w	80026b4 <HAL_RCC_OscConfig+0x334>
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 8116 	bne.w	80026b4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	f000 bfaf 	b.w	80033ec <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249e:	d106      	bne.n	80024ae <HAL_RCC_OscConfig+0x12e>
 80024a0:	4b83      	ldr	r3, [pc, #524]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a82      	ldr	r2, [pc, #520]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 80024a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	e036      	b.n	800251c <HAL_RCC_OscConfig+0x19c>
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x158>
 80024be:	4b7c      	ldr	r3, [pc, #496]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a7b      	ldr	r2, [pc, #492]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 80024c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b79      	ldr	r3, [pc, #484]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a78      	ldr	r2, [pc, #480]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 80024d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e021      	b.n	800251c <HAL_RCC_OscConfig+0x19c>
 80024d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0x184>
 80024ea:	4b71      	ldr	r3, [pc, #452]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a70      	ldr	r2, [pc, #448]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 80024f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b6e      	ldr	r3, [pc, #440]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a6d      	ldr	r2, [pc, #436]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e00b      	b.n	800251c <HAL_RCC_OscConfig+0x19c>
 8002504:	4b6a      	ldr	r3, [pc, #424]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a69      	ldr	r2, [pc, #420]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 800250a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b67      	ldr	r3, [pc, #412]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a66      	ldr	r2, [pc, #408]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 8002516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800251a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800251c:	4b64      	ldr	r3, [pc, #400]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	f023 020f 	bic.w	r2, r3, #15
 8002524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002528:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	495f      	ldr	r1, [pc, #380]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 8002532:	4313      	orrs	r3, r2
 8002534:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d059      	beq.n	80025fa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7fe fad5 	bl	8000af4 <HAL_GetTick>
 800254a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002550:	f7fe fad0 	bl	8000af4 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b64      	cmp	r3, #100	; 0x64
 800255e:	d902      	bls.n	8002566 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	f000 bf43 	b.w	80033ec <HAL_RCC_OscConfig+0x106c>
 8002566:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800256a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800257a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	095b      	lsrs	r3, r3, #5
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d102      	bne.n	8002598 <HAL_RCC_OscConfig+0x218>
 8002592:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	e015      	b.n	80025c4 <HAL_RCC_OscConfig+0x244>
 8002598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800259c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80025ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80025b4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80025c0:	4b3b      	ldr	r3, [pc, #236]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025c8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80025cc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025d0:	fa92 f2a2 	rbit	r2, r2
 80025d4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80025d8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80025dc:	fab2 f282 	clz	r2, r2
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	f042 0220 	orr.w	r2, r2, #32
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	f002 021f 	and.w	r2, r2, #31
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f202 	lsl.w	r2, r1, r2
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ab      	beq.n	8002550 <HAL_RCC_OscConfig+0x1d0>
 80025f8:	e05d      	b.n	80026b6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7fe fa7b 	bl	8000af4 <HAL_GetTick>
 80025fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002602:	e00a      	b.n	800261a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002604:	f7fe fa76 	bl	8000af4 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b64      	cmp	r3, #100	; 0x64
 8002612:	d902      	bls.n	800261a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	f000 bee9 	b.w	80033ec <HAL_RCC_OscConfig+0x106c>
 800261a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800261e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800262e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d102      	bne.n	800264c <HAL_RCC_OscConfig+0x2cc>
 8002646:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	e015      	b.n	8002678 <HAL_RCC_OscConfig+0x2f8>
 800264c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002650:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002660:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002664:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002668:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <HAL_RCC_OscConfig+0x330>)
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800267c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002680:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002684:	fa92 f2a2 	rbit	r2, r2
 8002688:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800268c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002690:	fab2 f282 	clz	r2, r2
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	f042 0220 	orr.w	r2, r2, #32
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	f002 021f 	and.w	r2, r2, #31
 80026a0:	2101      	movs	r1, #1
 80026a2:	fa01 f202 	lsl.w	r2, r1, r2
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ab      	bne.n	8002604 <HAL_RCC_OscConfig+0x284>
 80026ac:	e003      	b.n	80026b6 <HAL_RCC_OscConfig+0x336>
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 817d 	beq.w	80029c6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026cc:	4ba6      	ldr	r3, [pc, #664]	; (8002968 <HAL_RCC_OscConfig+0x5e8>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 030c 	and.w	r3, r3, #12
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00b      	beq.n	80026f0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026d8:	4ba3      	ldr	r3, [pc, #652]	; (8002968 <HAL_RCC_OscConfig+0x5e8>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 030c 	and.w	r3, r3, #12
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d172      	bne.n	80027ca <HAL_RCC_OscConfig+0x44a>
 80026e4:	4ba0      	ldr	r3, [pc, #640]	; (8002968 <HAL_RCC_OscConfig+0x5e8>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d16c      	bne.n	80027ca <HAL_RCC_OscConfig+0x44a>
 80026f0:	2302      	movs	r3, #2
 80026f2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002702:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	095b      	lsrs	r3, r3, #5
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b01      	cmp	r3, #1
 8002718:	d102      	bne.n	8002720 <HAL_RCC_OscConfig+0x3a0>
 800271a:	4b93      	ldr	r3, [pc, #588]	; (8002968 <HAL_RCC_OscConfig+0x5e8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	e013      	b.n	8002748 <HAL_RCC_OscConfig+0x3c8>
 8002720:	2302      	movs	r3, #2
 8002722:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002732:	2302      	movs	r3, #2
 8002734:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002738:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002744:	4b88      	ldr	r3, [pc, #544]	; (8002968 <HAL_RCC_OscConfig+0x5e8>)
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	2202      	movs	r2, #2
 800274a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800274e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002752:	fa92 f2a2 	rbit	r2, r2
 8002756:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800275a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800275e:	fab2 f282 	clz	r2, r2
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	f042 0220 	orr.w	r2, r2, #32
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f002 021f 	and.w	r2, r2, #31
 800276e:	2101      	movs	r1, #1
 8002770:	fa01 f202 	lsl.w	r2, r1, r2
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_RCC_OscConfig+0x410>
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d002      	beq.n	8002790 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	f000 be2e 	b.w	80033ec <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	4b75      	ldr	r3, [pc, #468]	; (8002968 <HAL_RCC_OscConfig+0x5e8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	21f8      	movs	r1, #248	; 0xf8
 80027a6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027ae:	fa91 f1a1 	rbit	r1, r1
 80027b2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80027b6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80027ba:	fab1 f181 	clz	r1, r1
 80027be:	b2c9      	uxtb	r1, r1
 80027c0:	408b      	lsls	r3, r1
 80027c2:	4969      	ldr	r1, [pc, #420]	; (8002968 <HAL_RCC_OscConfig+0x5e8>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c8:	e0fd      	b.n	80029c6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8088 	beq.w	80028ec <HAL_RCC_OscConfig+0x56c>
 80027dc:	2301      	movs	r3, #1
 80027de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80027ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	461a      	mov	r2, r3
 8002804:	2301      	movs	r3, #1
 8002806:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7fe f974 	bl	8000af4 <HAL_GetTick>
 800280c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002810:	e00a      	b.n	8002828 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002812:	f7fe f96f 	bl	8000af4 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d902      	bls.n	8002828 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	f000 bde2 	b.w	80033ec <HAL_RCC_OscConfig+0x106c>
 8002828:	2302      	movs	r3, #2
 800282a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800283a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	095b      	lsrs	r3, r3, #5
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d102      	bne.n	8002858 <HAL_RCC_OscConfig+0x4d8>
 8002852:	4b45      	ldr	r3, [pc, #276]	; (8002968 <HAL_RCC_OscConfig+0x5e8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	e013      	b.n	8002880 <HAL_RCC_OscConfig+0x500>
 8002858:	2302      	movs	r3, #2
 800285a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800286a:	2302      	movs	r3, #2
 800286c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002870:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800287c:	4b3a      	ldr	r3, [pc, #232]	; (8002968 <HAL_RCC_OscConfig+0x5e8>)
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	2202      	movs	r2, #2
 8002882:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002886:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800288a:	fa92 f2a2 	rbit	r2, r2
 800288e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002892:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002896:	fab2 f282 	clz	r2, r2
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	f042 0220 	orr.w	r2, r2, #32
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	f002 021f 	and.w	r2, r2, #31
 80028a6:	2101      	movs	r1, #1
 80028a8:	fa01 f202 	lsl.w	r2, r1, r2
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0af      	beq.n	8002812 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b2:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <HAL_RCC_OscConfig+0x5e8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	21f8      	movs	r1, #248	; 0xf8
 80028c8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028d0:	fa91 f1a1 	rbit	r1, r1
 80028d4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80028d8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80028dc:	fab1 f181 	clz	r1, r1
 80028e0:	b2c9      	uxtb	r1, r1
 80028e2:	408b      	lsls	r3, r1
 80028e4:	4920      	ldr	r1, [pc, #128]	; (8002968 <HAL_RCC_OscConfig+0x5e8>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]
 80028ea:	e06c      	b.n	80029c6 <HAL_RCC_OscConfig+0x646>
 80028ec:	2301      	movs	r3, #1
 80028ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80028fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800290c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	461a      	mov	r2, r3
 8002914:	2300      	movs	r3, #0
 8002916:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7fe f8ec 	bl	8000af4 <HAL_GetTick>
 800291c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002920:	e00a      	b.n	8002938 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002922:	f7fe f8e7 	bl	8000af4 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d902      	bls.n	8002938 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	f000 bd5a 	b.w	80033ec <HAL_RCC_OscConfig+0x106c>
 8002938:	2302      	movs	r3, #2
 800293a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800294a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d104      	bne.n	800296c <HAL_RCC_OscConfig+0x5ec>
 8002962:	4b01      	ldr	r3, [pc, #4]	; (8002968 <HAL_RCC_OscConfig+0x5e8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	e015      	b.n	8002994 <HAL_RCC_OscConfig+0x614>
 8002968:	40021000 	.word	0x40021000
 800296c:	2302      	movs	r3, #2
 800296e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800297e:	2302      	movs	r3, #2
 8002980:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002984:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002990:	4bc8      	ldr	r3, [pc, #800]	; (8002cb4 <HAL_RCC_OscConfig+0x934>)
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	2202      	movs	r2, #2
 8002996:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800299a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800299e:	fa92 f2a2 	rbit	r2, r2
 80029a2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80029a6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80029aa:	fab2 f282 	clz	r2, r2
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	f042 0220 	orr.w	r2, r2, #32
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	f002 021f 	and.w	r2, r2, #31
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f202 	lsl.w	r2, r1, r2
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1ad      	bne.n	8002922 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8110 	beq.w	8002bfc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d079      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x760>
 80029ec:	2301      	movs	r3, #1
 80029ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80029fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4bab      	ldr	r3, [pc, #684]	; (8002cb8 <HAL_RCC_OscConfig+0x938>)
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	461a      	mov	r2, r3
 8002a12:	2301      	movs	r3, #1
 8002a14:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7fe f86d 	bl	8000af4 <HAL_GetTick>
 8002a1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a20:	f7fe f868 	bl	8000af4 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d902      	bls.n	8002a36 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	f000 bcdb 	b.w	80033ec <HAL_RCC_OscConfig+0x106c>
 8002a36:	2302      	movs	r3, #2
 8002a38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a50:	2202      	movs	r2, #2
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a58:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	fa93 f2a3 	rbit	r2, r3
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a74:	2202      	movs	r2, #2
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	fa93 f2a3 	rbit	r2, r3
 8002a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a8e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a90:	4b88      	ldr	r3, [pc, #544]	; (8002cb4 <HAL_RCC_OscConfig+0x934>)
 8002a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	6019      	str	r1, [r3, #0]
 8002aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	fa93 f1a3 	rbit	r1, r3
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ab6:	6019      	str	r1, [r3, #0]
  return result;
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0a0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x6a0>
 8002ade:	e08d      	b.n	8002bfc <HAL_RCC_OscConfig+0x87c>
 8002ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	fa93 f2a3 	rbit	r2, r3
 8002afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b02:	601a      	str	r2, [r3, #0]
  return result;
 8002b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b08:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b0c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b68      	ldr	r3, [pc, #416]	; (8002cb8 <HAL_RCC_OscConfig+0x938>)
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2300      	movs	r3, #0
 8002b20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b22:	f7fd ffe7 	bl	8000af4 <HAL_GetTick>
 8002b26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b2c:	f7fd ffe2 	bl	8000af4 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d902      	bls.n	8002b42 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	f000 bc55 	b.w	80033ec <HAL_RCC_OscConfig+0x106c>
 8002b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	fa93 f2a3 	rbit	r2, r3
 8002b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b60:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b6e:	2202      	movs	r2, #2
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	fa93 f2a3 	rbit	r2, r3
 8002b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b92:	2202      	movs	r2, #2
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	fa93 f2a3 	rbit	r2, r3
 8002ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bae:	4b41      	ldr	r3, [pc, #260]	; (8002cb4 <HAL_RCC_OscConfig+0x934>)
 8002bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002bba:	2102      	movs	r1, #2
 8002bbc:	6019      	str	r1, [r3, #0]
 8002bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	fa93 f1a3 	rbit	r1, r3
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bd4:	6019      	str	r1, [r3, #0]
  return result;
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d197      	bne.n	8002b2c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 81a1 	beq.w	8002f54 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c18:	4b26      	ldr	r3, [pc, #152]	; (8002cb4 <HAL_RCC_OscConfig+0x934>)
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d116      	bne.n	8002c52 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <HAL_RCC_OscConfig+0x934>)
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <HAL_RCC_OscConfig+0x934>)
 8002c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	61d3      	str	r3, [r2, #28]
 8002c30:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_RCC_OscConfig+0x934>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c46:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c4a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <HAL_RCC_OscConfig+0x93c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d11a      	bne.n	8002c94 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <HAL_RCC_OscConfig+0x93c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <HAL_RCC_OscConfig+0x93c>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7fd ff43 	bl	8000af4 <HAL_GetTick>
 8002c6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c72:	e009      	b.n	8002c88 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c74:	f7fd ff3e 	bl	8000af4 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	; 0x64
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e3b1      	b.n	80033ec <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <HAL_RCC_OscConfig+0x93c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0ef      	beq.n	8002c74 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d10d      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x940>
 8002ca4:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <HAL_RCC_OscConfig+0x934>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	4a02      	ldr	r2, [pc, #8]	; (8002cb4 <HAL_RCC_OscConfig+0x934>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6213      	str	r3, [r2, #32]
 8002cb0:	e03c      	b.n	8002d2c <HAL_RCC_OscConfig+0x9ac>
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	10908120 	.word	0x10908120
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10c      	bne.n	8002cea <HAL_RCC_OscConfig+0x96a>
 8002cd0:	4bc1      	ldr	r3, [pc, #772]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	4ac0      	ldr	r2, [pc, #768]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	6213      	str	r3, [r2, #32]
 8002cdc:	4bbe      	ldr	r3, [pc, #760]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4abd      	ldr	r2, [pc, #756]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002ce2:	f023 0304 	bic.w	r3, r3, #4
 8002ce6:	6213      	str	r3, [r2, #32]
 8002ce8:	e020      	b.n	8002d2c <HAL_RCC_OscConfig+0x9ac>
 8002cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2b05      	cmp	r3, #5
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x994>
 8002cfa:	4bb7      	ldr	r3, [pc, #732]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4ab6      	ldr	r2, [pc, #728]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002d00:	f043 0304 	orr.w	r3, r3, #4
 8002d04:	6213      	str	r3, [r2, #32]
 8002d06:	4bb4      	ldr	r3, [pc, #720]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4ab3      	ldr	r2, [pc, #716]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6213      	str	r3, [r2, #32]
 8002d12:	e00b      	b.n	8002d2c <HAL_RCC_OscConfig+0x9ac>
 8002d14:	4bb0      	ldr	r3, [pc, #704]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	4aaf      	ldr	r2, [pc, #700]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	6213      	str	r3, [r2, #32]
 8002d20:	4bad      	ldr	r3, [pc, #692]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4aac      	ldr	r2, [pc, #688]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002d26:	f023 0304 	bic.w	r3, r3, #4
 8002d2a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8081 	beq.w	8002e40 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3e:	f7fd fed9 	bl	8000af4 <HAL_GetTick>
 8002d42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d46:	e00b      	b.n	8002d60 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d48:	f7fd fed4 	bl	8000af4 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e345      	b.n	80033ec <HAL_RCC_OscConfig+0x106c>
 8002d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d68:	2202      	movs	r2, #2
 8002d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d70:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fa93 f2a3 	rbit	r2, r3
 8002d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d88:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	fa93 f2a3 	rbit	r2, r3
 8002d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002da6:	601a      	str	r2, [r3, #0]
  return result;
 8002da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dac:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002db0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d102      	bne.n	8002dcc <HAL_RCC_OscConfig+0xa4c>
 8002dc6:	4b84      	ldr	r3, [pc, #528]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	e013      	b.n	8002df4 <HAL_RCC_OscConfig+0xa74>
 8002dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	fa93 f2a3 	rbit	r2, r3
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	4b79      	ldr	r3, [pc, #484]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002df8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	6011      	str	r1, [r2, #0]
 8002e00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e04:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	fa92 f1a2 	rbit	r1, r2
 8002e0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e12:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e16:	6011      	str	r1, [r2, #0]
  return result;
 8002e18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e1c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	fab2 f282 	clz	r2, r2
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	f002 021f 	and.w	r2, r2, #31
 8002e32:	2101      	movs	r1, #1
 8002e34:	fa01 f202 	lsl.w	r2, r1, r2
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d084      	beq.n	8002d48 <HAL_RCC_OscConfig+0x9c8>
 8002e3e:	e07f      	b.n	8002f40 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e40:	f7fd fe58 	bl	8000af4 <HAL_GetTick>
 8002e44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e48:	e00b      	b.n	8002e62 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fd fe53 	bl	8000af4 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e2c4      	b.n	80033ec <HAL_RCC_OscConfig+0x106c>
 8002e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e66:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	fa93 f2a3 	rbit	r2, r3
 8002e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e80:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e8e:	2202      	movs	r2, #2
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e96:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	fa93 f2a3 	rbit	r2, r3
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ea8:	601a      	str	r2, [r3, #0]
  return result;
 8002eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eae:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002eb2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb4:	fab3 f383 	clz	r3, r3
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f043 0302 	orr.w	r3, r3, #2
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d102      	bne.n	8002ece <HAL_RCC_OscConfig+0xb4e>
 8002ec8:	4b43      	ldr	r3, [pc, #268]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	e013      	b.n	8002ef6 <HAL_RCC_OscConfig+0xb76>
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ede:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	fa93 f2a3 	rbit	r2, r3
 8002ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002efa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002efe:	2102      	movs	r1, #2
 8002f00:	6011      	str	r1, [r2, #0]
 8002f02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f06:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	fa92 f1a2 	rbit	r1, r2
 8002f10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f14:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f18:	6011      	str	r1, [r2, #0]
  return result;
 8002f1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f1e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	fab2 f282 	clz	r2, r2
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	f002 021f 	and.w	r2, r2, #31
 8002f34:	2101      	movs	r1, #1
 8002f36:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d184      	bne.n	8002e4a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f40:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d105      	bne.n	8002f54 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f48:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	4a22      	ldr	r2, [pc, #136]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f52:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8242 	beq.w	80033ea <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f66:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <HAL_RCC_OscConfig+0xc58>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	f000 8213 	beq.w	800339a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	f040 8162 	bne.w	800324a <HAL_RCC_OscConfig+0xeca>
 8002f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f98:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	fa93 f2a3 	rbit	r2, r3
 8002fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002faa:	601a      	str	r2, [r3, #0]
  return result;
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fb4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2300      	movs	r3, #0
 8002fca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fd fd92 	bl	8000af4 <HAL_GetTick>
 8002fd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd4:	e00c      	b.n	8002ff0 <HAL_RCC_OscConfig+0xc70>
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fdc:	f7fd fd8a 	bl	8000af4 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e1fd      	b.n	80033ec <HAL_RCC_OscConfig+0x106c>
 8002ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ff8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003002:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	fa93 f2a3 	rbit	r2, r3
 800300c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003010:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003014:	601a      	str	r2, [r3, #0]
  return result;
 8003016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800301e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d102      	bne.n	800303a <HAL_RCC_OscConfig+0xcba>
 8003034:	4bb0      	ldr	r3, [pc, #704]	; (80032f8 <HAL_RCC_OscConfig+0xf78>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	e027      	b.n	800308a <HAL_RCC_OscConfig+0xd0a>
 800303a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003042:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003046:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	fa93 f2a3 	rbit	r2, r3
 8003056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003064:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003068:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	fa93 f2a3 	rbit	r2, r3
 800307c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003080:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	4b9c      	ldr	r3, [pc, #624]	; (80032f8 <HAL_RCC_OscConfig+0xf78>)
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800308e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003092:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003096:	6011      	str	r1, [r2, #0]
 8003098:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800309c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	fa92 f1a2 	rbit	r1, r2
 80030a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030aa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030ae:	6011      	str	r1, [r2, #0]
  return result;
 80030b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030b4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	fab2 f282 	clz	r2, r2
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	f042 0220 	orr.w	r2, r2, #32
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	f002 021f 	and.w	r2, r2, #31
 80030ca:	2101      	movs	r1, #1
 80030cc:	fa01 f202 	lsl.w	r2, r1, r2
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d182      	bne.n	8002fdc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d6:	4b88      	ldr	r3, [pc, #544]	; (80032f8 <HAL_RCC_OscConfig+0xf78>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	430b      	orrs	r3, r1
 80030f8:	497f      	ldr	r1, [pc, #508]	; (80032f8 <HAL_RCC_OscConfig+0xf78>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]
 80030fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003102:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003106:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800310a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003110:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	fa93 f2a3 	rbit	r2, r3
 800311a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003122:	601a      	str	r2, [r3, #0]
  return result;
 8003124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003128:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800312c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800312e:	fab3 f383 	clz	r3, r3
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003138:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	461a      	mov	r2, r3
 8003140:	2301      	movs	r3, #1
 8003142:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fd fcd6 	bl	8000af4 <HAL_GetTick>
 8003148:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800314c:	e009      	b.n	8003162 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314e:	f7fd fcd1 	bl	8000af4 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e144      	b.n	80033ec <HAL_RCC_OscConfig+0x106c>
 8003162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003166:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800316a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800316e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003174:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	fa93 f2a3 	rbit	r2, r3
 800317e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003182:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003186:	601a      	str	r2, [r3, #0]
  return result;
 8003188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003190:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d102      	bne.n	80031ac <HAL_RCC_OscConfig+0xe2c>
 80031a6:	4b54      	ldr	r3, [pc, #336]	; (80032f8 <HAL_RCC_OscConfig+0xf78>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	e027      	b.n	80031fc <HAL_RCC_OscConfig+0xe7c>
 80031ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	fa93 f2a3 	rbit	r2, r3
 80031c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031cc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80031da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	fa93 f2a3 	rbit	r2, r3
 80031ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <HAL_RCC_OscConfig+0xf78>)
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003200:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003204:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003208:	6011      	str	r1, [r2, #0]
 800320a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800320e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	fa92 f1a2 	rbit	r1, r2
 8003218:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800321c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003220:	6011      	str	r1, [r2, #0]
  return result;
 8003222:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003226:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	fab2 f282 	clz	r2, r2
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	f042 0220 	orr.w	r2, r2, #32
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	f002 021f 	and.w	r2, r2, #31
 800323c:	2101      	movs	r1, #1
 800323e:	fa01 f202 	lsl.w	r2, r1, r2
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d082      	beq.n	800314e <HAL_RCC_OscConfig+0xdce>
 8003248:	e0cf      	b.n	80033ea <HAL_RCC_OscConfig+0x106a>
 800324a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003252:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	fa93 f2a3 	rbit	r2, r3
 8003266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800326e:	601a      	str	r2, [r3, #0]
  return result;
 8003270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003274:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003278:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327a:	fab3 f383 	clz	r3, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003284:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	461a      	mov	r2, r3
 800328c:	2300      	movs	r3, #0
 800328e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fd fc30 	bl	8000af4 <HAL_GetTick>
 8003294:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003298:	e009      	b.n	80032ae <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329a:	f7fd fc2b 	bl	8000af4 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e09e      	b.n	80033ec <HAL_RCC_OscConfig+0x106c>
 80032ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	fa93 f2a3 	rbit	r2, r3
 80032ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ce:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032d2:	601a      	str	r2, [r3, #0]
  return result;
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d104      	bne.n	80032fc <HAL_RCC_OscConfig+0xf7c>
 80032f2:	4b01      	ldr	r3, [pc, #4]	; (80032f8 <HAL_RCC_OscConfig+0xf78>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	e029      	b.n	800334c <HAL_RCC_OscConfig+0xfcc>
 80032f8:	40021000 	.word	0x40021000
 80032fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003300:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003304:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003308:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	fa93 f2a3 	rbit	r2, r3
 8003318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003326:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800332a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003334:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	fa93 f2a3 	rbit	r2, r3
 800333e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003342:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	4b2b      	ldr	r3, [pc, #172]	; (80033f8 <HAL_RCC_OscConfig+0x1078>)
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003350:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003354:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003358:	6011      	str	r1, [r2, #0]
 800335a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800335e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	fa92 f1a2 	rbit	r1, r2
 8003368:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800336c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003370:	6011      	str	r1, [r2, #0]
  return result;
 8003372:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003376:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	fab2 f282 	clz	r2, r2
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	f042 0220 	orr.w	r2, r2, #32
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	f002 021f 	and.w	r2, r2, #31
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f202 	lsl.w	r2, r1, r2
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d180      	bne.n	800329a <HAL_RCC_OscConfig+0xf1a>
 8003398:	e027      	b.n	80033ea <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800339a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e01e      	b.n	80033ec <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033ae:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_RCC_OscConfig+0x1078>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033ba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d10b      	bne.n	80033e6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d001      	beq.n	80033ea <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000

080033fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b09e      	sub	sp, #120	; 0x78
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e162      	b.n	80036da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003414:	4b90      	ldr	r3, [pc, #576]	; (8003658 <HAL_RCC_ClockConfig+0x25c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d910      	bls.n	8003444 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b8d      	ldr	r3, [pc, #564]	; (8003658 <HAL_RCC_ClockConfig+0x25c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 0207 	bic.w	r2, r3, #7
 800342a:	498b      	ldr	r1, [pc, #556]	; (8003658 <HAL_RCC_ClockConfig+0x25c>)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b89      	ldr	r3, [pc, #548]	; (8003658 <HAL_RCC_ClockConfig+0x25c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e14a      	b.n	80036da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003450:	4b82      	ldr	r3, [pc, #520]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	497f      	ldr	r1, [pc, #508]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80dc 	beq.w	8003628 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d13c      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xf6>
 8003478:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800347c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003488:	fab3 f383 	clz	r3, r3
 800348c:	b2db      	uxtb	r3, r3
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b01      	cmp	r3, #1
 800349a:	d102      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xa6>
 800349c:	4b6f      	ldr	r3, [pc, #444]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	e00f      	b.n	80034c2 <HAL_RCC_ClockConfig+0xc6>
 80034a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	667b      	str	r3, [r7, #100]	; 0x64
 80034b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034b4:	663b      	str	r3, [r7, #96]	; 0x60
 80034b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034b8:	fa93 f3a3 	rbit	r3, r3
 80034bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034be:	4b67      	ldr	r3, [pc, #412]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80034c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034ca:	fa92 f2a2 	rbit	r2, r2
 80034ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80034d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034d2:	fab2 f282 	clz	r2, r2
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	f042 0220 	orr.w	r2, r2, #32
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	f002 021f 	and.w	r2, r2, #31
 80034e2:	2101      	movs	r1, #1
 80034e4:	fa01 f202 	lsl.w	r2, r1, r2
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d17b      	bne.n	80035e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0f3      	b.n	80036da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d13c      	bne.n	8003574 <HAL_RCC_ClockConfig+0x178>
 80034fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	d102      	bne.n	8003524 <HAL_RCC_ClockConfig+0x128>
 800351e:	4b4f      	ldr	r3, [pc, #316]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	e00f      	b.n	8003544 <HAL_RCC_ClockConfig+0x148>
 8003524:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003528:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	647b      	str	r3, [r7, #68]	; 0x44
 8003532:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003536:	643b      	str	r3, [r7, #64]	; 0x40
 8003538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003540:	4b46      	ldr	r3, [pc, #280]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003548:	63ba      	str	r2, [r7, #56]	; 0x38
 800354a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800354c:	fa92 f2a2 	rbit	r2, r2
 8003550:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003554:	fab2 f282 	clz	r2, r2
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	f042 0220 	orr.w	r2, r2, #32
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	f002 021f 	and.w	r2, r2, #31
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f202 	lsl.w	r2, r1, r2
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d13a      	bne.n	80035e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0b2      	b.n	80036da <HAL_RCC_ClockConfig+0x2de>
 8003574:	2302      	movs	r3, #2
 8003576:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	fa93 f3a3 	rbit	r3, r3
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b01      	cmp	r3, #1
 8003594:	d102      	bne.n	800359c <HAL_RCC_ClockConfig+0x1a0>
 8003596:	4b31      	ldr	r3, [pc, #196]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	e00d      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1bc>
 800359c:	2302      	movs	r3, #2
 800359e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
 80035a8:	2302      	movs	r3, #2
 80035aa:	623b      	str	r3, [r7, #32]
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	61fb      	str	r3, [r7, #28]
 80035b4:	4b29      	ldr	r3, [pc, #164]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	2202      	movs	r2, #2
 80035ba:	61ba      	str	r2, [r7, #24]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	fa92 f2a2 	rbit	r2, r2
 80035c2:	617a      	str	r2, [r7, #20]
  return result;
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	fab2 f282 	clz	r2, r2
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	f042 0220 	orr.w	r2, r2, #32
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	f002 021f 	and.w	r2, r2, #31
 80035d6:	2101      	movs	r1, #1
 80035d8:	fa01 f202 	lsl.w	r2, r1, r2
 80035dc:	4013      	ands	r3, r2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e079      	b.n	80036da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e6:	4b1d      	ldr	r3, [pc, #116]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f023 0203 	bic.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	491a      	ldr	r1, [pc, #104]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f8:	f7fd fa7c 	bl	8000af4 <HAL_GetTick>
 80035fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fd fa78 	bl	8000af4 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e061      	b.n	80036da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	4b11      	ldr	r3, [pc, #68]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 020c 	and.w	r2, r3, #12
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	429a      	cmp	r2, r3
 8003626:	d1eb      	bne.n	8003600 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_RCC_ClockConfig+0x25c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d214      	bcs.n	8003660 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <HAL_RCC_ClockConfig+0x25c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 0207 	bic.w	r2, r3, #7
 800363e:	4906      	ldr	r1, [pc, #24]	; (8003658 <HAL_RCC_ClockConfig+0x25c>)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b04      	ldr	r3, [pc, #16]	; (8003658 <HAL_RCC_ClockConfig+0x25c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d005      	beq.n	8003660 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e040      	b.n	80036da <HAL_RCC_ClockConfig+0x2de>
 8003658:	40022000 	.word	0x40022000
 800365c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800366c:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_RCC_ClockConfig+0x2e8>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	491a      	ldr	r1, [pc, #104]	; (80036e4 <HAL_RCC_ClockConfig+0x2e8>)
 800367a:	4313      	orrs	r3, r2
 800367c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800368a:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <HAL_RCC_ClockConfig+0x2e8>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4912      	ldr	r1, [pc, #72]	; (80036e4 <HAL_RCC_ClockConfig+0x2e8>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800369e:	f000 f829 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 80036a2:	4601      	mov	r1, r0
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <HAL_RCC_ClockConfig+0x2e8>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ac:	22f0      	movs	r2, #240	; 0xf0
 80036ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	fa92 f2a2 	rbit	r2, r2
 80036b6:	60fa      	str	r2, [r7, #12]
  return result;
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	fab2 f282 	clz	r2, r2
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	40d3      	lsrs	r3, r2
 80036c2:	4a09      	ldr	r2, [pc, #36]	; (80036e8 <HAL_RCC_ClockConfig+0x2ec>)
 80036c4:	5cd3      	ldrb	r3, [r2, r3]
 80036c6:	fa21 f303 	lsr.w	r3, r1, r3
 80036ca:	4a08      	ldr	r2, [pc, #32]	; (80036ec <HAL_RCC_ClockConfig+0x2f0>)
 80036cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036ce:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <HAL_RCC_ClockConfig+0x2f4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fd f9ca 	bl	8000a6c <HAL_InitTick>
  
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3778      	adds	r7, #120	; 0x78
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	08004fa4 	.word	0x08004fa4
 80036ec:	20000000 	.word	0x20000000
 80036f0:	20000004 	.word	0x20000004

080036f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b08b      	sub	sp, #44	; 0x2c
 80036f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	2300      	movs	r3, #0
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800370e:	4b29      	ldr	r3, [pc, #164]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	2b04      	cmp	r3, #4
 800371c:	d002      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0x30>
 800371e:	2b08      	cmp	r3, #8
 8003720:	d003      	beq.n	800372a <HAL_RCC_GetSysClockFreq+0x36>
 8003722:	e03c      	b.n	800379e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003724:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003726:	623b      	str	r3, [r7, #32]
      break;
 8003728:	e03c      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003730:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003734:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	fa92 f2a2 	rbit	r2, r2
 800373c:	607a      	str	r2, [r7, #4]
  return result;
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	fab2 f282 	clz	r2, r2
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	40d3      	lsrs	r3, r2
 8003748:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800374a:	5cd3      	ldrb	r3, [r2, r3]
 800374c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800374e:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	220f      	movs	r2, #15
 8003758:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	fa92 f2a2 	rbit	r2, r2
 8003760:	60fa      	str	r2, [r7, #12]
  return result;
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	fab2 f282 	clz	r2, r2
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	40d3      	lsrs	r3, r2
 800376c:	4a14      	ldr	r2, [pc, #80]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800376e:	5cd3      	ldrb	r3, [r2, r3]
 8003770:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800377c:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	fbb2 f2f3 	udiv	r2, r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
 800378c:	e004      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	4a0c      	ldr	r2, [pc, #48]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	623b      	str	r3, [r7, #32]
      break;
 800379c:	e002      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037a0:	623b      	str	r3, [r7, #32]
      break;
 80037a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037a4:	6a3b      	ldr	r3, [r7, #32]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	372c      	adds	r7, #44	; 0x2c
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40021000 	.word	0x40021000
 80037b8:	007a1200 	.word	0x007a1200
 80037bc:	08004fbc 	.word	0x08004fbc
 80037c0:	08004fcc 	.word	0x08004fcc
 80037c4:	003d0900 	.word	0x003d0900

080037c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ce:	681b      	ldr	r3, [r3, #0]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000000 	.word	0x20000000

080037e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037e6:	f7ff ffef 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 80037ea:	4601      	mov	r1, r0
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	fa92 f2a2 	rbit	r2, r2
 8003800:	603a      	str	r2, [r7, #0]
  return result;
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	fab2 f282 	clz	r2, r2
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	40d3      	lsrs	r3, r2
 800380c:	4a04      	ldr	r2, [pc, #16]	; (8003820 <HAL_RCC_GetPCLK1Freq+0x40>)
 800380e:	5cd3      	ldrb	r3, [r2, r3]
 8003810:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000
 8003820:	08004fb4 	.word	0x08004fb4

08003824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800382a:	f7ff ffcd 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 800382e:	4601      	mov	r1, r0
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003838:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800383c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	fa92 f2a2 	rbit	r2, r2
 8003844:	603a      	str	r2, [r7, #0]
  return result;
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	fab2 f282 	clz	r2, r2
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	40d3      	lsrs	r3, r2
 8003850:	4a04      	ldr	r2, [pc, #16]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003852:	5cd3      	ldrb	r3, [r2, r3]
 8003854:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40021000 	.word	0x40021000
 8003864:	08004fb4 	.word	0x08004fb4

08003868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e040      	b.n	80038fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fc ff82 	bl	8000794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	; 0x24
 8003894:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f8c0 	bl	8003a2c <UART_SetConfig>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e022      	b.n	80038fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f9ea 	bl	8003c98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fa71 	bl	8003ddc <UART_CheckIdleState>
 80038fa:	4603      	mov	r3, r0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	4613      	mov	r3, r2
 8003912:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003918:	2b20      	cmp	r3, #32
 800391a:	f040 8082 	bne.w	8003a22 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_UART_Transmit+0x26>
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e07a      	b.n	8003a24 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_UART_Transmit+0x38>
 8003938:	2302      	movs	r3, #2
 800393a:	e073      	b.n	8003a24 <HAL_UART_Transmit+0x120>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2221      	movs	r2, #33	; 0x21
 8003950:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003952:	f7fd f8cf 	bl	8000af4 <HAL_GetTick>
 8003956:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	88fa      	ldrh	r2, [r7, #6]
 800395c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	88fa      	ldrh	r2, [r7, #6]
 8003964:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003970:	d108      	bne.n	8003984 <HAL_UART_Transmit+0x80>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d104      	bne.n	8003984 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	e003      	b.n	800398c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003988:	2300      	movs	r3, #0
 800398a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003994:	e02d      	b.n	80039f2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2200      	movs	r2, #0
 800399e:	2180      	movs	r1, #128	; 0x80
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fa64 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e039      	b.n	8003a24 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10b      	bne.n	80039ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	881a      	ldrh	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c2:	b292      	uxth	r2, r2
 80039c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	3302      	adds	r3, #2
 80039ca:	61bb      	str	r3, [r7, #24]
 80039cc:	e008      	b.n	80039e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	781a      	ldrb	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	b292      	uxth	r2, r2
 80039d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3301      	adds	r3, #1
 80039de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1cb      	bne.n	8003996 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2200      	movs	r2, #0
 8003a06:	2140      	movs	r1, #64	; 0x40
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 fa30 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e005      	b.n	8003a24 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e000      	b.n	8003a24 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
  }
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3720      	adds	r7, #32
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4b8a      	ldr	r3, [pc, #552]	; (8003c80 <UART_SetConfig+0x254>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	6979      	ldr	r1, [r7, #20]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a78      	ldr	r2, [pc, #480]	; (8003c84 <UART_SetConfig+0x258>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d120      	bne.n	8003aea <UART_SetConfig+0xbe>
 8003aa8:	4b77      	ldr	r3, [pc, #476]	; (8003c88 <UART_SetConfig+0x25c>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d817      	bhi.n	8003ae4 <UART_SetConfig+0xb8>
 8003ab4:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <UART_SetConfig+0x90>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003ad9 	.word	0x08003ad9
 8003ac4:	08003adf 	.word	0x08003adf
 8003ac8:	08003ad3 	.word	0x08003ad3
 8003acc:	2300      	movs	r3, #0
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	e01d      	b.n	8003b0e <UART_SetConfig+0xe2>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	77fb      	strb	r3, [r7, #31]
 8003ad6:	e01a      	b.n	8003b0e <UART_SetConfig+0xe2>
 8003ad8:	2304      	movs	r3, #4
 8003ada:	77fb      	strb	r3, [r7, #31]
 8003adc:	e017      	b.n	8003b0e <UART_SetConfig+0xe2>
 8003ade:	2308      	movs	r3, #8
 8003ae0:	77fb      	strb	r3, [r7, #31]
 8003ae2:	e014      	b.n	8003b0e <UART_SetConfig+0xe2>
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e011      	b.n	8003b0e <UART_SetConfig+0xe2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a67      	ldr	r2, [pc, #412]	; (8003c8c <UART_SetConfig+0x260>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d102      	bne.n	8003afa <UART_SetConfig+0xce>
 8003af4:	2300      	movs	r3, #0
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e009      	b.n	8003b0e <UART_SetConfig+0xe2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a64      	ldr	r2, [pc, #400]	; (8003c90 <UART_SetConfig+0x264>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d102      	bne.n	8003b0a <UART_SetConfig+0xde>
 8003b04:	2300      	movs	r3, #0
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e001      	b.n	8003b0e <UART_SetConfig+0xe2>
 8003b0a:	2310      	movs	r3, #16
 8003b0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b16:	d15b      	bne.n	8003bd0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003b18:	7ffb      	ldrb	r3, [r7, #31]
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d827      	bhi.n	8003b6e <UART_SetConfig+0x142>
 8003b1e:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <UART_SetConfig+0xf8>)
 8003b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b24:	08003b49 	.word	0x08003b49
 8003b28:	08003b51 	.word	0x08003b51
 8003b2c:	08003b59 	.word	0x08003b59
 8003b30:	08003b6f 	.word	0x08003b6f
 8003b34:	08003b5f 	.word	0x08003b5f
 8003b38:	08003b6f 	.word	0x08003b6f
 8003b3c:	08003b6f 	.word	0x08003b6f
 8003b40:	08003b6f 	.word	0x08003b6f
 8003b44:	08003b67 	.word	0x08003b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b48:	f7ff fe4a 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 8003b4c:	61b8      	str	r0, [r7, #24]
        break;
 8003b4e:	e013      	b.n	8003b78 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b50:	f7ff fe68 	bl	8003824 <HAL_RCC_GetPCLK2Freq>
 8003b54:	61b8      	str	r0, [r7, #24]
        break;
 8003b56:	e00f      	b.n	8003b78 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b58:	4b4e      	ldr	r3, [pc, #312]	; (8003c94 <UART_SetConfig+0x268>)
 8003b5a:	61bb      	str	r3, [r7, #24]
        break;
 8003b5c:	e00c      	b.n	8003b78 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b5e:	f7ff fdc9 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 8003b62:	61b8      	str	r0, [r7, #24]
        break;
 8003b64:	e008      	b.n	8003b78 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b6a:	61bb      	str	r3, [r7, #24]
        break;
 8003b6c:	e004      	b.n	8003b78 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	77bb      	strb	r3, [r7, #30]
        break;
 8003b76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d074      	beq.n	8003c68 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	005a      	lsls	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	085b      	lsrs	r3, r3, #1
 8003b88:	441a      	add	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b0f      	cmp	r3, #15
 8003b9a:	d916      	bls.n	8003bca <UART_SetConfig+0x19e>
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba2:	d212      	bcs.n	8003bca <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	f023 030f 	bic.w	r3, r3, #15
 8003bac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	89fb      	ldrh	r3, [r7, #14]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	89fa      	ldrh	r2, [r7, #14]
 8003bc6:	60da      	str	r2, [r3, #12]
 8003bc8:	e04e      	b.n	8003c68 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	77bb      	strb	r3, [r7, #30]
 8003bce:	e04b      	b.n	8003c68 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bd0:	7ffb      	ldrb	r3, [r7, #31]
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d827      	bhi.n	8003c26 <UART_SetConfig+0x1fa>
 8003bd6:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <UART_SetConfig+0x1b0>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003c01 	.word	0x08003c01
 8003be0:	08003c09 	.word	0x08003c09
 8003be4:	08003c11 	.word	0x08003c11
 8003be8:	08003c27 	.word	0x08003c27
 8003bec:	08003c17 	.word	0x08003c17
 8003bf0:	08003c27 	.word	0x08003c27
 8003bf4:	08003c27 	.word	0x08003c27
 8003bf8:	08003c27 	.word	0x08003c27
 8003bfc:	08003c1f 	.word	0x08003c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c00:	f7ff fdee 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 8003c04:	61b8      	str	r0, [r7, #24]
        break;
 8003c06:	e013      	b.n	8003c30 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c08:	f7ff fe0c 	bl	8003824 <HAL_RCC_GetPCLK2Freq>
 8003c0c:	61b8      	str	r0, [r7, #24]
        break;
 8003c0e:	e00f      	b.n	8003c30 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c10:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <UART_SetConfig+0x268>)
 8003c12:	61bb      	str	r3, [r7, #24]
        break;
 8003c14:	e00c      	b.n	8003c30 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c16:	f7ff fd6d 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 8003c1a:	61b8      	str	r0, [r7, #24]
        break;
 8003c1c:	e008      	b.n	8003c30 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c22:	61bb      	str	r3, [r7, #24]
        break;
 8003c24:	e004      	b.n	8003c30 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c2e:	bf00      	nop
    }

    if (pclk != 0U)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d018      	beq.n	8003c68 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	085a      	lsrs	r2, r3, #1
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	441a      	add	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b0f      	cmp	r3, #15
 8003c50:	d908      	bls.n	8003c64 <UART_SetConfig+0x238>
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c58:	d204      	bcs.n	8003c64 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	e001      	b.n	8003c68 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c74:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	efff69f3 	.word	0xefff69f3
 8003c84:	40013800 	.word	0x40013800
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40004400 	.word	0x40004400
 8003c90:	40004800 	.word	0x40004800
 8003c94:	007a1200 	.word	0x007a1200

08003c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01a      	beq.n	8003dae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d96:	d10a      	bne.n	8003dae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	605a      	str	r2, [r3, #4]
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dec:	f7fc fe82 	bl	8000af4 <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d10e      	bne.n	8003e1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f82d 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e023      	b.n	8003e66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d10e      	bne.n	8003e4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f817 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e00d      	b.n	8003e66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b09c      	sub	sp, #112	; 0x70
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7e:	e0a5      	b.n	8003fcc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	f000 80a1 	beq.w	8003fcc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8a:	f7fc fe33 	bl	8000af4 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d302      	bcc.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d13e      	bne.n	8003f1e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eb4:	667b      	str	r3, [r7, #100]	; 0x64
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ec0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ec4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e6      	bne.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3308      	adds	r3, #8
 8003ef0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ef2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ef4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e5      	bne.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e067      	b.n	8003fee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d04f      	beq.n	8003fcc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f3a:	d147      	bne.n	8003fcc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f64:	637b      	str	r3, [r7, #52]	; 0x34
 8003f66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e6      	bne.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	613b      	str	r3, [r7, #16]
   return(result);
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f023 0301 	bic.w	r3, r3, #1
 8003f8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3308      	adds	r3, #8
 8003f96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f98:	623a      	str	r2, [r7, #32]
 8003f9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	69f9      	ldr	r1, [r7, #28]
 8003f9e:	6a3a      	ldr	r2, [r7, #32]
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e5      	bne.n	8003f78 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e010      	b.n	8003fee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69da      	ldr	r2, [r3, #28]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	f43f af4a 	beq.w	8003e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3770      	adds	r7, #112	; 0x70
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <__errno>:
 8003ff8:	4b01      	ldr	r3, [pc, #4]	; (8004000 <__errno+0x8>)
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	2000000c 	.word	0x2000000c

08004004 <__libc_init_array>:
 8004004:	b570      	push	{r4, r5, r6, lr}
 8004006:	4d0d      	ldr	r5, [pc, #52]	; (800403c <__libc_init_array+0x38>)
 8004008:	4c0d      	ldr	r4, [pc, #52]	; (8004040 <__libc_init_array+0x3c>)
 800400a:	1b64      	subs	r4, r4, r5
 800400c:	10a4      	asrs	r4, r4, #2
 800400e:	2600      	movs	r6, #0
 8004010:	42a6      	cmp	r6, r4
 8004012:	d109      	bne.n	8004028 <__libc_init_array+0x24>
 8004014:	4d0b      	ldr	r5, [pc, #44]	; (8004044 <__libc_init_array+0x40>)
 8004016:	4c0c      	ldr	r4, [pc, #48]	; (8004048 <__libc_init_array+0x44>)
 8004018:	f000 ffae 	bl	8004f78 <_init>
 800401c:	1b64      	subs	r4, r4, r5
 800401e:	10a4      	asrs	r4, r4, #2
 8004020:	2600      	movs	r6, #0
 8004022:	42a6      	cmp	r6, r4
 8004024:	d105      	bne.n	8004032 <__libc_init_array+0x2e>
 8004026:	bd70      	pop	{r4, r5, r6, pc}
 8004028:	f855 3b04 	ldr.w	r3, [r5], #4
 800402c:	4798      	blx	r3
 800402e:	3601      	adds	r6, #1
 8004030:	e7ee      	b.n	8004010 <__libc_init_array+0xc>
 8004032:	f855 3b04 	ldr.w	r3, [r5], #4
 8004036:	4798      	blx	r3
 8004038:	3601      	adds	r6, #1
 800403a:	e7f2      	b.n	8004022 <__libc_init_array+0x1e>
 800403c:	08005074 	.word	0x08005074
 8004040:	08005074 	.word	0x08005074
 8004044:	08005074 	.word	0x08005074
 8004048:	08005078 	.word	0x08005078

0800404c <memset>:
 800404c:	4402      	add	r2, r0
 800404e:	4603      	mov	r3, r0
 8004050:	4293      	cmp	r3, r2
 8004052:	d100      	bne.n	8004056 <memset+0xa>
 8004054:	4770      	bx	lr
 8004056:	f803 1b01 	strb.w	r1, [r3], #1
 800405a:	e7f9      	b.n	8004050 <memset+0x4>

0800405c <iprintf>:
 800405c:	b40f      	push	{r0, r1, r2, r3}
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <iprintf+0x2c>)
 8004060:	b513      	push	{r0, r1, r4, lr}
 8004062:	681c      	ldr	r4, [r3, #0]
 8004064:	b124      	cbz	r4, 8004070 <iprintf+0x14>
 8004066:	69a3      	ldr	r3, [r4, #24]
 8004068:	b913      	cbnz	r3, 8004070 <iprintf+0x14>
 800406a:	4620      	mov	r0, r4
 800406c:	f000 f866 	bl	800413c <__sinit>
 8004070:	ab05      	add	r3, sp, #20
 8004072:	9a04      	ldr	r2, [sp, #16]
 8004074:	68a1      	ldr	r1, [r4, #8]
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	4620      	mov	r0, r4
 800407a:	f000 f9bd 	bl	80043f8 <_vfiprintf_r>
 800407e:	b002      	add	sp, #8
 8004080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004084:	b004      	add	sp, #16
 8004086:	4770      	bx	lr
 8004088:	2000000c 	.word	0x2000000c

0800408c <std>:
 800408c:	2300      	movs	r3, #0
 800408e:	b510      	push	{r4, lr}
 8004090:	4604      	mov	r4, r0
 8004092:	e9c0 3300 	strd	r3, r3, [r0]
 8004096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800409a:	6083      	str	r3, [r0, #8]
 800409c:	8181      	strh	r1, [r0, #12]
 800409e:	6643      	str	r3, [r0, #100]	; 0x64
 80040a0:	81c2      	strh	r2, [r0, #14]
 80040a2:	6183      	str	r3, [r0, #24]
 80040a4:	4619      	mov	r1, r3
 80040a6:	2208      	movs	r2, #8
 80040a8:	305c      	adds	r0, #92	; 0x5c
 80040aa:	f7ff ffcf 	bl	800404c <memset>
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <std+0x38>)
 80040b0:	6263      	str	r3, [r4, #36]	; 0x24
 80040b2:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <std+0x3c>)
 80040b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <std+0x40>)
 80040b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <std+0x44>)
 80040bc:	6224      	str	r4, [r4, #32]
 80040be:	6323      	str	r3, [r4, #48]	; 0x30
 80040c0:	bd10      	pop	{r4, pc}
 80040c2:	bf00      	nop
 80040c4:	080049a1 	.word	0x080049a1
 80040c8:	080049c3 	.word	0x080049c3
 80040cc:	080049fb 	.word	0x080049fb
 80040d0:	08004a1f 	.word	0x08004a1f

080040d4 <_cleanup_r>:
 80040d4:	4901      	ldr	r1, [pc, #4]	; (80040dc <_cleanup_r+0x8>)
 80040d6:	f000 b8af 	b.w	8004238 <_fwalk_reent>
 80040da:	bf00      	nop
 80040dc:	08004cf9 	.word	0x08004cf9

080040e0 <__sfmoreglue>:
 80040e0:	b570      	push	{r4, r5, r6, lr}
 80040e2:	2268      	movs	r2, #104	; 0x68
 80040e4:	1e4d      	subs	r5, r1, #1
 80040e6:	4355      	muls	r5, r2
 80040e8:	460e      	mov	r6, r1
 80040ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80040ee:	f000 f8e5 	bl	80042bc <_malloc_r>
 80040f2:	4604      	mov	r4, r0
 80040f4:	b140      	cbz	r0, 8004108 <__sfmoreglue+0x28>
 80040f6:	2100      	movs	r1, #0
 80040f8:	e9c0 1600 	strd	r1, r6, [r0]
 80040fc:	300c      	adds	r0, #12
 80040fe:	60a0      	str	r0, [r4, #8]
 8004100:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004104:	f7ff ffa2 	bl	800404c <memset>
 8004108:	4620      	mov	r0, r4
 800410a:	bd70      	pop	{r4, r5, r6, pc}

0800410c <__sfp_lock_acquire>:
 800410c:	4801      	ldr	r0, [pc, #4]	; (8004114 <__sfp_lock_acquire+0x8>)
 800410e:	f000 b8b3 	b.w	8004278 <__retarget_lock_acquire_recursive>
 8004112:	bf00      	nop
 8004114:	20000179 	.word	0x20000179

08004118 <__sfp_lock_release>:
 8004118:	4801      	ldr	r0, [pc, #4]	; (8004120 <__sfp_lock_release+0x8>)
 800411a:	f000 b8ae 	b.w	800427a <__retarget_lock_release_recursive>
 800411e:	bf00      	nop
 8004120:	20000179 	.word	0x20000179

08004124 <__sinit_lock_acquire>:
 8004124:	4801      	ldr	r0, [pc, #4]	; (800412c <__sinit_lock_acquire+0x8>)
 8004126:	f000 b8a7 	b.w	8004278 <__retarget_lock_acquire_recursive>
 800412a:	bf00      	nop
 800412c:	2000017a 	.word	0x2000017a

08004130 <__sinit_lock_release>:
 8004130:	4801      	ldr	r0, [pc, #4]	; (8004138 <__sinit_lock_release+0x8>)
 8004132:	f000 b8a2 	b.w	800427a <__retarget_lock_release_recursive>
 8004136:	bf00      	nop
 8004138:	2000017a 	.word	0x2000017a

0800413c <__sinit>:
 800413c:	b510      	push	{r4, lr}
 800413e:	4604      	mov	r4, r0
 8004140:	f7ff fff0 	bl	8004124 <__sinit_lock_acquire>
 8004144:	69a3      	ldr	r3, [r4, #24]
 8004146:	b11b      	cbz	r3, 8004150 <__sinit+0x14>
 8004148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800414c:	f7ff bff0 	b.w	8004130 <__sinit_lock_release>
 8004150:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004154:	6523      	str	r3, [r4, #80]	; 0x50
 8004156:	4b13      	ldr	r3, [pc, #76]	; (80041a4 <__sinit+0x68>)
 8004158:	4a13      	ldr	r2, [pc, #76]	; (80041a8 <__sinit+0x6c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	62a2      	str	r2, [r4, #40]	; 0x28
 800415e:	42a3      	cmp	r3, r4
 8004160:	bf04      	itt	eq
 8004162:	2301      	moveq	r3, #1
 8004164:	61a3      	streq	r3, [r4, #24]
 8004166:	4620      	mov	r0, r4
 8004168:	f000 f820 	bl	80041ac <__sfp>
 800416c:	6060      	str	r0, [r4, #4]
 800416e:	4620      	mov	r0, r4
 8004170:	f000 f81c 	bl	80041ac <__sfp>
 8004174:	60a0      	str	r0, [r4, #8]
 8004176:	4620      	mov	r0, r4
 8004178:	f000 f818 	bl	80041ac <__sfp>
 800417c:	2200      	movs	r2, #0
 800417e:	60e0      	str	r0, [r4, #12]
 8004180:	2104      	movs	r1, #4
 8004182:	6860      	ldr	r0, [r4, #4]
 8004184:	f7ff ff82 	bl	800408c <std>
 8004188:	68a0      	ldr	r0, [r4, #8]
 800418a:	2201      	movs	r2, #1
 800418c:	2109      	movs	r1, #9
 800418e:	f7ff ff7d 	bl	800408c <std>
 8004192:	68e0      	ldr	r0, [r4, #12]
 8004194:	2202      	movs	r2, #2
 8004196:	2112      	movs	r1, #18
 8004198:	f7ff ff78 	bl	800408c <std>
 800419c:	2301      	movs	r3, #1
 800419e:	61a3      	str	r3, [r4, #24]
 80041a0:	e7d2      	b.n	8004148 <__sinit+0xc>
 80041a2:	bf00      	nop
 80041a4:	08004fdc 	.word	0x08004fdc
 80041a8:	080040d5 	.word	0x080040d5

080041ac <__sfp>:
 80041ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ae:	4607      	mov	r7, r0
 80041b0:	f7ff ffac 	bl	800410c <__sfp_lock_acquire>
 80041b4:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <__sfp+0x84>)
 80041b6:	681e      	ldr	r6, [r3, #0]
 80041b8:	69b3      	ldr	r3, [r6, #24]
 80041ba:	b913      	cbnz	r3, 80041c2 <__sfp+0x16>
 80041bc:	4630      	mov	r0, r6
 80041be:	f7ff ffbd 	bl	800413c <__sinit>
 80041c2:	3648      	adds	r6, #72	; 0x48
 80041c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	d503      	bpl.n	80041d4 <__sfp+0x28>
 80041cc:	6833      	ldr	r3, [r6, #0]
 80041ce:	b30b      	cbz	r3, 8004214 <__sfp+0x68>
 80041d0:	6836      	ldr	r6, [r6, #0]
 80041d2:	e7f7      	b.n	80041c4 <__sfp+0x18>
 80041d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80041d8:	b9d5      	cbnz	r5, 8004210 <__sfp+0x64>
 80041da:	4b16      	ldr	r3, [pc, #88]	; (8004234 <__sfp+0x88>)
 80041dc:	60e3      	str	r3, [r4, #12]
 80041de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80041e2:	6665      	str	r5, [r4, #100]	; 0x64
 80041e4:	f000 f847 	bl	8004276 <__retarget_lock_init_recursive>
 80041e8:	f7ff ff96 	bl	8004118 <__sfp_lock_release>
 80041ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80041f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80041f4:	6025      	str	r5, [r4, #0]
 80041f6:	61a5      	str	r5, [r4, #24]
 80041f8:	2208      	movs	r2, #8
 80041fa:	4629      	mov	r1, r5
 80041fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004200:	f7ff ff24 	bl	800404c <memset>
 8004204:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004208:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800420c:	4620      	mov	r0, r4
 800420e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004210:	3468      	adds	r4, #104	; 0x68
 8004212:	e7d9      	b.n	80041c8 <__sfp+0x1c>
 8004214:	2104      	movs	r1, #4
 8004216:	4638      	mov	r0, r7
 8004218:	f7ff ff62 	bl	80040e0 <__sfmoreglue>
 800421c:	4604      	mov	r4, r0
 800421e:	6030      	str	r0, [r6, #0]
 8004220:	2800      	cmp	r0, #0
 8004222:	d1d5      	bne.n	80041d0 <__sfp+0x24>
 8004224:	f7ff ff78 	bl	8004118 <__sfp_lock_release>
 8004228:	230c      	movs	r3, #12
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	e7ee      	b.n	800420c <__sfp+0x60>
 800422e:	bf00      	nop
 8004230:	08004fdc 	.word	0x08004fdc
 8004234:	ffff0001 	.word	0xffff0001

08004238 <_fwalk_reent>:
 8004238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800423c:	4606      	mov	r6, r0
 800423e:	4688      	mov	r8, r1
 8004240:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004244:	2700      	movs	r7, #0
 8004246:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800424a:	f1b9 0901 	subs.w	r9, r9, #1
 800424e:	d505      	bpl.n	800425c <_fwalk_reent+0x24>
 8004250:	6824      	ldr	r4, [r4, #0]
 8004252:	2c00      	cmp	r4, #0
 8004254:	d1f7      	bne.n	8004246 <_fwalk_reent+0xe>
 8004256:	4638      	mov	r0, r7
 8004258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800425c:	89ab      	ldrh	r3, [r5, #12]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d907      	bls.n	8004272 <_fwalk_reent+0x3a>
 8004262:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004266:	3301      	adds	r3, #1
 8004268:	d003      	beq.n	8004272 <_fwalk_reent+0x3a>
 800426a:	4629      	mov	r1, r5
 800426c:	4630      	mov	r0, r6
 800426e:	47c0      	blx	r8
 8004270:	4307      	orrs	r7, r0
 8004272:	3568      	adds	r5, #104	; 0x68
 8004274:	e7e9      	b.n	800424a <_fwalk_reent+0x12>

08004276 <__retarget_lock_init_recursive>:
 8004276:	4770      	bx	lr

08004278 <__retarget_lock_acquire_recursive>:
 8004278:	4770      	bx	lr

0800427a <__retarget_lock_release_recursive>:
 800427a:	4770      	bx	lr

0800427c <sbrk_aligned>:
 800427c:	b570      	push	{r4, r5, r6, lr}
 800427e:	4e0e      	ldr	r6, [pc, #56]	; (80042b8 <sbrk_aligned+0x3c>)
 8004280:	460c      	mov	r4, r1
 8004282:	6831      	ldr	r1, [r6, #0]
 8004284:	4605      	mov	r5, r0
 8004286:	b911      	cbnz	r1, 800428e <sbrk_aligned+0x12>
 8004288:	f000 fb7a 	bl	8004980 <_sbrk_r>
 800428c:	6030      	str	r0, [r6, #0]
 800428e:	4621      	mov	r1, r4
 8004290:	4628      	mov	r0, r5
 8004292:	f000 fb75 	bl	8004980 <_sbrk_r>
 8004296:	1c43      	adds	r3, r0, #1
 8004298:	d00a      	beq.n	80042b0 <sbrk_aligned+0x34>
 800429a:	1cc4      	adds	r4, r0, #3
 800429c:	f024 0403 	bic.w	r4, r4, #3
 80042a0:	42a0      	cmp	r0, r4
 80042a2:	d007      	beq.n	80042b4 <sbrk_aligned+0x38>
 80042a4:	1a21      	subs	r1, r4, r0
 80042a6:	4628      	mov	r0, r5
 80042a8:	f000 fb6a 	bl	8004980 <_sbrk_r>
 80042ac:	3001      	adds	r0, #1
 80042ae:	d101      	bne.n	80042b4 <sbrk_aligned+0x38>
 80042b0:	f04f 34ff 	mov.w	r4, #4294967295
 80042b4:	4620      	mov	r0, r4
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	20000180 	.word	0x20000180

080042bc <_malloc_r>:
 80042bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042c0:	1ccd      	adds	r5, r1, #3
 80042c2:	f025 0503 	bic.w	r5, r5, #3
 80042c6:	3508      	adds	r5, #8
 80042c8:	2d0c      	cmp	r5, #12
 80042ca:	bf38      	it	cc
 80042cc:	250c      	movcc	r5, #12
 80042ce:	2d00      	cmp	r5, #0
 80042d0:	4607      	mov	r7, r0
 80042d2:	db01      	blt.n	80042d8 <_malloc_r+0x1c>
 80042d4:	42a9      	cmp	r1, r5
 80042d6:	d905      	bls.n	80042e4 <_malloc_r+0x28>
 80042d8:	230c      	movs	r3, #12
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	2600      	movs	r6, #0
 80042de:	4630      	mov	r0, r6
 80042e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042e4:	4e2e      	ldr	r6, [pc, #184]	; (80043a0 <_malloc_r+0xe4>)
 80042e6:	f000 fdbb 	bl	8004e60 <__malloc_lock>
 80042ea:	6833      	ldr	r3, [r6, #0]
 80042ec:	461c      	mov	r4, r3
 80042ee:	bb34      	cbnz	r4, 800433e <_malloc_r+0x82>
 80042f0:	4629      	mov	r1, r5
 80042f2:	4638      	mov	r0, r7
 80042f4:	f7ff ffc2 	bl	800427c <sbrk_aligned>
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	4604      	mov	r4, r0
 80042fc:	d14d      	bne.n	800439a <_malloc_r+0xde>
 80042fe:	6834      	ldr	r4, [r6, #0]
 8004300:	4626      	mov	r6, r4
 8004302:	2e00      	cmp	r6, #0
 8004304:	d140      	bne.n	8004388 <_malloc_r+0xcc>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	4631      	mov	r1, r6
 800430a:	4638      	mov	r0, r7
 800430c:	eb04 0803 	add.w	r8, r4, r3
 8004310:	f000 fb36 	bl	8004980 <_sbrk_r>
 8004314:	4580      	cmp	r8, r0
 8004316:	d13a      	bne.n	800438e <_malloc_r+0xd2>
 8004318:	6821      	ldr	r1, [r4, #0]
 800431a:	3503      	adds	r5, #3
 800431c:	1a6d      	subs	r5, r5, r1
 800431e:	f025 0503 	bic.w	r5, r5, #3
 8004322:	3508      	adds	r5, #8
 8004324:	2d0c      	cmp	r5, #12
 8004326:	bf38      	it	cc
 8004328:	250c      	movcc	r5, #12
 800432a:	4629      	mov	r1, r5
 800432c:	4638      	mov	r0, r7
 800432e:	f7ff ffa5 	bl	800427c <sbrk_aligned>
 8004332:	3001      	adds	r0, #1
 8004334:	d02b      	beq.n	800438e <_malloc_r+0xd2>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	442b      	add	r3, r5
 800433a:	6023      	str	r3, [r4, #0]
 800433c:	e00e      	b.n	800435c <_malloc_r+0xa0>
 800433e:	6822      	ldr	r2, [r4, #0]
 8004340:	1b52      	subs	r2, r2, r5
 8004342:	d41e      	bmi.n	8004382 <_malloc_r+0xc6>
 8004344:	2a0b      	cmp	r2, #11
 8004346:	d916      	bls.n	8004376 <_malloc_r+0xba>
 8004348:	1961      	adds	r1, r4, r5
 800434a:	42a3      	cmp	r3, r4
 800434c:	6025      	str	r5, [r4, #0]
 800434e:	bf18      	it	ne
 8004350:	6059      	strne	r1, [r3, #4]
 8004352:	6863      	ldr	r3, [r4, #4]
 8004354:	bf08      	it	eq
 8004356:	6031      	streq	r1, [r6, #0]
 8004358:	5162      	str	r2, [r4, r5]
 800435a:	604b      	str	r3, [r1, #4]
 800435c:	4638      	mov	r0, r7
 800435e:	f104 060b 	add.w	r6, r4, #11
 8004362:	f000 fd83 	bl	8004e6c <__malloc_unlock>
 8004366:	f026 0607 	bic.w	r6, r6, #7
 800436a:	1d23      	adds	r3, r4, #4
 800436c:	1af2      	subs	r2, r6, r3
 800436e:	d0b6      	beq.n	80042de <_malloc_r+0x22>
 8004370:	1b9b      	subs	r3, r3, r6
 8004372:	50a3      	str	r3, [r4, r2]
 8004374:	e7b3      	b.n	80042de <_malloc_r+0x22>
 8004376:	6862      	ldr	r2, [r4, #4]
 8004378:	42a3      	cmp	r3, r4
 800437a:	bf0c      	ite	eq
 800437c:	6032      	streq	r2, [r6, #0]
 800437e:	605a      	strne	r2, [r3, #4]
 8004380:	e7ec      	b.n	800435c <_malloc_r+0xa0>
 8004382:	4623      	mov	r3, r4
 8004384:	6864      	ldr	r4, [r4, #4]
 8004386:	e7b2      	b.n	80042ee <_malloc_r+0x32>
 8004388:	4634      	mov	r4, r6
 800438a:	6876      	ldr	r6, [r6, #4]
 800438c:	e7b9      	b.n	8004302 <_malloc_r+0x46>
 800438e:	230c      	movs	r3, #12
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	4638      	mov	r0, r7
 8004394:	f000 fd6a 	bl	8004e6c <__malloc_unlock>
 8004398:	e7a1      	b.n	80042de <_malloc_r+0x22>
 800439a:	6025      	str	r5, [r4, #0]
 800439c:	e7de      	b.n	800435c <_malloc_r+0xa0>
 800439e:	bf00      	nop
 80043a0:	2000017c 	.word	0x2000017c

080043a4 <__sfputc_r>:
 80043a4:	6893      	ldr	r3, [r2, #8]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	b410      	push	{r4}
 80043ac:	6093      	str	r3, [r2, #8]
 80043ae:	da08      	bge.n	80043c2 <__sfputc_r+0x1e>
 80043b0:	6994      	ldr	r4, [r2, #24]
 80043b2:	42a3      	cmp	r3, r4
 80043b4:	db01      	blt.n	80043ba <__sfputc_r+0x16>
 80043b6:	290a      	cmp	r1, #10
 80043b8:	d103      	bne.n	80043c2 <__sfputc_r+0x1e>
 80043ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043be:	f000 bb33 	b.w	8004a28 <__swbuf_r>
 80043c2:	6813      	ldr	r3, [r2, #0]
 80043c4:	1c58      	adds	r0, r3, #1
 80043c6:	6010      	str	r0, [r2, #0]
 80043c8:	7019      	strb	r1, [r3, #0]
 80043ca:	4608      	mov	r0, r1
 80043cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <__sfputs_r>:
 80043d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d4:	4606      	mov	r6, r0
 80043d6:	460f      	mov	r7, r1
 80043d8:	4614      	mov	r4, r2
 80043da:	18d5      	adds	r5, r2, r3
 80043dc:	42ac      	cmp	r4, r5
 80043de:	d101      	bne.n	80043e4 <__sfputs_r+0x12>
 80043e0:	2000      	movs	r0, #0
 80043e2:	e007      	b.n	80043f4 <__sfputs_r+0x22>
 80043e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043e8:	463a      	mov	r2, r7
 80043ea:	4630      	mov	r0, r6
 80043ec:	f7ff ffda 	bl	80043a4 <__sfputc_r>
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d1f3      	bne.n	80043dc <__sfputs_r+0xa>
 80043f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043f8 <_vfiprintf_r>:
 80043f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043fc:	460d      	mov	r5, r1
 80043fe:	b09d      	sub	sp, #116	; 0x74
 8004400:	4614      	mov	r4, r2
 8004402:	4698      	mov	r8, r3
 8004404:	4606      	mov	r6, r0
 8004406:	b118      	cbz	r0, 8004410 <_vfiprintf_r+0x18>
 8004408:	6983      	ldr	r3, [r0, #24]
 800440a:	b90b      	cbnz	r3, 8004410 <_vfiprintf_r+0x18>
 800440c:	f7ff fe96 	bl	800413c <__sinit>
 8004410:	4b89      	ldr	r3, [pc, #548]	; (8004638 <_vfiprintf_r+0x240>)
 8004412:	429d      	cmp	r5, r3
 8004414:	d11b      	bne.n	800444e <_vfiprintf_r+0x56>
 8004416:	6875      	ldr	r5, [r6, #4]
 8004418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800441a:	07d9      	lsls	r1, r3, #31
 800441c:	d405      	bmi.n	800442a <_vfiprintf_r+0x32>
 800441e:	89ab      	ldrh	r3, [r5, #12]
 8004420:	059a      	lsls	r2, r3, #22
 8004422:	d402      	bmi.n	800442a <_vfiprintf_r+0x32>
 8004424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004426:	f7ff ff27 	bl	8004278 <__retarget_lock_acquire_recursive>
 800442a:	89ab      	ldrh	r3, [r5, #12]
 800442c:	071b      	lsls	r3, r3, #28
 800442e:	d501      	bpl.n	8004434 <_vfiprintf_r+0x3c>
 8004430:	692b      	ldr	r3, [r5, #16]
 8004432:	b9eb      	cbnz	r3, 8004470 <_vfiprintf_r+0x78>
 8004434:	4629      	mov	r1, r5
 8004436:	4630      	mov	r0, r6
 8004438:	f000 fb5a 	bl	8004af0 <__swsetup_r>
 800443c:	b1c0      	cbz	r0, 8004470 <_vfiprintf_r+0x78>
 800443e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004440:	07dc      	lsls	r4, r3, #31
 8004442:	d50e      	bpl.n	8004462 <_vfiprintf_r+0x6a>
 8004444:	f04f 30ff 	mov.w	r0, #4294967295
 8004448:	b01d      	add	sp, #116	; 0x74
 800444a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800444e:	4b7b      	ldr	r3, [pc, #492]	; (800463c <_vfiprintf_r+0x244>)
 8004450:	429d      	cmp	r5, r3
 8004452:	d101      	bne.n	8004458 <_vfiprintf_r+0x60>
 8004454:	68b5      	ldr	r5, [r6, #8]
 8004456:	e7df      	b.n	8004418 <_vfiprintf_r+0x20>
 8004458:	4b79      	ldr	r3, [pc, #484]	; (8004640 <_vfiprintf_r+0x248>)
 800445a:	429d      	cmp	r5, r3
 800445c:	bf08      	it	eq
 800445e:	68f5      	ldreq	r5, [r6, #12]
 8004460:	e7da      	b.n	8004418 <_vfiprintf_r+0x20>
 8004462:	89ab      	ldrh	r3, [r5, #12]
 8004464:	0598      	lsls	r0, r3, #22
 8004466:	d4ed      	bmi.n	8004444 <_vfiprintf_r+0x4c>
 8004468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800446a:	f7ff ff06 	bl	800427a <__retarget_lock_release_recursive>
 800446e:	e7e9      	b.n	8004444 <_vfiprintf_r+0x4c>
 8004470:	2300      	movs	r3, #0
 8004472:	9309      	str	r3, [sp, #36]	; 0x24
 8004474:	2320      	movs	r3, #32
 8004476:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800447a:	f8cd 800c 	str.w	r8, [sp, #12]
 800447e:	2330      	movs	r3, #48	; 0x30
 8004480:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004644 <_vfiprintf_r+0x24c>
 8004484:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004488:	f04f 0901 	mov.w	r9, #1
 800448c:	4623      	mov	r3, r4
 800448e:	469a      	mov	sl, r3
 8004490:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004494:	b10a      	cbz	r2, 800449a <_vfiprintf_r+0xa2>
 8004496:	2a25      	cmp	r2, #37	; 0x25
 8004498:	d1f9      	bne.n	800448e <_vfiprintf_r+0x96>
 800449a:	ebba 0b04 	subs.w	fp, sl, r4
 800449e:	d00b      	beq.n	80044b8 <_vfiprintf_r+0xc0>
 80044a0:	465b      	mov	r3, fp
 80044a2:	4622      	mov	r2, r4
 80044a4:	4629      	mov	r1, r5
 80044a6:	4630      	mov	r0, r6
 80044a8:	f7ff ff93 	bl	80043d2 <__sfputs_r>
 80044ac:	3001      	adds	r0, #1
 80044ae:	f000 80aa 	beq.w	8004606 <_vfiprintf_r+0x20e>
 80044b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044b4:	445a      	add	r2, fp
 80044b6:	9209      	str	r2, [sp, #36]	; 0x24
 80044b8:	f89a 3000 	ldrb.w	r3, [sl]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80a2 	beq.w	8004606 <_vfiprintf_r+0x20e>
 80044c2:	2300      	movs	r3, #0
 80044c4:	f04f 32ff 	mov.w	r2, #4294967295
 80044c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044cc:	f10a 0a01 	add.w	sl, sl, #1
 80044d0:	9304      	str	r3, [sp, #16]
 80044d2:	9307      	str	r3, [sp, #28]
 80044d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044d8:	931a      	str	r3, [sp, #104]	; 0x68
 80044da:	4654      	mov	r4, sl
 80044dc:	2205      	movs	r2, #5
 80044de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044e2:	4858      	ldr	r0, [pc, #352]	; (8004644 <_vfiprintf_r+0x24c>)
 80044e4:	f7fb fe74 	bl	80001d0 <memchr>
 80044e8:	9a04      	ldr	r2, [sp, #16]
 80044ea:	b9d8      	cbnz	r0, 8004524 <_vfiprintf_r+0x12c>
 80044ec:	06d1      	lsls	r1, r2, #27
 80044ee:	bf44      	itt	mi
 80044f0:	2320      	movmi	r3, #32
 80044f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044f6:	0713      	lsls	r3, r2, #28
 80044f8:	bf44      	itt	mi
 80044fa:	232b      	movmi	r3, #43	; 0x2b
 80044fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004500:	f89a 3000 	ldrb.w	r3, [sl]
 8004504:	2b2a      	cmp	r3, #42	; 0x2a
 8004506:	d015      	beq.n	8004534 <_vfiprintf_r+0x13c>
 8004508:	9a07      	ldr	r2, [sp, #28]
 800450a:	4654      	mov	r4, sl
 800450c:	2000      	movs	r0, #0
 800450e:	f04f 0c0a 	mov.w	ip, #10
 8004512:	4621      	mov	r1, r4
 8004514:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004518:	3b30      	subs	r3, #48	; 0x30
 800451a:	2b09      	cmp	r3, #9
 800451c:	d94e      	bls.n	80045bc <_vfiprintf_r+0x1c4>
 800451e:	b1b0      	cbz	r0, 800454e <_vfiprintf_r+0x156>
 8004520:	9207      	str	r2, [sp, #28]
 8004522:	e014      	b.n	800454e <_vfiprintf_r+0x156>
 8004524:	eba0 0308 	sub.w	r3, r0, r8
 8004528:	fa09 f303 	lsl.w	r3, r9, r3
 800452c:	4313      	orrs	r3, r2
 800452e:	9304      	str	r3, [sp, #16]
 8004530:	46a2      	mov	sl, r4
 8004532:	e7d2      	b.n	80044da <_vfiprintf_r+0xe2>
 8004534:	9b03      	ldr	r3, [sp, #12]
 8004536:	1d19      	adds	r1, r3, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	9103      	str	r1, [sp, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	bfbb      	ittet	lt
 8004540:	425b      	neglt	r3, r3
 8004542:	f042 0202 	orrlt.w	r2, r2, #2
 8004546:	9307      	strge	r3, [sp, #28]
 8004548:	9307      	strlt	r3, [sp, #28]
 800454a:	bfb8      	it	lt
 800454c:	9204      	strlt	r2, [sp, #16]
 800454e:	7823      	ldrb	r3, [r4, #0]
 8004550:	2b2e      	cmp	r3, #46	; 0x2e
 8004552:	d10c      	bne.n	800456e <_vfiprintf_r+0x176>
 8004554:	7863      	ldrb	r3, [r4, #1]
 8004556:	2b2a      	cmp	r3, #42	; 0x2a
 8004558:	d135      	bne.n	80045c6 <_vfiprintf_r+0x1ce>
 800455a:	9b03      	ldr	r3, [sp, #12]
 800455c:	1d1a      	adds	r2, r3, #4
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	9203      	str	r2, [sp, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	bfb8      	it	lt
 8004566:	f04f 33ff 	movlt.w	r3, #4294967295
 800456a:	3402      	adds	r4, #2
 800456c:	9305      	str	r3, [sp, #20]
 800456e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004654 <_vfiprintf_r+0x25c>
 8004572:	7821      	ldrb	r1, [r4, #0]
 8004574:	2203      	movs	r2, #3
 8004576:	4650      	mov	r0, sl
 8004578:	f7fb fe2a 	bl	80001d0 <memchr>
 800457c:	b140      	cbz	r0, 8004590 <_vfiprintf_r+0x198>
 800457e:	2340      	movs	r3, #64	; 0x40
 8004580:	eba0 000a 	sub.w	r0, r0, sl
 8004584:	fa03 f000 	lsl.w	r0, r3, r0
 8004588:	9b04      	ldr	r3, [sp, #16]
 800458a:	4303      	orrs	r3, r0
 800458c:	3401      	adds	r4, #1
 800458e:	9304      	str	r3, [sp, #16]
 8004590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004594:	482c      	ldr	r0, [pc, #176]	; (8004648 <_vfiprintf_r+0x250>)
 8004596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800459a:	2206      	movs	r2, #6
 800459c:	f7fb fe18 	bl	80001d0 <memchr>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	d03f      	beq.n	8004624 <_vfiprintf_r+0x22c>
 80045a4:	4b29      	ldr	r3, [pc, #164]	; (800464c <_vfiprintf_r+0x254>)
 80045a6:	bb1b      	cbnz	r3, 80045f0 <_vfiprintf_r+0x1f8>
 80045a8:	9b03      	ldr	r3, [sp, #12]
 80045aa:	3307      	adds	r3, #7
 80045ac:	f023 0307 	bic.w	r3, r3, #7
 80045b0:	3308      	adds	r3, #8
 80045b2:	9303      	str	r3, [sp, #12]
 80045b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b6:	443b      	add	r3, r7
 80045b8:	9309      	str	r3, [sp, #36]	; 0x24
 80045ba:	e767      	b.n	800448c <_vfiprintf_r+0x94>
 80045bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80045c0:	460c      	mov	r4, r1
 80045c2:	2001      	movs	r0, #1
 80045c4:	e7a5      	b.n	8004512 <_vfiprintf_r+0x11a>
 80045c6:	2300      	movs	r3, #0
 80045c8:	3401      	adds	r4, #1
 80045ca:	9305      	str	r3, [sp, #20]
 80045cc:	4619      	mov	r1, r3
 80045ce:	f04f 0c0a 	mov.w	ip, #10
 80045d2:	4620      	mov	r0, r4
 80045d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045d8:	3a30      	subs	r2, #48	; 0x30
 80045da:	2a09      	cmp	r2, #9
 80045dc:	d903      	bls.n	80045e6 <_vfiprintf_r+0x1ee>
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0c5      	beq.n	800456e <_vfiprintf_r+0x176>
 80045e2:	9105      	str	r1, [sp, #20]
 80045e4:	e7c3      	b.n	800456e <_vfiprintf_r+0x176>
 80045e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80045ea:	4604      	mov	r4, r0
 80045ec:	2301      	movs	r3, #1
 80045ee:	e7f0      	b.n	80045d2 <_vfiprintf_r+0x1da>
 80045f0:	ab03      	add	r3, sp, #12
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	462a      	mov	r2, r5
 80045f6:	4b16      	ldr	r3, [pc, #88]	; (8004650 <_vfiprintf_r+0x258>)
 80045f8:	a904      	add	r1, sp, #16
 80045fa:	4630      	mov	r0, r6
 80045fc:	f3af 8000 	nop.w
 8004600:	4607      	mov	r7, r0
 8004602:	1c78      	adds	r0, r7, #1
 8004604:	d1d6      	bne.n	80045b4 <_vfiprintf_r+0x1bc>
 8004606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004608:	07d9      	lsls	r1, r3, #31
 800460a:	d405      	bmi.n	8004618 <_vfiprintf_r+0x220>
 800460c:	89ab      	ldrh	r3, [r5, #12]
 800460e:	059a      	lsls	r2, r3, #22
 8004610:	d402      	bmi.n	8004618 <_vfiprintf_r+0x220>
 8004612:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004614:	f7ff fe31 	bl	800427a <__retarget_lock_release_recursive>
 8004618:	89ab      	ldrh	r3, [r5, #12]
 800461a:	065b      	lsls	r3, r3, #25
 800461c:	f53f af12 	bmi.w	8004444 <_vfiprintf_r+0x4c>
 8004620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004622:	e711      	b.n	8004448 <_vfiprintf_r+0x50>
 8004624:	ab03      	add	r3, sp, #12
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	462a      	mov	r2, r5
 800462a:	4b09      	ldr	r3, [pc, #36]	; (8004650 <_vfiprintf_r+0x258>)
 800462c:	a904      	add	r1, sp, #16
 800462e:	4630      	mov	r0, r6
 8004630:	f000 f880 	bl	8004734 <_printf_i>
 8004634:	e7e4      	b.n	8004600 <_vfiprintf_r+0x208>
 8004636:	bf00      	nop
 8004638:	08005000 	.word	0x08005000
 800463c:	08005020 	.word	0x08005020
 8004640:	08004fe0 	.word	0x08004fe0
 8004644:	08005040 	.word	0x08005040
 8004648:	0800504a 	.word	0x0800504a
 800464c:	00000000 	.word	0x00000000
 8004650:	080043d3 	.word	0x080043d3
 8004654:	08005046 	.word	0x08005046

08004658 <_printf_common>:
 8004658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800465c:	4616      	mov	r6, r2
 800465e:	4699      	mov	r9, r3
 8004660:	688a      	ldr	r2, [r1, #8]
 8004662:	690b      	ldr	r3, [r1, #16]
 8004664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004668:	4293      	cmp	r3, r2
 800466a:	bfb8      	it	lt
 800466c:	4613      	movlt	r3, r2
 800466e:	6033      	str	r3, [r6, #0]
 8004670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004674:	4607      	mov	r7, r0
 8004676:	460c      	mov	r4, r1
 8004678:	b10a      	cbz	r2, 800467e <_printf_common+0x26>
 800467a:	3301      	adds	r3, #1
 800467c:	6033      	str	r3, [r6, #0]
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	0699      	lsls	r1, r3, #26
 8004682:	bf42      	ittt	mi
 8004684:	6833      	ldrmi	r3, [r6, #0]
 8004686:	3302      	addmi	r3, #2
 8004688:	6033      	strmi	r3, [r6, #0]
 800468a:	6825      	ldr	r5, [r4, #0]
 800468c:	f015 0506 	ands.w	r5, r5, #6
 8004690:	d106      	bne.n	80046a0 <_printf_common+0x48>
 8004692:	f104 0a19 	add.w	sl, r4, #25
 8004696:	68e3      	ldr	r3, [r4, #12]
 8004698:	6832      	ldr	r2, [r6, #0]
 800469a:	1a9b      	subs	r3, r3, r2
 800469c:	42ab      	cmp	r3, r5
 800469e:	dc26      	bgt.n	80046ee <_printf_common+0x96>
 80046a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046a4:	1e13      	subs	r3, r2, #0
 80046a6:	6822      	ldr	r2, [r4, #0]
 80046a8:	bf18      	it	ne
 80046aa:	2301      	movne	r3, #1
 80046ac:	0692      	lsls	r2, r2, #26
 80046ae:	d42b      	bmi.n	8004708 <_printf_common+0xb0>
 80046b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046b4:	4649      	mov	r1, r9
 80046b6:	4638      	mov	r0, r7
 80046b8:	47c0      	blx	r8
 80046ba:	3001      	adds	r0, #1
 80046bc:	d01e      	beq.n	80046fc <_printf_common+0xa4>
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	68e5      	ldr	r5, [r4, #12]
 80046c2:	6832      	ldr	r2, [r6, #0]
 80046c4:	f003 0306 	and.w	r3, r3, #6
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	bf08      	it	eq
 80046cc:	1aad      	subeq	r5, r5, r2
 80046ce:	68a3      	ldr	r3, [r4, #8]
 80046d0:	6922      	ldr	r2, [r4, #16]
 80046d2:	bf0c      	ite	eq
 80046d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046d8:	2500      	movne	r5, #0
 80046da:	4293      	cmp	r3, r2
 80046dc:	bfc4      	itt	gt
 80046de:	1a9b      	subgt	r3, r3, r2
 80046e0:	18ed      	addgt	r5, r5, r3
 80046e2:	2600      	movs	r6, #0
 80046e4:	341a      	adds	r4, #26
 80046e6:	42b5      	cmp	r5, r6
 80046e8:	d11a      	bne.n	8004720 <_printf_common+0xc8>
 80046ea:	2000      	movs	r0, #0
 80046ec:	e008      	b.n	8004700 <_printf_common+0xa8>
 80046ee:	2301      	movs	r3, #1
 80046f0:	4652      	mov	r2, sl
 80046f2:	4649      	mov	r1, r9
 80046f4:	4638      	mov	r0, r7
 80046f6:	47c0      	blx	r8
 80046f8:	3001      	adds	r0, #1
 80046fa:	d103      	bne.n	8004704 <_printf_common+0xac>
 80046fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004704:	3501      	adds	r5, #1
 8004706:	e7c6      	b.n	8004696 <_printf_common+0x3e>
 8004708:	18e1      	adds	r1, r4, r3
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	2030      	movs	r0, #48	; 0x30
 800470e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004712:	4422      	add	r2, r4
 8004714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800471c:	3302      	adds	r3, #2
 800471e:	e7c7      	b.n	80046b0 <_printf_common+0x58>
 8004720:	2301      	movs	r3, #1
 8004722:	4622      	mov	r2, r4
 8004724:	4649      	mov	r1, r9
 8004726:	4638      	mov	r0, r7
 8004728:	47c0      	blx	r8
 800472a:	3001      	adds	r0, #1
 800472c:	d0e6      	beq.n	80046fc <_printf_common+0xa4>
 800472e:	3601      	adds	r6, #1
 8004730:	e7d9      	b.n	80046e6 <_printf_common+0x8e>
	...

08004734 <_printf_i>:
 8004734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004738:	7e0f      	ldrb	r7, [r1, #24]
 800473a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800473c:	2f78      	cmp	r7, #120	; 0x78
 800473e:	4691      	mov	r9, r2
 8004740:	4680      	mov	r8, r0
 8004742:	460c      	mov	r4, r1
 8004744:	469a      	mov	sl, r3
 8004746:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800474a:	d807      	bhi.n	800475c <_printf_i+0x28>
 800474c:	2f62      	cmp	r7, #98	; 0x62
 800474e:	d80a      	bhi.n	8004766 <_printf_i+0x32>
 8004750:	2f00      	cmp	r7, #0
 8004752:	f000 80d8 	beq.w	8004906 <_printf_i+0x1d2>
 8004756:	2f58      	cmp	r7, #88	; 0x58
 8004758:	f000 80a3 	beq.w	80048a2 <_printf_i+0x16e>
 800475c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004764:	e03a      	b.n	80047dc <_printf_i+0xa8>
 8004766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800476a:	2b15      	cmp	r3, #21
 800476c:	d8f6      	bhi.n	800475c <_printf_i+0x28>
 800476e:	a101      	add	r1, pc, #4	; (adr r1, 8004774 <_printf_i+0x40>)
 8004770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004774:	080047cd 	.word	0x080047cd
 8004778:	080047e1 	.word	0x080047e1
 800477c:	0800475d 	.word	0x0800475d
 8004780:	0800475d 	.word	0x0800475d
 8004784:	0800475d 	.word	0x0800475d
 8004788:	0800475d 	.word	0x0800475d
 800478c:	080047e1 	.word	0x080047e1
 8004790:	0800475d 	.word	0x0800475d
 8004794:	0800475d 	.word	0x0800475d
 8004798:	0800475d 	.word	0x0800475d
 800479c:	0800475d 	.word	0x0800475d
 80047a0:	080048ed 	.word	0x080048ed
 80047a4:	08004811 	.word	0x08004811
 80047a8:	080048cf 	.word	0x080048cf
 80047ac:	0800475d 	.word	0x0800475d
 80047b0:	0800475d 	.word	0x0800475d
 80047b4:	0800490f 	.word	0x0800490f
 80047b8:	0800475d 	.word	0x0800475d
 80047bc:	08004811 	.word	0x08004811
 80047c0:	0800475d 	.word	0x0800475d
 80047c4:	0800475d 	.word	0x0800475d
 80047c8:	080048d7 	.word	0x080048d7
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	1d1a      	adds	r2, r3, #4
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	602a      	str	r2, [r5, #0]
 80047d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047dc:	2301      	movs	r3, #1
 80047de:	e0a3      	b.n	8004928 <_printf_i+0x1f4>
 80047e0:	6820      	ldr	r0, [r4, #0]
 80047e2:	6829      	ldr	r1, [r5, #0]
 80047e4:	0606      	lsls	r6, r0, #24
 80047e6:	f101 0304 	add.w	r3, r1, #4
 80047ea:	d50a      	bpl.n	8004802 <_printf_i+0xce>
 80047ec:	680e      	ldr	r6, [r1, #0]
 80047ee:	602b      	str	r3, [r5, #0]
 80047f0:	2e00      	cmp	r6, #0
 80047f2:	da03      	bge.n	80047fc <_printf_i+0xc8>
 80047f4:	232d      	movs	r3, #45	; 0x2d
 80047f6:	4276      	negs	r6, r6
 80047f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047fc:	485e      	ldr	r0, [pc, #376]	; (8004978 <_printf_i+0x244>)
 80047fe:	230a      	movs	r3, #10
 8004800:	e019      	b.n	8004836 <_printf_i+0x102>
 8004802:	680e      	ldr	r6, [r1, #0]
 8004804:	602b      	str	r3, [r5, #0]
 8004806:	f010 0f40 	tst.w	r0, #64	; 0x40
 800480a:	bf18      	it	ne
 800480c:	b236      	sxthne	r6, r6
 800480e:	e7ef      	b.n	80047f0 <_printf_i+0xbc>
 8004810:	682b      	ldr	r3, [r5, #0]
 8004812:	6820      	ldr	r0, [r4, #0]
 8004814:	1d19      	adds	r1, r3, #4
 8004816:	6029      	str	r1, [r5, #0]
 8004818:	0601      	lsls	r1, r0, #24
 800481a:	d501      	bpl.n	8004820 <_printf_i+0xec>
 800481c:	681e      	ldr	r6, [r3, #0]
 800481e:	e002      	b.n	8004826 <_printf_i+0xf2>
 8004820:	0646      	lsls	r6, r0, #25
 8004822:	d5fb      	bpl.n	800481c <_printf_i+0xe8>
 8004824:	881e      	ldrh	r6, [r3, #0]
 8004826:	4854      	ldr	r0, [pc, #336]	; (8004978 <_printf_i+0x244>)
 8004828:	2f6f      	cmp	r7, #111	; 0x6f
 800482a:	bf0c      	ite	eq
 800482c:	2308      	moveq	r3, #8
 800482e:	230a      	movne	r3, #10
 8004830:	2100      	movs	r1, #0
 8004832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004836:	6865      	ldr	r5, [r4, #4]
 8004838:	60a5      	str	r5, [r4, #8]
 800483a:	2d00      	cmp	r5, #0
 800483c:	bfa2      	ittt	ge
 800483e:	6821      	ldrge	r1, [r4, #0]
 8004840:	f021 0104 	bicge.w	r1, r1, #4
 8004844:	6021      	strge	r1, [r4, #0]
 8004846:	b90e      	cbnz	r6, 800484c <_printf_i+0x118>
 8004848:	2d00      	cmp	r5, #0
 800484a:	d04d      	beq.n	80048e8 <_printf_i+0x1b4>
 800484c:	4615      	mov	r5, r2
 800484e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004852:	fb03 6711 	mls	r7, r3, r1, r6
 8004856:	5dc7      	ldrb	r7, [r0, r7]
 8004858:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800485c:	4637      	mov	r7, r6
 800485e:	42bb      	cmp	r3, r7
 8004860:	460e      	mov	r6, r1
 8004862:	d9f4      	bls.n	800484e <_printf_i+0x11a>
 8004864:	2b08      	cmp	r3, #8
 8004866:	d10b      	bne.n	8004880 <_printf_i+0x14c>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	07de      	lsls	r6, r3, #31
 800486c:	d508      	bpl.n	8004880 <_printf_i+0x14c>
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	6861      	ldr	r1, [r4, #4]
 8004872:	4299      	cmp	r1, r3
 8004874:	bfde      	ittt	le
 8004876:	2330      	movle	r3, #48	; 0x30
 8004878:	f805 3c01 	strble.w	r3, [r5, #-1]
 800487c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004880:	1b52      	subs	r2, r2, r5
 8004882:	6122      	str	r2, [r4, #16]
 8004884:	f8cd a000 	str.w	sl, [sp]
 8004888:	464b      	mov	r3, r9
 800488a:	aa03      	add	r2, sp, #12
 800488c:	4621      	mov	r1, r4
 800488e:	4640      	mov	r0, r8
 8004890:	f7ff fee2 	bl	8004658 <_printf_common>
 8004894:	3001      	adds	r0, #1
 8004896:	d14c      	bne.n	8004932 <_printf_i+0x1fe>
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	b004      	add	sp, #16
 800489e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a2:	4835      	ldr	r0, [pc, #212]	; (8004978 <_printf_i+0x244>)
 80048a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80048a8:	6829      	ldr	r1, [r5, #0]
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80048b0:	6029      	str	r1, [r5, #0]
 80048b2:	061d      	lsls	r5, r3, #24
 80048b4:	d514      	bpl.n	80048e0 <_printf_i+0x1ac>
 80048b6:	07df      	lsls	r7, r3, #31
 80048b8:	bf44      	itt	mi
 80048ba:	f043 0320 	orrmi.w	r3, r3, #32
 80048be:	6023      	strmi	r3, [r4, #0]
 80048c0:	b91e      	cbnz	r6, 80048ca <_printf_i+0x196>
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	f023 0320 	bic.w	r3, r3, #32
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	2310      	movs	r3, #16
 80048cc:	e7b0      	b.n	8004830 <_printf_i+0xfc>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	f043 0320 	orr.w	r3, r3, #32
 80048d4:	6023      	str	r3, [r4, #0]
 80048d6:	2378      	movs	r3, #120	; 0x78
 80048d8:	4828      	ldr	r0, [pc, #160]	; (800497c <_printf_i+0x248>)
 80048da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048de:	e7e3      	b.n	80048a8 <_printf_i+0x174>
 80048e0:	0659      	lsls	r1, r3, #25
 80048e2:	bf48      	it	mi
 80048e4:	b2b6      	uxthmi	r6, r6
 80048e6:	e7e6      	b.n	80048b6 <_printf_i+0x182>
 80048e8:	4615      	mov	r5, r2
 80048ea:	e7bb      	b.n	8004864 <_printf_i+0x130>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	6826      	ldr	r6, [r4, #0]
 80048f0:	6961      	ldr	r1, [r4, #20]
 80048f2:	1d18      	adds	r0, r3, #4
 80048f4:	6028      	str	r0, [r5, #0]
 80048f6:	0635      	lsls	r5, r6, #24
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	d501      	bpl.n	8004900 <_printf_i+0x1cc>
 80048fc:	6019      	str	r1, [r3, #0]
 80048fe:	e002      	b.n	8004906 <_printf_i+0x1d2>
 8004900:	0670      	lsls	r0, r6, #25
 8004902:	d5fb      	bpl.n	80048fc <_printf_i+0x1c8>
 8004904:	8019      	strh	r1, [r3, #0]
 8004906:	2300      	movs	r3, #0
 8004908:	6123      	str	r3, [r4, #16]
 800490a:	4615      	mov	r5, r2
 800490c:	e7ba      	b.n	8004884 <_printf_i+0x150>
 800490e:	682b      	ldr	r3, [r5, #0]
 8004910:	1d1a      	adds	r2, r3, #4
 8004912:	602a      	str	r2, [r5, #0]
 8004914:	681d      	ldr	r5, [r3, #0]
 8004916:	6862      	ldr	r2, [r4, #4]
 8004918:	2100      	movs	r1, #0
 800491a:	4628      	mov	r0, r5
 800491c:	f7fb fc58 	bl	80001d0 <memchr>
 8004920:	b108      	cbz	r0, 8004926 <_printf_i+0x1f2>
 8004922:	1b40      	subs	r0, r0, r5
 8004924:	6060      	str	r0, [r4, #4]
 8004926:	6863      	ldr	r3, [r4, #4]
 8004928:	6123      	str	r3, [r4, #16]
 800492a:	2300      	movs	r3, #0
 800492c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004930:	e7a8      	b.n	8004884 <_printf_i+0x150>
 8004932:	6923      	ldr	r3, [r4, #16]
 8004934:	462a      	mov	r2, r5
 8004936:	4649      	mov	r1, r9
 8004938:	4640      	mov	r0, r8
 800493a:	47d0      	blx	sl
 800493c:	3001      	adds	r0, #1
 800493e:	d0ab      	beq.n	8004898 <_printf_i+0x164>
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	079b      	lsls	r3, r3, #30
 8004944:	d413      	bmi.n	800496e <_printf_i+0x23a>
 8004946:	68e0      	ldr	r0, [r4, #12]
 8004948:	9b03      	ldr	r3, [sp, #12]
 800494a:	4298      	cmp	r0, r3
 800494c:	bfb8      	it	lt
 800494e:	4618      	movlt	r0, r3
 8004950:	e7a4      	b.n	800489c <_printf_i+0x168>
 8004952:	2301      	movs	r3, #1
 8004954:	4632      	mov	r2, r6
 8004956:	4649      	mov	r1, r9
 8004958:	4640      	mov	r0, r8
 800495a:	47d0      	blx	sl
 800495c:	3001      	adds	r0, #1
 800495e:	d09b      	beq.n	8004898 <_printf_i+0x164>
 8004960:	3501      	adds	r5, #1
 8004962:	68e3      	ldr	r3, [r4, #12]
 8004964:	9903      	ldr	r1, [sp, #12]
 8004966:	1a5b      	subs	r3, r3, r1
 8004968:	42ab      	cmp	r3, r5
 800496a:	dcf2      	bgt.n	8004952 <_printf_i+0x21e>
 800496c:	e7eb      	b.n	8004946 <_printf_i+0x212>
 800496e:	2500      	movs	r5, #0
 8004970:	f104 0619 	add.w	r6, r4, #25
 8004974:	e7f5      	b.n	8004962 <_printf_i+0x22e>
 8004976:	bf00      	nop
 8004978:	08005051 	.word	0x08005051
 800497c:	08005062 	.word	0x08005062

08004980 <_sbrk_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	4d06      	ldr	r5, [pc, #24]	; (800499c <_sbrk_r+0x1c>)
 8004984:	2300      	movs	r3, #0
 8004986:	4604      	mov	r4, r0
 8004988:	4608      	mov	r0, r1
 800498a:	602b      	str	r3, [r5, #0]
 800498c:	f7fb ffe6 	bl	800095c <_sbrk>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	d102      	bne.n	800499a <_sbrk_r+0x1a>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	b103      	cbz	r3, 800499a <_sbrk_r+0x1a>
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	20000184 	.word	0x20000184

080049a0 <__sread>:
 80049a0:	b510      	push	{r4, lr}
 80049a2:	460c      	mov	r4, r1
 80049a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a8:	f000 fab2 	bl	8004f10 <_read_r>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	bfab      	itete	ge
 80049b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049b2:	89a3      	ldrhlt	r3, [r4, #12]
 80049b4:	181b      	addge	r3, r3, r0
 80049b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049ba:	bfac      	ite	ge
 80049bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80049be:	81a3      	strhlt	r3, [r4, #12]
 80049c0:	bd10      	pop	{r4, pc}

080049c2 <__swrite>:
 80049c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c6:	461f      	mov	r7, r3
 80049c8:	898b      	ldrh	r3, [r1, #12]
 80049ca:	05db      	lsls	r3, r3, #23
 80049cc:	4605      	mov	r5, r0
 80049ce:	460c      	mov	r4, r1
 80049d0:	4616      	mov	r6, r2
 80049d2:	d505      	bpl.n	80049e0 <__swrite+0x1e>
 80049d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d8:	2302      	movs	r3, #2
 80049da:	2200      	movs	r2, #0
 80049dc:	f000 f9c8 	bl	8004d70 <_lseek_r>
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049ea:	81a3      	strh	r3, [r4, #12]
 80049ec:	4632      	mov	r2, r6
 80049ee:	463b      	mov	r3, r7
 80049f0:	4628      	mov	r0, r5
 80049f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049f6:	f000 b869 	b.w	8004acc <_write_r>

080049fa <__sseek>:
 80049fa:	b510      	push	{r4, lr}
 80049fc:	460c      	mov	r4, r1
 80049fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a02:	f000 f9b5 	bl	8004d70 <_lseek_r>
 8004a06:	1c43      	adds	r3, r0, #1
 8004a08:	89a3      	ldrh	r3, [r4, #12]
 8004a0a:	bf15      	itete	ne
 8004a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a16:	81a3      	strheq	r3, [r4, #12]
 8004a18:	bf18      	it	ne
 8004a1a:	81a3      	strhne	r3, [r4, #12]
 8004a1c:	bd10      	pop	{r4, pc}

08004a1e <__sclose>:
 8004a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a22:	f000 b8d3 	b.w	8004bcc <_close_r>
	...

08004a28 <__swbuf_r>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	460e      	mov	r6, r1
 8004a2c:	4614      	mov	r4, r2
 8004a2e:	4605      	mov	r5, r0
 8004a30:	b118      	cbz	r0, 8004a3a <__swbuf_r+0x12>
 8004a32:	6983      	ldr	r3, [r0, #24]
 8004a34:	b90b      	cbnz	r3, 8004a3a <__swbuf_r+0x12>
 8004a36:	f7ff fb81 	bl	800413c <__sinit>
 8004a3a:	4b21      	ldr	r3, [pc, #132]	; (8004ac0 <__swbuf_r+0x98>)
 8004a3c:	429c      	cmp	r4, r3
 8004a3e:	d12b      	bne.n	8004a98 <__swbuf_r+0x70>
 8004a40:	686c      	ldr	r4, [r5, #4]
 8004a42:	69a3      	ldr	r3, [r4, #24]
 8004a44:	60a3      	str	r3, [r4, #8]
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	071a      	lsls	r2, r3, #28
 8004a4a:	d52f      	bpl.n	8004aac <__swbuf_r+0x84>
 8004a4c:	6923      	ldr	r3, [r4, #16]
 8004a4e:	b36b      	cbz	r3, 8004aac <__swbuf_r+0x84>
 8004a50:	6923      	ldr	r3, [r4, #16]
 8004a52:	6820      	ldr	r0, [r4, #0]
 8004a54:	1ac0      	subs	r0, r0, r3
 8004a56:	6963      	ldr	r3, [r4, #20]
 8004a58:	b2f6      	uxtb	r6, r6
 8004a5a:	4283      	cmp	r3, r0
 8004a5c:	4637      	mov	r7, r6
 8004a5e:	dc04      	bgt.n	8004a6a <__swbuf_r+0x42>
 8004a60:	4621      	mov	r1, r4
 8004a62:	4628      	mov	r0, r5
 8004a64:	f000 f948 	bl	8004cf8 <_fflush_r>
 8004a68:	bb30      	cbnz	r0, 8004ab8 <__swbuf_r+0x90>
 8004a6a:	68a3      	ldr	r3, [r4, #8]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	60a3      	str	r3, [r4, #8]
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	6022      	str	r2, [r4, #0]
 8004a76:	701e      	strb	r6, [r3, #0]
 8004a78:	6963      	ldr	r3, [r4, #20]
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	4283      	cmp	r3, r0
 8004a7e:	d004      	beq.n	8004a8a <__swbuf_r+0x62>
 8004a80:	89a3      	ldrh	r3, [r4, #12]
 8004a82:	07db      	lsls	r3, r3, #31
 8004a84:	d506      	bpl.n	8004a94 <__swbuf_r+0x6c>
 8004a86:	2e0a      	cmp	r6, #10
 8004a88:	d104      	bne.n	8004a94 <__swbuf_r+0x6c>
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f000 f933 	bl	8004cf8 <_fflush_r>
 8004a92:	b988      	cbnz	r0, 8004ab8 <__swbuf_r+0x90>
 8004a94:	4638      	mov	r0, r7
 8004a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a98:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <__swbuf_r+0x9c>)
 8004a9a:	429c      	cmp	r4, r3
 8004a9c:	d101      	bne.n	8004aa2 <__swbuf_r+0x7a>
 8004a9e:	68ac      	ldr	r4, [r5, #8]
 8004aa0:	e7cf      	b.n	8004a42 <__swbuf_r+0x1a>
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <__swbuf_r+0xa0>)
 8004aa4:	429c      	cmp	r4, r3
 8004aa6:	bf08      	it	eq
 8004aa8:	68ec      	ldreq	r4, [r5, #12]
 8004aaa:	e7ca      	b.n	8004a42 <__swbuf_r+0x1a>
 8004aac:	4621      	mov	r1, r4
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f000 f81e 	bl	8004af0 <__swsetup_r>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	d0cb      	beq.n	8004a50 <__swbuf_r+0x28>
 8004ab8:	f04f 37ff 	mov.w	r7, #4294967295
 8004abc:	e7ea      	b.n	8004a94 <__swbuf_r+0x6c>
 8004abe:	bf00      	nop
 8004ac0:	08005000 	.word	0x08005000
 8004ac4:	08005020 	.word	0x08005020
 8004ac8:	08004fe0 	.word	0x08004fe0

08004acc <_write_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4d07      	ldr	r5, [pc, #28]	; (8004aec <_write_r+0x20>)
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	4608      	mov	r0, r1
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	602a      	str	r2, [r5, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f7fb feed 	bl	80008ba <_write>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_write_r+0x1e>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_write_r+0x1e>
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	20000184 	.word	0x20000184

08004af0 <__swsetup_r>:
 8004af0:	4b32      	ldr	r3, [pc, #200]	; (8004bbc <__swsetup_r+0xcc>)
 8004af2:	b570      	push	{r4, r5, r6, lr}
 8004af4:	681d      	ldr	r5, [r3, #0]
 8004af6:	4606      	mov	r6, r0
 8004af8:	460c      	mov	r4, r1
 8004afa:	b125      	cbz	r5, 8004b06 <__swsetup_r+0x16>
 8004afc:	69ab      	ldr	r3, [r5, #24]
 8004afe:	b913      	cbnz	r3, 8004b06 <__swsetup_r+0x16>
 8004b00:	4628      	mov	r0, r5
 8004b02:	f7ff fb1b 	bl	800413c <__sinit>
 8004b06:	4b2e      	ldr	r3, [pc, #184]	; (8004bc0 <__swsetup_r+0xd0>)
 8004b08:	429c      	cmp	r4, r3
 8004b0a:	d10f      	bne.n	8004b2c <__swsetup_r+0x3c>
 8004b0c:	686c      	ldr	r4, [r5, #4]
 8004b0e:	89a3      	ldrh	r3, [r4, #12]
 8004b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b14:	0719      	lsls	r1, r3, #28
 8004b16:	d42c      	bmi.n	8004b72 <__swsetup_r+0x82>
 8004b18:	06dd      	lsls	r5, r3, #27
 8004b1a:	d411      	bmi.n	8004b40 <__swsetup_r+0x50>
 8004b1c:	2309      	movs	r3, #9
 8004b1e:	6033      	str	r3, [r6, #0]
 8004b20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b24:	81a3      	strh	r3, [r4, #12]
 8004b26:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2a:	e03e      	b.n	8004baa <__swsetup_r+0xba>
 8004b2c:	4b25      	ldr	r3, [pc, #148]	; (8004bc4 <__swsetup_r+0xd4>)
 8004b2e:	429c      	cmp	r4, r3
 8004b30:	d101      	bne.n	8004b36 <__swsetup_r+0x46>
 8004b32:	68ac      	ldr	r4, [r5, #8]
 8004b34:	e7eb      	b.n	8004b0e <__swsetup_r+0x1e>
 8004b36:	4b24      	ldr	r3, [pc, #144]	; (8004bc8 <__swsetup_r+0xd8>)
 8004b38:	429c      	cmp	r4, r3
 8004b3a:	bf08      	it	eq
 8004b3c:	68ec      	ldreq	r4, [r5, #12]
 8004b3e:	e7e6      	b.n	8004b0e <__swsetup_r+0x1e>
 8004b40:	0758      	lsls	r0, r3, #29
 8004b42:	d512      	bpl.n	8004b6a <__swsetup_r+0x7a>
 8004b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b46:	b141      	cbz	r1, 8004b5a <__swsetup_r+0x6a>
 8004b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b4c:	4299      	cmp	r1, r3
 8004b4e:	d002      	beq.n	8004b56 <__swsetup_r+0x66>
 8004b50:	4630      	mov	r0, r6
 8004b52:	f000 f991 	bl	8004e78 <_free_r>
 8004b56:	2300      	movs	r3, #0
 8004b58:	6363      	str	r3, [r4, #52]	; 0x34
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b60:	81a3      	strh	r3, [r4, #12]
 8004b62:	2300      	movs	r3, #0
 8004b64:	6063      	str	r3, [r4, #4]
 8004b66:	6923      	ldr	r3, [r4, #16]
 8004b68:	6023      	str	r3, [r4, #0]
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	f043 0308 	orr.w	r3, r3, #8
 8004b70:	81a3      	strh	r3, [r4, #12]
 8004b72:	6923      	ldr	r3, [r4, #16]
 8004b74:	b94b      	cbnz	r3, 8004b8a <__swsetup_r+0x9a>
 8004b76:	89a3      	ldrh	r3, [r4, #12]
 8004b78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b80:	d003      	beq.n	8004b8a <__swsetup_r+0x9a>
 8004b82:	4621      	mov	r1, r4
 8004b84:	4630      	mov	r0, r6
 8004b86:	f000 f92b 	bl	8004de0 <__smakebuf_r>
 8004b8a:	89a0      	ldrh	r0, [r4, #12]
 8004b8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b90:	f010 0301 	ands.w	r3, r0, #1
 8004b94:	d00a      	beq.n	8004bac <__swsetup_r+0xbc>
 8004b96:	2300      	movs	r3, #0
 8004b98:	60a3      	str	r3, [r4, #8]
 8004b9a:	6963      	ldr	r3, [r4, #20]
 8004b9c:	425b      	negs	r3, r3
 8004b9e:	61a3      	str	r3, [r4, #24]
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	b943      	cbnz	r3, 8004bb6 <__swsetup_r+0xc6>
 8004ba4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ba8:	d1ba      	bne.n	8004b20 <__swsetup_r+0x30>
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	0781      	lsls	r1, r0, #30
 8004bae:	bf58      	it	pl
 8004bb0:	6963      	ldrpl	r3, [r4, #20]
 8004bb2:	60a3      	str	r3, [r4, #8]
 8004bb4:	e7f4      	b.n	8004ba0 <__swsetup_r+0xb0>
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	e7f7      	b.n	8004baa <__swsetup_r+0xba>
 8004bba:	bf00      	nop
 8004bbc:	2000000c 	.word	0x2000000c
 8004bc0:	08005000 	.word	0x08005000
 8004bc4:	08005020 	.word	0x08005020
 8004bc8:	08004fe0 	.word	0x08004fe0

08004bcc <_close_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	4d06      	ldr	r5, [pc, #24]	; (8004be8 <_close_r+0x1c>)
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	4608      	mov	r0, r1
 8004bd6:	602b      	str	r3, [r5, #0]
 8004bd8:	f7fb fe8b 	bl	80008f2 <_close>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	d102      	bne.n	8004be6 <_close_r+0x1a>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	b103      	cbz	r3, 8004be6 <_close_r+0x1a>
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	bd38      	pop	{r3, r4, r5, pc}
 8004be8:	20000184 	.word	0x20000184

08004bec <__sflush_r>:
 8004bec:	898a      	ldrh	r2, [r1, #12]
 8004bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf2:	4605      	mov	r5, r0
 8004bf4:	0710      	lsls	r0, r2, #28
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	d458      	bmi.n	8004cac <__sflush_r+0xc0>
 8004bfa:	684b      	ldr	r3, [r1, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	dc05      	bgt.n	8004c0c <__sflush_r+0x20>
 8004c00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	dc02      	bgt.n	8004c0c <__sflush_r+0x20>
 8004c06:	2000      	movs	r0, #0
 8004c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c0e:	2e00      	cmp	r6, #0
 8004c10:	d0f9      	beq.n	8004c06 <__sflush_r+0x1a>
 8004c12:	2300      	movs	r3, #0
 8004c14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c18:	682f      	ldr	r7, [r5, #0]
 8004c1a:	602b      	str	r3, [r5, #0]
 8004c1c:	d032      	beq.n	8004c84 <__sflush_r+0x98>
 8004c1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	075a      	lsls	r2, r3, #29
 8004c24:	d505      	bpl.n	8004c32 <__sflush_r+0x46>
 8004c26:	6863      	ldr	r3, [r4, #4]
 8004c28:	1ac0      	subs	r0, r0, r3
 8004c2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c2c:	b10b      	cbz	r3, 8004c32 <__sflush_r+0x46>
 8004c2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c30:	1ac0      	subs	r0, r0, r3
 8004c32:	2300      	movs	r3, #0
 8004c34:	4602      	mov	r2, r0
 8004c36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c38:	6a21      	ldr	r1, [r4, #32]
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	47b0      	blx	r6
 8004c3e:	1c43      	adds	r3, r0, #1
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	d106      	bne.n	8004c52 <__sflush_r+0x66>
 8004c44:	6829      	ldr	r1, [r5, #0]
 8004c46:	291d      	cmp	r1, #29
 8004c48:	d82c      	bhi.n	8004ca4 <__sflush_r+0xb8>
 8004c4a:	4a2a      	ldr	r2, [pc, #168]	; (8004cf4 <__sflush_r+0x108>)
 8004c4c:	40ca      	lsrs	r2, r1
 8004c4e:	07d6      	lsls	r6, r2, #31
 8004c50:	d528      	bpl.n	8004ca4 <__sflush_r+0xb8>
 8004c52:	2200      	movs	r2, #0
 8004c54:	6062      	str	r2, [r4, #4]
 8004c56:	04d9      	lsls	r1, r3, #19
 8004c58:	6922      	ldr	r2, [r4, #16]
 8004c5a:	6022      	str	r2, [r4, #0]
 8004c5c:	d504      	bpl.n	8004c68 <__sflush_r+0x7c>
 8004c5e:	1c42      	adds	r2, r0, #1
 8004c60:	d101      	bne.n	8004c66 <__sflush_r+0x7a>
 8004c62:	682b      	ldr	r3, [r5, #0]
 8004c64:	b903      	cbnz	r3, 8004c68 <__sflush_r+0x7c>
 8004c66:	6560      	str	r0, [r4, #84]	; 0x54
 8004c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c6a:	602f      	str	r7, [r5, #0]
 8004c6c:	2900      	cmp	r1, #0
 8004c6e:	d0ca      	beq.n	8004c06 <__sflush_r+0x1a>
 8004c70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c74:	4299      	cmp	r1, r3
 8004c76:	d002      	beq.n	8004c7e <__sflush_r+0x92>
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f000 f8fd 	bl	8004e78 <_free_r>
 8004c7e:	2000      	movs	r0, #0
 8004c80:	6360      	str	r0, [r4, #52]	; 0x34
 8004c82:	e7c1      	b.n	8004c08 <__sflush_r+0x1c>
 8004c84:	6a21      	ldr	r1, [r4, #32]
 8004c86:	2301      	movs	r3, #1
 8004c88:	4628      	mov	r0, r5
 8004c8a:	47b0      	blx	r6
 8004c8c:	1c41      	adds	r1, r0, #1
 8004c8e:	d1c7      	bne.n	8004c20 <__sflush_r+0x34>
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0c4      	beq.n	8004c20 <__sflush_r+0x34>
 8004c96:	2b1d      	cmp	r3, #29
 8004c98:	d001      	beq.n	8004c9e <__sflush_r+0xb2>
 8004c9a:	2b16      	cmp	r3, #22
 8004c9c:	d101      	bne.n	8004ca2 <__sflush_r+0xb6>
 8004c9e:	602f      	str	r7, [r5, #0]
 8004ca0:	e7b1      	b.n	8004c06 <__sflush_r+0x1a>
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ca8:	81a3      	strh	r3, [r4, #12]
 8004caa:	e7ad      	b.n	8004c08 <__sflush_r+0x1c>
 8004cac:	690f      	ldr	r7, [r1, #16]
 8004cae:	2f00      	cmp	r7, #0
 8004cb0:	d0a9      	beq.n	8004c06 <__sflush_r+0x1a>
 8004cb2:	0793      	lsls	r3, r2, #30
 8004cb4:	680e      	ldr	r6, [r1, #0]
 8004cb6:	bf08      	it	eq
 8004cb8:	694b      	ldreq	r3, [r1, #20]
 8004cba:	600f      	str	r7, [r1, #0]
 8004cbc:	bf18      	it	ne
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	eba6 0807 	sub.w	r8, r6, r7
 8004cc4:	608b      	str	r3, [r1, #8]
 8004cc6:	f1b8 0f00 	cmp.w	r8, #0
 8004cca:	dd9c      	ble.n	8004c06 <__sflush_r+0x1a>
 8004ccc:	6a21      	ldr	r1, [r4, #32]
 8004cce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004cd0:	4643      	mov	r3, r8
 8004cd2:	463a      	mov	r2, r7
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b0      	blx	r6
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	dc06      	bgt.n	8004cea <__sflush_r+0xfe>
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ce2:	81a3      	strh	r3, [r4, #12]
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	e78e      	b.n	8004c08 <__sflush_r+0x1c>
 8004cea:	4407      	add	r7, r0
 8004cec:	eba8 0800 	sub.w	r8, r8, r0
 8004cf0:	e7e9      	b.n	8004cc6 <__sflush_r+0xda>
 8004cf2:	bf00      	nop
 8004cf4:	20400001 	.word	0x20400001

08004cf8 <_fflush_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	690b      	ldr	r3, [r1, #16]
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	460c      	mov	r4, r1
 8004d00:	b913      	cbnz	r3, 8004d08 <_fflush_r+0x10>
 8004d02:	2500      	movs	r5, #0
 8004d04:	4628      	mov	r0, r5
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	b118      	cbz	r0, 8004d12 <_fflush_r+0x1a>
 8004d0a:	6983      	ldr	r3, [r0, #24]
 8004d0c:	b90b      	cbnz	r3, 8004d12 <_fflush_r+0x1a>
 8004d0e:	f7ff fa15 	bl	800413c <__sinit>
 8004d12:	4b14      	ldr	r3, [pc, #80]	; (8004d64 <_fflush_r+0x6c>)
 8004d14:	429c      	cmp	r4, r3
 8004d16:	d11b      	bne.n	8004d50 <_fflush_r+0x58>
 8004d18:	686c      	ldr	r4, [r5, #4]
 8004d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0ef      	beq.n	8004d02 <_fflush_r+0xa>
 8004d22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d24:	07d0      	lsls	r0, r2, #31
 8004d26:	d404      	bmi.n	8004d32 <_fflush_r+0x3a>
 8004d28:	0599      	lsls	r1, r3, #22
 8004d2a:	d402      	bmi.n	8004d32 <_fflush_r+0x3a>
 8004d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d2e:	f7ff faa3 	bl	8004278 <__retarget_lock_acquire_recursive>
 8004d32:	4628      	mov	r0, r5
 8004d34:	4621      	mov	r1, r4
 8004d36:	f7ff ff59 	bl	8004bec <__sflush_r>
 8004d3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d3c:	07da      	lsls	r2, r3, #31
 8004d3e:	4605      	mov	r5, r0
 8004d40:	d4e0      	bmi.n	8004d04 <_fflush_r+0xc>
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	059b      	lsls	r3, r3, #22
 8004d46:	d4dd      	bmi.n	8004d04 <_fflush_r+0xc>
 8004d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d4a:	f7ff fa96 	bl	800427a <__retarget_lock_release_recursive>
 8004d4e:	e7d9      	b.n	8004d04 <_fflush_r+0xc>
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <_fflush_r+0x70>)
 8004d52:	429c      	cmp	r4, r3
 8004d54:	d101      	bne.n	8004d5a <_fflush_r+0x62>
 8004d56:	68ac      	ldr	r4, [r5, #8]
 8004d58:	e7df      	b.n	8004d1a <_fflush_r+0x22>
 8004d5a:	4b04      	ldr	r3, [pc, #16]	; (8004d6c <_fflush_r+0x74>)
 8004d5c:	429c      	cmp	r4, r3
 8004d5e:	bf08      	it	eq
 8004d60:	68ec      	ldreq	r4, [r5, #12]
 8004d62:	e7da      	b.n	8004d1a <_fflush_r+0x22>
 8004d64:	08005000 	.word	0x08005000
 8004d68:	08005020 	.word	0x08005020
 8004d6c:	08004fe0 	.word	0x08004fe0

08004d70 <_lseek_r>:
 8004d70:	b538      	push	{r3, r4, r5, lr}
 8004d72:	4d07      	ldr	r5, [pc, #28]	; (8004d90 <_lseek_r+0x20>)
 8004d74:	4604      	mov	r4, r0
 8004d76:	4608      	mov	r0, r1
 8004d78:	4611      	mov	r1, r2
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	602a      	str	r2, [r5, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f7fb fdde 	bl	8000940 <_lseek>
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	d102      	bne.n	8004d8e <_lseek_r+0x1e>
 8004d88:	682b      	ldr	r3, [r5, #0]
 8004d8a:	b103      	cbz	r3, 8004d8e <_lseek_r+0x1e>
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	bd38      	pop	{r3, r4, r5, pc}
 8004d90:	20000184 	.word	0x20000184

08004d94 <__swhatbuf_r>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	460e      	mov	r6, r1
 8004d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d9c:	2900      	cmp	r1, #0
 8004d9e:	b096      	sub	sp, #88	; 0x58
 8004da0:	4614      	mov	r4, r2
 8004da2:	461d      	mov	r5, r3
 8004da4:	da08      	bge.n	8004db8 <__swhatbuf_r+0x24>
 8004da6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	602a      	str	r2, [r5, #0]
 8004dae:	061a      	lsls	r2, r3, #24
 8004db0:	d410      	bmi.n	8004dd4 <__swhatbuf_r+0x40>
 8004db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004db6:	e00e      	b.n	8004dd6 <__swhatbuf_r+0x42>
 8004db8:	466a      	mov	r2, sp
 8004dba:	f000 f8bb 	bl	8004f34 <_fstat_r>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	dbf1      	blt.n	8004da6 <__swhatbuf_r+0x12>
 8004dc2:	9a01      	ldr	r2, [sp, #4]
 8004dc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004dcc:	425a      	negs	r2, r3
 8004dce:	415a      	adcs	r2, r3
 8004dd0:	602a      	str	r2, [r5, #0]
 8004dd2:	e7ee      	b.n	8004db2 <__swhatbuf_r+0x1e>
 8004dd4:	2340      	movs	r3, #64	; 0x40
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	b016      	add	sp, #88	; 0x58
 8004ddc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004de0 <__smakebuf_r>:
 8004de0:	898b      	ldrh	r3, [r1, #12]
 8004de2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004de4:	079d      	lsls	r5, r3, #30
 8004de6:	4606      	mov	r6, r0
 8004de8:	460c      	mov	r4, r1
 8004dea:	d507      	bpl.n	8004dfc <__smakebuf_r+0x1c>
 8004dec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	6123      	str	r3, [r4, #16]
 8004df4:	2301      	movs	r3, #1
 8004df6:	6163      	str	r3, [r4, #20]
 8004df8:	b002      	add	sp, #8
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	ab01      	add	r3, sp, #4
 8004dfe:	466a      	mov	r2, sp
 8004e00:	f7ff ffc8 	bl	8004d94 <__swhatbuf_r>
 8004e04:	9900      	ldr	r1, [sp, #0]
 8004e06:	4605      	mov	r5, r0
 8004e08:	4630      	mov	r0, r6
 8004e0a:	f7ff fa57 	bl	80042bc <_malloc_r>
 8004e0e:	b948      	cbnz	r0, 8004e24 <__smakebuf_r+0x44>
 8004e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e14:	059a      	lsls	r2, r3, #22
 8004e16:	d4ef      	bmi.n	8004df8 <__smakebuf_r+0x18>
 8004e18:	f023 0303 	bic.w	r3, r3, #3
 8004e1c:	f043 0302 	orr.w	r3, r3, #2
 8004e20:	81a3      	strh	r3, [r4, #12]
 8004e22:	e7e3      	b.n	8004dec <__smakebuf_r+0xc>
 8004e24:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <__smakebuf_r+0x7c>)
 8004e26:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	6020      	str	r0, [r4, #0]
 8004e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e30:	81a3      	strh	r3, [r4, #12]
 8004e32:	9b00      	ldr	r3, [sp, #0]
 8004e34:	6163      	str	r3, [r4, #20]
 8004e36:	9b01      	ldr	r3, [sp, #4]
 8004e38:	6120      	str	r0, [r4, #16]
 8004e3a:	b15b      	cbz	r3, 8004e54 <__smakebuf_r+0x74>
 8004e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e40:	4630      	mov	r0, r6
 8004e42:	f000 f889 	bl	8004f58 <_isatty_r>
 8004e46:	b128      	cbz	r0, 8004e54 <__smakebuf_r+0x74>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f023 0303 	bic.w	r3, r3, #3
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	81a3      	strh	r3, [r4, #12]
 8004e54:	89a0      	ldrh	r0, [r4, #12]
 8004e56:	4305      	orrs	r5, r0
 8004e58:	81a5      	strh	r5, [r4, #12]
 8004e5a:	e7cd      	b.n	8004df8 <__smakebuf_r+0x18>
 8004e5c:	080040d5 	.word	0x080040d5

08004e60 <__malloc_lock>:
 8004e60:	4801      	ldr	r0, [pc, #4]	; (8004e68 <__malloc_lock+0x8>)
 8004e62:	f7ff ba09 	b.w	8004278 <__retarget_lock_acquire_recursive>
 8004e66:	bf00      	nop
 8004e68:	20000178 	.word	0x20000178

08004e6c <__malloc_unlock>:
 8004e6c:	4801      	ldr	r0, [pc, #4]	; (8004e74 <__malloc_unlock+0x8>)
 8004e6e:	f7ff ba04 	b.w	800427a <__retarget_lock_release_recursive>
 8004e72:	bf00      	nop
 8004e74:	20000178 	.word	0x20000178

08004e78 <_free_r>:
 8004e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e7a:	2900      	cmp	r1, #0
 8004e7c:	d044      	beq.n	8004f08 <_free_r+0x90>
 8004e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e82:	9001      	str	r0, [sp, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f1a1 0404 	sub.w	r4, r1, #4
 8004e8a:	bfb8      	it	lt
 8004e8c:	18e4      	addlt	r4, r4, r3
 8004e8e:	f7ff ffe7 	bl	8004e60 <__malloc_lock>
 8004e92:	4a1e      	ldr	r2, [pc, #120]	; (8004f0c <_free_r+0x94>)
 8004e94:	9801      	ldr	r0, [sp, #4]
 8004e96:	6813      	ldr	r3, [r2, #0]
 8004e98:	b933      	cbnz	r3, 8004ea8 <_free_r+0x30>
 8004e9a:	6063      	str	r3, [r4, #4]
 8004e9c:	6014      	str	r4, [r2, #0]
 8004e9e:	b003      	add	sp, #12
 8004ea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ea4:	f7ff bfe2 	b.w	8004e6c <__malloc_unlock>
 8004ea8:	42a3      	cmp	r3, r4
 8004eaa:	d908      	bls.n	8004ebe <_free_r+0x46>
 8004eac:	6825      	ldr	r5, [r4, #0]
 8004eae:	1961      	adds	r1, r4, r5
 8004eb0:	428b      	cmp	r3, r1
 8004eb2:	bf01      	itttt	eq
 8004eb4:	6819      	ldreq	r1, [r3, #0]
 8004eb6:	685b      	ldreq	r3, [r3, #4]
 8004eb8:	1949      	addeq	r1, r1, r5
 8004eba:	6021      	streq	r1, [r4, #0]
 8004ebc:	e7ed      	b.n	8004e9a <_free_r+0x22>
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	b10b      	cbz	r3, 8004ec8 <_free_r+0x50>
 8004ec4:	42a3      	cmp	r3, r4
 8004ec6:	d9fa      	bls.n	8004ebe <_free_r+0x46>
 8004ec8:	6811      	ldr	r1, [r2, #0]
 8004eca:	1855      	adds	r5, r2, r1
 8004ecc:	42a5      	cmp	r5, r4
 8004ece:	d10b      	bne.n	8004ee8 <_free_r+0x70>
 8004ed0:	6824      	ldr	r4, [r4, #0]
 8004ed2:	4421      	add	r1, r4
 8004ed4:	1854      	adds	r4, r2, r1
 8004ed6:	42a3      	cmp	r3, r4
 8004ed8:	6011      	str	r1, [r2, #0]
 8004eda:	d1e0      	bne.n	8004e9e <_free_r+0x26>
 8004edc:	681c      	ldr	r4, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	6053      	str	r3, [r2, #4]
 8004ee2:	4421      	add	r1, r4
 8004ee4:	6011      	str	r1, [r2, #0]
 8004ee6:	e7da      	b.n	8004e9e <_free_r+0x26>
 8004ee8:	d902      	bls.n	8004ef0 <_free_r+0x78>
 8004eea:	230c      	movs	r3, #12
 8004eec:	6003      	str	r3, [r0, #0]
 8004eee:	e7d6      	b.n	8004e9e <_free_r+0x26>
 8004ef0:	6825      	ldr	r5, [r4, #0]
 8004ef2:	1961      	adds	r1, r4, r5
 8004ef4:	428b      	cmp	r3, r1
 8004ef6:	bf04      	itt	eq
 8004ef8:	6819      	ldreq	r1, [r3, #0]
 8004efa:	685b      	ldreq	r3, [r3, #4]
 8004efc:	6063      	str	r3, [r4, #4]
 8004efe:	bf04      	itt	eq
 8004f00:	1949      	addeq	r1, r1, r5
 8004f02:	6021      	streq	r1, [r4, #0]
 8004f04:	6054      	str	r4, [r2, #4]
 8004f06:	e7ca      	b.n	8004e9e <_free_r+0x26>
 8004f08:	b003      	add	sp, #12
 8004f0a:	bd30      	pop	{r4, r5, pc}
 8004f0c:	2000017c 	.word	0x2000017c

08004f10 <_read_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	4d07      	ldr	r5, [pc, #28]	; (8004f30 <_read_r+0x20>)
 8004f14:	4604      	mov	r4, r0
 8004f16:	4608      	mov	r0, r1
 8004f18:	4611      	mov	r1, r2
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	602a      	str	r2, [r5, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f7fb fcae 	bl	8000880 <_read>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d102      	bne.n	8004f2e <_read_r+0x1e>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	b103      	cbz	r3, 8004f2e <_read_r+0x1e>
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	20000184 	.word	0x20000184

08004f34 <_fstat_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4d07      	ldr	r5, [pc, #28]	; (8004f54 <_fstat_r+0x20>)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	602b      	str	r3, [r5, #0]
 8004f42:	f7fb fce2 	bl	800090a <_fstat>
 8004f46:	1c43      	adds	r3, r0, #1
 8004f48:	d102      	bne.n	8004f50 <_fstat_r+0x1c>
 8004f4a:	682b      	ldr	r3, [r5, #0]
 8004f4c:	b103      	cbz	r3, 8004f50 <_fstat_r+0x1c>
 8004f4e:	6023      	str	r3, [r4, #0]
 8004f50:	bd38      	pop	{r3, r4, r5, pc}
 8004f52:	bf00      	nop
 8004f54:	20000184 	.word	0x20000184

08004f58 <_isatty_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4d06      	ldr	r5, [pc, #24]	; (8004f74 <_isatty_r+0x1c>)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	4604      	mov	r4, r0
 8004f60:	4608      	mov	r0, r1
 8004f62:	602b      	str	r3, [r5, #0]
 8004f64:	f7fb fce1 	bl	800092a <_isatty>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	d102      	bne.n	8004f72 <_isatty_r+0x1a>
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	b103      	cbz	r3, 8004f72 <_isatty_r+0x1a>
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	20000184 	.word	0x20000184

08004f78 <_init>:
 8004f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7a:	bf00      	nop
 8004f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7e:	bc08      	pop	{r3}
 8004f80:	469e      	mov	lr, r3
 8004f82:	4770      	bx	lr

08004f84 <_fini>:
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	bf00      	nop
 8004f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8a:	bc08      	pop	{r3}
 8004f8c:	469e      	mov	lr, r3
 8004f8e:	4770      	bx	lr
